
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013bd8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001110  08013d18  08013d18  00014d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e28  08014e28  000162a4  2**0
                  CONTENTS
  4 .ARM          00000008  08014e28  08014e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e30  08014e30  000162a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e30  08014e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014e34  08014e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  08014e38  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad8  200002a4  080150dc  000162a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d7c  080150dc  00016d7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000162a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00050116  00000000  00000000  000162ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b250  00000000  00000000  000663e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00014de9  00000000  00000000  00071634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a78  00000000  00000000  00086420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000221b  00000000  00000000  00088e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ff5  00000000  00000000  0008b0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004a07c  00000000  00000000  000b30a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc24  00000000  00000000  000fd124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c8d48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008428  00000000  00000000  001c8d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a4  00000000  00000000  001d11b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002a4 	.word	0x200002a4
 800015c:	00000000 	.word	0x00000000
 8000160:	08013d00 	.word	0x08013d00

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002a8 	.word	0x200002a8
 800017c:	08013d00 	.word	0x08013d00

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_uldivmod>:
 8000d74:	b953      	cbnz	r3, 8000d8c <__aeabi_uldivmod+0x18>
 8000d76:	b94a      	cbnz	r2, 8000d8c <__aeabi_uldivmod+0x18>
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	bf08      	it	eq
 8000d7c:	2800      	cmpeq	r0, #0
 8000d7e:	bf1c      	itt	ne
 8000d80:	f04f 31ff 	movne.w	r1, #4294967295
 8000d84:	f04f 30ff 	movne.w	r0, #4294967295
 8000d88:	f000 b96a 	b.w	8001060 <__aeabi_idiv0>
 8000d8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d94:	f000 f806 	bl	8000da4 <__udivmoddi4>
 8000d98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da0:	b004      	add	sp, #16
 8000da2:	4770      	bx	lr

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	460c      	mov	r4, r1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d14e      	bne.n	8000e4e <__udivmoddi4+0xaa>
 8000db0:	4694      	mov	ip, r2
 8000db2:	458c      	cmp	ip, r1
 8000db4:	4686      	mov	lr, r0
 8000db6:	fab2 f282 	clz	r2, r2
 8000dba:	d962      	bls.n	8000e82 <__udivmoddi4+0xde>
 8000dbc:	b14a      	cbz	r2, 8000dd2 <__udivmoddi4+0x2e>
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	fa20 f303 	lsr.w	r3, r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	4319      	orrs	r1, r3
 8000dce:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f f68c 	uxth.w	r6, ip
 8000dda:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb07 1114 	mls	r1, r7, r4, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb04 f106 	mul.w	r1, r4, r6
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x64>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dfa:	f080 8112 	bcs.w	8001022 <__udivmoddi4+0x27e>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 810f 	bls.w	8001022 <__udivmoddi4+0x27e>
 8000e04:	3c02      	subs	r4, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a59      	subs	r1, r3, r1
 8000e0a:	fa1f f38e 	uxth.w	r3, lr
 8000e0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e12:	fb07 1110 	mls	r1, r7, r0, r1
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f606 	mul.w	r6, r0, r6
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x94>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e2a:	f080 80fc 	bcs.w	8001026 <__udivmoddi4+0x282>
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	f240 80f9 	bls.w	8001026 <__udivmoddi4+0x282>
 8000e34:	4463      	add	r3, ip
 8000e36:	3802      	subs	r0, #2
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e3e:	2100      	movs	r1, #0
 8000e40:	b11d      	cbz	r5, 8000e4a <__udivmoddi4+0xa6>
 8000e42:	40d3      	lsrs	r3, r2
 8000e44:	2200      	movs	r2, #0
 8000e46:	e9c5 3200 	strd	r3, r2, [r5]
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d905      	bls.n	8000e5e <__udivmoddi4+0xba>
 8000e52:	b10d      	cbz	r5, 8000e58 <__udivmoddi4+0xb4>
 8000e54:	e9c5 0100 	strd	r0, r1, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e7f5      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000e5e:	fab3 f183 	clz	r1, r3
 8000e62:	2900      	cmp	r1, #0
 8000e64:	d146      	bne.n	8000ef4 <__udivmoddi4+0x150>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d302      	bcc.n	8000e70 <__udivmoddi4+0xcc>
 8000e6a:	4290      	cmp	r0, r2
 8000e6c:	f0c0 80f0 	bcc.w	8001050 <__udivmoddi4+0x2ac>
 8000e70:	1a86      	subs	r6, r0, r2
 8000e72:	eb64 0303 	sbc.w	r3, r4, r3
 8000e76:	2001      	movs	r0, #1
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d0e6      	beq.n	8000e4a <__udivmoddi4+0xa6>
 8000e7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e80:	e7e3      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x204>
 8000e88:	eba1 040c 	sub.w	r4, r1, ip
 8000e8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e90:	fa1f f78c 	uxth.w	r7, ip
 8000e94:	2101      	movs	r1, #1
 8000e96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000ea2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea6:	fb07 f006 	mul.w	r0, r7, r6
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x11c>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x11a>
 8000eb8:	4298      	cmp	r0, r3
 8000eba:	f200 80cd 	bhi.w	8001058 <__udivmoddi4+0x2b4>
 8000ebe:	4626      	mov	r6, r4
 8000ec0:	1a1c      	subs	r4, r3, r0
 8000ec2:	fa1f f38e 	uxth.w	r3, lr
 8000ec6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eca:	fb08 4410 	mls	r4, r8, r0, r4
 8000ece:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ed2:	fb00 f707 	mul.w	r7, r0, r7
 8000ed6:	429f      	cmp	r7, r3
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x148>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee2:	d202      	bcs.n	8000eea <__udivmoddi4+0x146>
 8000ee4:	429f      	cmp	r7, r3
 8000ee6:	f200 80b0 	bhi.w	800104a <__udivmoddi4+0x2a6>
 8000eea:	4620      	mov	r0, r4
 8000eec:	1bdb      	subs	r3, r3, r7
 8000eee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ef2:	e7a5      	b.n	8000e40 <__udivmoddi4+0x9c>
 8000ef4:	f1c1 0620 	rsb	r6, r1, #32
 8000ef8:	408b      	lsls	r3, r1
 8000efa:	fa22 f706 	lsr.w	r7, r2, r6
 8000efe:	431f      	orrs	r7, r3
 8000f00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f04:	fa04 f301 	lsl.w	r3, r4, r1
 8000f08:	ea43 030c 	orr.w	r3, r3, ip
 8000f0c:	40f4      	lsrs	r4, r6
 8000f0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f12:	0c38      	lsrs	r0, r7, #16
 8000f14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f18:	fbb4 fef0 	udiv	lr, r4, r0
 8000f1c:	fa1f fc87 	uxth.w	ip, r7
 8000f20:	fb00 441e 	mls	r4, r0, lr, r4
 8000f24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f28:	fb0e f90c 	mul.w	r9, lr, ip
 8000f2c:	45a1      	cmp	r9, r4
 8000f2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f32:	d90a      	bls.n	8000f4a <__udivmoddi4+0x1a6>
 8000f34:	193c      	adds	r4, r7, r4
 8000f36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f3a:	f080 8084 	bcs.w	8001046 <__udivmoddi4+0x2a2>
 8000f3e:	45a1      	cmp	r9, r4
 8000f40:	f240 8081 	bls.w	8001046 <__udivmoddi4+0x2a2>
 8000f44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f48:	443c      	add	r4, r7
 8000f4a:	eba4 0409 	sub.w	r4, r4, r9
 8000f4e:	fa1f f983 	uxth.w	r9, r3
 8000f52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f56:	fb00 4413 	mls	r4, r0, r3, r4
 8000f5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f62:	45a4      	cmp	ip, r4
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x1d2>
 8000f66:	193c      	adds	r4, r7, r4
 8000f68:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f6c:	d267      	bcs.n	800103e <__udivmoddi4+0x29a>
 8000f6e:	45a4      	cmp	ip, r4
 8000f70:	d965      	bls.n	800103e <__udivmoddi4+0x29a>
 8000f72:	3b02      	subs	r3, #2
 8000f74:	443c      	add	r4, r7
 8000f76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f7e:	eba4 040c 	sub.w	r4, r4, ip
 8000f82:	429c      	cmp	r4, r3
 8000f84:	46ce      	mov	lr, r9
 8000f86:	469c      	mov	ip, r3
 8000f88:	d351      	bcc.n	800102e <__udivmoddi4+0x28a>
 8000f8a:	d04e      	beq.n	800102a <__udivmoddi4+0x286>
 8000f8c:	b155      	cbz	r5, 8000fa4 <__udivmoddi4+0x200>
 8000f8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f92:	eb64 040c 	sbc.w	r4, r4, ip
 8000f96:	fa04 f606 	lsl.w	r6, r4, r6
 8000f9a:	40cb      	lsrs	r3, r1
 8000f9c:	431e      	orrs	r6, r3
 8000f9e:	40cc      	lsrs	r4, r1
 8000fa0:	e9c5 6400 	strd	r6, r4, [r5]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	e750      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000fa8:	f1c2 0320 	rsb	r3, r2, #32
 8000fac:	fa20 f103 	lsr.w	r1, r0, r3
 8000fb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fb8:	4094      	lsls	r4, r2
 8000fba:	430c      	orrs	r4, r1
 8000fbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fc0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fc4:	fa1f f78c 	uxth.w	r7, ip
 8000fc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fcc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fd0:	0c23      	lsrs	r3, r4, #16
 8000fd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd6:	fb00 f107 	mul.w	r1, r0, r7
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x24c>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fe6:	d22c      	bcs.n	8001042 <__udivmoddi4+0x29e>
 8000fe8:	4299      	cmp	r1, r3
 8000fea:	d92a      	bls.n	8001042 <__udivmoddi4+0x29e>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	1a5b      	subs	r3, r3, r1
 8000ff2:	b2a4      	uxth	r4, r4
 8000ff4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ff8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ffc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001000:	fb01 f307 	mul.w	r3, r1, r7
 8001004:	42a3      	cmp	r3, r4
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x276>
 8001008:	eb1c 0404 	adds.w	r4, ip, r4
 800100c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001010:	d213      	bcs.n	800103a <__udivmoddi4+0x296>
 8001012:	42a3      	cmp	r3, r4
 8001014:	d911      	bls.n	800103a <__udivmoddi4+0x296>
 8001016:	3902      	subs	r1, #2
 8001018:	4464      	add	r4, ip
 800101a:	1ae4      	subs	r4, r4, r3
 800101c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001020:	e739      	b.n	8000e96 <__udivmoddi4+0xf2>
 8001022:	4604      	mov	r4, r0
 8001024:	e6f0      	b.n	8000e08 <__udivmoddi4+0x64>
 8001026:	4608      	mov	r0, r1
 8001028:	e706      	b.n	8000e38 <__udivmoddi4+0x94>
 800102a:	45c8      	cmp	r8, r9
 800102c:	d2ae      	bcs.n	8000f8c <__udivmoddi4+0x1e8>
 800102e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001032:	eb63 0c07 	sbc.w	ip, r3, r7
 8001036:	3801      	subs	r0, #1
 8001038:	e7a8      	b.n	8000f8c <__udivmoddi4+0x1e8>
 800103a:	4631      	mov	r1, r6
 800103c:	e7ed      	b.n	800101a <__udivmoddi4+0x276>
 800103e:	4603      	mov	r3, r0
 8001040:	e799      	b.n	8000f76 <__udivmoddi4+0x1d2>
 8001042:	4630      	mov	r0, r6
 8001044:	e7d4      	b.n	8000ff0 <__udivmoddi4+0x24c>
 8001046:	46d6      	mov	lr, sl
 8001048:	e77f      	b.n	8000f4a <__udivmoddi4+0x1a6>
 800104a:	4463      	add	r3, ip
 800104c:	3802      	subs	r0, #2
 800104e:	e74d      	b.n	8000eec <__udivmoddi4+0x148>
 8001050:	4606      	mov	r6, r0
 8001052:	4623      	mov	r3, r4
 8001054:	4608      	mov	r0, r1
 8001056:	e70f      	b.n	8000e78 <__udivmoddi4+0xd4>
 8001058:	3e02      	subs	r6, #2
 800105a:	4463      	add	r3, ip
 800105c:	e730      	b.n	8000ec0 <__udivmoddi4+0x11c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001064:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001066:	4813      	ldr	r0, [pc, #76]	@ (80010b4 <MX_ADC_Init+0x50>)
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <MX_ADC_Init+0x54>)
 800106a:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001070:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001072:	2300      	movs	r3, #0
 8001074:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001078:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	2204      	movs	r2, #4
 800107c:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800107e:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001080:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001082:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8001084:	2201      	movs	r2, #1
 8001086:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001088:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108c:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800108e:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001090:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001094:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001098:	6302      	str	r2, [r0, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800109a:	2207      	movs	r2, #7
 800109c:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800109e:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80010a0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80010a4:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010a6:	f001 f989 	bl	80023bc <HAL_ADC_Init>
 80010aa:	b900      	cbnz	r0, 80010ae <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80010ac:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010ae:	f000 f910 	bl	80012d2 <Error_Handler>
}
 80010b2:	e7fb      	b.n	80010ac <MX_ADC_Init+0x48>
 80010b4:	200002c0 	.word	0x200002c0
 80010b8:	40012400 	.word	0x40012400

080010bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 80010bc:	6802      	ldr	r2, [r0, #0]
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <HAL_ADC_MspInit+0x28>)
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d000      	beq.n	80010c6 <HAL_ADC_MspInit+0xa>
 80010c4:	4770      	bx	lr
{
 80010c6:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010d2:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010da:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80010dc:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80010de:	b002      	add	sp, #8
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40012400 	.word	0x40012400

080010e8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 80010e8:	6802      	ldr	r2, [r0, #0]
 80010ea:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_ADC_MspDeInit+0x18>)
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d000      	beq.n	80010f2 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80010f0:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010f6:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80010f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80010fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010fe:	e7f7      	b.n	80010f0 <HAL_ADC_MspDeInit+0x8>
 8001100:	40012400 	.word	0x40012400

08001104 <ADC_ReadChannels>:
  return current;
}
/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001104:	b530      	push	{r4, r5, lr}
 8001106:	b085      	sub	sp, #20
 8001108:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	2300      	movs	r3, #0
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8001112:	f7ff ffa7 	bl	8001064 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001116:	4816      	ldr	r0, [pc, #88]	@ (8001170 <ADC_ReadChannels+0x6c>)
 8001118:	f001 fda4 	bl	8002c64 <HAL_ADCEx_Calibration_Start>
 800111c:	b9f8      	cbnz	r0, 800115e <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800111e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001120:	2300      	movs	r3, #0
 8001122:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001124:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001126:	a901      	add	r1, sp, #4
 8001128:	4811      	ldr	r0, [pc, #68]	@ (8001170 <ADC_ReadChannels+0x6c>)
 800112a:	f001 fae7 	bl	80026fc <HAL_ADC_ConfigChannel>
 800112e:	b9c8      	cbnz	r0, 8001164 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001130:	480f      	ldr	r0, [pc, #60]	@ (8001170 <ADC_ReadChannels+0x6c>)
 8001132:	f001 fca5 	bl	8002a80 <HAL_ADC_Start>
 8001136:	b9c0      	cbnz	r0, 800116a <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001138:	4c0d      	ldr	r4, [pc, #52]	@ (8001170 <ADC_ReadChannels+0x6c>)
 800113a:	f04f 31ff 	mov.w	r1, #4294967295
 800113e:	4620      	mov	r0, r4
 8001140:	f001 fa7a 	bl	8002638 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001144:	4620      	mov	r0, r4
 8001146:	f001 fd6d 	bl	8002c24 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800114a:	4620      	mov	r0, r4
 800114c:	f001 fad3 	bl	80026f6 <HAL_ADC_GetValue>
 8001150:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8001152:	4620      	mov	r0, r4
 8001154:	f001 fd10 	bl	8002b78 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001158:	4628      	mov	r0, r5
 800115a:	b005      	add	sp, #20
 800115c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800115e:	f000 f8b8 	bl	80012d2 <Error_Handler>
 8001162:	e7dc      	b.n	800111e <ADC_ReadChannels+0x1a>
    Error_Handler();
 8001164:	f000 f8b5 	bl	80012d2 <Error_Handler>
 8001168:	e7e2      	b.n	8001130 <ADC_ReadChannels+0x2c>
    Error_Handler();
 800116a:	f000 f8b2 	bl	80012d2 <Error_Handler>
 800116e:	e7e3      	b.n	8001138 <ADC_ReadChannels+0x34>
 8001170:	200002c0 	.word	0x200002c0

08001174 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8001174:	4b01      	ldr	r3, [pc, #4]	@ (800117c <SYS_InitMeasurement+0x8>)
 8001176:	4a02      	ldr	r2, [pc, #8]	@ (8001180 <SYS_InitMeasurement+0xc>)
 8001178:	601a      	str	r2, [r3, #0]
}
 800117a:	4770      	bx	lr
 800117c:	200002c0 	.word	0x200002c0
 8001180:	40012400 	.word	0x40012400

08001184 <SYS_GetBatteryLevel>:
{
 8001184:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001186:	480d      	ldr	r0, [pc, #52]	@ (80011bc <SYS_GetBatteryLevel+0x38>)
 8001188:	f7ff ffbc 	bl	8001104 <ADC_ReadChannels>
  if (measuredLevel == 0)
 800118c:	b1a0      	cbz	r0, 80011b8 <SYS_GetBatteryLevel+0x34>
 800118e:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001190:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <SYS_GetBatteryLevel+0x3c>)
 8001192:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	@ 0xaa
 8001196:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800119a:	4290      	cmp	r0, r2
 800119c:	d007      	beq.n	80011ae <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800119e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80011a2:	fb02 f000 	mul.w	r0, r2, r0
 80011a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80011aa:	b280      	uxth	r0, r0
 80011ac:	e005      	b.n	80011ba <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <SYS_GetBatteryLevel+0x40>)
 80011b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80011b4:	b280      	uxth	r0, r0
 80011b6:	e000      	b.n	80011ba <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 80011b8:	2000      	movs	r0, #0
}
 80011ba:	bd08      	pop	{r3, pc}
 80011bc:	b4002000 	.word	0xb4002000
 80011c0:	1fff7500 	.word	0x1fff7500
 80011c4:	004c08d8 	.word	0x004c08d8

080011c8 <SYS_GetTemperatureLevel>:
{
 80011c8:	b510      	push	{r4, lr}
 80011ca:	b082      	sub	sp, #8
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80011cc:	f7ff ffda 	bl	8001184 <SYS_GetBatteryLevel>
 80011d0:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80011d2:	481f      	ldr	r0, [pc, #124]	@ (8001250 <SYS_GetTemperatureLevel+0x88>)
 80011d4:	f7ff ff96 	bl	8001104 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80011d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001254 <SYS_GetTemperatureLevel+0x8c>)
 80011da:	f8b2 30c8 	ldrh.w	r3, [r2, #200]	@ 0xc8
 80011de:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	@ 0xa8
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d01a      	beq.n	800121c <SYS_GetTemperatureLevel+0x54>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80011e6:	fb00 f404 	mul.w	r4, r0, r4
 80011ea:	08a4      	lsrs	r4, r4, #2
 80011ec:	491a      	ldr	r1, [pc, #104]	@ (8001258 <SYS_GetTemperatureLevel+0x90>)
 80011ee:	fba1 1404 	umull	r1, r4, r1, r4
 80011f2:	ebc2 1454 	rsb	r4, r2, r4, lsr #5
 80011f6:	2164      	movs	r1, #100	@ 0x64
 80011f8:	fb01 f404 	mul.w	r4, r1, r4
 80011fc:	1a9b      	subs	r3, r3, r2
 80011fe:	fb94 f4f3 	sdiv	r4, r4, r3
 8001202:	341e      	adds	r4, #30
 8001204:	b224      	sxth	r4, r4
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8001206:	9400      	str	r4, [sp, #0]
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <SYS_GetTemperatureLevel+0x94>)
 800120a:	2201      	movs	r2, #1
 800120c:	2100      	movs	r1, #0
 800120e:	4610      	mov	r0, r2
 8001210:	f00f fad4 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
  temperatureDegreeC <<= 8;
 8001214:	0220      	lsls	r0, r4, #8
}
 8001216:	b200      	sxth	r0, r0
 8001218:	b002      	add	sp, #8
 800121a:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 800121c:	fb04 f000 	mul.w	r0, r4, r0
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <SYS_GetTemperatureLevel+0x98>)
 8001222:	fba3 2300 	umull	r2, r3, r3, r0
 8001226:	1ac4      	subs	r4, r0, r3
 8001228:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 800122c:	0adb      	lsrs	r3, r3, #11
 800122e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001232:	fb02 f303 	mul.w	r3, r2, r3
 8001236:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 800123a:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 800123e:	4a09      	ldr	r2, [pc, #36]	@ (8001264 <SYS_GetTemperatureLevel+0x9c>)
 8001240:	fb82 1203 	smull	r1, r2, r2, r3
 8001244:	17db      	asrs	r3, r3, #31
 8001246:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 800124a:	331e      	adds	r3, #30
 800124c:	b21c      	sxth	r4, r3
 800124e:	e7da      	b.n	8001206 <SYS_GetTemperatureLevel+0x3e>
 8001250:	b0001000 	.word	0xb0001000
 8001254:	1fff7500 	.word	0x1fff7500
 8001258:	09ee009f 	.word	0x09ee009f
 800125c:	08013d9c 	.word	0x08013d9c
 8001260:	00100101 	.word	0x00100101
 8001264:	68db8bad 	.word	0x68db8bad

08001268 <SYS_GetCurrentLevel>:
{
 8001268:	b510      	push	{r4, lr}
 800126a:	b082      	sub	sp, #8
  current = (uint16_t)ADC_ReadChannels(ADC_CHANNEL_6);
 800126c:	4806      	ldr	r0, [pc, #24]	@ (8001288 <SYS_GetCurrentLevel+0x20>)
 800126e:	f7ff ff49 	bl	8001104 <ADC_ReadChannels>
 8001272:	b284      	uxth	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "Current= %d\r\n", current);
 8001274:	9400      	str	r4, [sp, #0]
 8001276:	4b05      	ldr	r3, [pc, #20]	@ (800128c <SYS_GetCurrentLevel+0x24>)
 8001278:	2201      	movs	r2, #1
 800127a:	2100      	movs	r1, #0
 800127c:	2002      	movs	r0, #2
 800127e:	f00f fa9d 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 8001282:	4620      	mov	r0, r4
 8001284:	b002      	add	sp, #8
 8001286:	bd10      	pop	{r4, pc}
 8001288:	18000040 	.word	0x18000040
 800128c:	08013da8 	.word	0x08013da8

08001290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001290:	b500      	push	{lr}
 8001292:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001298:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800129a:	f042 0204 	orr.w	r2, r2, #4
 800129e:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012a2:	f002 0204 	and.w	r2, r2, #4
 80012a6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80012a8:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012ac:	f042 0201 	orr.w	r2, r2, #1
 80012b0:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80012ba:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2102      	movs	r1, #2
 80012c0:	200f      	movs	r0, #15
 80012c2:	f001 fd85 	bl	8002dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012c6:	200f      	movs	r0, #15
 80012c8:	f001 fd92 	bl	8002df0 <HAL_NVIC_EnableIRQ>

}
 80012cc:	b003      	add	sp, #12
 80012ce:	f85d fb04 	ldr.w	pc, [sp], #4

080012d2 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <Error_Handler+0x2>

080012d6 <SystemClock_Config>:
{
 80012d6:	b510      	push	{r4, lr}
 80012d8:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	2248      	movs	r2, #72	@ 0x48
 80012dc:	2100      	movs	r1, #0
 80012de:	a808      	add	r0, sp, #32
 80012e0:	f010 fd6f 	bl	8011dc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	2400      	movs	r4, #0
 80012e6:	9402      	str	r4, [sp, #8]
 80012e8:	9403      	str	r4, [sp, #12]
 80012ea:	9404      	str	r4, [sp, #16]
 80012ec:	9405      	str	r4, [sp, #20]
 80012ee:	9406      	str	r4, [sp, #24]
 80012f0:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80012f2:	f002 f963 	bl	80035bc <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80012f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80012fe:	f023 0318 	bic.w	r3, r3, #24
 8001302:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001306:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800130a:	6813      	ldr	r3, [r2, #0]
 800130c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001310:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	6813      	ldr	r3, [r2, #0]
 8001318:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001320:	2324      	movs	r3, #36	@ 0x24
 8001322:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001324:	2381      	movs	r3, #129	@ 0x81
 8001326:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001328:	2301      	movs	r3, #1
 800132a:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800132c:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800132e:	23b0      	movs	r3, #176	@ 0xb0
 8001330:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001332:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	a808      	add	r0, sp, #32
 8001336:	f002 fadb 	bl	80038f0 <HAL_RCC_OscConfig>
 800133a:	b970      	cbnz	r0, 800135a <SystemClock_Config+0x84>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800133c:	234f      	movs	r3, #79	@ 0x4f
 800133e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001340:	2300      	movs	r3, #0
 8001342:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001344:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001346:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800134a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134c:	2102      	movs	r1, #2
 800134e:	a802      	add	r0, sp, #8
 8001350:	f002 fe0a 	bl	8003f68 <HAL_RCC_ClockConfig>
 8001354:	b918      	cbnz	r0, 800135e <SystemClock_Config+0x88>
}
 8001356:	b01a      	add	sp, #104	@ 0x68
 8001358:	bd10      	pop	{r4, pc}
    Error_Handler();
 800135a:	f7ff ffba 	bl	80012d2 <Error_Handler>
    Error_Handler();
 800135e:	f7ff ffb8 	bl	80012d2 <Error_Handler>
	...

08001364 <GPIO_Init>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void GPIO_Init(void) {
 8001364:	b500      	push	{lr}
 8001366:	b087      	sub	sp, #28
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800136c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800136e:	f042 0202 	orr.w	r2, r2, #2
 8001372:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800137c:	9b00      	ldr	r3, [sp, #0]

    // Ativar o clock do porto B
    __HAL_RCC_GPIOB_CLK_ENABLE();

    // Configurar o pino PB3 como saída
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800137e:	2308      	movs	r3, #8
 8001380:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Saída push-pull
 8001382:	2301      	movs	r3, #1
 8001384:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Baixa velocidade
 8001386:	2300      	movs	r3, #0
 8001388:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	a901      	add	r1, sp, #4
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <GPIO_Init+0x34>)
 800138e:	f001 ffa9 	bl	80032e4 <HAL_GPIO_Init>
}
 8001392:	b007      	add	sp, #28
 8001394:	f85d fb04 	ldr.w	pc, [sp], #4
 8001398:	48000400 	.word	0x48000400

0800139c <main>:
{
 800139c:	b508      	push	{r3, lr}
  HAL_Init();
 800139e:	f000 ffcb 	bl	8002338 <HAL_Init>
  SystemClock_Config();
 80013a2:	f7ff ff98 	bl	80012d6 <SystemClock_Config>
  MX_LoRaWAN_Init();
 80013a6:	f000 fcbb 	bl	8001d20 <MX_LoRaWAN_Init>
  GPIO_Init();
 80013aa:	f7ff ffdb 	bl	8001364 <GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2108      	movs	r1, #8
 80013b2:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <main+0x24>)
 80013b4:	f002 f8e6 	bl	8003584 <HAL_GPIO_WritePin>
    MX_LoRaWAN_Process();
 80013b8:	f000 fcb8 	bl	8001d2c <MX_LoRaWAN_Process>
  while (1)
 80013bc:	e7fc      	b.n	80013b8 <main+0x1c>
 80013be:	bf00      	nop
 80013c0:	48000400 	.word	0x48000400

080013c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013c4:	b500      	push	{lr}
 80013c6:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80013c8:	222c      	movs	r2, #44	@ 0x2c
 80013ca:	2100      	movs	r1, #0
 80013cc:	a801      	add	r0, sp, #4
 80013ce:	f010 fcf8 	bl	8011dc2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013d2:	4819      	ldr	r0, [pc, #100]	@ (8001438 <MX_RTC_Init+0x74>)
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <MX_RTC_Init+0x78>)
 80013d6:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80013d8:	231f      	movs	r3, #31
 80013da:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013e0:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013e2:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e8:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80013ea:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80013ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f0:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013f2:	f003 f8e3 	bl	80045bc <HAL_RTC_Init>
 80013f6:	b9a8      	cbnz	r0, 8001424 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80013f8:	480f      	ldr	r0, [pc, #60]	@ (8001438 <MX_RTC_Init+0x74>)
 80013fa:	f003 fa1d 	bl	8004838 <HAL_RTCEx_SetSSRU_IT>
 80013fe:	b9a0      	cbnz	r0, 800142a <MX_RTC_Init+0x66>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001400:	2200      	movs	r2, #0
 8001402:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001404:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001406:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001408:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800140c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800140e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001412:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001414:	a901      	add	r1, sp, #4
 8001416:	4808      	ldr	r0, [pc, #32]	@ (8001438 <MX_RTC_Init+0x74>)
 8001418:	f003 f932 	bl	8004680 <HAL_RTC_SetAlarm_IT>
 800141c:	b940      	cbnz	r0, 8001430 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800141e:	b00d      	add	sp, #52	@ 0x34
 8001420:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001424:	f7ff ff55 	bl	80012d2 <Error_Handler>
 8001428:	e7e6      	b.n	80013f8 <MX_RTC_Init+0x34>
    Error_Handler();
 800142a:	f7ff ff52 	bl	80012d2 <Error_Handler>
 800142e:	e7e7      	b.n	8001400 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001430:	f7ff ff4f 	bl	80012d2 <Error_Handler>
}
 8001434:	e7f3      	b.n	800141e <MX_RTC_Init+0x5a>
 8001436:	bf00      	nop
 8001438:	20000324 	.word	0x20000324
 800143c:	40002800 	.word	0x40002800

08001440 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001440:	b510      	push	{r4, lr}
 8001442:	b090      	sub	sp, #64	@ 0x40
 8001444:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001446:	2238      	movs	r2, #56	@ 0x38
 8001448:	2100      	movs	r1, #0
 800144a:	a802      	add	r0, sp, #8
 800144c:	f010 fcb9 	bl	8011dc2 <memset>
  if(rtcHandle->Instance==RTC)
 8001450:	6822      	ldr	r2, [r4, #0]
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <HAL_RTC_MspInit+0x7c>)
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001458:	b010      	add	sp, #64	@ 0x40
 800145a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800145c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001460:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001462:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001466:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001468:	a802      	add	r0, sp, #8
 800146a:	f002 febf 	bl	80041ec <HAL_RCCEx_PeriphCLKConfig>
 800146e:	bb08      	cbnz	r0, 80014b4 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001474:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001478:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800147c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001480:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001482:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001486:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001490:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	4611      	mov	r1, r2
 8001496:	2002      	movs	r0, #2
 8001498:	f001 fc9a 	bl	8002dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800149c:	2002      	movs	r0, #2
 800149e:	f001 fca7 	bl	8002df0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	4611      	mov	r1, r2
 80014a6:	202a      	movs	r0, #42	@ 0x2a
 80014a8:	f001 fc92 	bl	8002dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80014ac:	202a      	movs	r0, #42	@ 0x2a
 80014ae:	f001 fc9f 	bl	8002df0 <HAL_NVIC_EnableIRQ>
}
 80014b2:	e7d1      	b.n	8001458 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80014b4:	f7ff ff0d 	bl	80012d2 <Error_Handler>
 80014b8:	e7da      	b.n	8001470 <HAL_RTC_MspInit+0x30>
 80014ba:	bf00      	nop
 80014bc:	40002800 	.word	0x40002800

080014c0 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80014c0:	4770      	bx	lr

080014c2 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80014c2:	4770      	bx	lr

080014c4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80014c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80014c6:	f000 ff59 	bl	800237c <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80014ca:	2001      	movs	r0, #1
 80014cc:	4b02      	ldr	r3, [pc, #8]	@ (80014d8 <PWR_EnterStopMode+0x14>)
 80014ce:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80014d2:	f002 f8d7 	bl	8003684 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80014d6:	bd08      	pop	{r3, pc}
 80014d8:	58000400 	.word	0x58000400

080014dc <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80014dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 80014de:	f000 ff54 	bl	800238a <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80014e2:	bd08      	pop	{r3, pc}

080014e4 <PWR_ExitStopMode>:
{
 80014e4:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80014e6:	f000 ff50 	bl	800238a <HAL_ResumeTick>
  vcom_Resume();
 80014ea:	f000 fbe7 	bl	8001cbc <vcom_Resume>
}
 80014ee:	bd08      	pop	{r3, pc}

080014f0 <PWR_EnterSleepMode>:
{
 80014f0:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 80014f2:	f000 ff43 	bl	800237c <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80014f6:	2101      	movs	r1, #1
 80014f8:	2000      	movs	r0, #0
 80014fa:	f002 f867 	bl	80035cc <HAL_PWR_EnterSLEEPMode>
}
 80014fe:	bd08      	pop	{r3, pc}

08001500 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001500:	4770      	bx	lr

08001502 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001502:	4770      	bx	lr

08001504 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <HardFault_Handler>

08001506 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <MemManage_Handler>

08001508 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <BusFault_Handler>

0800150a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <UsageFault_Handler>

0800150c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150c:	4770      	bx	lr

0800150e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150e:	4770      	bx	lr

08001510 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 ff26 	bl	8002364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bd08      	pop	{r3, pc}
	...

0800151c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800151c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800151e:	4802      	ldr	r0, [pc, #8]	@ (8001528 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001520:	f003 f9b6 	bl	8004890 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001524:	bd08      	pop	{r3, pc}
 8001526:	bf00      	nop
 8001528:	20000324 	.word	0x20000324

0800152c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 800152c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800152e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001532:	f002 f835 	bl	80035a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001536:	bd08      	pop	{r3, pc}

08001538 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001538:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800153a:	4802      	ldr	r0, [pc, #8]	@ (8001544 <DMA1_Channel5_IRQHandler+0xc>)
 800153c:	f001 fe5e 	bl	80031fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001540:	bd08      	pop	{r3, pc}
 8001542:	bf00      	nop
 8001544:	20000374 	.word	0x20000374

08001548 <USART1_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001548:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800154a:	4802      	ldr	r0, [pc, #8]	@ (8001554 <USART1_IRQHandler+0xc>)
 800154c:	f003 fe60 	bl	8005210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001550:	bd08      	pop	{r3, pc}
 8001552:	bf00      	nop
 8001554:	200003d4 	.word	0x200003d4

08001558 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001558:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800155a:	4802      	ldr	r0, [pc, #8]	@ (8001564 <RTC_Alarm_IRQHandler+0xc>)
 800155c:	f002 ffa8 	bl	80044b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001560:	bd08      	pop	{r3, pc}
 8001562:	bf00      	nop
 8001564:	20000324 	.word	0x20000324

08001568 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001568:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800156a:	4802      	ldr	r0, [pc, #8]	@ (8001574 <SUBGHZ_Radio_IRQHandler+0xc>)
 800156c:	f003 fc3e 	bl	8004dec <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001570:	bd08      	pop	{r3, pc}
 8001572:	bf00      	nop
 8001574:	2000035c 	.word	0x2000035c

08001578 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001578:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_SUBGHZ_Init+0x18>)
 800157c:	2308      	movs	r3, #8
 800157e:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001580:	f003 f9bc 	bl	80048fc <HAL_SUBGHZ_Init>
 8001584:	b900      	cbnz	r0, 8001588 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001586:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001588:	f7ff fea3 	bl	80012d2 <Error_Handler>
}
 800158c:	e7fb      	b.n	8001586 <MX_SUBGHZ_Init+0xe>
 800158e:	bf00      	nop
 8001590:	2000035c 	.word	0x2000035c

08001594 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001594:	b500      	push	{lr}
 8001596:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800159c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80015a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015ac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	4611      	mov	r1, r2
 80015b2:	2032      	movs	r0, #50	@ 0x32
 80015b4:	f001 fc0c 	bl	8002dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80015b8:	2032      	movs	r0, #50	@ 0x32
 80015ba:	f001 fc19 	bl	8002df0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80015be:	b003      	add	sp, #12
 80015c0:	f85d fb04 	ldr.w	pc, [sp], #4

080015c4 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80015c4:	b40c      	push	{r2, r3}
 80015c6:	b500      	push	{lr}
 80015c8:	b083      	sub	sp, #12
 80015ca:	ab04      	add	r3, sp, #16
 80015cc:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80015d0:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80015d2:	f00f fdd5 	bl	8011180 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80015d6:	b003      	add	sp, #12
 80015d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80015dc:	b002      	add	sp, #8
 80015de:	4770      	bx	lr

080015e0 <TimestampNow>:
{
 80015e0:	b530      	push	{r4, r5, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	4604      	mov	r4, r0
 80015e6:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 80015e8:	a802      	add	r0, sp, #8
 80015ea:	f00f fb3d 	bl	8010c68 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80015ee:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	9b02      	ldr	r3, [sp, #8]
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <TimestampNow+0x2c>)
 80015f8:	2110      	movs	r1, #16
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff ffe2 	bl	80015c4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001600:	4620      	mov	r0, r4
 8001602:	f7fe fe0d 	bl	8000220 <strlen>
 8001606:	8028      	strh	r0, [r5, #0]
}
 8001608:	b005      	add	sp, #20
 800160a:	bd30      	pop	{r4, r5, pc}
 800160c:	08013dd0 	.word	0x08013dd0

08001610 <SystemApp_Init>:
{
 8001610:	b508      	push	{r3, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001612:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001616:	6893      	ldr	r3, [r2, #8]
 8001618:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800161c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800161e:	f00f fba7 	bl	8010d70 <UTIL_TIMER_Init>
  DBG_ProbesInit();
 8001622:	f000 f8b5 	bl	8001790 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 8001626:	f00f f855 	bl	80106d4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800162a:	4807      	ldr	r0, [pc, #28]	@ (8001648 <SystemApp_Init+0x38>)
 800162c:	f00f f86c 	bl	8010708 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001630:	2002      	movs	r0, #2
 8001632:	f00f f86f 	bl	8010714 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001636:	f7ff fd9d 	bl	8001174 <SYS_InitMeasurement>
  UTIL_LPM_Init();
 800163a:	f00f f97b 	bl	8010934 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800163e:	2101      	movs	r1, #1
 8001640:	4608      	mov	r0, r1
 8001642:	f00f f997 	bl	8010974 <UTIL_LPM_SetOffMode>
}
 8001646:	bd08      	pop	{r3, pc}
 8001648:	080015e1 	.word	0x080015e1

0800164c <UTIL_SEQ_Idle>:
{
 800164c:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 800164e:	f00f f9a7 	bl	80109a0 <UTIL_LPM_EnterLowPower>
}
 8001652:	bd08      	pop	{r3, pc}

08001654 <GetBatteryLevel>:
{
 8001654:	b510      	push	{r4, lr}
 8001656:	b082      	sub	sp, #8
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001658:	f7ff fd94 	bl	8001184 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 800165c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001660:	4298      	cmp	r0, r3
 8001662:	d80d      	bhi.n	8001680 <GetBatteryLevel+0x2c>
  else if (batteryLevelmV < VDD_MIN)
 8001664:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8001668:	d315      	bcc.n	8001696 <GetBatteryLevel+0x42>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800166a:	f5a0 60e1 	sub.w	r0, r0, #1800	@ 0x708
 800166e:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001672:	0044      	lsls	r4, r0, #1
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <GetBatteryLevel+0x48>)
 8001676:	fba3 3404 	umull	r3, r4, r3, r4
 800167a:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 800167e:	e000      	b.n	8001682 <GetBatteryLevel+0x2e>
    batteryLevel = LORAWAN_MAX_BAT;
 8001680:	24fe      	movs	r4, #254	@ 0xfe
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001682:	9400      	str	r4, [sp, #0]
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <GetBatteryLevel+0x4c>)
 8001686:	2201      	movs	r2, #1
 8001688:	2100      	movs	r1, #0
 800168a:	2002      	movs	r0, #2
 800168c:	f00f f896 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 8001690:	4620      	mov	r0, r4
 8001692:	b002      	add	sp, #8
 8001694:	bd10      	pop	{r4, pc}
    batteryLevel = 0;
 8001696:	2400      	movs	r4, #0
 8001698:	e7f3      	b.n	8001682 <GetBatteryLevel+0x2e>
 800169a:	bf00      	nop
 800169c:	1b4e81b5 	.word	0x1b4e81b5
 80016a0:	08013ddc 	.word	0x08013ddc

080016a4 <GetTemperatureLevel>:
{
 80016a4:	b508      	push	{r3, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80016a6:	f7ff fd8f 	bl	80011c8 <SYS_GetTemperatureLevel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2800      	cmp	r0, #0
 80016ae:	db02      	blt.n	80016b6 <GetTemperatureLevel+0x12>
}
 80016b0:	f3c3 200f 	ubfx	r0, r3, #8, #16
 80016b4:	bd08      	pop	{r3, pc}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80016b6:	f100 03ff 	add.w	r3, r0, #255	@ 0xff
 80016ba:	e7f9      	b.n	80016b0 <GetTemperatureLevel+0xc>

080016bc <GetCurrentLevel>:
{
 80016bc:	b508      	push	{r3, lr}
  currentLevel = SYS_GetCurrentLevel();
 80016be:	f7ff fdd3 	bl	8001268 <SYS_GetCurrentLevel>
}
 80016c2:	bd08      	pop	{r3, pc}

080016c4 <GetUniqueId>:
{
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80016c8:	4b18      	ldr	r3, [pc, #96]	@ (800172c <GetUniqueId+0x68>)
 80016ca:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80016ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d2:	d013      	beq.n	80016fc <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 80016d4:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 80016d6:	0a1a      	lsrs	r2, r3, #8
 80016d8:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 80016da:	0c1a      	lsrs	r2, r3, #16
 80016dc:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 80016de:	0e1b      	lsrs	r3, r3, #24
 80016e0:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80016e2:	4b12      	ldr	r3, [pc, #72]	@ (800172c <GetUniqueId+0x68>)
 80016e4:	f8d3 2584 	ldr.w	r2, [r3, #1412]	@ 0x584
    id[3] = val & 0xFF;
 80016e8:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80016ea:	f8d3 3584 	ldr.w	r3, [r3, #1412]	@ 0x584
 80016ee:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 80016f0:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 80016f2:	0c1a      	lsrs	r2, r3, #16
 80016f4:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 80016f6:	0e1b      	lsrs	r3, r3, #24
 80016f8:	7003      	strb	r3, [r0, #0]
}
 80016fa:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80016fc:	f000 fe4c 	bl	8002398 <HAL_GetUIDw0>
 8001700:	4605      	mov	r5, r0
 8001702:	f000 fe55 	bl	80023b0 <HAL_GetUIDw2>
 8001706:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001708:	f000 fe4c 	bl	80023a4 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 800170c:	0e2b      	lsrs	r3, r5, #24
 800170e:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001710:	0c2b      	lsrs	r3, r5, #16
 8001712:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001714:	0a2b      	lsrs	r3, r5, #8
 8001716:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001718:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 800171a:	0e03      	lsrs	r3, r0, #24
 800171c:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 800171e:	0c03      	lsrs	r3, r0, #16
 8001720:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001722:	0a03      	lsrs	r3, r0, #8
 8001724:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001726:	7020      	strb	r0, [r4, #0]
 8001728:	e7e7      	b.n	80016fa <GetUniqueId+0x36>
 800172a:	bf00      	nop
 800172c:	1fff7000 	.word	0x1fff7000

08001730 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <GetDevAddr+0x24>)
 8001732:	f8d3 0580 	ldr.w	r0, [r3, #1408]	@ 0x580
  if (val == 0xFFFFFFFF)
 8001736:	f1b0 3fff 	cmp.w	r0, #4294967295
 800173a:	d000      	beq.n	800173e <GetDevAddr+0xe>
}
 800173c:	4770      	bx	lr
{
 800173e:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001740:	f000 fe2a 	bl	8002398 <HAL_GetUIDw0>
 8001744:	4604      	mov	r4, r0
 8001746:	f000 fe2d 	bl	80023a4 <HAL_GetUIDw1>
 800174a:	4044      	eors	r4, r0
 800174c:	f000 fe30 	bl	80023b0 <HAL_GetUIDw2>
 8001750:	4060      	eors	r0, r4
}
 8001752:	bd10      	pop	{r4, pc}
 8001754:	1fff7000 	.word	0x1fff7000

08001758 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001758:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800175a:	2101      	movs	r1, #1
 800175c:	2002      	movs	r0, #2
 800175e:	f00f f8f3 	bl	8010948 <UTIL_LPM_SetStopMode>
}
 8001762:	bd08      	pop	{r3, pc}

08001764 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001764:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001766:	2100      	movs	r1, #0
 8001768:	2002      	movs	r0, #2
 800176a:	f00f f8ed 	bl	8010948 <UTIL_LPM_SetStopMode>
}
 800176e:	bd08      	pop	{r3, pc}

08001770 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001770:	2000      	movs	r0, #0
 8001772:	4770      	bx	lr

08001774 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001774:	b508      	push	{r3, lr}
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001776:	f000 f88f 	bl	8001898 <TIMER_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 800177a:	bd08      	pop	{r3, pc}

0800177c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800177c:	b500      	push	{lr}
 800177e:	b083      	sub	sp, #12
 8001780:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001782:	9801      	ldr	r0, [sp, #4]
 8001784:	f000 f960 	bl	8001a48 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001788:	b003      	add	sp, #12
 800178a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001790 <DBG_ProbesInit>:
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001790:	4a03      	ldr	r2, [pc, #12]	@ (80017a0 <DBG_ProbesInit+0x10>)
 8001792:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 800179e:	4770      	bx	lr
 80017a0:	58000800 	.word	0x58000800

080017a4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80017a4:	2001      	movs	r0, #1
 80017a6:	4770      	bx	lr

080017a8 <_kill>:

int _kill(int pid, int sig)
{
 80017a8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80017aa:	f010 fb5d 	bl	8011e68 <__errno>
 80017ae:	2316      	movs	r3, #22
 80017b0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80017b2:	f04f 30ff 	mov.w	r0, #4294967295
 80017b6:	bd08      	pop	{r3, pc}

080017b8 <_exit>:

void _exit (int status)
{
 80017b8:	b508      	push	{r3, lr}
	_kill(status, -1);
 80017ba:	f04f 31ff 	mov.w	r1, #4294967295
 80017be:	f7ff fff3 	bl	80017a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017c2:	e7fe      	b.n	80017c2 <_exit+0xa>

080017c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c4:	b570      	push	{r4, r5, r6, lr}
 80017c6:	460c      	mov	r4, r1
 80017c8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2500      	movs	r5, #0
 80017cc:	e006      	b.n	80017dc <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80017ce:	f3af 8000 	nop.w
 80017d2:	4621      	mov	r1, r4
 80017d4:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80017da:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	42b5      	cmp	r5, r6
 80017de:	dbf6      	blt.n	80017ce <_read+0xa>
	}

return len;
}
 80017e0:	4630      	mov	r0, r6
 80017e2:	bd70      	pop	{r4, r5, r6, pc}

080017e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017e4:	b570      	push	{r4, r5, r6, lr}
 80017e6:	460c      	mov	r4, r1
 80017e8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	2500      	movs	r5, #0
 80017ec:	e004      	b.n	80017f8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80017ee:	f814 0b01 	ldrb.w	r0, [r4], #1
 80017f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	3501      	adds	r5, #1
 80017f8:	42b5      	cmp	r5, r6
 80017fa:	dbf8      	blt.n	80017ee <_write+0xa>
	}
	return len;
}
 80017fc:	4630      	mov	r0, r6
 80017fe:	bd70      	pop	{r4, r5, r6, pc}

08001800 <_close>:

int _close(int file)
{
	return -1;
}
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	4770      	bx	lr

08001806 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800180a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800180c:	2000      	movs	r0, #0
 800180e:	4770      	bx	lr

08001810 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001810:	2001      	movs	r0, #1
 8001812:	4770      	bx	lr

08001814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001814:	2000      	movs	r0, #0
 8001816:	4770      	bx	lr

08001818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001818:	b510      	push	{r4, lr}
 800181a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800181c:	4a0c      	ldr	r2, [pc, #48]	@ (8001850 <_sbrk+0x38>)
 800181e:	490d      	ldr	r1, [pc, #52]	@ (8001854 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	480d      	ldr	r0, [pc, #52]	@ (8001858 <_sbrk+0x40>)
 8001822:	6800      	ldr	r0, [r0, #0]
 8001824:	b140      	cbz	r0, 8001838 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	480c      	ldr	r0, [pc, #48]	@ (8001858 <_sbrk+0x40>)
 8001828:	6800      	ldr	r0, [r0, #0]
 800182a:	4403      	add	r3, r0
 800182c:	1a52      	subs	r2, r2, r1
 800182e:	4293      	cmp	r3, r2
 8001830:	d806      	bhi.n	8001840 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001832:	4a09      	ldr	r2, [pc, #36]	@ (8001858 <_sbrk+0x40>)
 8001834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001836:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001838:	4807      	ldr	r0, [pc, #28]	@ (8001858 <_sbrk+0x40>)
 800183a:	4c08      	ldr	r4, [pc, #32]	@ (800185c <_sbrk+0x44>)
 800183c:	6004      	str	r4, [r0, #0]
 800183e:	e7f2      	b.n	8001826 <_sbrk+0xe>
    errno = ENOMEM;
 8001840:	f010 fb12 	bl	8011e68 <__errno>
 8001844:	230c      	movs	r3, #12
 8001846:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	e7f3      	b.n	8001836 <_sbrk+0x1e>
 800184e:	bf00      	nop
 8001850:	20008000 	.word	0x20008000
 8001854:	00000400 	.word	0x00000400
 8001858:	20000368 	.word	0x20000368
 800185c:	20001d80 	.word	0x20001d80

08001860 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001860:	4b02      	ldr	r3, [pc, #8]	@ (800186c <TIMER_IF_SetTimerContext+0xc>)
 8001862:	6898      	ldr	r0, [r3, #8]
static inline uint32_t GetTimerTicks(void)
{
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001864:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001866:	4b02      	ldr	r3, [pc, #8]	@ (8001870 <TIMER_IF_SetTimerContext+0x10>)
 8001868:	6018      	str	r0, [r3, #0]
}
 800186a:	4770      	bx	lr
 800186c:	40002800 	.word	0x40002800
 8001870:	2000036c 	.word	0x2000036c

08001874 <TIMER_IF_GetTimerContext>:
}
 8001874:	4b01      	ldr	r3, [pc, #4]	@ (800187c <TIMER_IF_GetTimerContext+0x8>)
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	2000036c 	.word	0x2000036c

08001880 <TIMER_IF_GetTimerElapsedTime>:
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <TIMER_IF_GetTimerElapsedTime+0x10>)
 8001882:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001884:	43db      	mvns	r3, r3
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001886:	4a03      	ldr	r2, [pc, #12]	@ (8001894 <TIMER_IF_GetTimerElapsedTime+0x14>)
 8001888:	6810      	ldr	r0, [r2, #0]
}
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40002800 	.word	0x40002800
 8001894:	2000036c 	.word	0x2000036c

08001898 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <TIMER_IF_GetTimerValue+0x14>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b11b      	cbz	r3, 80018a6 <TIMER_IF_GetTimerValue+0xe>
 800189e:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <TIMER_IF_GetTimerValue+0x18>)
 80018a0:	6898      	ldr	r0, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80018a2:	43c0      	mvns	r0, r0
 80018a4:	4770      	bx	lr
  uint32_t ret = 0;
 80018a6:	2000      	movs	r0, #0
}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000370 	.word	0x20000370
 80018b0:	40002800 	.word	0x40002800

080018b4 <TIMER_IF_GetMinimumTimeout>:
}
 80018b4:	2003      	movs	r0, #3
 80018b6:	4770      	bx	lr

080018b8 <TIMER_IF_Convert_ms2Tick>:
{
 80018b8:	b508      	push	{r3, lr}
 80018ba:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80018bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018c0:	2300      	movs	r3, #0
 80018c2:	0280      	lsls	r0, r0, #10
 80018c4:	0d89      	lsrs	r1, r1, #22
 80018c6:	f7ff fa55 	bl	8000d74 <__aeabi_uldivmod>
}
 80018ca:	bd08      	pop	{r3, pc}

080018cc <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80018cc:	0ec2      	lsrs	r2, r0, #27
 80018ce:	0143      	lsls	r3, r0, #5
 80018d0:	1a1b      	subs	r3, r3, r0
 80018d2:	f162 0200 	sbc.w	r2, r2, #0
 80018d6:	0092      	lsls	r2, r2, #2
 80018d8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	181b      	adds	r3, r3, r0
 80018e0:	f142 0000 	adc.w	r0, r2, #0
 80018e4:	00c0      	lsls	r0, r0, #3
 80018e6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80018ea:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 80018ee:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 80018f2:	4770      	bx	lr

080018f4 <TIMER_IF_StopTimer>:
{
 80018f4:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <TIMER_IF_StopTimer+0x20>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80018fc:	4c06      	ldr	r4, [pc, #24]	@ (8001918 <TIMER_IF_StopTimer+0x24>)
 80018fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001902:	4620      	mov	r0, r4
 8001904:	f002 fd94 	bl	8004430 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800190e:	2000      	movs	r0, #0
 8001910:	bd10      	pop	{r4, pc}
 8001912:	bf00      	nop
 8001914:	40002800 	.word	0x40002800
 8001918:	20000324 	.word	0x20000324

0800191c <TIMER_IF_BkUp_Write_MSBticks>:
{
 800191c:	b508      	push	{r3, lr}
 800191e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001920:	2102      	movs	r1, #2
 8001922:	4802      	ldr	r0, [pc, #8]	@ (800192c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001924:	f002 ffc9 	bl	80048ba <HAL_RTCEx_BKUPWrite>
}
 8001928:	bd08      	pop	{r3, pc}
 800192a:	bf00      	nop
 800192c:	20000324 	.word	0x20000324

08001930 <TIMER_IF_Init>:
{
 8001930:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001932:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <TIMER_IF_Init+0x40>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b10b      	cbz	r3, 800193c <TIMER_IF_Init+0xc>
}
 8001938:	2000      	movs	r0, #0
 800193a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800193c:	4c0d      	ldr	r4, [pc, #52]	@ (8001974 <TIMER_IF_Init+0x44>)
 800193e:	f04f 35ff 	mov.w	r5, #4294967295
 8001942:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8001944:	f7ff fd3e 	bl	80013c4 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001948:	f7ff ffd4 	bl	80018f4 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800194c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001950:	4620      	mov	r0, r4
 8001952:	f002 fd6d 	bl	8004430 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001956:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001958:	4620      	mov	r0, r4
 800195a:	f002 ff4d 	bl	80047f8 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff ffdc 	bl	800191c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001964:	f7ff ff7c 	bl	8001860 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001968:	4b01      	ldr	r3, [pc, #4]	@ (8001970 <TIMER_IF_Init+0x40>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	e7e3      	b.n	8001938 <TIMER_IF_Init+0x8>
 8001970:	20000370 	.word	0x20000370
 8001974:	20000324 	.word	0x20000324

08001978 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001978:	b508      	push	{r3, lr}
 800197a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800197c:	2100      	movs	r1, #0
 800197e:	4802      	ldr	r0, [pc, #8]	@ (8001988 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001980:	f002 ff9b 	bl	80048ba <HAL_RTCEx_BKUPWrite>
}
 8001984:	bd08      	pop	{r3, pc}
 8001986:	bf00      	nop
 8001988:	20000324 	.word	0x20000324

0800198c <TIMER_IF_BkUp_Write_SubSeconds>:
{
 800198c:	b508      	push	{r3, lr}
 800198e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001990:	2101      	movs	r1, #1
 8001992:	4802      	ldr	r0, [pc, #8]	@ (800199c <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001994:	f002 ff91 	bl	80048ba <HAL_RTCEx_BKUPWrite>
}
 8001998:	bd08      	pop	{r3, pc}
 800199a:	bf00      	nop
 800199c:	20000324 	.word	0x20000324

080019a0 <TIMER_IF_StartTimer>:
{
 80019a0:	b510      	push	{r4, lr}
 80019a2:	b08c      	sub	sp, #48	@ 0x30
 80019a4:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80019a6:	222c      	movs	r2, #44	@ 0x2c
 80019a8:	2100      	movs	r1, #0
 80019aa:	a801      	add	r0, sp, #4
 80019ac:	f010 fa09 	bl	8011dc2 <memset>
  TIMER_IF_StopTimer();
 80019b0:	f7ff ffa0 	bl	80018f4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <TIMER_IF_StartTimer+0x48>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80019ba:	2300      	movs	r3, #0
 80019bc:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80019be:	43e4      	mvns	r4, r4
 80019c0:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019c2:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80019c4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019c8:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80019ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019ce:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019d0:	2201      	movs	r2, #1
 80019d2:	a901      	add	r1, sp, #4
 80019d4:	4805      	ldr	r0, [pc, #20]	@ (80019ec <TIMER_IF_StartTimer+0x4c>)
 80019d6:	f002 fe53 	bl	8004680 <HAL_RTC_SetAlarm_IT>
 80019da:	b910      	cbnz	r0, 80019e2 <TIMER_IF_StartTimer+0x42>
}
 80019dc:	2000      	movs	r0, #0
 80019de:	b00c      	add	sp, #48	@ 0x30
 80019e0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80019e2:	f7ff fc76 	bl	80012d2 <Error_Handler>
 80019e6:	e7f9      	b.n	80019dc <TIMER_IF_StartTimer+0x3c>
 80019e8:	2000036c 	.word	0x2000036c
 80019ec:	20000324 	.word	0x20000324

080019f0 <TIMER_IF_BkUp_Read_MSBticks>:
{
 80019f0:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80019f2:	2102      	movs	r1, #2
 80019f4:	4801      	ldr	r0, [pc, #4]	@ (80019fc <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 80019f6:	f002 ff67 	bl	80048c8 <HAL_RTCEx_BKUPRead>
}
 80019fa:	bd08      	pop	{r3, pc}
 80019fc:	20000324 	.word	0x20000324

08001a00 <TIMER_IF_GetTime>:
{
 8001a00:	b538      	push	{r3, r4, r5, lr}
 8001a02:	4605      	mov	r5, r0
 8001a04:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <TIMER_IF_GetTime+0x24>)
 8001a06:	689c      	ldr	r4, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001a08:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001a0a:	f7ff fff1 	bl	80019f0 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001a0e:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001a10:	0aa4      	lsrs	r4, r4, #10
 8001a12:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001a16:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001a1a:	f7ff ff57 	bl	80018cc <TIMER_IF_Convert_Tick2ms>
 8001a1e:	8028      	strh	r0, [r5, #0]
}
 8001a20:	4620      	mov	r0, r4
 8001a22:	bd38      	pop	{r3, r4, r5, pc}
 8001a24:	40002800 	.word	0x40002800

08001a28 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001a28:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4801      	ldr	r0, [pc, #4]	@ (8001a34 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001a2e:	f002 ff4b 	bl	80048c8 <HAL_RTCEx_BKUPRead>
}
 8001a32:	bd08      	pop	{r3, pc}
 8001a34:	20000324 	.word	0x20000324

08001a38 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001a38:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4801      	ldr	r0, [pc, #4]	@ (8001a44 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001a3e:	f002 ff43 	bl	80048c8 <HAL_RTCEx_BKUPRead>
}
 8001a42:	bd08      	pop	{r3, pc}
 8001a44:	20000324 	.word	0x20000324

08001a48 <TIMER_IF_DelayMs>:
{
 8001a48:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001a4a:	f7ff ff35 	bl	80018b8 <TIMER_IF_Convert_ms2Tick>
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <TIMER_IF_DelayMs+0x20>)
 8001a50:	689a      	ldr	r2, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001a52:	43d2      	mvns	r2, r2
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001a54:	e000      	b.n	8001a58 <TIMER_IF_DelayMs+0x10>
    __NOP();
 8001a56:	bf00      	nop
 8001a58:	4b03      	ldr	r3, [pc, #12]	@ (8001a68 <TIMER_IF_DelayMs+0x20>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001a5c:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	4283      	cmp	r3, r0
 8001a62:	d3f8      	bcc.n	8001a56 <TIMER_IF_DelayMs+0xe>
}
 8001a64:	bd08      	pop	{r3, pc}
 8001a66:	bf00      	nop
 8001a68:	40002800 	.word	0x40002800

08001a6c <HAL_RTC_AlarmAEventCallback>:
{
 8001a6c:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001a6e:	f00f faa3 	bl	8010fb8 <UTIL_TIMER_IRQ_Handler>
}
 8001a72:	bd08      	pop	{r3, pc}

08001a74 <HAL_RTCEx_SSRUEventCallback>:
{
 8001a74:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001a76:	f7ff ffbb 	bl	80019f0 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001a7a:	3001      	adds	r0, #1
 8001a7c:	f7ff ff4e 	bl	800191c <TIMER_IF_BkUp_Write_MSBticks>
}
 8001a80:	bd08      	pop	{r3, pc}
	...

08001a84 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a84:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001a86:	4817      	ldr	r0, [pc, #92]	@ (8001ae4 <MX_USART1_UART_Init+0x60>)
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <MX_USART1_UART_Init+0x64>)
 8001a8a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = USART_BAUDRATE;
 8001a8c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001a90:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	2300      	movs	r3, #0
 8001a94:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a96:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a98:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa2:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa4:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aa8:	f004 fa0f 	bl	8005eca <HAL_UART_Init>
 8001aac:	b970      	cbnz	r0, 8001acc <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	480c      	ldr	r0, [pc, #48]	@ (8001ae4 <MX_USART1_UART_Init+0x60>)
 8001ab2:	f004 fbbc 	bl	800622e <HAL_UARTEx_SetTxFifoThreshold>
 8001ab6:	b960      	cbnz	r0, 8001ad2 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	480a      	ldr	r0, [pc, #40]	@ (8001ae4 <MX_USART1_UART_Init+0x60>)
 8001abc:	f004 fbdc 	bl	8006278 <HAL_UARTEx_SetRxFifoThreshold>
 8001ac0:	b950      	cbnz	r0, 8001ad8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001ac2:	4808      	ldr	r0, [pc, #32]	@ (8001ae4 <MX_USART1_UART_Init+0x60>)
 8001ac4:	f004 fb8f 	bl	80061e6 <HAL_UARTEx_EnableFifoMode>
 8001ac8:	b948      	cbnz	r0, 8001ade <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
  }

}
 8001aca:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001acc:	f7ff fc01 	bl	80012d2 <Error_Handler>
 8001ad0:	e7ed      	b.n	8001aae <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8001ad2:	f7ff fbfe 	bl	80012d2 <Error_Handler>
 8001ad6:	e7ef      	b.n	8001ab8 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8001ad8:	f7ff fbfb 	bl	80012d2 <Error_Handler>
 8001adc:	e7f1      	b.n	8001ac2 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8001ade:	f7ff fbf8 	bl	80012d2 <Error_Handler>
}
 8001ae2:	e7f2      	b.n	8001aca <MX_USART1_UART_Init+0x46>
 8001ae4:	200003d4 	.word	0x200003d4
 8001ae8:	40013800 	.word	0x40013800

08001aec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001aec:	b530      	push	{r4, r5, lr}
 8001aee:	b097      	sub	sp, #92	@ 0x5c
 8001af0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	2100      	movs	r1, #0
 8001af4:	9111      	str	r1, [sp, #68]	@ 0x44
 8001af6:	9112      	str	r1, [sp, #72]	@ 0x48
 8001af8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001afa:	9114      	str	r1, [sp, #80]	@ 0x50
 8001afc:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001afe:	2238      	movs	r2, #56	@ 0x38
 8001b00:	a803      	add	r0, sp, #12
 8001b02:	f010 f95e 	bl	8011dc2 <memset>
  if(uartHandle->Instance==USART1)
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <HAL_UART_MspInit+0xc4>)
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b0e:	b017      	add	sp, #92	@ 0x5c
 8001b10:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001b16:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8001b1a:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b1c:	a803      	add	r0, sp, #12
 8001b1e:	f002 fb65 	bl	80041ec <HAL_RCCEx_PeriphCLKConfig>
 8001b22:	2800      	cmp	r0, #0
 8001b24:	d13e      	bne.n	8001ba4 <HAL_UART_MspInit+0xb8>
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b30:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b34:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001b38:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001b3a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b3e:	f042 0202 	orr.w	r2, r2, #2
 8001b42:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b4c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001b4e:	23c0      	movs	r3, #192	@ 0xc0
 8001b50:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2500      	movs	r5, #0
 8001b58:	9513      	str	r5, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b5e:	2307      	movs	r3, #7
 8001b60:	9315      	str	r3, [sp, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	a911      	add	r1, sp, #68	@ 0x44
 8001b64:	4813      	ldr	r0, [pc, #76]	@ (8001bb4 <HAL_UART_MspInit+0xc8>)
 8001b66:	f001 fbbd 	bl	80032e4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel5;
 8001b6a:	4813      	ldr	r0, [pc, #76]	@ (8001bb8 <HAL_UART_MspInit+0xcc>)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <HAL_UART_MspInit+0xd0>)
 8001b6e:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001b70:	2312      	movs	r3, #18
 8001b72:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b74:	2310      	movs	r3, #16
 8001b76:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b78:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b7a:	2380      	movs	r3, #128	@ 0x80
 8001b7c:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b7e:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b80:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b82:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b84:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b86:	f001 f9ab 	bl	8002ee0 <HAL_DMA_Init>
 8001b8a:	b970      	cbnz	r0, 8001baa <HAL_UART_MspInit+0xbe>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <HAL_UART_MspInit+0xcc>)
 8001b8e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8001b90:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2102      	movs	r1, #2
 8001b96:	2024      	movs	r0, #36	@ 0x24
 8001b98:	f001 f91a 	bl	8002dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b9c:	2024      	movs	r0, #36	@ 0x24
 8001b9e:	f001 f927 	bl	8002df0 <HAL_NVIC_EnableIRQ>
}
 8001ba2:	e7b4      	b.n	8001b0e <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001ba4:	f7ff fb95 	bl	80012d2 <Error_Handler>
 8001ba8:	e7bd      	b.n	8001b26 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001baa:	f7ff fb92 	bl	80012d2 <Error_Handler>
 8001bae:	e7ed      	b.n	8001b8c <HAL_UART_MspInit+0xa0>
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	48000400 	.word	0x48000400
 8001bb8:	20000374 	.word	0x20000374
 8001bbc:	40020058 	.word	0x40020058

08001bc0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 8001bc0:	6802      	ldr	r2, [r0, #0]
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <HAL_UART_MspDeInit+0x30>)
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d000      	beq.n	8001bca <HAL_UART_MspDeInit+0xa>
 8001bc8:	4770      	bx	lr
{
 8001bca:	b510      	push	{r4, lr}
 8001bcc:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001bce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bd2:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001bd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bd8:	6613      	str	r3, [r2, #96]	@ 0x60

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8001bda:	21c0      	movs	r1, #192	@ 0xc0
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <HAL_UART_MspDeInit+0x34>)
 8001bde:	f001 fc53 	bl	8003488 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001be2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8001be4:	f001 f9ee 	bl	8002fc4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001be8:	2024      	movs	r0, #36	@ 0x24
 8001bea:	f001 f905 	bl	8002df8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8001bee:	bd10      	pop	{r4, pc}
 8001bf0:	40013800 	.word	0x40013800
 8001bf4:	48000400 	.word	0x48000400

08001bf8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001bf8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <vcom_Init+0x20>)
 8001bfc:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001bfe:	f7ff fb47 	bl	8001290 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001c02:	f7ff ff3f 	bl	8001a84 <MX_USART1_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001c06:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <vcom_Init+0x24>)
 8001c08:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001c0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001c14:	2000      	movs	r0, #0
 8001c16:	bd08      	pop	{r3, pc}
 8001c18:	20000468 	.word	0x20000468
 8001c1c:	58000800 	.word	0x58000800

08001c20 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001c20:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c2c:	641a      	str	r2, [r3, #64]	@ 0x40
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8001c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c30:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001c34:	641a      	str	r2, [r3, #64]	@ 0x40
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
  __HAL_RCC_USART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8001c36:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <vcom_DeInit+0x28>)
 8001c38:	f7ff ffc2 	bl	8001bc0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001c3c:	200f      	movs	r0, #15
 8001c3e:	f001 f8db 	bl	8002df8 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001c42:	2000      	movs	r0, #0
 8001c44:	bd08      	pop	{r3, pc}
 8001c46:	bf00      	nop
 8001c48:	200003d4 	.word	0x200003d4

08001c4c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001c4c:	b508      	push	{r3, lr}
 8001c4e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001c50:	4601      	mov	r1, r0
 8001c52:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <vcom_Trace_DMA+0x10>)
 8001c54:	f003 fa0a 	bl	800506c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001c58:	2000      	movs	r0, #0
 8001c5a:	bd08      	pop	{r3, pc}
 8001c5c:	200003d4 	.word	0x200003d4

08001c60 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001c60:	b510      	push	{r4, lr}
 8001c62:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001c64:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <vcom_ReceiveInit+0x50>)
 8001c66:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001c68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c6c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8001c6e:	ab02      	add	r3, sp, #8
 8001c70:	e913 0006 	ldmdb	r3, {r1, r2}
 8001c74:	480f      	ldr	r0, [pc, #60]	@ (8001cb4 <vcom_ReceiveInit+0x54>)
 8001c76:	f004 fa5e 	bl	8006136 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <vcom_ReceiveInit+0x54>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	69da      	ldr	r2, [r3, #28]
 8001c80:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8001c84:	d1f9      	bne.n	8001c7a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001c86:	69da      	ldr	r2, [r3, #28]
 8001c88:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8001c8c:	d0fb      	beq.n	8001c86 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001c94:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8001c96:	4c07      	ldr	r4, [pc, #28]	@ (8001cb4 <vcom_ReceiveInit+0x54>)
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f004 fa8d 	bl	80061b8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4905      	ldr	r1, [pc, #20]	@ (8001cb8 <vcom_ReceiveInit+0x58>)
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f004 f9d8 	bl	8006058 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001ca8:	2000      	movs	r0, #0
 8001caa:	b002      	add	sp, #8
 8001cac:	bd10      	pop	{r4, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000464 	.word	0x20000464
 8001cb4:	200003d4 	.word	0x200003d4
 8001cb8:	2000046c 	.word	0x2000046c

08001cbc <vcom_Resume>:

void vcom_Resume(void)
{
 8001cbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cbe:	4807      	ldr	r0, [pc, #28]	@ (8001cdc <vcom_Resume+0x20>)
 8001cc0:	f004 f903 	bl	8005eca <HAL_UART_Init>
 8001cc4:	b920      	cbnz	r0, 8001cd0 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001cc6:	4806      	ldr	r0, [pc, #24]	@ (8001ce0 <vcom_Resume+0x24>)
 8001cc8:	f001 f90a 	bl	8002ee0 <HAL_DMA_Init>
 8001ccc:	b918      	cbnz	r0, 8001cd6 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001cce:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001cd0:	f7ff faff 	bl	80012d2 <Error_Handler>
 8001cd4:	e7f7      	b.n	8001cc6 <vcom_Resume+0xa>
    Error_Handler();
 8001cd6:	f7ff fafc 	bl	80012d2 <Error_Handler>
}
 8001cda:	e7f8      	b.n	8001cce <vcom_Resume+0x12>
 8001cdc:	200003d4 	.word	0x200003d4
 8001ce0:	20000374 	.word	0x20000374

08001ce4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8001ce4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8001ce6:	4b02      	ldr	r3, [pc, #8]	@ (8001cf0 <HAL_UART_TxCpltCallback+0xc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2000      	movs	r0, #0
 8001cec:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001cee:	bd08      	pop	{r3, pc}
 8001cf0:	20000468 	.word	0x20000468

08001cf4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <HAL_UART_RxCpltCallback+0x24>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b12b      	cbz	r3, 8001d0a <HAL_UART_RxCpltCallback+0x16>
 8001cfe:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8001d02:	b912      	cbnz	r2, 8001d0a <HAL_UART_RxCpltCallback+0x16>
  {
    RxCpltCallback(&charRx, 1, 0);
 8001d04:	2101      	movs	r1, #1
 8001d06:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <HAL_UART_RxCpltCallback+0x28>)
 8001d08:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4903      	ldr	r1, [pc, #12]	@ (8001d1c <HAL_UART_RxCpltCallback+0x28>)
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f004 f9a2 	bl	8006058 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001d14:	bd10      	pop	{r4, pc}
 8001d16:	bf00      	nop
 8001d18:	20000464 	.word	0x20000464
 8001d1c:	2000046c 	.word	0x2000046c

08001d20 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001d20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001d22:	f7ff fc75 	bl	8001610 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001d26:	f000 f953 	bl	8001fd0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001d2a:	bd08      	pop	{r3, pc}

08001d2c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001d2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d32:	f00e fea1 	bl	8010a78 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001d36:	bd08      	pop	{r3, pc}

08001d38 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{

}
 8001d38:	4770      	bx	lr

08001d3a <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{

}
 8001d3a:	4770      	bx	lr

08001d3c <OnTxData>:
/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 8001d3c:	2800      	cmp	r0, #0
 8001d3e:	d03c      	beq.n	8001dba <OnTxData+0x7e>
{
 8001d40:	b510      	push	{r4, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	4604      	mov	r4, r0
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 8001d46:	7803      	ldrb	r3, [r0, #0]
 8001d48:	b90b      	cbnz	r3, 8001d4e <OnTxData+0x12>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bd10      	pop	{r4, pc}
      UTIL_TIMER_Start(&TxLedTimer);
 8001d4e:	481b      	ldr	r0, [pc, #108]	@ (8001dbc <OnTxData+0x80>)
 8001d50:	f00f f8d2 	bl	8010ef8 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8001d54:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <OnTxData+0x84>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	4611      	mov	r1, r2
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f00e fd2e 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8001d60:	7b23      	ldrb	r3, [r4, #12]
 8001d62:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8001d66:	f994 1014 	ldrsb.w	r1, [r4, #20]
 8001d6a:	9103      	str	r1, [sp, #12]
 8001d6c:	9202      	str	r2, [sp, #8]
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	68a3      	ldr	r3, [r4, #8]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <OnTxData+0x88>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	4611      	mov	r1, r2
 8001d7a:	2003      	movs	r0, #3
 8001d7c:	f00e fd1e 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <OnTxData+0x8c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	4611      	mov	r1, r2
 8001d86:	2003      	movs	r0, #3
 8001d88:	f00e fd18 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8001d8c:	78a3      	ldrb	r3, [r4, #2]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d10c      	bne.n	8001dac <OnTxData+0x70>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8001d92:	78e3      	ldrb	r3, [r4, #3]
 8001d94:	b143      	cbz	r3, 8001da8 <OnTxData+0x6c>
 8001d96:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <OnTxData+0x90>)
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <OnTxData+0x94>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	4611      	mov	r1, r2
 8001da0:	2003      	movs	r0, #3
 8001da2:	f00e fd0b 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 8001da6:	e7d0      	b.n	8001d4a <OnTxData+0xe>
 8001da8:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <OnTxData+0x98>)
 8001daa:	e7f5      	b.n	8001d98 <OnTxData+0x5c>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8001dac:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <OnTxData+0x9c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	4611      	mov	r1, r2
 8001db2:	2003      	movs	r0, #3
 8001db4:	f00e fd02 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 8001db8:	e7c7      	b.n	8001d4a <OnTxData+0xe>
 8001dba:	4770      	bx	lr
 8001dbc:	200004a0 	.word	0x200004a0
 8001dc0:	08013e44 	.word	0x08013e44
 8001dc4:	08013e78 	.word	0x08013e78
 8001dc8:	08013eac 	.word	0x08013eac
 8001dcc:	08013e38 	.word	0x08013e38
 8001dd0:	08013ebc 	.word	0x08013ebc
 8001dd4:	08013e3c 	.word	0x08013e3c
 8001dd8:	08013ed0 	.word	0x08013ed0

08001ddc <OnTxTimerEvent>:
{
 8001ddc:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001dde:	2100      	movs	r1, #0
 8001de0:	2002      	movs	r0, #2
 8001de2:	f00e fe15 	bl	8010a10 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8001de6:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <OnTxTimerEvent+0x14>)
 8001de8:	f00f f886 	bl	8010ef8 <UTIL_TIMER_Start>
}
 8001dec:	bd08      	pop	{r3, pc}
 8001dee:	bf00      	nop
 8001df0:	200005b0 	.word	0x200005b0

08001df4 <OnMacProcessNotify>:
  }
  /* USER CODE END OnJoinRequest_1 */
}

static void OnMacProcessNotify(void)
{
 8001df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8001df6:	2100      	movs	r1, #0
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f00e fe09 	bl	8010a10 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8001dfe:	bd08      	pop	{r3, pc}

08001e00 <OnRxData>:
{
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	460c      	mov	r4, r1
  if ((appData != NULL) || (params != NULL))
 8001e06:	4605      	mov	r5, r0
 8001e08:	b358      	cbz	r0, 8001e62 <OnRxData+0x62>
    UTIL_TIMER_Start(&RxLedTimer);
 8001e0a:	4830      	ldr	r0, [pc, #192]	@ (8001ecc <OnRxData+0xcc>)
 8001e0c:	f00f f874 	bl	8010ef8 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8001e10:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed0 <OnRxData+0xd0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	4611      	mov	r1, r2
 8001e16:	2002      	movs	r0, #2
 8001e18:	f00e fcd0 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8001e1c:	f994 200c 	ldrsb.w	r2, [r4, #12]
 8001e20:	782b      	ldrb	r3, [r5, #0]
 8001e22:	f994 1002 	ldrsb.w	r1, [r4, #2]
 8001e26:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8001e2a:	f994 6004 	ldrsb.w	r6, [r4, #4]
 8001e2e:	9605      	str	r6, [sp, #20]
 8001e30:	9004      	str	r0, [sp, #16]
 8001e32:	9103      	str	r1, [sp, #12]
 8001e34:	9302      	str	r3, [sp, #8]
 8001e36:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <OnRxData+0xd4>)
 8001e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	68a3      	ldr	r3, [r4, #8]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	4b25      	ldr	r3, [pc, #148]	@ (8001ed8 <OnRxData+0xd8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	4611      	mov	r1, r2
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f00e fcb7 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8001e4e:	782b      	ldrb	r3, [r5, #0]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d01d      	beq.n	8001e90 <OnRxData+0x90>
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d102      	bne.n	8001e5e <OnRxData+0x5e>
        if (appData->BufferSize == 1)
 8001e58:	786b      	ldrb	r3, [r5, #1]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d004      	beq.n	8001e68 <OnRxData+0x68>
}
 8001e5e:	b006      	add	sp, #24
 8001e60:	bd70      	pop	{r4, r5, r6, pc}
  if ((appData != NULL) || (params != NULL))
 8001e62:	2900      	cmp	r1, #0
 8001e64:	d1d1      	bne.n	8001e0a <OnRxData+0xa>
 8001e66:	e7fa      	b.n	8001e5e <OnRxData+0x5e>
          switch (appData->Buffer[0])
 8001e68:	686b      	ldr	r3, [r5, #4]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d007      	beq.n	8001e80 <OnRxData+0x80>
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d009      	beq.n	8001e88 <OnRxData+0x88>
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f2      	bne.n	8001e5e <OnRxData+0x5e>
              LmHandlerRequestClass(CLASS_A);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f004 fbcb 	bl	8006614 <LmHandlerRequestClass>
              break;
 8001e7e:	e7ee      	b.n	8001e5e <OnRxData+0x5e>
              LmHandlerRequestClass(CLASS_B);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f004 fbc7 	bl	8006614 <LmHandlerRequestClass>
              break;
 8001e86:	e7ea      	b.n	8001e5e <OnRxData+0x5e>
              LmHandlerRequestClass(CLASS_C);
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f004 fbc3 	bl	8006614 <LmHandlerRequestClass>
              break;
 8001e8e:	e7e6      	b.n	8001e5e <OnRxData+0x5e>
        if (appData->BufferSize == 1)
 8001e90:	786b      	ldrb	r3, [r5, #1]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d1e3      	bne.n	8001e5e <OnRxData+0x5e>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8001e96:	686b      	ldr	r3, [r5, #4]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001edc <OnRxData+0xdc>)
 8001ea0:	7013      	strb	r3, [r2, #0]
          if (AppLedStateOn == RESET)
 8001ea2:	b94b      	cbnz	r3, 8001eb8 <OnRxData+0xb8>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <OnRxData+0xe0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	2003      	movs	r0, #3
 8001eac:	f00e fc86 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f000 f9b6 	bl	8002222 <BSP_LED_Off>
 8001eb6:	e7d2      	b.n	8001e5e <OnRxData+0x5e>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <OnRxData+0xe4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	2003      	movs	r0, #3
 8001ec0:	f00e fc7c 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f000 f9a2 	bl	800220e <BSP_LED_On>
}
 8001eca:	e7c8      	b.n	8001e5e <OnRxData+0x5e>
 8001ecc:	20000488 	.word	0x20000488
 8001ed0:	08013ee0 	.word	0x08013ee0
 8001ed4:	080140b4 	.word	0x080140b4
 8001ed8:	08013f14 	.word	0x08013f14
 8001edc:	200004b8 	.word	0x200004b8
 8001ee0:	08013f5c 	.word	0x08013f5c
 8001ee4:	08013f68 	.word	0x08013f68

08001ee8 <OnJoinRequest>:
  if (joinParams != NULL)
 8001ee8:	b340      	cbz	r0, 8001f3c <OnJoinRequest+0x54>
{
 8001eea:	b510      	push	{r4, lr}
 8001eec:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8001eee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8001ef2:	b9e3      	cbnz	r3, 8001f2e <OnJoinRequest+0x46>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8001ef4:	4812      	ldr	r0, [pc, #72]	@ (8001f40 <OnJoinRequest+0x58>)
 8001ef6:	f00e ffa5 	bl	8010e44 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 f991 	bl	8002222 <BSP_LED_Off>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8001f00:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <OnJoinRequest+0x5c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	4611      	mov	r1, r2
 8001f06:	2002      	movs	r0, #2
 8001f08:	f00e fc58 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8001f0c:	78a3      	ldrb	r3, [r4, #2]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d006      	beq.n	8001f20 <OnJoinRequest+0x38>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001f12:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <OnJoinRequest+0x60>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	4611      	mov	r1, r2
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f00e fc4f 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 8001f1e:	e00c      	b.n	8001f3a <OnJoinRequest+0x52>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <OnJoinRequest+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	4611      	mov	r1, r2
 8001f26:	2002      	movs	r0, #2
 8001f28:	f00e fc48 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 8001f2c:	e005      	b.n	8001f3a <OnJoinRequest+0x52>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001f2e:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <OnJoinRequest+0x68>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	4611      	mov	r1, r2
 8001f34:	2002      	movs	r0, #2
 8001f36:	f00e fc41 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 8001f3a:	bd10      	pop	{r4, pc}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000470 	.word	0x20000470
 8001f44:	08013f74 	.word	0x08013f74
 8001f48:	08013fac 	.word	0x08013fac
 8001f4c:	08013f8c 	.word	0x08013f8c
 8001f50:	08013fcc 	.word	0x08013fcc

08001f54 <SendTxData>:
{
 8001f54:	b510      	push	{r4, lr}
 8001f56:	b084      	sub	sp, #16
  UTIL_TIMER_Time_t nextTxIn = 0;
 8001f58:	2400      	movs	r4, #0
 8001f5a:	9403      	str	r4, [sp, #12]
  Current = GetCurrentLevel();
 8001f5c:	f7ff fbae 	bl	80016bc <GetCurrentLevel>
 8001f60:	4603      	mov	r3, r0
  AppData.Port = LORAWAN_USER_APP_PORT;
 8001f62:	4814      	ldr	r0, [pc, #80]	@ (8001fb4 <SendTxData+0x60>)
 8001f64:	2202      	movs	r2, #2
 8001f66:	7002      	strb	r2, [r0, #0]
  AppData.Buffer[i++] = (Current>>8) & 0xFF;
 8001f68:	6841      	ldr	r1, [r0, #4]
 8001f6a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8001f6e:	f881 c000 	strb.w	ip, [r1]
  AppData.Buffer[i++] = Current & 0xFF;
 8001f72:	6841      	ldr	r1, [r0, #4]
 8001f74:	704b      	strb	r3, [r1, #1]
  AppData.BufferSize = i;
 8001f76:	7042      	strb	r2, [r0, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8001f78:	4623      	mov	r3, r4
 8001f7a:	aa03      	add	r2, sp, #12
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	f004 fbf5 	bl	800676c <LmHandlerSend>
 8001f82:	b118      	cbz	r0, 8001f8c <SendTxData+0x38>
  else if (nextTxIn > 0)
 8001f84:	9b03      	ldr	r3, [sp, #12]
 8001f86:	b943      	cbnz	r3, 8001f9a <SendTxData+0x46>
}
 8001f88:	b004      	add	sp, #16
 8001f8a:	bd10      	pop	{r4, pc}
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <SendTxData+0x64>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4621      	mov	r1, r4
 8001f92:	4610      	mov	r0, r2
 8001f94:	f00e fc12 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 8001f98:	e7f6      	b.n	8001f88 <SendTxData+0x34>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8001f9a:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <SendTxData+0x68>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <SendTxData+0x6c>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4610      	mov	r0, r2
 8001fac:	f00e fc06 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 8001fb0:	e7ea      	b.n	8001f88 <SendTxData+0x34>
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	08013fe8 	.word	0x08013fe8
 8001fbc:	10624dd3 	.word	0x10624dd3
 8001fc0:	08013ff8 	.word	0x08013ff8

08001fc4 <OnJoinTimerLedEvent>:
{
 8001fc4:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED_RED) ;
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f000 f935 	bl	8002236 <BSP_LED_Toggle>
}
 8001fcc:	bd08      	pop	{r3, pc}
	...

08001fd0 <LoRaWAN_Init>:
{
 8001fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fd4:	b085      	sub	sp, #20
  BSP_LED_Init(LED_RED);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f000 f8f1 	bl	80021be <BSP_LED_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001fdc:	2400      	movs	r4, #0
 8001fde:	9402      	str	r4, [sp, #8]
 8001fe0:	2501      	movs	r5, #1
 8001fe2:	9501      	str	r5, [sp, #4]
 8001fe4:	9500      	str	r5, [sp, #0]
 8001fe6:	4b39      	ldr	r3, [pc, #228]	@ (80020cc <LoRaWAN_Init+0xfc>)
 8001fe8:	4622      	mov	r2, r4
 8001fea:	4621      	mov	r1, r4
 8001fec:	2002      	movs	r0, #2
 8001fee:	f00e fbe5 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001ff2:	9402      	str	r4, [sp, #8]
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	2602      	movs	r6, #2
 8001ffa:	9600      	str	r6, [sp, #0]
 8001ffc:	4b34      	ldr	r3, [pc, #208]	@ (80020d0 <LoRaWAN_Init+0x100>)
 8001ffe:	4622      	mov	r2, r4
 8002000:	4621      	mov	r1, r4
 8002002:	4630      	mov	r0, r6
 8002004:	f00e fbda 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8002008:	9402      	str	r4, [sp, #8]
 800200a:	9501      	str	r5, [sp, #4]
 800200c:	9500      	str	r5, [sp, #0]
 800200e:	4b31      	ldr	r3, [pc, #196]	@ (80020d4 <LoRaWAN_Init+0x104>)
 8002010:	4622      	mov	r2, r4
 8002012:	4621      	mov	r1, r4
 8002014:	4630      	mov	r0, r6
 8002016:	f00e fbd1 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800201a:	f8df 90bc 	ldr.w	r9, [pc, #188]	@ 80020d8 <LoRaWAN_Init+0x108>
 800201e:	9400      	str	r4, [sp, #0]
 8002020:	4b2e      	ldr	r3, [pc, #184]	@ (80020dc <LoRaWAN_Init+0x10c>)
 8002022:	4622      	mov	r2, r4
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	4648      	mov	r0, r9
 800202a:	f00e fead 	bl	8010d88 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800202e:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 80020e0 <LoRaWAN_Init+0x110>
 8002032:	9400      	str	r4, [sp, #0]
 8002034:	4b2b      	ldr	r3, [pc, #172]	@ (80020e4 <LoRaWAN_Init+0x114>)
 8002036:	4622      	mov	r2, r4
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	4640      	mov	r0, r8
 800203e:	f00e fea3 	bl	8010d88 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002042:	4f29      	ldr	r7, [pc, #164]	@ (80020e8 <LoRaWAN_Init+0x118>)
 8002044:	9400      	str	r4, [sp, #0]
 8002046:	4b29      	ldr	r3, [pc, #164]	@ (80020ec <LoRaWAN_Init+0x11c>)
 8002048:	462a      	mov	r2, r5
 800204a:	f04f 31ff 	mov.w	r1, #4294967295
 800204e:	4638      	mov	r0, r7
 8002050:	f00e fe9a 	bl	8010d88 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 8002054:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002058:	4648      	mov	r0, r9
 800205a:	f00e ff93 	bl	8010f84 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800205e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002062:	4640      	mov	r0, r8
 8002064:	f00e ff8e 	bl	8010f84 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002068:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800206c:	4638      	mov	r0, r7
 800206e:	f00e ff89 	bl	8010f84 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002072:	4a1f      	ldr	r2, [pc, #124]	@ (80020f0 <LoRaWAN_Init+0x120>)
 8002074:	4621      	mov	r1, r4
 8002076:	4628      	mov	r0, r5
 8002078:	f00e fd86 	bl	8010b88 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800207c:	4a1d      	ldr	r2, [pc, #116]	@ (80020f4 <LoRaWAN_Init+0x124>)
 800207e:	4621      	mov	r1, r4
 8002080:	4630      	mov	r0, r6
 8002082:	f00e fd81 	bl	8010b88 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002086:	f000 f849 	bl	800211c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 800208a:	481b      	ldr	r0, [pc, #108]	@ (80020f8 <LoRaWAN_Init+0x128>)
 800208c:	f004 fd28 	bl	8006ae0 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002090:	481a      	ldr	r0, [pc, #104]	@ (80020fc <LoRaWAN_Init+0x12c>)
 8002092:	f004 f9cd 	bl	8006430 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002096:	4638      	mov	r0, r7
 8002098:	f00e ff2e 	bl	8010ef8 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 800209c:	4628      	mov	r0, r5
 800209e:	f004 fb1b 	bl	80066d8 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80020a2:	4d17      	ldr	r5, [pc, #92]	@ (8002100 <LoRaWAN_Init+0x130>)
 80020a4:	9400      	str	r4, [sp, #0]
 80020a6:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <LoRaWAN_Init+0x134>)
 80020a8:	4622      	mov	r2, r4
 80020aa:	f04f 31ff 	mov.w	r1, #4294967295
 80020ae:	4628      	mov	r0, r5
 80020b0:	f00e fe6a 	bl	8010d88 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 80020b4:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80020b8:	4628      	mov	r0, r5
 80020ba:	f00e ff63 	bl	8010f84 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 80020be:	4628      	mov	r0, r5
 80020c0:	f00e ff1a 	bl	8010ef8 <UTIL_TIMER_Start>
}
 80020c4:	b005      	add	sp, #20
 80020c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020ca:	bf00      	nop
 80020cc:	08014018 	.word	0x08014018
 80020d0:	08014038 	.word	0x08014038
 80020d4:	08014058 	.word	0x08014058
 80020d8:	200004a0 	.word	0x200004a0
 80020dc:	08001d39 	.word	0x08001d39
 80020e0:	20000488 	.word	0x20000488
 80020e4:	08001d3b 	.word	0x08001d3b
 80020e8:	20000470 	.word	0x20000470
 80020ec:	08001fc5 	.word	0x08001fc5
 80020f0:	080065e1 	.word	0x080065e1
 80020f4:	08001f55 	.word	0x08001f55
 80020f8:	20000018 	.word	0x20000018
 80020fc:	20000008 	.word	0x20000008
 8002100:	200005b0 	.word	0x200005b0
 8002104:	08001ddd 	.word	0x08001ddd

08002108 <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 8002108:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 800210c:	d000      	beq.n	8002110 <HAL_GPIO_EXTI_Callback+0x8>
 800210e:	4770      	bx	lr
{
 8002110:	b508      	push	{r3, lr}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002112:	2100      	movs	r1, #0
 8002114:	2002      	movs	r0, #2
 8002116:	f00e fc7b 	bl	8010a10 <UTIL_SEQ_SetTask>
}
 800211a:	bd08      	pop	{r3, pc}

0800211c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <LoraInfo_Init+0x1c>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002122:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002124:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002126:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8002128:	2220      	movs	r2, #32
 800212a:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 800212c:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8002130:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8002132:	2203      	movs	r2, #3
 8002134:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002136:	4770      	bx	lr
 8002138:	200005c8 	.word	0x200005c8

0800213c <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 800213c:	4800      	ldr	r0, [pc, #0]	@ (8002140 <LoraInfo_GetPtr+0x4>)
 800213e:	4770      	bx	lr
 8002140:	200005c8 	.word	0x200005c8

08002144 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002144:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8002146:	f000 f87f 	bl	8002248 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800214a:	bd08      	pop	{r3, pc}

0800214c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800214c:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800214e:	f000 f8af 	bl	80022b0 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002152:	bd08      	pop	{r3, pc}

08002154 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002154:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8002156:	f000 f8e7 	bl	8002328 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800215a:	bd08      	pop	{r3, pc}

0800215c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800215c:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800215e:	f000 f8e5 	bl	800232c <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002162:	bd08      	pop	{r3, pc}

08002164 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002164:	b508      	push	{r3, lr}
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8002166:	f000 f8e3 	bl	8002330 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800216a:	bd08      	pop	{r3, pc}

0800216c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800216c:	480d      	ldr	r0, [pc, #52]	@ (80021a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800216e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002170:	f000 f8e0 	bl	8002334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002174:	480c      	ldr	r0, [pc, #48]	@ (80021a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002176:	490d      	ldr	r1, [pc, #52]	@ (80021ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002178:	4a0d      	ldr	r2, [pc, #52]	@ (80021b0 <LoopForever+0xe>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800218c:	4c0a      	ldr	r4, [pc, #40]	@ (80021b8 <LoopForever+0x16>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800219a:	f00f fe6b 	bl	8011e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219e:	f7ff f8fd 	bl	800139c <main>

080021a2 <LoopForever>:

LoopForever:
    b LoopForever
 80021a2:	e7fe      	b.n	80021a2 <LoopForever>
  ldr   r0, =_estack
 80021a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 80021b0:	08014e38 	.word	0x08014e38
  ldr r2, =_sbss
 80021b4:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 80021b8:	20001d7c 	.word	0x20001d7c

080021bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC_IRQHandler>

080021be <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80021be:	b570      	push	{r4, r5, r6, lr}
 80021c0:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80021c2:	2400      	movs	r4, #0
 80021c4:	9401      	str	r4, [sp, #4]
 80021c6:	9402      	str	r4, [sp, #8]
 80021c8:	9403      	str	r4, [sp, #12]
 80021ca:	9404      	str	r4, [sp, #16]
 80021cc:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021d4:	f042 0202 	orr.w	r2, r2, #2
 80021d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80021e2:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80021e4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80021e8:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	2601      	movs	r6, #1
 80021ec:	9602      	str	r6, [sp, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ee:	2302      	movs	r3, #2
 80021f0:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80021f2:	a901      	add	r1, sp, #4
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f8:	f001 f874 	bl	80032e4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80021fc:	4632      	mov	r2, r6
 80021fe:	4629      	mov	r1, r5
 8002200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002204:	f001 f9be 	bl	8003584 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002208:	4620      	mov	r0, r4
 800220a:	b006      	add	sp, #24
 800220c:	bd70      	pop	{r4, r5, r6, pc}

0800220e <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800220e:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8002210:	2200      	movs	r2, #0
 8002212:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800221a:	f001 f9b3 	bl	8003584 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 800221e:	2000      	movs	r0, #0
 8002220:	bd08      	pop	{r3, pc}

08002222 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002222:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002224:	2201      	movs	r2, #1
 8002226:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800222a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800222e:	f001 f9a9 	bl	8003584 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002232:	2000      	movs	r0, #0
 8002234:	bd08      	pop	{r3, pc}

08002236 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002236:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002238:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800223c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002240:	f001 f9a5 	bl	800358e <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 8002244:	2000      	movs	r0, #0
 8002246:	bd08      	pop	{r3, pc}

08002248 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800224c:	2400      	movs	r4, #0
 800224e:	9401      	str	r4, [sp, #4]
 8002250:	9402      	str	r4, [sp, #8]
 8002252:	9403      	str	r4, [sp, #12]
 8002254:	9404      	str	r4, [sp, #16]
 8002256:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800225c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800226c:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800226e:	2510      	movs	r5, #16
 8002270:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002272:	2301      	movs	r3, #1
 8002274:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800227a:	a901      	add	r1, sp, #4
 800227c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002280:	f001 f830 	bl	80032e4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002284:	2620      	movs	r6, #32
 8002286:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002288:	a901      	add	r1, sp, #4
 800228a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800228e:	f001 f829 	bl	80032e4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002292:	4622      	mov	r2, r4
 8002294:	4631      	mov	r1, r6
 8002296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800229a:	f001 f973 	bl	8003584 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800229e:	4622      	mov	r2, r4
 80022a0:	4629      	mov	r1, r5
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a6:	f001 f96d 	bl	8003584 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80022aa:	4620      	mov	r0, r4
 80022ac:	b006      	add	sp, #24
 80022ae:	bd70      	pop	{r4, r5, r6, pc}

080022b0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80022b0:	b508      	push	{r3, lr}
  switch (Config)
 80022b2:	2803      	cmp	r0, #3
 80022b4:	d80f      	bhi.n	80022d6 <BSP_RADIO_ConfigRFSwitch+0x26>
 80022b6:	e8df f000 	tbb	[pc, r0]
 80022ba:	1002      	.short	0x1002
 80022bc:	2a1d      	.short	0x2a1d
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	2110      	movs	r1, #16
 80022c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022c6:	f001 f95d 	bl	8003584 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2120      	movs	r1, #32
 80022ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022d2:	f001 f957 	bl	8003584 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 80022d6:	2000      	movs	r0, #0
 80022d8:	bd08      	pop	{r3, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80022da:	2201      	movs	r2, #1
 80022dc:	2110      	movs	r1, #16
 80022de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e2:	f001 f94f 	bl	8003584 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80022e6:	2200      	movs	r2, #0
 80022e8:	2120      	movs	r1, #32
 80022ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ee:	f001 f949 	bl	8003584 <HAL_GPIO_WritePin>
      break;
 80022f2:	e7f0      	b.n	80022d6 <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80022f4:	2201      	movs	r2, #1
 80022f6:	2110      	movs	r1, #16
 80022f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022fc:	f001 f942 	bl	8003584 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002300:	2201      	movs	r2, #1
 8002302:	2120      	movs	r1, #32
 8002304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002308:	f001 f93c 	bl	8003584 <HAL_GPIO_WritePin>
      break;
 800230c:	e7e3      	b.n	80022d6 <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800230e:	2200      	movs	r2, #0
 8002310:	2110      	movs	r1, #16
 8002312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002316:	f001 f935 	bl	8003584 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800231a:	2201      	movs	r2, #1
 800231c:	2120      	movs	r1, #32
 800231e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002322:	f001 f92f 	bl	8003584 <HAL_GPIO_WritePin>
      break;
 8002326:	e7d6      	b.n	80022d6 <BSP_RADIO_ConfigRFSwitch+0x26>

08002328 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_HP;
}
 8002328:	2002      	movs	r0, #2
 800232a:	4770      	bx	lr

0800232c <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 800232c:	2001      	movs	r0, #1
 800232e:	4770      	bx	lr

08002330 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002330:	2001      	movs	r0, #1
 8002332:	4770      	bx	lr

08002334 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002334:	4770      	bx	lr
	...

08002338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233a:	2003      	movs	r0, #3
 800233c:	f000 fd36 	bl	8002dac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002340:	f001 fac6 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_Init+0x28>)
 8002346:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002348:	200f      	movs	r0, #15
 800234a:	f7ff fa11 	bl	8001770 <HAL_InitTick>
 800234e:	b110      	cbz	r0, 8002356 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002350:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002352:	4620      	mov	r0, r4
 8002354:	bd10      	pop	{r4, pc}
 8002356:	4604      	mov	r4, r0
    HAL_MspInit();
 8002358:	f7ff f8d2 	bl	8001500 <HAL_MspInit>
 800235c:	e7f9      	b.n	8002352 <HAL_Init+0x1a>
 800235e:	bf00      	nop
 8002360:	2000004c 	.word	0x2000004c

08002364 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_IncTick+0x10>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4a03      	ldr	r2, [pc, #12]	@ (8002378 <HAL_IncTick+0x14>)
 800236a:	6811      	ldr	r1, [r2, #0]
 800236c:	440b      	add	r3, r1
 800236e:	6013      	str	r3, [r2, #0]
}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000050 	.word	0x20000050
 8002378:	200005d8 	.word	0x200005d8

0800237c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800237c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002380:	6913      	ldr	r3, [r2, #16]
 8002382:	f023 0302 	bic.w	r3, r3, #2
 8002386:	6113      	str	r3, [r2, #16]
}
 8002388:	4770      	bx	lr

0800238a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800238a:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800238e:	6913      	ldr	r3, [r2, #16]
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	6113      	str	r3, [r2, #16]
}
 8002396:	4770      	bx	lr

08002398 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002398:	4b01      	ldr	r3, [pc, #4]	@ (80023a0 <HAL_GetUIDw0+0x8>)
 800239a:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
 800239e:	4770      	bx	lr
 80023a0:	1fff7000 	.word	0x1fff7000

080023a4 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 80023a4:	4b01      	ldr	r3, [pc, #4]	@ (80023ac <HAL_GetUIDw1+0x8>)
 80023a6:	f8d3 0594 	ldr.w	r0, [r3, #1428]	@ 0x594
 80023aa:	4770      	bx	lr
 80023ac:	1fff7000 	.word	0x1fff7000

080023b0 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80023b0:	4b01      	ldr	r3, [pc, #4]	@ (80023b8 <HAL_GetUIDw2+0x8>)
 80023b2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	@ 0x598
 80023b6:	4770      	bx	lr
 80023b8:	1fff7000 	.word	0x1fff7000

080023bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80023c4:	2800      	cmp	r0, #0
 80023c6:	f000 8128 	beq.w	800261a <HAL_ADC_Init+0x25e>
 80023ca:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023cc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80023ce:	b1bb      	cbz	r3, 8002400 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023d0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023d2:	6893      	ldr	r3, [r2, #8]
 80023d4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80023d8:	d11f      	bne.n	800241a <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 80023da:	6893      	ldr	r3, [r2, #8]
 80023dc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023e0:	f023 0317 	bic.w	r3, r3, #23
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002620 <HAL_ADC_Init+0x264>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	099b      	lsrs	r3, r3, #6
 80023f0:	4a8c      	ldr	r2, [pc, #560]	@ (8002624 <HAL_ADC_Init+0x268>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	099b      	lsrs	r3, r3, #6
 80023f8:	3301      	adds	r3, #1
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80023fe:	e009      	b.n	8002414 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002400:	f7fe fe5c 	bl	80010bc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002404:	2300      	movs	r3, #0
 8002406:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002408:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800240c:	e7e0      	b.n	80023d0 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800240e:	9b01      	ldr	r3, [sp, #4]
 8002410:	3b01      	subs	r3, #1
 8002412:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002414:	9b01      	ldr	r3, [sp, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f9      	bne.n	800240e <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800241a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800241c:	6893      	ldr	r3, [r2, #8]
 800241e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002422:	d14b      	bne.n	80024bc <HAL_ADC_Init+0x100>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002424:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002426:	f043 0310 	orr.w	r3, r3, #16
 800242a:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002434:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002436:	6893      	ldr	r3, [r2, #8]
 8002438:	f013 0304 	ands.w	r3, r3, #4
 800243c:	d000      	beq.n	8002440 <HAL_ADC_Init+0x84>
 800243e:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002440:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002442:	f011 0f10 	tst.w	r1, #16
 8002446:	f040 80e1 	bne.w	800260c <HAL_ADC_Init+0x250>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 80de 	bne.w	800260c <HAL_ADC_Init+0x250>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002450:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002452:	f421 7181 	bic.w	r1, r1, #258	@ 0x102
 8002456:	f041 0102 	orr.w	r1, r1, #2
 800245a:	65a1      	str	r1, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800245c:	6891      	ldr	r1, [r2, #8]
 800245e:	f011 0f01 	tst.w	r1, #1
 8002462:	d138      	bne.n	80024d6 <HAL_ADC_Init+0x11a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002464:	68d1      	ldr	r1, [r2, #12]
 8002466:	f021 0118 	bic.w	r1, r1, #24
 800246a:	68a5      	ldr	r5, [r4, #8]
 800246c:	4329      	orrs	r1, r5
 800246e:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002470:	6862      	ldr	r2, [r4, #4]
 8002472:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002476:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002478:	ea42 0c01 	orr.w	ip, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800247c:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 8002480:	2901      	cmp	r1, #1
 8002482:	d01d      	beq.n	80024c0 <HAL_ADC_Init+0x104>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002484:	6821      	ldr	r1, [r4, #0]
 8002486:	690d      	ldr	r5, [r1, #16]
 8002488:	4a67      	ldr	r2, [pc, #412]	@ (8002628 <HAL_ADC_Init+0x26c>)
 800248a:	402a      	ands	r2, r5
 800248c:	ea42 020c 	orr.w	r2, r2, ip
 8002490:	610a      	str	r2, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002492:	6862      	ldr	r2, [r4, #4]
 8002494:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 8002498:	d01e      	beq.n	80024d8 <HAL_ADC_Init+0x11c>
 800249a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800249e:	d01b      	beq.n	80024d8 <HAL_ADC_Init+0x11c>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80024a0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80024a4:	d018      	beq.n	80024d8 <HAL_ADC_Init+0x11c>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80024a6:	4d61      	ldr	r5, [pc, #388]	@ (800262c <HAL_ADC_Init+0x270>)
 80024a8:	f8d5 1708 	ldr.w	r1, [r5, #1800]	@ 0x708
 80024ac:	f421 1170 	bic.w	r1, r1, #3932160	@ 0x3c0000
 80024b0:	f402 1270 	and.w	r2, r2, #3932160	@ 0x3c0000
 80024b4:	430a      	orrs	r2, r1
 80024b6:	f8c5 2708 	str.w	r2, [r5, #1800]	@ 0x708
 80024ba:	e00d      	b.n	80024d8 <HAL_ADC_Init+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024bc:	2000      	movs	r0, #0
 80024be:	e7ba      	b.n	8002436 <HAL_ADC_Init+0x7a>
                     hadc->Init.Oversampling.Ratio         |
 80024c0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024c2:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 80024c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80024c6:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 80024c8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80024ca:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80024cc:	ea4c 0202 	orr.w	r2, ip, r2
 80024d0:	f042 0c01 	orr.w	ip, r2, #1
 80024d4:	e7d6      	b.n	8002484 <HAL_ADC_Init+0xc8>
  uint32_t tmpCFGR2 = 0UL;
 80024d6:	469c      	mov	ip, r3
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024d8:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024da:	7e62      	ldrb	r2, [r4, #25]
 80024dc:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024de:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024e2:	7ea5      	ldrb	r5, [r4, #26]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024e4:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80024ea:	b109      	cbz	r1, 80024f0 <HAL_ADC_Init+0x134>
 80024ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024f0:	430a      	orrs	r2, r1
                 hadc->Init.DataAlign                                           |
 80024f2:	68e1      	ldr	r1, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024f4:	430a      	orrs	r2, r1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024f6:	6921      	ldr	r1, [r4, #16]
 80024f8:	2900      	cmp	r1, #0
 80024fa:	db49      	blt.n	8002590 <HAL_ADC_Init+0x1d4>
 80024fc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
                 hadc->Init.DataAlign                                           |
 8002500:	430a      	orrs	r2, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002502:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002506:	ea42 0241 	orr.w	r2, r2, r1, lsl #1

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800250a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800250e:	2901      	cmp	r1, #1
 8002510:	d041      	beq.n	8002596 <HAL_ADC_Init+0x1da>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002512:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002514:	b121      	cbz	r1, 8002520 <HAL_ADC_Init+0x164>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002516:	f401 71e0 	and.w	r1, r1, #448	@ 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 800251a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800251c:	4329      	orrs	r1, r5
 800251e:	430a      	orrs	r2, r1
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002520:	6825      	ldr	r5, [r4, #0]
 8002522:	68e9      	ldr	r1, [r5, #12]
 8002524:	f421 31fe 	bic.w	r1, r1, #130048	@ 0x1fc00
 8002528:	f421 71f3 	bic.w	r1, r1, #486	@ 0x1e6
 800252c:	4311      	orrs	r1, r2
 800252e:	60e9      	str	r1, [r5, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002530:	6825      	ldr	r5, [r4, #0]
 8002532:	692e      	ldr	r6, [r5, #16]
 8002534:	493e      	ldr	r1, [pc, #248]	@ (8002630 <HAL_ADC_Init+0x274>)
 8002536:	4031      	ands	r1, r6
 8002538:	ea41 010c 	orr.w	r1, r1, ip
 800253c:	6129      	str	r1, [r5, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800253e:	6826      	ldr	r6, [r4, #0]
 8002540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 8002542:	6975      	ldr	r5, [r6, #20]
 8002544:	f025 0c07 	bic.w	ip, r5, #7
 8002548:	ea41 010c 	orr.w	r1, r1, ip
 800254c:	6171      	str	r1, [r6, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800254e:	6825      	ldr	r5, [r4, #0]
 8002550:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8002552:	6969      	ldr	r1, [r5, #20]
 8002554:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002558:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 800255c:	6169      	str	r1, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800255e:	6921      	ldr	r1, [r4, #16]
 8002560:	bb31      	cbnz	r1, 80025b0 <HAL_ADC_Init+0x1f4>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002562:	6821      	ldr	r1, [r4, #0]
 8002564:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8002566:	f063 030f 	orn	r3, r3, #15
 800256a:	628b      	str	r3, [r1, #40]	@ 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	68d9      	ldr	r1, [r3, #12]
 8002570:	4b30      	ldr	r3, [pc, #192]	@ (8002634 <HAL_ADC_Init+0x278>)
 8002572:	400b      	ands	r3, r1
 8002574:	4293      	cmp	r3, r2
 8002576:	d040      	beq.n	80025fa <HAL_ADC_Init+0x23e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002578:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800257a:	f023 0312 	bic.w	r3, r3, #18
 800257e:	f043 0310 	orr.w	r3, r3, #16
 8002582:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002584:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800258c:	2001      	movs	r0, #1
 800258e:	e042      	b.n	8002616 <HAL_ADC_Init+0x25a>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002590:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002594:	e7b4      	b.n	8002500 <HAL_ADC_Init+0x144>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002596:	b915      	cbnz	r5, 800259e <HAL_ADC_Init+0x1e2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002598:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800259c:	e7b9      	b.n	8002512 <HAL_ADC_Init+0x156>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80025a0:	f041 0120 	orr.w	r1, r1, #32
 80025a4:	65a1      	str	r1, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a6:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80025a8:	f041 0101 	orr.w	r1, r1, #1
 80025ac:	65e1      	str	r1, [r4, #92]	@ 0x5c
 80025ae:	e7b0      	b.n	8002512 <HAL_ADC_Init+0x156>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80025b4:	d1da      	bne.n	800256c <HAL_ADC_Init+0x1b0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80025b6:	2b07      	cmp	r3, #7
 80025b8:	d808      	bhi.n	80025cc <HAL_ADC_Init+0x210>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80025ba:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80025bc:	009d      	lsls	r5, r3, #2
 80025be:	40e9      	lsrs	r1, r5
 80025c0:	f001 010f 	and.w	r1, r1, #15
 80025c4:	290f      	cmp	r1, #15
 80025c6:	d001      	beq.n	80025cc <HAL_ADC_Init+0x210>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80025c8:	3301      	adds	r3, #1
 80025ca:	e7f4      	b.n	80025b6 <HAL_ADC_Init+0x1fa>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d00e      	beq.n	80025ee <HAL_ADC_Init+0x232>
        MODIFY_REG(hadc->Instance->CHSELR,
 80025d0:	6825      	ldr	r5, [r4, #0]
 80025d2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80025d4:	69e3      	ldr	r3, [r4, #28]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	f003 031c 	and.w	r3, r3, #28
 80025de:	f06f 010f 	mvn.w	r1, #15
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80025e8:	430b      	orrs	r3, r1
 80025ea:	62ab      	str	r3, [r5, #40]	@ 0x28
 80025ec:	e7be      	b.n	800256c <HAL_ADC_Init+0x1b0>
        SET_BIT(hadc->Instance->CHSELR,
 80025ee:	6821      	ldr	r1, [r4, #0]
 80025f0:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80025f2:	f063 030f 	orn	r3, r3, #15
 80025f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80025f8:	e7b8      	b.n	800256c <HAL_ADC_Init+0x1b0>
      ADC_CLEAR_ERRORCODE(hadc);
 80025fa:	2300      	movs	r3, #0
 80025fc:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80025fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002600:	f023 0303 	bic.w	r3, r3, #3
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	65a3      	str	r3, [r4, #88]	@ 0x58
 800260a:	e004      	b.n	8002616 <HAL_ADC_Init+0x25a>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800260e:	f043 0310 	orr.w	r3, r3, #16
 8002612:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002614:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002616:	b002      	add	sp, #8
 8002618:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800261a:	2001      	movs	r0, #1
 800261c:	e7fb      	b.n	8002616 <HAL_ADC_Init+0x25a>
 800261e:	bf00      	nop
 8002620:	2000004c 	.word	0x2000004c
 8002624:	053e2d63 	.word	0x053e2d63
 8002628:	1ffffc02 	.word	0x1ffffc02
 800262c:	40012000 	.word	0x40012000
 8002630:	dffffc02 	.word	0xdffffc02
 8002634:	833fffe7 	.word	0x833fffe7

08002638 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	4604      	mov	r4, r0
 800263c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800263e:	6946      	ldr	r6, [r0, #20]
 8002640:	2e08      	cmp	r6, #8
 8002642:	d005      	beq.n	8002650 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002644:	6803      	ldr	r3, [r0, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f013 0f01 	tst.w	r3, #1
 800264c:	d11e      	bne.n	800268c <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800264e:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002650:	f7ff f890 	bl	8001774 <HAL_GetTick>
 8002654:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4232      	tst	r2, r6
 800265c:	d11c      	bne.n	8002698 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800265e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002662:	d0f8      	beq.n	8002656 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002664:	f7ff f886 	bl	8001774 <HAL_GetTick>
 8002668:	1bc3      	subs	r3, r0, r7
 800266a:	42ab      	cmp	r3, r5
 800266c:	d801      	bhi.n	8002672 <HAL_ADC_PollForConversion+0x3a>
 800266e:	2d00      	cmp	r5, #0
 8002670:	d1f1      	bne.n	8002656 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4233      	tst	r3, r6
 8002678:	d1ed      	bne.n	8002656 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800267a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	65a3      	str	r3, [r4, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8002682:	2300      	movs	r3, #0
 8002684:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002688:	2003      	movs	r0, #3
 800268a:	e028      	b.n	80026de <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800268c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800268e:	f043 0320 	orr.w	r3, r3, #32
 8002692:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 8002694:	2001      	movs	r0, #1
 8002696:	e022      	b.n	80026de <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002698:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800269a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800269e:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80026a6:	d115      	bne.n	80026d4 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026a8:	7ea2      	ldrb	r2, [r4, #26]
 80026aa:	b99a      	cbnz	r2, 80026d4 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f012 0f08 	tst.w	r2, #8
 80026b2:	d00f      	beq.n	80026d4 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	f012 0f04 	tst.w	r2, #4
 80026ba:	d111      	bne.n	80026e0 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	f022 020c 	bic.w	r2, r2, #12
 80026c2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80026c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80026c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80026d4:	7e20      	ldrb	r0, [r4, #24]
 80026d6:	b960      	cbnz	r0, 80026f2 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	220c      	movs	r2, #12
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80026de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80026e2:	f043 0320 	orr.w	r3, r3, #32
 80026e6:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80026f0:	e7f0      	b.n	80026d4 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80026f2:	2000      	movs	r0, #0
 80026f4:	e7f3      	b.n	80026de <HAL_ADC_PollForConversion+0xa6>

080026f6 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80026f6:	6803      	ldr	r3, [r0, #0]
 80026f8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80026fa:	4770      	bx	lr

080026fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80026fc:	b470      	push	{r4, r5, r6}
 80026fe:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002700:	2200      	movs	r2, #0
 8002702:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002704:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002706:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 800270a:	2a01      	cmp	r2, #1
 800270c:	f000 8103 	beq.w	8002916 <HAL_ADC_ConfigChannel+0x21a>
 8002710:	4603      	mov	r3, r0
 8002712:	2201      	movs	r2, #1
 8002714:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002718:	6802      	ldr	r2, [r0, #0]
 800271a:	6890      	ldr	r0, [r2, #8]
 800271c:	f010 0f04 	tst.w	r0, #4
 8002720:	d00a      	beq.n	8002738 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002722:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002724:	f042 0220 	orr.w	r2, r2, #32
 8002728:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800272a:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
}
 8002732:	b003      	add	sp, #12
 8002734:	bc70      	pop	{r4, r5, r6}
 8002736:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002738:	6848      	ldr	r0, [r1, #4]
 800273a:	2802      	cmp	r0, #2
 800273c:	f000 809c 	beq.w	8002878 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002740:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8002744:	d027      	beq.n	8002796 <HAL_ADC_ConfigChannel+0x9a>
 8002746:	4d75      	ldr	r5, [pc, #468]	@ (800291c <HAL_ADC_ConfigChannel+0x220>)
 8002748:	42ac      	cmp	r4, r5
 800274a:	d024      	beq.n	8002796 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800274c:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800274e:	f000 001f 	and.w	r0, r0, #31
 8002752:	250f      	movs	r5, #15
 8002754:	4085      	lsls	r5, r0
 8002756:	ea24 0505 	bic.w	r5, r4, r5
 800275a:	680c      	ldr	r4, [r1, #0]
 800275c:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002760:	2e00      	cmp	r6, #0
 8002762:	d131      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0xcc>
 8002764:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002768:	4084      	lsls	r4, r0
 800276a:	432c      	orrs	r4, r5
 800276c:	661c      	str	r4, [r3, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800276e:	684c      	ldr	r4, [r1, #4]
 8002770:	08a0      	lsrs	r0, r4, #2
 8002772:	3001      	adds	r0, #1
 8002774:	69dd      	ldr	r5, [r3, #28]
 8002776:	42a8      	cmp	r0, r5
 8002778:	d813      	bhi.n	80027a2 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800277a:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800277c:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 800277e:	f004 041f 	and.w	r4, r4, #31
 8002782:	260f      	movs	r6, #15
 8002784:	40a6      	lsls	r6, r4
 8002786:	ea20 0006 	bic.w	r0, r0, r6
 800278a:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800278e:	40a5      	lsls	r5, r4
 8002790:	4328      	orrs	r0, r5
 8002792:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8002794:	e005      	b.n	80027a2 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002796:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002798:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 800279a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800279e:	4320      	orrs	r0, r4
 80027a0:	6290      	str	r0, [r2, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027a2:	681c      	ldr	r4, [r3, #0]
 80027a4:	680d      	ldr	r5, [r1, #0]
 80027a6:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 80027a8:	6960      	ldr	r0, [r4, #20]
 80027aa:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 80027ae:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 80027b2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80027b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027ba:	4302      	orrs	r2, r0
 80027bc:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027be:	680a      	ldr	r2, [r1, #0]
 80027c0:	2a00      	cmp	r2, #0
 80027c2:	db09      	blt.n	80027d8 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c4:	2000      	movs	r0, #0
 80027c6:	e7b1      	b.n	800272c <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027cc:	b114      	cbz	r4, 80027d4 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80027ce:	fab4 f484 	clz	r4, r4
 80027d2:	e7c9      	b.n	8002768 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80027d4:	2420      	movs	r4, #32
 80027d6:	e7c7      	b.n	8002768 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027d8:	4951      	ldr	r1, [pc, #324]	@ (8002920 <HAL_ADC_ConfigChannel+0x224>)
 80027da:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
 80027de:	f000 71e0 	and.w	r1, r0, #29360128	@ 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027e2:	4c50      	ldr	r4, [pc, #320]	@ (8002924 <HAL_ADC_ConfigChannel+0x228>)
 80027e4:	42a2      	cmp	r2, r4
 80027e6:	d007      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027e8:	4c4f      	ldr	r4, [pc, #316]	@ (8002928 <HAL_ADC_ConfigChannel+0x22c>)
 80027ea:	42a2      	cmp	r2, r4
 80027ec:	d026      	beq.n	800283c <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027ee:	4c4f      	ldr	r4, [pc, #316]	@ (800292c <HAL_ADC_ConfigChannel+0x230>)
 80027f0:	42a2      	cmp	r2, r4
 80027f2:	d032      	beq.n	800285a <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f4:	2000      	movs	r0, #0
 80027f6:	e799      	b.n	800272c <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027f8:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 80027fc:	d1f4      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027fe:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002802:	4847      	ldr	r0, [pc, #284]	@ (8002920 <HAL_ADC_ConfigChannel+0x224>)
 8002804:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8002808:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800280c:	4311      	orrs	r1, r2
 800280e:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002812:	4a47      	ldr	r2, [pc, #284]	@ (8002930 <HAL_ADC_ConfigChannel+0x234>)
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	0992      	lsrs	r2, r2, #6
 8002818:	4946      	ldr	r1, [pc, #280]	@ (8002934 <HAL_ADC_ConfigChannel+0x238>)
 800281a:	fba1 1202 	umull	r1, r2, r1, r2
 800281e:	0992      	lsrs	r2, r2, #6
 8002820:	3201      	adds	r2, #1
 8002822:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800282a:	e002      	b.n	8002832 <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 800282c:	9a01      	ldr	r2, [sp, #4]
 800282e:	3a01      	subs	r2, #1
 8002830:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002832:	9a01      	ldr	r2, [sp, #4]
 8002834:	2a00      	cmp	r2, #0
 8002836:	d1f9      	bne.n	800282c <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002838:	2000      	movs	r0, #0
 800283a:	e777      	b.n	800272c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800283c:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 8002840:	d1d5      	bne.n	80027ee <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002842:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8002846:	4836      	ldr	r0, [pc, #216]	@ (8002920 <HAL_ADC_ConfigChannel+0x224>)
 8002848:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 800284c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002850:	4311      	orrs	r1, r2
 8002852:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002856:	2000      	movs	r0, #0
}
 8002858:	e768      	b.n	800272c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800285a:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 800285e:	d158      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002860:	f441 0280 	orr.w	r2, r1, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002864:	482e      	ldr	r0, [pc, #184]	@ (8002920 <HAL_ADC_ConfigChannel+0x224>)
 8002866:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 800286a:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 800286e:	430a      	orrs	r2, r1
 8002870:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002874:	2000      	movs	r0, #0
}
 8002876:	e759      	b.n	800272c <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002878:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 800287c:	d002      	beq.n	8002884 <HAL_ADC_ConfigChannel+0x188>
 800287e:	4827      	ldr	r0, [pc, #156]	@ (800291c <HAL_ADC_ConfigChannel+0x220>)
 8002880:	4284      	cmp	r4, r0
 8002882:	d106      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002884:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002886:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8002888:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800288c:	ea20 0004 	bic.w	r0, r0, r4
 8002890:	6290      	str	r0, [r2, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002892:	680a      	ldr	r2, [r1, #0]
 8002894:	2a00      	cmp	r2, #0
 8002896:	db01      	blt.n	800289c <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002898:	2000      	movs	r0, #0
 800289a:	e747      	b.n	800272c <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800289c:	4920      	ldr	r1, [pc, #128]	@ (8002920 <HAL_ADC_ConfigChannel+0x224>)
 800289e:	f8d1 1708 	ldr.w	r1, [r1, #1800]	@ 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028a2:	4820      	ldr	r0, [pc, #128]	@ (8002924 <HAL_ADC_ConfigChannel+0x228>)
 80028a4:	4282      	cmp	r2, r0
 80028a6:	d007      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80028a8:	481f      	ldr	r0, [pc, #124]	@ (8002928 <HAL_ADC_ConfigChannel+0x22c>)
 80028aa:	4282      	cmp	r2, r0
 80028ac:	d013      	beq.n	80028d6 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028ae:	481f      	ldr	r0, [pc, #124]	@ (800292c <HAL_ADC_ConfigChannel+0x230>)
 80028b0:	4282      	cmp	r2, r0
 80028b2:	d01f      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b4:	2000      	movs	r0, #0
 80028b6:	e739      	b.n	800272c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028b8:	f001 71a0 	and.w	r1, r1, #20971520	@ 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028bc:	f100 4010 	add.w	r0, r0, #2415919104	@ 0x90000000
 80028c0:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80028c4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 80028c8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80028cc:	4311      	orrs	r1, r2
 80028ce:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d2:	2000      	movs	r0, #0
}
 80028d4:	e72a      	b.n	800272c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028d6:	f401 0240 	and.w	r2, r1, #12582912	@ 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028da:	f100 4008 	add.w	r0, r0, #2281701376	@ 0x88000000
 80028de:	f500 4060 	add.w	r0, r0, #57344	@ 0xe000
 80028e2:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 80028e6:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 80028ea:	430a      	orrs	r2, r1
 80028ec:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f0:	2000      	movs	r0, #0
}
 80028f2:	e71b      	b.n	800272c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028f4:	f001 72c0 	and.w	r2, r1, #25165824	@ 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028f8:	f100 400c 	add.w	r0, r0, #2348810240	@ 0x8c000000
 80028fc:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 8002900:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8002904:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8002908:	430a      	orrs	r2, r1
 800290a:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290e:	2000      	movs	r0, #0
}
 8002910:	e70c      	b.n	800272c <HAL_ADC_ConfigChannel+0x30>
 8002912:	2000      	movs	r0, #0
 8002914:	e70a      	b.n	800272c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8002916:	2002      	movs	r0, #2
 8002918:	e70b      	b.n	8002732 <HAL_ADC_ConfigChannel+0x36>
 800291a:	bf00      	nop
 800291c:	80000004 	.word	0x80000004
 8002920:	40012000 	.word	0x40012000
 8002924:	b0001000 	.word	0xb0001000
 8002928:	b8004000 	.word	0xb8004000
 800292c:	b4002000 	.word	0xb4002000
 8002930:	2000004c 	.word	0x2000004c
 8002934:	053e2d63 	.word	0x053e2d63

08002938 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002938:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800293a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	f012 0f04 	tst.w	r2, #4
 8002942:	d02a      	beq.n	800299a <ADC_ConversionStop+0x62>
 8002944:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	f012 0f02 	tst.w	r2, #2
 800294c:	d107      	bne.n	800295e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002954:	f022 0217 	bic.w	r2, r2, #23
 8002958:	f042 0210 	orr.w	r2, r2, #16
 800295c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800295e:	f7fe ff09 	bl	8001774 <HAL_GetTick>
 8002962:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f013 0f04 	tst.w	r3, #4
 800296c:	d013      	beq.n	8002996 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800296e:	f7fe ff01 	bl	8001774 <HAL_GetTick>
 8002972:	1b43      	subs	r3, r0, r5
 8002974:	2b02      	cmp	r3, #2
 8002976:	d9f5      	bls.n	8002964 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f013 0f04 	tst.w	r3, #4
 8002980:	d0f0      	beq.n	8002964 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002982:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002984:	f043 0310 	orr.w	r3, r3, #16
 8002988:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8002992:	2001      	movs	r0, #1
 8002994:	e002      	b.n	800299c <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002996:	2000      	movs	r0, #0
 8002998:	e000      	b.n	800299c <ADC_ConversionStop+0x64>
 800299a:	2000      	movs	r0, #0
}
 800299c:	bd38      	pop	{r3, r4, r5, pc}
	...

080029a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029a0:	b530      	push	{r4, r5, lr}
 80029a2:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	f012 0f01 	tst.w	r2, #1
 80029b0:	d15b      	bne.n	8002a6a <ADC_Enable+0xca>
 80029b2:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	4a2e      	ldr	r2, [pc, #184]	@ (8002a70 <ADC_Enable+0xd0>)
 80029b8:	4211      	tst	r1, r2
 80029ba:	d117      	bne.n	80029ec <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029c2:	f022 0217 	bic.w	r2, r2, #23
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029cc:	4b29      	ldr	r3, [pc, #164]	@ (8002a74 <ADC_Enable+0xd4>)
 80029ce:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029d2:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80029d6:	d019      	beq.n	8002a0c <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029d8:	4b27      	ldr	r3, [pc, #156]	@ (8002a78 <ADC_Enable+0xd8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	4a27      	ldr	r2, [pc, #156]	@ (8002a7c <ADC_Enable+0xdc>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	3301      	adds	r3, #1
 80029e8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80029ea:	e00c      	b.n	8002a06 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ec:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80029ee:	f043 0310 	orr.w	r3, r3, #16
 80029f2:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 80029fc:	2001      	movs	r0, #1
 80029fe:	e035      	b.n	8002a6c <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8002a00:	9b01      	ldr	r3, [sp, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002a06:	9b01      	ldr	r3, [sp, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f9      	bne.n	8002a00 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002a0c:	7e63      	ldrb	r3, [r4, #25]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a12:	2000      	movs	r0, #0
 8002a14:	e02a      	b.n	8002a6c <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8002a16:	f7fe fead 	bl	8001774 <HAL_GetTick>
 8002a1a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	f012 0f01 	tst.w	r2, #1
 8002a24:	d11f      	bne.n	8002a66 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	f012 0f01 	tst.w	r2, #1
 8002a2c:	d107      	bne.n	8002a3e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a34:	f022 0217 	bic.w	r2, r2, #23
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a3e:	f7fe fe99 	bl	8001774 <HAL_GetTick>
 8002a42:	1b40      	subs	r0, r0, r5
 8002a44:	2802      	cmp	r0, #2
 8002a46:	d9e9      	bls.n	8002a1c <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f013 0f01 	tst.w	r3, #1
 8002a50:	d1e4      	bne.n	8002a1c <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a54:	f043 0310 	orr.w	r3, r3, #16
 8002a58:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8002a62:	2001      	movs	r0, #1
 8002a64:	e002      	b.n	8002a6c <ADC_Enable+0xcc>
  return HAL_OK;
 8002a66:	2000      	movs	r0, #0
 8002a68:	e000      	b.n	8002a6c <ADC_Enable+0xcc>
 8002a6a:	2000      	movs	r0, #0
}
 8002a6c:	b003      	add	sp, #12
 8002a6e:	bd30      	pop	{r4, r5, pc}
 8002a70:	80000017 	.word	0x80000017
 8002a74:	40012000 	.word	0x40012000
 8002a78:	2000004c 	.word	0x2000004c
 8002a7c:	053e2d63 	.word	0x053e2d63

08002a80 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a80:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f013 0f04 	tst.w	r3, #4
 8002a88:	d128      	bne.n	8002adc <HAL_ADC_Start+0x5c>
{
 8002a8a:	b510      	push	{r4, lr}
 8002a8c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8002a8e:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d024      	beq.n	8002ae0 <HAL_ADC_Start+0x60>
 8002a96:	2301      	movs	r3, #1
 8002a98:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8002a9c:	f7ff ff80 	bl	80029a0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002aa0:	b9c0      	cbnz	r0, 8002ad4 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002aa4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab0:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ab6:	6822      	ldr	r2, [r4, #0]
 8002ab8:	211c      	movs	r1, #28
 8002aba:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002abc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002ac0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002ac2:	6893      	ldr	r3, [r2, #8]
 8002ac4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ac8:	f023 0317 	bic.w	r3, r3, #23
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	6093      	str	r3, [r2, #8]
}
 8002ad2:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8002ada:	e7fa      	b.n	8002ad2 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8002adc:	2002      	movs	r0, #2
}
 8002ade:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8002ae0:	2002      	movs	r0, #2
 8002ae2:	e7f6      	b.n	8002ad2 <HAL_ADC_Start+0x52>

08002ae4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ae8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002aea:	6893      	ldr	r3, [r2, #8]
 8002aec:	f013 0302 	ands.w	r3, r3, #2
 8002af0:	d000      	beq.n	8002af4 <ADC_Disable+0x10>
 8002af2:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002af4:	6891      	ldr	r1, [r2, #8]
 8002af6:	f011 0f01 	tst.w	r1, #1
 8002afa:	d039      	beq.n	8002b70 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d139      	bne.n	8002b74 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b00:	6893      	ldr	r3, [r2, #8]
 8002b02:	f003 0305 	and.w	r3, r3, #5
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d009      	beq.n	8002b1e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002b0c:	f043 0310 	orr.w	r3, r3, #16
 8002b10:	65a3      	str	r3, [r4, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b12:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	65e3      	str	r3, [r4, #92]	@ 0x5c

      return HAL_ERROR;
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	e029      	b.n	8002b72 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8002b1e:	6893      	ldr	r3, [r2, #8]
 8002b20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b24:	f023 0317 	bic.w	r3, r3, #23
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	2203      	movs	r2, #3
 8002b32:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b34:	f7fe fe1e 	bl	8001774 <HAL_GetTick>
 8002b38:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f013 0f01 	tst.w	r3, #1
 8002b42:	d013      	beq.n	8002b6c <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b44:	f7fe fe16 	bl	8001774 <HAL_GetTick>
 8002b48:	1b40      	subs	r0, r0, r5
 8002b4a:	2802      	cmp	r0, #2
 8002b4c:	d9f5      	bls.n	8002b3a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f013 0f01 	tst.w	r3, #1
 8002b56:	d0f0      	beq.n	8002b3a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002b5a:	f043 0310 	orr.w	r3, r3, #16
 8002b5e:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b60:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8002b68:	2001      	movs	r0, #1
 8002b6a:	e002      	b.n	8002b72 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	e000      	b.n	8002b72 <ADC_Disable+0x8e>
 8002b70:	2000      	movs	r0, #0
}
 8002b72:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002b74:	2000      	movs	r0, #0
 8002b76:	e7fc      	b.n	8002b72 <ADC_Disable+0x8e>

08002b78 <HAL_ADC_DeInit>:
{
 8002b78:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d04c      	beq.n	8002c18 <HAL_ADC_DeInit+0xa0>
 8002b7e:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002b80:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002b88:	f7ff fed6 	bl	8002938 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002b8c:	4606      	mov	r6, r0
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d033      	beq.n	8002bfa <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	6853      	ldr	r3, [r2, #4]
 8002b96:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8002b9a:	f023 0303 	bic.w	r3, r3, #3
 8002b9e:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	f240 329f 	movw	r2, #927	@ 0x39f
 8002ba6:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002ba8:	6822      	ldr	r2, [r4, #0]
 8002baa:	68d1      	ldr	r1, [r2, #12]
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_ADC_DeInit+0xa4>)
 8002bae:	400b      	ands	r3, r1
 8002bb0:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	6913      	ldr	r3, [r2, #16]
 8002bb6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002bba:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	6953      	ldr	r3, [r2, #20]
 8002bc0:	f023 0307 	bic.w	r3, r3, #7
 8002bc4:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	6a13      	ldr	r3, [r2, #32]
 8002bca:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8002bce:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bd4:	2500      	movs	r5, #0
 8002bd6:	629d      	str	r5, [r3, #40]	@ 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002bd8:	4a11      	ldr	r2, [pc, #68]	@ (8002c20 <HAL_ADC_DeInit+0xa8>)
 8002bda:	f8d2 3708 	ldr.w	r3, [r2, #1800]	@ 0x708
 8002bde:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8002be2:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
  HAL_ADC_MspDeInit(hadc);
 8002be6:	4620      	mov	r0, r4
 8002be8:	f7fe fa7e 	bl	80010e8 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002bec:	6625      	str	r5, [r4, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8002bee:	65e5      	str	r5, [r4, #92]	@ 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8002bf0:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8002bf2:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8002bf6:	4630      	mov	r0, r6
 8002bf8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f7ff ff72 	bl	8002ae4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002c00:	4606      	mov	r6, r0
 8002c02:	b908      	cbnz	r0, 8002c08 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8002c04:	2301      	movs	r3, #1
 8002c06:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002c08:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002c0a:	6893      	ldr	r3, [r2, #8]
 8002c0c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c10:	f023 0317 	bic.w	r3, r3, #23
 8002c14:	6093      	str	r3, [r2, #8]
}
 8002c16:	e7bc      	b.n	8002b92 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8002c18:	2601      	movs	r6, #1
 8002c1a:	e7ec      	b.n	8002bf6 <HAL_ADC_DeInit+0x7e>
 8002c1c:	833e0200 	.word	0x833e0200
 8002c20:	40012000 	.word	0x40012000

08002c24 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002c24:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d019      	beq.n	8002c60 <HAL_ADC_Stop+0x3c>
{
 8002c2c:	b510      	push	{r4, lr}
 8002c2e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002c30:	2301      	movs	r3, #1
 8002c32:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002c36:	f7ff fe7f 	bl	8002938 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002c3a:	b118      	cbz	r0, 8002c44 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8002c42:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7ff ff4d 	bl	8002ae4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002c4a:	2800      	cmp	r0, #0
 8002c4c:	d1f6      	bne.n	8002c3c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8002c4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002c5e:	e7ed      	b.n	8002c3c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8002c60:	2002      	movs	r0, #2
}
 8002c62:	4770      	bx	lr

08002c64 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002c64:	b510      	push	{r4, lr}
 8002c66:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9301      	str	r3, [sp, #4]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002c6c:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d045      	beq.n	8002d00 <HAL_ADCEx_Calibration_Start+0x9c>
 8002c74:	4604      	mov	r4, r0
 8002c76:	2301      	movs	r3, #1
 8002c78:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c7c:	f7ff ff32 	bl	8002ae4 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c80:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	f012 0f01 	tst.w	r2, #1
 8002c88:	d008      	beq.n	8002c9c <HAL_ADCEx_Calibration_Start+0x38>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c8c:	f043 0310 	orr.w	r3, r3, #16
 8002c90:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002c92:	2300      	movs	r3, #0
 8002c94:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  return tmp_hal_status;
}
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd10      	pop	{r4, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002c9c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002c9e:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8002ca2:	f042 0202 	orr.w	r2, r2, #2
 8002ca6:	65a2      	str	r2, [r4, #88]	@ 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002ca8:	68d9      	ldr	r1, [r3, #12]
 8002caa:	f001 0103 	and.w	r1, r1, #3
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	f022 0203 	bic.w	r2, r2, #3
 8002cb4:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	6893      	ldr	r3, [r2, #8]
 8002cba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cbe:	6093      	str	r3, [r2, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002cc0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	2a00      	cmp	r2, #0
 8002cc6:	db09      	blt.n	8002cdc <HAL_ADCEx_Calibration_Start+0x78>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002cce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002cd0:	f023 0303 	bic.w	r3, r3, #3
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002cda:	e7da      	b.n	8002c92 <HAL_ADCEx_Calibration_Start+0x2e>
      wait_loop_index++;
 8002cdc:	9b01      	ldr	r3, [sp, #4]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002ce2:	9b01      	ldr	r3, [sp, #4]
 8002ce4:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8002ce8:	d3ea      	bcc.n	8002cc0 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8002cea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002cec:	f023 0312 	bic.w	r3, r3, #18
 8002cf0:	f043 0310 	orr.w	r3, r3, #16
 8002cf4:	65a3      	str	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	e7cb      	b.n	8002c98 <HAL_ADCEx_Calibration_Start+0x34>
  __HAL_LOCK(hadc);
 8002d00:	2002      	movs	r0, #2
 8002d02:	e7c9      	b.n	8002c98 <HAL_ADCEx_Calibration_Start+0x34>

08002d04 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002d04:	2800      	cmp	r0, #0
 8002d06:	db07      	blt.n	8002d18 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d08:	f000 021f 	and.w	r2, r0, #31
 8002d0c:	0940      	lsrs	r0, r0, #5
 8002d0e:	2301      	movs	r3, #1
 8002d10:	4093      	lsls	r3, r2
 8002d12:	4a02      	ldr	r2, [pc, #8]	@ (8002d1c <__NVIC_EnableIRQ+0x18>)
 8002d14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000e100 	.word	0xe000e100

08002d20 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002d20:	2800      	cmp	r0, #0
 8002d22:	db0c      	blt.n	8002d3e <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d24:	f000 021f 	and.w	r2, r0, #31
 8002d28:	0940      	lsrs	r0, r0, #5
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	4093      	lsls	r3, r2
 8002d2e:	3020      	adds	r0, #32
 8002d30:	4a03      	ldr	r2, [pc, #12]	@ (8002d40 <__NVIC_DisableIRQ+0x20>)
 8002d32:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d3a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100

08002d44 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002d44:	2800      	cmp	r0, #0
 8002d46:	db08      	blt.n	8002d5a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d48:	0109      	lsls	r1, r1, #4
 8002d4a:	b2c9      	uxtb	r1, r1
 8002d4c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002d50:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002d54:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8002d58:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	f000 000f 	and.w	r0, r0, #15
 8002d5e:	0109      	lsls	r1, r1, #4
 8002d60:	b2c9      	uxtb	r1, r1
 8002d62:	4b01      	ldr	r3, [pc, #4]	@ (8002d68 <__NVIC_SetPriority+0x24>)
 8002d64:	5419      	strb	r1, [r3, r0]
  }
}
 8002d66:	4770      	bx	lr
 8002d68:	e000ed14 	.word	0xe000ed14

08002d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d72:	f1c0 0c07 	rsb	ip, r0, #7
 8002d76:	f1bc 0f04 	cmp.w	ip, #4
 8002d7a:	bf28      	it	cs
 8002d7c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d80:	1d03      	adds	r3, r0, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d90f      	bls.n	8002da6 <NVIC_EncodePriority+0x3a>
 8002d86:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 3eff 	mov.w	lr, #4294967295
 8002d8c:	fa0e f00c 	lsl.w	r0, lr, ip
 8002d90:	ea21 0100 	bic.w	r1, r1, r0
 8002d94:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d96:	fa0e fe03 	lsl.w	lr, lr, r3
 8002d9a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8002d9e:	ea41 0002 	orr.w	r0, r1, r2
 8002da2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	2300      	movs	r3, #0
 8002da8:	e7ee      	b.n	8002d88 <NVIC_EncodePriority+0x1c>
	...

08002dac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dac:	4a07      	ldr	r2, [pc, #28]	@ (8002dcc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002dae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002db4:	041b      	lsls	r3, r3, #16
 8002db6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db8:	0200      	lsls	r0, r0, #8
 8002dba:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dbe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002dc8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b510      	push	{r4, lr}
 8002dd2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <HAL_NVIC_SetPriority+0x1c>)
 8002dd6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002ddc:	f7ff ffc6 	bl	8002d6c <NVIC_EncodePriority>
 8002de0:	4601      	mov	r1, r0
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7ff ffae 	bl	8002d44 <__NVIC_SetPriority>
}
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	bf00      	nop
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df2:	f7ff ff87 	bl	8002d04 <__NVIC_EnableIRQ>
}
 8002df6:	bd08      	pop	{r3, pc}

08002df8 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002df8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dfa:	f7ff ff91 	bl	8002d20 <__NVIC_DisableIRQ>
}
 8002dfe:	bd08      	pop	{r3, pc}

08002e00 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e00:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e02:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8002e04:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 8002e08:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002e0c:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8002e0e:	b124      	cbz	r4, 8002e1a <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e10:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8002e12:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 8002e16:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e1a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002e1c:	f004 0c1c 	and.w	ip, r4, #28
 8002e20:	2401      	movs	r4, #1
 8002e22:	fa04 f40c 	lsl.w	r4, r4, ip
 8002e26:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 8002e2a:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e2e:	6804      	ldr	r4, [r0, #0]
 8002e30:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e32:	6883      	ldr	r3, [r0, #8]
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d005      	beq.n	8002e44 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002e38:	6803      	ldr	r3, [r0, #0]
 8002e3a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002e3c:	6803      	ldr	r3, [r0, #0]
 8002e3e:	60da      	str	r2, [r3, #12]
  }
}
 8002e40:	bc10      	pop	{r4}
 8002e42:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002e44:	6803      	ldr	r3, [r0, #0]
 8002e46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002e48:	6803      	ldr	r3, [r0, #0]
 8002e4a:	60d9      	str	r1, [r3, #12]
 8002e4c:	e7f8      	b.n	8002e40 <DMA_SetConfig+0x40>
	...

08002e50 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e50:	6803      	ldr	r3, [r0, #0]
 8002e52:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d816      	bhi.n	8002e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002e58:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002e5a:	f022 0203 	bic.w	r2, r2, #3
 8002e5e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8002e62:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 8002e66:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	3b08      	subs	r3, #8
 8002e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e74:	4a0d      	ldr	r2, [pc, #52]	@ (8002eac <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8002e76:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8002e84:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002e86:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002e88:	f022 0103 	bic.w	r1, r2, #3
 8002e8c:	4a08      	ldr	r2, [pc, #32]	@ (8002eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8002e8e:	440a      	add	r2, r1
 8002e90:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3b08      	subs	r3, #8
 8002e96:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	3307      	adds	r3, #7
 8002ea0:	e7e8      	b.n	8002e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8002ea2:	bf00      	nop
 8002ea4:	40020407 	.word	0x40020407
 8002ea8:	cccccccd 	.word	0xcccccccd
 8002eac:	40020880 	.word	0x40020880
 8002eb0:	4002081c 	.word	0x4002081c

08002eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002eb4:	6843      	ldr	r3, [r0, #4]
 8002eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002eba:	4a07      	ldr	r2, [pc, #28]	@ (8002ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002ebc:	441a      	add	r2, r3
 8002ebe:	0092      	lsls	r2, r2, #2
 8002ec0:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ec2:	4a06      	ldr	r2, [pc, #24]	@ (8002edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8002ec4:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2201      	movs	r2, #1
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	1000823f 	.word	0x1000823f
 8002edc:	40020940 	.word	0x40020940

08002ee0 <HAL_DMA_Init>:
  if (hdma == NULL)
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d060      	beq.n	8002fa6 <HAL_DMA_Init+0xc6>
{
 8002ee4:	b510      	push	{r4, lr}
 8002ee6:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ee8:	6802      	ldr	r2, [r0, #0]
 8002eea:	4b30      	ldr	r3, [pc, #192]	@ (8002fac <HAL_DMA_Init+0xcc>)
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d842      	bhi.n	8002f76 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb0 <HAL_DMA_Init+0xd0>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	492f      	ldr	r1, [pc, #188]	@ (8002fb4 <HAL_DMA_Init+0xd4>)
 8002ef6:	fba1 1303 	umull	r1, r3, r1, r3
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f00:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb8 <HAL_DMA_Init+0xd8>)
 8002f02:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f0a:	6813      	ldr	r3, [r2, #0]
 8002f0c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f14:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002f16:	6821      	ldr	r1, [r4, #0]
 8002f18:	680a      	ldr	r2, [r1, #0]
 8002f1a:	68a3      	ldr	r3, [r4, #8]
 8002f1c:	68e0      	ldr	r0, [r4, #12]
 8002f1e:	4303      	orrs	r3, r0
 8002f20:	6920      	ldr	r0, [r4, #16]
 8002f22:	4303      	orrs	r3, r0
 8002f24:	6960      	ldr	r0, [r4, #20]
 8002f26:	4303      	orrs	r3, r0
 8002f28:	69a0      	ldr	r0, [r4, #24]
 8002f2a:	4303      	orrs	r3, r0
 8002f2c:	69e0      	ldr	r0, [r4, #28]
 8002f2e:	4303      	orrs	r3, r0
 8002f30:	6a20      	ldr	r0, [r4, #32]
 8002f32:	4303      	orrs	r3, r0
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f7ff ff89 	bl	8002e50 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f3e:	68a3      	ldr	r3, [r4, #8]
 8002f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f44:	d022      	beq.n	8002f8c <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f46:	6863      	ldr	r3, [r4, #4]
 8002f48:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f4e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f50:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002f52:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002f54:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f56:	6863      	ldr	r3, [r4, #4]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d919      	bls.n	8002f92 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f62:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f64:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f66:	2000      	movs	r0, #0
 8002f68:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8002f70:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8002f74:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f76:	4b11      	ldr	r3, [pc, #68]	@ (8002fbc <HAL_DMA_Init+0xdc>)
 8002f78:	4413      	add	r3, r2
 8002f7a:	490e      	ldr	r1, [pc, #56]	@ (8002fb4 <HAL_DMA_Init+0xd4>)
 8002f7c:	fba1 1303 	umull	r1, r3, r1, r3
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <HAL_DMA_Init+0xe0>)
 8002f88:	6403      	str	r3, [r0, #64]	@ 0x40
 8002f8a:	e7bb      	b.n	8002f04 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	6063      	str	r3, [r4, #4]
 8002f90:	e7d9      	b.n	8002f46 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f92:	4620      	mov	r0, r4
 8002f94:	f7ff ff8e 	bl	8002eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f98:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002fa0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	e7df      	b.n	8002f66 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8002fa6:	2001      	movs	r0, #1
}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40020407 	.word	0x40020407
 8002fb0:	bffdfff8 	.word	0xbffdfff8
 8002fb4:	cccccccd 	.word	0xcccccccd
 8002fb8:	40020000 	.word	0x40020000
 8002fbc:	bffdfbf8 	.word	0xbffdfbf8
 8002fc0:	40020400 	.word	0x40020400

08002fc4 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d04b      	beq.n	8003060 <HAL_DMA_DeInit+0x9c>
{
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8002fcc:	6802      	ldr	r2, [r0, #0]
 8002fce:	6813      	ldr	r3, [r2, #0]
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fd6:	6802      	ldr	r2, [r0, #0]
 8002fd8:	4b22      	ldr	r3, [pc, #136]	@ (8003064 <HAL_DMA_DeInit+0xa0>)
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d82c      	bhi.n	8003038 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fde:	4b22      	ldr	r3, [pc, #136]	@ (8003068 <HAL_DMA_DeInit+0xa4>)
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4922      	ldr	r1, [pc, #136]	@ (800306c <HAL_DMA_DeInit+0xa8>)
 8002fe4:	fba1 1303 	umull	r1, r3, r1, r3
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fee:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <HAL_DMA_DeInit+0xac>)
 8002ff0:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8002ff2:	2500      	movs	r5, #0
 8002ff4:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ff6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002ff8:	f003 021c 	and.w	r2, r3, #28
 8002ffc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002ffe:	2301      	movs	r3, #1
 8003000:	4093      	lsls	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003004:	4620      	mov	r0, r4
 8003006:	f7ff ff23 	bl	8002e50 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800300a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800300c:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800300e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003010:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003012:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003014:	6863      	ldr	r3, [r4, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	2b03      	cmp	r3, #3
 800301a:	d918      	bls.n	800304e <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 800301c:	2000      	movs	r0, #0
 800301e:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003020:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003022:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 8003024:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003026:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003028:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800302a:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800302e:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003032:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8003036:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003038:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <HAL_DMA_DeInit+0xb0>)
 800303a:	4413      	add	r3, r2
 800303c:	490b      	ldr	r1, [pc, #44]	@ (800306c <HAL_DMA_DeInit+0xa8>)
 800303e:	fba1 1303 	umull	r1, r3, r1, r3
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_DMA_DeInit+0xb4>)
 800304a:	6403      	str	r3, [r0, #64]	@ 0x40
 800304c:	e7d1      	b.n	8002ff2 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff ff30 	bl	8002eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003054:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003056:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003058:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800305a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	e7dd      	b.n	800301c <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003060:	2001      	movs	r0, #1
}
 8003062:	4770      	bx	lr
 8003064:	40020407 	.word	0x40020407
 8003068:	bffdfff8 	.word	0xbffdfff8
 800306c:	cccccccd 	.word	0xcccccccd
 8003070:	40020000 	.word	0x40020000
 8003074:	bffdfbf8 	.word	0xbffdfbf8
 8003078:	40020400 	.word	0x40020400

0800307c <HAL_DMA_Start_IT>:
{
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003080:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8003084:	2801      	cmp	r0, #1
 8003086:	d043      	beq.n	8003110 <HAL_DMA_Start_IT+0x94>
 8003088:	2001      	movs	r0, #1
 800308a:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 800308e:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8003092:	b2c0      	uxtb	r0, r0
 8003094:	2801      	cmp	r0, #1
 8003096:	d006      	beq.n	80030a6 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800309c:	2300      	movs	r3, #0
 800309e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 80030a2:	2001      	movs	r0, #1
}
 80030a4:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a6:	2002      	movs	r0, #2
 80030a8:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ac:	2000      	movs	r0, #0
 80030ae:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80030b0:	6825      	ldr	r5, [r4, #0]
 80030b2:	6828      	ldr	r0, [r5, #0]
 80030b4:	f020 0001 	bic.w	r0, r0, #1
 80030b8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ba:	4620      	mov	r0, r4
 80030bc:	f7ff fea0 	bl	8002e00 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80030c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80030c2:	b1d3      	cbz	r3, 80030fa <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030c4:	6822      	ldr	r2, [r4, #0]
 80030c6:	6813      	ldr	r3, [r2, #0]
 80030c8:	f043 030e 	orr.w	r3, r3, #14
 80030cc:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030ce:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80030d6:	d003      	beq.n	80030e0 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030de:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80030e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80030e2:	b11b      	cbz	r3, 80030ec <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030ea:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80030ec:	6822      	ldr	r2, [r4, #0]
 80030ee:	6813      	ldr	r3, [r2, #0]
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030f6:	2000      	movs	r0, #0
 80030f8:	e7d4      	b.n	80030a4 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030fa:	6822      	ldr	r2, [r4, #0]
 80030fc:	6813      	ldr	r3, [r2, #0]
 80030fe:	f023 0304 	bic.w	r3, r3, #4
 8003102:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003104:	6822      	ldr	r2, [r4, #0]
 8003106:	6813      	ldr	r3, [r2, #0]
 8003108:	f043 030a 	orr.w	r3, r3, #10
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e7de      	b.n	80030ce <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003110:	2002      	movs	r0, #2
 8003112:	e7c7      	b.n	80030a4 <HAL_DMA_Start_IT+0x28>

08003114 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003114:	4603      	mov	r3, r0
 8003116:	2800      	cmp	r0, #0
 8003118:	d034      	beq.n	8003184 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800311a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	2a02      	cmp	r2, #2
 8003122:	d006      	beq.n	8003132 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003124:	2204      	movs	r2, #4
 8003126:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003128:	2200      	movs	r2, #0
 800312a:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 800312e:	2001      	movs	r0, #1
 8003130:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003132:	6801      	ldr	r1, [r0, #0]
 8003134:	680a      	ldr	r2, [r1, #0]
 8003136:	f022 020e 	bic.w	r2, r2, #14
 800313a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800313c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800313e:	680a      	ldr	r2, [r1, #0]
 8003140:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003144:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003146:	6801      	ldr	r1, [r0, #0]
 8003148:	680a      	ldr	r2, [r1, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003150:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003152:	f002 011c 	and.w	r1, r2, #28
 8003156:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003158:	2201      	movs	r2, #1
 800315a:	408a      	lsls	r2, r1
 800315c:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800315e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003160:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003162:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003164:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003166:	b132      	cbz	r2, 8003176 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003168:	6811      	ldr	r1, [r2, #0]
 800316a:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 800316e:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003170:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003172:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8003174:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800317c:	2000      	movs	r0, #0
 800317e:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 8003182:	4770      	bx	lr
    return HAL_ERROR;
 8003184:	2001      	movs	r0, #1
}
 8003186:	4770      	bx	lr

08003188 <HAL_DMA_Abort_IT>:
{
 8003188:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800318a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d003      	beq.n	800319c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003194:	2304      	movs	r3, #4
 8003196:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8003198:	2001      	movs	r0, #1
}
 800319a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800319c:	6802      	ldr	r2, [r0, #0]
 800319e:	6813      	ldr	r3, [r2, #0]
 80031a0:	f023 030e 	bic.w	r3, r3, #14
 80031a4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80031a6:	6802      	ldr	r2, [r0, #0]
 80031a8:	6813      	ldr	r3, [r2, #0]
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031b0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80031b2:	6813      	ldr	r3, [r2, #0]
 80031b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031b8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ba:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80031bc:	f003 021c 	and.w	r2, r3, #28
 80031c0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80031c2:	2301      	movs	r3, #1
 80031c4:	4093      	lsls	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031c8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80031ca:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80031cc:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80031ce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80031d0:	b133      	cbz	r3, 80031e0 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031d8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031da:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80031dc:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80031de:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80031e6:	2300      	movs	r3, #0
 80031e8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 80031ec:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80031ee:	b113      	cbz	r3, 80031f6 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80031f0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2000      	movs	r0, #0
 80031f4:	e7d1      	b.n	800319a <HAL_DMA_Abort_IT+0x12>
 80031f6:	2000      	movs	r0, #0
 80031f8:	e7cf      	b.n	800319a <HAL_DMA_Abort_IT+0x12>
	...

080031fc <HAL_DMA_IRQHandler>:
{
 80031fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031fe:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003200:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003202:	6804      	ldr	r4, [r0, #0]
 8003204:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003206:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003208:	f003 031c 	and.w	r3, r3, #28
 800320c:	2204      	movs	r2, #4
 800320e:	409a      	lsls	r2, r3
 8003210:	420a      	tst	r2, r1
 8003212:	d015      	beq.n	8003240 <HAL_DMA_IRQHandler+0x44>
 8003214:	f015 0f04 	tst.w	r5, #4
 8003218:	d012      	beq.n	8003240 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	f013 0f20 	tst.w	r3, #32
 8003220:	d103      	bne.n	800322a <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800322a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800322c:	f003 021c 	and.w	r2, r3, #28
 8003230:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003232:	2304      	movs	r3, #4
 8003234:	4093      	lsls	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003238:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800323a:	b103      	cbz	r3, 800323e <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 800323c:	4798      	blx	r3
}
 800323e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003240:	2202      	movs	r2, #2
 8003242:	409a      	lsls	r2, r3
 8003244:	420a      	tst	r2, r1
 8003246:	d028      	beq.n	800329a <HAL_DMA_IRQHandler+0x9e>
 8003248:	f015 0f02 	tst.w	r5, #2
 800324c:	d025      	beq.n	800329a <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	f013 0f20 	tst.w	r3, #32
 8003254:	d106      	bne.n	8003264 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	f023 030a 	bic.w	r3, r3, #10
 800325c:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800325e:	2301      	movs	r3, #1
 8003260:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003264:	6802      	ldr	r2, [r0, #0]
 8003266:	4b1c      	ldr	r3, [pc, #112]	@ (80032d8 <HAL_DMA_IRQHandler+0xdc>)
 8003268:	429a      	cmp	r2, r3
 800326a:	d90e      	bls.n	800328a <HAL_DMA_IRQHandler+0x8e>
 800326c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800326e:	f003 021c 	and.w	r2, r3, #28
 8003272:	2302      	movs	r3, #2
 8003274:	4093      	lsls	r3, r2
 8003276:	4a19      	ldr	r2, [pc, #100]	@ (80032dc <HAL_DMA_IRQHandler+0xe0>)
 8003278:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 800327a:	2300      	movs	r3, #0
 800327c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 8003280:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0db      	beq.n	800323e <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003286:	4798      	blx	r3
 8003288:	e7d9      	b.n	800323e <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800328a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800328c:	f003 021c 	and.w	r2, r3, #28
 8003290:	2302      	movs	r3, #2
 8003292:	4093      	lsls	r3, r2
 8003294:	4a12      	ldr	r2, [pc, #72]	@ (80032e0 <HAL_DMA_IRQHandler+0xe4>)
 8003296:	6053      	str	r3, [r2, #4]
 8003298:	e7ef      	b.n	800327a <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800329a:	2208      	movs	r2, #8
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	420b      	tst	r3, r1
 80032a2:	d0cc      	beq.n	800323e <HAL_DMA_IRQHandler+0x42>
 80032a4:	f015 0f08 	tst.w	r5, #8
 80032a8:	d0c9      	beq.n	800323e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	f023 030e 	bic.w	r3, r3, #14
 80032b0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032b2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80032b4:	f003 031c 	and.w	r3, r3, #28
 80032b8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80032ba:	2201      	movs	r2, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032c2:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80032c4:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80032c8:	2300      	movs	r3, #0
 80032ca:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 80032ce:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0b4      	beq.n	800323e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80032d4:	4798      	blx	r3
  return;
 80032d6:	e7b2      	b.n	800323e <HAL_DMA_IRQHandler+0x42>
 80032d8:	40020080 	.word	0x40020080
 80032dc:	40020400 	.word	0x40020400
 80032e0:	40020000 	.word	0x40020000

080032e4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 80032e6:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e8:	e069      	b.n	80033be <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ea:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032ec:	005e      	lsls	r6, r3, #1
 80032ee:	2403      	movs	r4, #3
 80032f0:	40b4      	lsls	r4, r6
 80032f2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032f6:	68cc      	ldr	r4, [r1, #12]
 80032f8:	40b4      	lsls	r4, r6
 80032fa:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80032fc:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032fe:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003300:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003304:	684c      	ldr	r4, [r1, #4]
 8003306:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800330a:	409c      	lsls	r4, r3
 800330c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800330e:	6044      	str	r4, [r0, #4]
 8003310:	e066      	b.n	80033e0 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003312:	08dd      	lsrs	r5, r3, #3
 8003314:	3508      	adds	r5, #8
 8003316:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800331a:	f003 0c07 	and.w	ip, r3, #7
 800331e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003322:	f04f 0e0f 	mov.w	lr, #15
 8003326:	fa0e fe0c 	lsl.w	lr, lr, ip
 800332a:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800332e:	690c      	ldr	r4, [r1, #16]
 8003330:	fa04 f40c 	lsl.w	r4, r4, ip
 8003334:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003338:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800333c:	e067      	b.n	800340e <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800333e:	2402      	movs	r4, #2
 8003340:	e000      	b.n	8003344 <HAL_GPIO_Init+0x60>
 8003342:	2400      	movs	r4, #0
 8003344:	fa04 f40e 	lsl.w	r4, r4, lr
 8003348:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800334a:	f10c 0c02 	add.w	ip, ip, #2
 800334e:	4d4b      	ldr	r5, [pc, #300]	@ (800347c <HAL_GPIO_Init+0x198>)
 8003350:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003354:	4c4a      	ldr	r4, [pc, #296]	@ (8003480 <HAL_GPIO_Init+0x19c>)
 8003356:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800335a:	43d4      	mvns	r4, r2
 800335c:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003360:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003364:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 8003368:	d001      	beq.n	800336e <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800336a:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800336e:	4d44      	ldr	r5, [pc, #272]	@ (8003480 <HAL_GPIO_Init+0x19c>)
 8003370:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003374:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003378:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800337c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003380:	f41c 3f00 	tst.w	ip, #131072	@ 0x20000
 8003384:	d001      	beq.n	800338a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8003386:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800338a:	4d3d      	ldr	r5, [pc, #244]	@ (8003480 <HAL_GPIO_Init+0x19c>)
 800338c:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003390:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003392:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003396:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800339a:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 800339e:	d001      	beq.n	80033a4 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80033a0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80033a4:	4d36      	ldr	r5, [pc, #216]	@ (8003480 <HAL_GPIO_Init+0x19c>)
 80033a6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80033a8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80033aa:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033ac:	684e      	ldr	r6, [r1, #4]
 80033ae:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80033b2:	d001      	beq.n	80033b8 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 80033b4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80033b8:	4a31      	ldr	r2, [pc, #196]	@ (8003480 <HAL_GPIO_Init+0x19c>)
 80033ba:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80033bc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033be:	680a      	ldr	r2, [r1, #0]
 80033c0:	fa32 f403 	lsrs.w	r4, r2, r3
 80033c4:	d058      	beq.n	8003478 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033c6:	f04f 0c01 	mov.w	ip, #1
 80033ca:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80033ce:	ea1c 0202 	ands.w	r2, ip, r2
 80033d2:	d0f3      	beq.n	80033bc <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d4:	684c      	ldr	r4, [r1, #4]
 80033d6:	f004 0403 	and.w	r4, r4, #3
 80033da:	3c01      	subs	r4, #1
 80033dc:	2c01      	cmp	r4, #1
 80033de:	d984      	bls.n	80032ea <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e0:	684c      	ldr	r4, [r1, #4]
 80033e2:	f004 0403 	and.w	r4, r4, #3
 80033e6:	2c03      	cmp	r4, #3
 80033e8:	d00c      	beq.n	8003404 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 80033ea:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033ec:	005d      	lsls	r5, r3, #1
 80033ee:	f04f 0c03 	mov.w	ip, #3
 80033f2:	fa0c fc05 	lsl.w	ip, ip, r5
 80033f6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033fa:	688c      	ldr	r4, [r1, #8]
 80033fc:	40ac      	lsls	r4, r5
 80033fe:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003402:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003404:	684c      	ldr	r4, [r1, #4]
 8003406:	f004 0403 	and.w	r4, r4, #3
 800340a:	2c02      	cmp	r4, #2
 800340c:	d081      	beq.n	8003312 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800340e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003410:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003414:	f04f 0c03 	mov.w	ip, #3
 8003418:	fa0c fc0e 	lsl.w	ip, ip, lr
 800341c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003420:	684c      	ldr	r4, [r1, #4]
 8003422:	f004 0403 	and.w	r4, r4, #3
 8003426:	fa04 f40e 	lsl.w	r4, r4, lr
 800342a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800342e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003430:	684c      	ldr	r4, [r1, #4]
 8003432:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8003436:	d0c1      	beq.n	80033bc <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003438:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800343c:	f10c 0502 	add.w	r5, ip, #2
 8003440:	4c0e      	ldr	r4, [pc, #56]	@ (800347c <HAL_GPIO_Init+0x198>)
 8003442:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003446:	f003 0e03 	and.w	lr, r3, #3
 800344a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800344e:	2407      	movs	r4, #7
 8003450:	fa04 f40e 	lsl.w	r4, r4, lr
 8003454:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003458:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800345c:	f43f af71 	beq.w	8003342 <HAL_GPIO_Init+0x5e>
 8003460:	4c08      	ldr	r4, [pc, #32]	@ (8003484 <HAL_GPIO_Init+0x1a0>)
 8003462:	42a0      	cmp	r0, r4
 8003464:	d006      	beq.n	8003474 <HAL_GPIO_Init+0x190>
 8003466:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800346a:	42a0      	cmp	r0, r4
 800346c:	f43f af67 	beq.w	800333e <HAL_GPIO_Init+0x5a>
 8003470:	2407      	movs	r4, #7
 8003472:	e767      	b.n	8003344 <HAL_GPIO_Init+0x60>
 8003474:	2401      	movs	r4, #1
 8003476:	e765      	b.n	8003344 <HAL_GPIO_Init+0x60>
  }
}
 8003478:	bd70      	pop	{r4, r5, r6, pc}
 800347a:	bf00      	nop
 800347c:	40010000 	.word	0x40010000
 8003480:	58000800 	.word	0x58000800
 8003484:	48000400 	.word	0x48000400

08003488 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003488:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800348a:	fa31 f203 	lsrs.w	r2, r1, r3
 800348e:	d071      	beq.n	8003574 <HAL_GPIO_DeInit+0xec>
{
 8003490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003492:	e02e      	b.n	80034f2 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003494:	2502      	movs	r5, #2
 8003496:	e000      	b.n	800349a <HAL_GPIO_DeInit+0x12>
 8003498:	2500      	movs	r5, #0
 800349a:	fa05 f50c 	lsl.w	r5, r5, ip
 800349e:	42a5      	cmp	r5, r4
 80034a0:	d049      	beq.n	8003536 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80034a2:	6804      	ldr	r4, [r0, #0]
 80034a4:	005d      	lsls	r5, r3, #1
 80034a6:	f04f 0c03 	mov.w	ip, #3
 80034aa:	fa0c fc05 	lsl.w	ip, ip, r5
 80034ae:	ea44 040c 	orr.w	r4, r4, ip
 80034b2:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80034b4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80034b8:	f10e 0e08 	add.w	lr, lr, #8
 80034bc:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80034c0:	f003 0607 	and.w	r6, r3, #7
 80034c4:	00b6      	lsls	r6, r6, #2
 80034c6:	250f      	movs	r5, #15
 80034c8:	40b5      	lsls	r5, r6
 80034ca:	ea24 0405 	bic.w	r4, r4, r5
 80034ce:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034d2:	6884      	ldr	r4, [r0, #8]
 80034d4:	ea24 040c 	bic.w	r4, r4, ip
 80034d8:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80034da:	6844      	ldr	r4, [r0, #4]
 80034dc:	ea24 0202 	bic.w	r2, r4, r2
 80034e0:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034e2:	68c2      	ldr	r2, [r0, #12]
 80034e4:	ea22 020c 	bic.w	r2, r2, ip
 80034e8:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80034ea:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80034ec:	fa31 f203 	lsrs.w	r2, r1, r3
 80034f0:	d03f      	beq.n	8003572 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80034f2:	2201      	movs	r2, #1
 80034f4:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80034f6:	ea12 0701 	ands.w	r7, r2, r1
 80034fa:	d0f6      	beq.n	80034ea <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80034fc:	089e      	lsrs	r6, r3, #2
 80034fe:	1cb5      	adds	r5, r6, #2
 8003500:	4c1d      	ldr	r4, [pc, #116]	@ (8003578 <HAL_GPIO_DeInit+0xf0>)
 8003502:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003506:	f003 0c03 	and.w	ip, r3, #3
 800350a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800350e:	f04f 0e07 	mov.w	lr, #7
 8003512:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003516:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800351a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800351e:	d0bb      	beq.n	8003498 <HAL_GPIO_DeInit+0x10>
 8003520:	4d16      	ldr	r5, [pc, #88]	@ (800357c <HAL_GPIO_DeInit+0xf4>)
 8003522:	42a8      	cmp	r0, r5
 8003524:	d005      	beq.n	8003532 <HAL_GPIO_DeInit+0xaa>
 8003526:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800352a:	42a8      	cmp	r0, r5
 800352c:	d0b2      	beq.n	8003494 <HAL_GPIO_DeInit+0xc>
 800352e:	2507      	movs	r5, #7
 8003530:	e7b3      	b.n	800349a <HAL_GPIO_DeInit+0x12>
 8003532:	2501      	movs	r5, #1
 8003534:	e7b1      	b.n	800349a <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8003536:	4c12      	ldr	r4, [pc, #72]	@ (8003580 <HAL_GPIO_DeInit+0xf8>)
 8003538:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 800353c:	ea25 0507 	bic.w	r5, r5, r7
 8003540:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003544:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 8003548:	ea25 0507 	bic.w	r5, r5, r7
 800354c:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8003550:	6825      	ldr	r5, [r4, #0]
 8003552:	ea25 0507 	bic.w	r5, r5, r7
 8003556:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003558:	6865      	ldr	r5, [r4, #4]
 800355a:	ea25 0507 	bic.w	r5, r5, r7
 800355e:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003560:	4d05      	ldr	r5, [pc, #20]	@ (8003578 <HAL_GPIO_DeInit+0xf0>)
 8003562:	3602      	adds	r6, #2
 8003564:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8003568:	ea24 040e 	bic.w	r4, r4, lr
 800356c:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8003570:	e797      	b.n	80034a2 <HAL_GPIO_DeInit+0x1a>
  }
}
 8003572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40010000 	.word	0x40010000
 800357c:	48000400 	.word	0x48000400
 8003580:	58000800 	.word	0x58000800

08003584 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003584:	b10a      	cbz	r2, 800358a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003586:	6181      	str	r1, [r0, #24]
 8003588:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800358a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800358c:	4770      	bx	lr

0800358e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800358e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003590:	ea01 0203 	and.w	r2, r1, r3
 8003594:	ea21 0103 	bic.w	r1, r1, r3
 8003598:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800359c:	6181      	str	r1, [r0, #24]
}
 800359e:	4770      	bx	lr

080035a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035a0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035a2:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	4203      	tst	r3, r0
 80035a8:	d100      	bne.n	80035ac <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80035aa:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035ac:	4b02      	ldr	r3, [pc, #8]	@ (80035b8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80035ae:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035b0:	f7fe fdaa 	bl	8002108 <HAL_GPIO_EXTI_Callback>
}
 80035b4:	e7f9      	b.n	80035aa <HAL_GPIO_EXTI_IRQHandler+0xa>
 80035b6:	bf00      	nop
 80035b8:	58000800 	.word	0x58000800

080035bc <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035bc:	4a02      	ldr	r2, [pc, #8]	@ (80035c8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80035be:	6813      	ldr	r3, [r2, #0]
 80035c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c4:	6013      	str	r3, [r2, #0]
}
 80035c6:	4770      	bx	lr
 80035c8:	58000400 	.word	0x58000400

080035cc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80035cc:	b510      	push	{r4, lr}
 80035ce:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80035d0:	b9a0      	cbnz	r0, 80035fc <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80035d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003610 <HAL_PWR_EnterSLEEPMode+0x44>)
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80035da:	d10a      	bne.n	80035f2 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003614 <HAL_PWR_EnterSLEEPMode+0x48>)
 80035de:	6913      	ldr	r3, [r2, #16]
 80035e0:	f023 0304 	bic.w	r3, r3, #4
 80035e4:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80035e6:	2c01      	cmp	r4, #1
 80035e8:	d010      	beq.n	800360c <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80035ea:	bf40      	sev
    __WFE();
 80035ec:	bf20      	wfe
    __WFE();
 80035ee:	bf20      	wfe
  }
}
 80035f0:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80035f2:	f000 f821 	bl	8003638 <HAL_PWREx_DisableLowPowerRunMode>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_PWR_EnterSLEEPMode+0x10>
 80035fa:	e7f9      	b.n	80035f0 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80035fc:	4b04      	ldr	r3, [pc, #16]	@ (8003610 <HAL_PWR_EnterSLEEPMode+0x44>)
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8003604:	d1ea      	bne.n	80035dc <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8003606:	f000 f80f 	bl	8003628 <HAL_PWREx_EnableLowPowerRunMode>
 800360a:	e7e7      	b.n	80035dc <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 800360c:	bf30      	wfi
 800360e:	e7ef      	b.n	80035f0 <HAL_PWR_EnterSLEEPMode+0x24>
 8003610:	58000400 	.word	0x58000400
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003618:	4b02      	ldr	r3, [pc, #8]	@ (8003624 <HAL_PWREx_GetVoltageRange+0xc>)
 800361a:	6818      	ldr	r0, [r3, #0]
}
 800361c:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	58000400 	.word	0x58000400

08003628 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003628:	4a02      	ldr	r2, [pc, #8]	@ (8003634 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003630:	6013      	str	r3, [r2, #0]
}
 8003632:	4770      	bx	lr
 8003634:	58000400 	.word	0x58000400

08003638 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003638:	4a0f      	ldr	r2, [pc, #60]	@ (8003678 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003640:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8003642:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2232      	movs	r2, #50	@ 0x32
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	4a0c      	ldr	r2, [pc, #48]	@ (8003680 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003654:	e000      	b.n	8003658 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8003656:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003658:	4a07      	ldr	r2, [pc, #28]	@ (8003678 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800365a:	6952      	ldr	r2, [r2, #20]
 800365c:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8003660:	d001      	beq.n	8003666 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f7      	bne.n	8003656 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003666:	4b04      	ldr	r3, [pc, #16]	@ (8003678 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800366e:	d101      	bne.n	8003674 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8003670:	2000      	movs	r0, #0
 8003672:	4770      	bx	lr
    return HAL_TIMEOUT;
 8003674:	2003      	movs	r0, #3
}
 8003676:	4770      	bx	lr
 8003678:	58000400 	.word	0x58000400
 800367c:	2000004c 	.word	0x2000004c
 8003680:	431bde83 	.word	0x431bde83

08003684 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8003684:	4a0c      	ldr	r2, [pc, #48]	@ (80036b8 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8003686:	6813      	ldr	r3, [r2, #0]
 8003688:	f023 0307 	bic.w	r3, r3, #7
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003692:	4a0a      	ldr	r2, [pc, #40]	@ (80036bc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003694:	6913      	ldr	r3, [r2, #16]
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800369c:	2801      	cmp	r0, #1
 800369e:	d008      	beq.n	80036b2 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80036a0:	bf40      	sev
    __WFE();
 80036a2:	bf20      	wfe
    __WFE();
 80036a4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80036a6:	4a05      	ldr	r2, [pc, #20]	@ (80036bc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80036a8:	6913      	ldr	r3, [r2, #16]
 80036aa:	f023 0304 	bic.w	r3, r3, #4
 80036ae:	6113      	str	r3, [r2, #16]
}
 80036b0:	4770      	bx	lr
    __WFI();
 80036b2:	bf30      	wfi
 80036b4:	e7f7      	b.n	80036a6 <HAL_PWREx_EnterSTOP2Mode+0x22>
 80036b6:	bf00      	nop
 80036b8:	58000400 	.word	0x58000400
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80036c0:	b530      	push	{r4, r5, lr}
 80036c2:	b089      	sub	sp, #36	@ 0x24
 80036c4:	4604      	mov	r4, r0
 80036c6:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80036c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003774 <RCC_SetFlashLatency+0xb4>)
 80036ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036ce:	9006      	str	r0, [sp, #24]
 80036d0:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80036d4:	f103 0208 	add.w	r2, r3, #8
 80036d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036dc:	9004      	str	r0, [sp, #16]
 80036de:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80036e2:	ad01      	add	r5, sp, #4
 80036e4:	3310      	adds	r3, #16
 80036e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ee:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80036f2:	d007      	beq.n	8003704 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036f4:	2300      	movs	r3, #0
 80036f6:	e014      	b.n	8003722 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 80036f8:	aa08      	add	r2, sp, #32
 80036fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80036fe:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003702:	e01e      	b.n	8003742 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003704:	2300      	movs	r3, #0
 8003706:	2b02      	cmp	r3, #2
 8003708:	d808      	bhi.n	800371c <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800370a:	aa08      	add	r2, sp, #32
 800370c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003710:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8003714:	42a2      	cmp	r2, r4
 8003716:	d2ef      	bcs.n	80036f8 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003718:	3301      	adds	r3, #1
 800371a:	e7f4      	b.n	8003706 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800371c:	2500      	movs	r5, #0
 800371e:	e010      	b.n	8003742 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003720:	3301      	adds	r3, #1
 8003722:	2b02      	cmp	r3, #2
 8003724:	d80c      	bhi.n	8003740 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003726:	aa08      	add	r2, sp, #32
 8003728:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800372c:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8003730:	42a2      	cmp	r2, r4
 8003732:	d3f5      	bcc.n	8003720 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003734:	aa08      	add	r2, sp, #32
 8003736:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800373a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800373e:	e000      	b.n	8003742 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003740:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003742:	4a0d      	ldr	r2, [pc, #52]	@ (8003778 <RCC_SetFlashLatency+0xb8>)
 8003744:	6813      	ldr	r3, [r2, #0]
 8003746:	f023 0307 	bic.w	r3, r3, #7
 800374a:	432b      	orrs	r3, r5
 800374c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800374e:	f7fe f811 	bl	8001774 <HAL_GetTick>
 8003752:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003754:	4b08      	ldr	r3, [pc, #32]	@ (8003778 <RCC_SetFlashLatency+0xb8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	42ab      	cmp	r3, r5
 800375e:	d006      	beq.n	800376e <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003760:	f7fe f808 	bl	8001774 <HAL_GetTick>
 8003764:	1b00      	subs	r0, r0, r4
 8003766:	2802      	cmp	r0, #2
 8003768:	d9f4      	bls.n	8003754 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 800376a:	2003      	movs	r0, #3
 800376c:	e000      	b.n	8003770 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800376e:	2000      	movs	r0, #0
}
 8003770:	b009      	add	sp, #36	@ 0x24
 8003772:	bd30      	pop	{r4, r5, pc}
 8003774:	08013d18 	.word	0x08013d18
 8003778:	58004000 	.word	0x58004000

0800377c <RCC_SetFlashLatencyFromMSIRange>:
{
 800377c:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800377e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003782:	4b0c      	ldr	r3, [pc, #48]	@ (80037b4 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8003784:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800378c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	4a08      	ldr	r2, [pc, #32]	@ (80037b8 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8003796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379a:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800379e:	f7ff ff3b 	bl	8003618 <HAL_PWREx_GetVoltageRange>
 80037a2:	4601      	mov	r1, r0
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80037a6:	fba3 3404 	umull	r3, r4, r3, r4
 80037aa:	0ca0      	lsrs	r0, r4, #18
 80037ac:	f7ff ff88 	bl	80036c0 <RCC_SetFlashLatency>
}
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	bf00      	nop
 80037b4:	080140cc 	.word	0x080140cc
 80037b8:	0801412c 	.word	0x0801412c
 80037bc:	431bde83 	.word	0x431bde83

080037c0 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c4:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037cc:	f011 010c 	ands.w	r1, r1, #12
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x28>
 80037d2:	290c      	cmp	r1, #12
 80037d4:	d006      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037d6:	2904      	cmp	r1, #4
 80037d8:	d047      	beq.n	800386a <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037da:	2908      	cmp	r1, #8
 80037dc:	d03b      	beq.n	8003856 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80037de:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80037e0:	4610      	mov	r0, r2
 80037e2:	e026      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d1f6      	bne.n	80037d6 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80037e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f013 0308 	ands.w	r3, r3, #8
 80037f2:	d00d      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x50>
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f013 0308 	ands.w	r3, r3, #8
 80037fe:	d124      	bne.n	800384a <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003800:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003804:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003808:	4a2e      	ldr	r2, [pc, #184]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x104>)
 800380a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800380e:	e00e      	b.n	800382e <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	f012 0f08 	tst.w	r2, #8
 800381a:	d112      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800381c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003824:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003828:	4a26      	ldr	r2, [pc, #152]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x104>)
 800382a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800382e:	b1d1      	cbz	r1, 8003866 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8003830:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800383c:	2b0c      	cmp	r3, #12
 800383e:	d01a      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8003840:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003842:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	e7ee      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x68>
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384e:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003850:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003854:	e7d8      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 8003860:	d106      	bne.n	8003870 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8003862:	4819      	ldr	r0, [pc, #100]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003864:	e7e5      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8003866:	4610      	mov	r0, r2
 8003868:	e7e3      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800386a:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 800386c:	4817      	ldr	r0, [pc, #92]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800386e:	e7e0      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8003870:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8003872:	4816      	ldr	r0, [pc, #88]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003874:	e7dd      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003880:	2b02      	cmp	r3, #2
 8003882:	d009      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0xd8>
 8003884:	2b03      	cmp	r3, #3
 8003886:	d108      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8003892:	d115      	bne.n	80038c0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003894:	4a0c      	ldr	r2, [pc, #48]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003896:	e000      	b.n	800389a <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8003898:	4a0c      	ldr	r2, [pc, #48]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800389a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800389e:	68cb      	ldr	r3, [r1, #12]
 80038a0:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80038a4:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80038a8:	68cb      	ldr	r3, [r1, #12]
 80038aa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80038ae:	3301      	adds	r3, #1
 80038b0:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80038b4:	68c8      	ldr	r0, [r1, #12]
 80038b6:	0f40      	lsrs	r0, r0, #29
 80038b8:	3001      	adds	r0, #1
 80038ba:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80038be:	e7bf      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80038c0:	4a02      	ldr	r2, [pc, #8]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x10c>)
 80038c2:	e7ea      	b.n	800389a <HAL_RCC_GetSysClockFreq+0xda>
 80038c4:	080140cc 	.word	0x080140cc
 80038c8:	01e84800 	.word	0x01e84800
 80038cc:	00f42400 	.word	0x00f42400

080038d0 <HAL_RCC_GetHCLKFreq>:
{
 80038d0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80038d2:	f7ff ff75 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80038d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80038e0:	4a02      	ldr	r2, [pc, #8]	@ (80038ec <HAL_RCC_GetHCLKFreq+0x1c>)
 80038e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80038e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80038ea:	bd08      	pop	{r3, pc}
 80038ec:	0801412c 	.word	0x0801412c

080038f0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80038f0:	2800      	cmp	r0, #0
 80038f2:	f000 8319 	beq.w	8003f28 <HAL_RCC_OscConfig+0x638>
{
 80038f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f8:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80038fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038fe:	689d      	ldr	r5, [r3, #8]
 8003900:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003904:	68de      	ldr	r6, [r3, #12]
 8003906:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800390a:	6803      	ldr	r3, [r0, #0]
 800390c:	f013 0f20 	tst.w	r3, #32
 8003910:	f000 808f 	beq.w	8003a32 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003914:	b1ed      	cbz	r5, 8003952 <HAL_RCC_OscConfig+0x62>
 8003916:	2d0c      	cmp	r5, #12
 8003918:	d019      	beq.n	800394e <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800391a:	6a23      	ldr	r3, [r4, #32]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80bc 	beq.w	8003a9a <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003922:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003926:	6813      	ldr	r3, [r2, #0]
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800392e:	f7fd ff21 	bl	8001774 <HAL_GetTick>
 8003932:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f013 0f02 	tst.w	r3, #2
 800393e:	d165      	bne.n	8003a0c <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003940:	f7fd ff18 	bl	8001774 <HAL_GetTick>
 8003944:	1bc0      	subs	r0, r0, r7
 8003946:	2802      	cmp	r0, #2
 8003948:	d9f4      	bls.n	8003934 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800394a:	2003      	movs	r0, #3
 800394c:	e2f9      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800394e:	2e01      	cmp	r6, #1
 8003950:	d1e3      	bne.n	800391a <HAL_RCC_OscConfig+0x2a>
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f013 0f02 	tst.w	r3, #2
 800395c:	d003      	beq.n	8003966 <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800395e:	6a23      	ldr	r3, [r4, #32]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 82e3 	beq.w	8003f2c <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003966:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f013 0f08 	tst.w	r3, #8
 8003972:	d029      	beq.n	80039c8 <HAL_RCC_OscConfig+0xd8>
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800397e:	4298      	cmp	r0, r3
 8003980:	d92a      	bls.n	80039d8 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003982:	f7ff fefb 	bl	800377c <RCC_SetFlashLatencyFromMSIRange>
 8003986:	2800      	cmp	r0, #0
 8003988:	f040 82d2 	bne.w	8003f30 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800398c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800399e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80039ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039b0:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039b2:	f7ff ff8d 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 80039b6:	4bb0      	ldr	r3, [pc, #704]	@ (8003c78 <HAL_RCC_OscConfig+0x388>)
 80039b8:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80039ba:	4bb0      	ldr	r3, [pc, #704]	@ (8003c7c <HAL_RCC_OscConfig+0x38c>)
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	f7fd fed7 	bl	8001770 <HAL_InitTick>
        if (status != HAL_OK)
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d035      	beq.n	8003a32 <HAL_RCC_OscConfig+0x142>
 80039c6:	e2bc      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039d6:	e7d2      	b.n	800397e <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	f042 0208 	orr.w	r2, r2, #8
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80039ea:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80039f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039fc:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003a00:	f7ff febc 	bl	800377c <RCC_SetFlashLatencyFromMSIRange>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d0d4      	beq.n	80039b2 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8003a08:	2001      	movs	r0, #1
 8003a0a:	e29a      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	f042 0208 	orr.w	r2, r2, #8
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003a1e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a24:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003a2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a30:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	f013 0f01 	tst.w	r3, #1
 8003a38:	d051      	beq.n	8003ade <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a3a:	2d08      	cmp	r5, #8
 8003a3c:	d045      	beq.n	8003aca <HAL_RCC_OscConfig+0x1da>
 8003a3e:	2d0c      	cmp	r5, #12
 8003a40:	d041      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003a42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a4c:	68a1      	ldr	r1, [r4, #8]
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a52:	6863      	ldr	r3, [r4, #4]
 8003a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a58:	d063      	beq.n	8003b22 <HAL_RCC_OscConfig+0x232>
 8003a5a:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003a5e:	d065      	beq.n	8003b2c <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003a6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003a72:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d063      	beq.n	8003b42 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8003a7a:	f7fd fe7b 	bl	8001774 <HAL_GetTick>
 8003a7e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003a8a:	d128      	bne.n	8003ade <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fd fe72 	bl	8001774 <HAL_GetTick>
 8003a90:	1bc0      	subs	r0, r0, r7
 8003a92:	2864      	cmp	r0, #100	@ 0x64
 8003a94:	d9f4      	bls.n	8003a80 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8003a96:	2003      	movs	r0, #3
 8003a98:	e253      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003a9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a9e:	6813      	ldr	r3, [r2, #0]
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003aa6:	f7fd fe65 	bl	8001774 <HAL_GetTick>
 8003aaa:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f013 0f02 	tst.w	r3, #2
 8003ab6:	d0bc      	beq.n	8003a32 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab8:	f7fd fe5c 	bl	8001774 <HAL_GetTick>
 8003abc:	1bc0      	subs	r0, r0, r7
 8003abe:	2802      	cmp	r0, #2
 8003ac0:	d9f4      	bls.n	8003aac <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8003ac2:	2003      	movs	r0, #3
 8003ac4:	e23d      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ac6:	2e03      	cmp	r6, #3
 8003ac8:	d1bb      	bne.n	8003a42 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad6:	6863      	ldr	r3, [r4, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 822b 	beq.w	8003f34 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	f013 0f02 	tst.w	r3, #2
 8003ae4:	d052      	beq.n	8003b8c <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003ae6:	2d04      	cmp	r5, #4
 8003ae8:	d03d      	beq.n	8003b66 <HAL_RCC_OscConfig+0x276>
 8003aea:	2d0c      	cmp	r5, #12
 8003aec:	d039      	beq.n	8003b62 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8091 	beq.w	8003c18 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003af6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003afa:	6813      	ldr	r3, [r2, #0]
 8003afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b00:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b02:	f7fd fe37 	bl	8001774 <HAL_GetTick>
 8003b06:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003b12:	d177      	bne.n	8003c04 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fd fe2e 	bl	8001774 <HAL_GetTick>
 8003b18:	1b80      	subs	r0, r0, r6
 8003b1a:	2802      	cmp	r0, #2
 8003b1c:	d9f4      	bls.n	8003b08 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8003b1e:	2003      	movs	r0, #3
 8003b20:	e20f      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
}
 8003b2a:	e7a3      	b.n	8003a74 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003b36:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003b3e:	601a      	str	r2, [r3, #0]
}
 8003b40:	e798      	b.n	8003a74 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8003b42:	f7fd fe17 	bl	8001774 <HAL_GetTick>
 8003b46:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003b52:	d0c4      	beq.n	8003ade <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fd fe0e 	bl	8001774 <HAL_GetTick>
 8003b58:	1bc0      	subs	r0, r0, r7
 8003b5a:	2864      	cmp	r0, #100	@ 0x64
 8003b5c:	d9f4      	bls.n	8003b48 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8003b5e:	2003      	movs	r0, #3
 8003b60:	e1ef      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b62:	2e02      	cmp	r6, #2
 8003b64:	d1c3      	bne.n	8003aee <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 81df 	beq.w	8003f38 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003b7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b80:	6853      	ldr	r3, [r2, #4]
 8003b82:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003b86:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003b8a:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	f013 0f08 	tst.w	r3, #8
 8003b92:	f000 808e 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b96:	69a3      	ldr	r3, [r4, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d071      	beq.n	8003c80 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 8003b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003ba4:	69e1      	ldr	r1, [r4, #28]
 8003ba6:	f003 0210 	and.w	r2, r3, #16
 8003baa:	4291      	cmp	r1, r2
 8003bac:	d011      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003bae:	f003 0203 	and.w	r2, r3, #3
 8003bb2:	2a02      	cmp	r2, #2
 8003bb4:	f000 81c2 	beq.w	8003f3c <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003bb8:	f013 0f01 	tst.w	r3, #1
 8003bbc:	d142      	bne.n	8003c44 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bc2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8003bc6:	f023 0310 	bic.w	r3, r3, #16
 8003bca:	69e1      	ldr	r1, [r4, #28]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003bd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bd6:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8003be2:	f7fd fdc7 	bl	8001774 <HAL_GetTick>
 8003be6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf0:	f013 0f02 	tst.w	r3, #2
 8003bf4:	d15d      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf6:	f7fd fdbd 	bl	8001774 <HAL_GetTick>
 8003bfa:	1b80      	subs	r0, r0, r6
 8003bfc:	2811      	cmp	r0, #17
 8003bfe:	d9f3      	bls.n	8003be8 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8003c00:	2003      	movs	r0, #3
 8003c02:	e19e      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c0a:	6853      	ldr	r3, [r2, #4]
 8003c0c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003c10:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003c14:	6053      	str	r3, [r2, #4]
}
 8003c16:	e7b9      	b.n	8003b8c <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003c18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c1c:	6813      	ldr	r3, [r2, #0]
 8003c1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c22:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c24:	f7fd fda6 	bl	8001774 <HAL_GetTick>
 8003c28:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003c34:	d0aa      	beq.n	8003b8c <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c36:	f7fd fd9d 	bl	8001774 <HAL_GetTick>
 8003c3a:	1b80      	subs	r0, r0, r6
 8003c3c:	2802      	cmp	r0, #2
 8003c3e:	d9f4      	bls.n	8003c2a <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8003c40:	2003      	movs	r0, #3
 8003c42:	e17e      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c48:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8003c54:	f7fd fd8e 	bl	8001774 <HAL_GetTick>
 8003c58:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c62:	f013 0f02 	tst.w	r3, #2
 8003c66:	d0aa      	beq.n	8003bbe <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c68:	f7fd fd84 	bl	8001774 <HAL_GetTick>
 8003c6c:	1b80      	subs	r0, r0, r6
 8003c6e:	2811      	cmp	r0, #17
 8003c70:	d9f3      	bls.n	8003c5a <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8003c72:	2003      	movs	r0, #3
 8003c74:	e165      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
 8003c76:	bf00      	nop
 8003c78:	2000004c 	.word	0x2000004c
 8003c7c:	20000054 	.word	0x20000054
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c84:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8003c90:	f7fd fd70 	bl	8001774 <HAL_GetTick>
 8003c94:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c9e:	f013 0f02 	tst.w	r3, #2
 8003ca2:	d006      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fd fd66 	bl	8001774 <HAL_GetTick>
 8003ca8:	1b80      	subs	r0, r0, r6
 8003caa:	2811      	cmp	r0, #17
 8003cac:	d9f3      	bls.n	8003c96 <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 8003cae:	2003      	movs	r0, #3
 8003cb0:	e147      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	f013 0f04 	tst.w	r3, #4
 8003cb8:	f000 80b1 	beq.w	8003e1e <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003cbc:	4ba8      	ldr	r3, [pc, #672]	@ (8003f60 <HAL_RCC_OscConfig+0x670>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003cc4:	d110      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 8003cc6:	f7ff fc79 	bl	80035bc <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8003cca:	f7fd fd53 	bl	8001774 <HAL_GetTick>
 8003cce:	4606      	mov	r6, r0
 8003cd0:	4ba3      	ldr	r3, [pc, #652]	@ (8003f60 <HAL_RCC_OscConfig+0x670>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003cd8:	d106      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cda:	f7fd fd4b 	bl	8001774 <HAL_GetTick>
 8003cde:	1b80      	subs	r0, r0, r6
 8003ce0:	2802      	cmp	r0, #2
 8003ce2:	d9f5      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 8003ce4:	2003      	movs	r0, #3
 8003ce6:	e12c      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce8:	68e3      	ldr	r3, [r4, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d061      	beq.n	8003db2 <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003cee:	2b85      	cmp	r3, #133	@ 0x85
 8003cf0:	d001      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003cf2:	2b05      	cmp	r3, #5
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cfa:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003cfe:	f043 0304 	orr.w	r3, r3, #4
 8003d02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8003d06:	f7fd fd35 	bl	8001774 <HAL_GetTick>
 8003d0a:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d10:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d24:	f013 0f02 	tst.w	r3, #2
 8003d28:	d108      	bne.n	8003d3c <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2a:	f7fd fd23 	bl	8001774 <HAL_GetTick>
 8003d2e:	1b80      	subs	r0, r0, r6
 8003d30:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d34:	4298      	cmp	r0, r3
 8003d36:	d9f1      	bls.n	8003d1c <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 8003d38:	2003      	movs	r0, #3
 8003d3a:	e102      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003d3c:	68e3      	ldr	r3, [r4, #12]
 8003d3e:	2b81      	cmp	r3, #129	@ 0x81
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003d42:	2b85      	cmp	r3, #133	@ 0x85
 8003d44:	d11a      	bne.n	8003d7c <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 8003d46:	f7fd fd15 	bl	8001774 <HAL_GetTick>
 8003d4a:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d50:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d64:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003d68:	d159      	bne.n	8003e1e <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fd fd03 	bl	8001774 <HAL_GetTick>
 8003d6e:	1b80      	subs	r0, r0, r6
 8003d70:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d74:	4298      	cmp	r0, r3
 8003d76:	d9f1      	bls.n	8003d5c <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8003d78:	2003      	movs	r0, #3
 8003d7a:	e0e2      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8003d7c:	f7fd fcfa 	bl	8001774 <HAL_GetTick>
 8003d80:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d86:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003d8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003d9e:	d03e      	beq.n	8003e1e <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f7fd fce8 	bl	8001774 <HAL_GetTick>
 8003da4:	1b80      	subs	r0, r0, r6
 8003da6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003daa:	4298      	cmp	r0, r3
 8003dac:	d9f1      	bls.n	8003d92 <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 8003dae:	2003      	movs	r0, #3
 8003db0:	e0c7      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8003db2:	f7fd fcdf 	bl	8001774 <HAL_GetTick>
 8003db6:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003db8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dbc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003dc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd0:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003dd4:	d008      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fd fccd 	bl	8001774 <HAL_GetTick>
 8003dda:	1b80      	subs	r0, r0, r6
 8003ddc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003de0:	4298      	cmp	r0, r3
 8003de2:	d9f1      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 8003de4:	2003      	movs	r0, #3
 8003de6:	e0ac      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8003de8:	f7fd fcc4 	bl	8001774 <HAL_GetTick>
 8003dec:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003df2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e06:	f013 0f02 	tst.w	r3, #2
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0c:	f7fd fcb2 	bl	8001774 <HAL_GetTick>
 8003e10:	1b80      	subs	r0, r0, r6
 8003e12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e16:	4298      	cmp	r0, r3
 8003e18:	d9f1      	bls.n	8003dfe <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 8003e1a:	2003      	movs	r0, #3
 8003e1c:	e091      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e1e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 808d 	beq.w	8003f40 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e26:	2d0c      	cmp	r5, #12
 8003e28:	d062      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d01f      	beq.n	8003e6e <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003e38:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	f022 0203 	bic.w	r2, r2, #3
 8003e40:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	f022 5288 	bic.w	r2, r2, #285212672	@ 0x11000000
 8003e48:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003e4c:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fc91 	bl	8001774 <HAL_GetTick>
 8003e52:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003e5e:	d073      	beq.n	8003f48 <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fd fc88 	bl	8001774 <HAL_GetTick>
 8003e64:	1b00      	subs	r0, r0, r4
 8003e66:	280a      	cmp	r0, #10
 8003e68:	d9f4      	bls.n	8003e54 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 8003e6a:	2003      	movs	r0, #3
 8003e6c:	e069      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003e6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e7a:	f7fd fc7b 	bl	8001774 <HAL_GetTick>
 8003e7e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003e8a:	d12a      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e90:	68d3      	ldr	r3, [r2, #12]
 8003e92:	4934      	ldr	r1, [pc, #208]	@ (8003f64 <HAL_RCC_OscConfig+0x674>)
 8003e94:	4019      	ands	r1, r3
 8003e96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e98:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003e9a:	4303      	orrs	r3, r0
 8003e9c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003e9e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003ea2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003ea4:	4303      	orrs	r3, r0
 8003ea6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003ea8:	4303      	orrs	r3, r0
 8003eaa:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003eac:	4303      	orrs	r3, r0
 8003eae:	4319      	orrs	r1, r3
 8003eb0:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003eb2:	6813      	ldr	r3, [r2, #0]
 8003eb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eb8:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eba:	68d3      	ldr	r3, [r2, #12]
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec0:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003ec2:	f7fd fc57 	bl	8001774 <HAL_GetTick>
 8003ec6:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003ed2:	d137      	bne.n	8003f44 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fd fc4e 	bl	8001774 <HAL_GetTick>
 8003ed8:	1b00      	subs	r0, r0, r4
 8003eda:	280a      	cmp	r0, #10
 8003edc:	d9f4      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 8003ede:	2003      	movs	r0, #3
 8003ee0:	e02f      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fd fc47 	bl	8001774 <HAL_GetTick>
 8003ee6:	1b40      	subs	r0, r0, r5
 8003ee8:	280a      	cmp	r0, #10
 8003eea:	d9c9      	bls.n	8003e80 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8003eec:	2003      	movs	r0, #3
 8003eee:	e028      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d02b      	beq.n	8003f4c <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef8:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003efa:	f003 0103 	and.w	r1, r3, #3
 8003efe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003f00:	4291      	cmp	r1, r2
 8003f02:	d125      	bne.n	8003f50 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003f04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f0a:	428a      	cmp	r2, r1
 8003f0c:	d122      	bne.n	8003f54 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003f0e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f12:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003f14:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003f18:	d11e      	bne.n	8003f58 <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003f1a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8003f1e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d11b      	bne.n	8003f5c <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8003f24:	2000      	movs	r0, #0
 8003f26:	e00c      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 8003f28:	2001      	movs	r0, #1
}
 8003f2a:	4770      	bx	lr
        return HAL_ERROR;
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8003f30:	2001      	movs	r0, #1
 8003f32:	e006      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8003f34:	2001      	movs	r0, #1
 8003f36:	e004      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8003f38:	2001      	movs	r0, #1
 8003f3a:	e002      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	e000      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8003f40:	2000      	movs	r0, #0
}
 8003f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003f44:	2000      	movs	r0, #0
 8003f46:	e7fc      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
 8003f48:	2000      	movs	r0, #0
 8003f4a:	e7fa      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	e7f8      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8003f50:	2001      	movs	r0, #1
 8003f52:	e7f6      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
 8003f54:	2001      	movs	r0, #1
 8003f56:	e7f4      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
 8003f58:	2001      	movs	r0, #1
 8003f5a:	e7f2      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	e7f0      	b.n	8003f42 <HAL_RCC_OscConfig+0x652>
 8003f60:	58000400 	.word	0x58000400
 8003f64:	11c1808c 	.word	0x11c1808c

08003f68 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	f000 8104 	beq.w	8004176 <HAL_RCC_ClockConfig+0x20e>
{
 8003f6e:	b570      	push	{r4, r5, r6, lr}
 8003f70:	460c      	mov	r4, r1
 8003f72:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f74:	4b82      	ldr	r3, [pc, #520]	@ (8004180 <HAL_RCC_ClockConfig+0x218>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	428b      	cmp	r3, r1
 8003f7e:	d327      	bcc.n	8003fd0 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	f013 0f02 	tst.w	r3, #2
 8003f86:	d139      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x94>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003f8e:	d14d      	bne.n	800402c <HAL_RCC_ClockConfig+0xc4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	f013 0f04 	tst.w	r3, #4
 8003f96:	d165      	bne.n	8004064 <HAL_RCC_ClockConfig+0xfc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	f013 0f08 	tst.w	r3, #8
 8003f9e:	d179      	bne.n	8004094 <HAL_RCC_ClockConfig+0x12c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	f013 0f01 	tst.w	r3, #1
 8003fa6:	f000 80c1 	beq.w	800412c <HAL_RCC_ClockConfig+0x1c4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003faa:	686b      	ldr	r3, [r5, #4]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	f000 808b 	beq.w	80040c8 <HAL_RCC_ClockConfig+0x160>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	f000 8090 	beq.w	80040d8 <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f040 8095 	bne.w	80040e8 <HAL_RCC_ClockConfig+0x180>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003fbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	f012 0f02 	tst.w	r2, #2
 8003fc8:	f040 8094 	bne.w	80040f4 <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 8003fcc:	2001      	movs	r0, #1
 8003fce:	e0d1      	b.n	8004174 <HAL_RCC_ClockConfig+0x20c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd0:	4a6b      	ldr	r2, [pc, #428]	@ (8004180 <HAL_RCC_ClockConfig+0x218>)
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	f023 0307 	bic.w	r3, r3, #7
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003fdc:	f7fd fbca 	bl	8001774 <HAL_GetTick>
 8003fe0:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b67      	ldr	r3, [pc, #412]	@ (8004180 <HAL_RCC_ClockConfig+0x218>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	42a3      	cmp	r3, r4
 8003fec:	d0c8      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003fee:	f7fd fbc1 	bl	8001774 <HAL_GetTick>
 8003ff2:	1b80      	subs	r0, r0, r6
 8003ff4:	2802      	cmp	r0, #2
 8003ff6:	d9f4      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x7a>
        return HAL_TIMEOUT;
 8003ff8:	2003      	movs	r0, #3
 8003ffa:	e0bb      	b.n	8004174 <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003ffc:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003ffe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004002:	688a      	ldr	r2, [r1, #8]
 8004004:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800400c:	f7fd fbb2 	bl	8001774 <HAL_GetTick>
 8004010:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800401c:	d1b4      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800401e:	f7fd fba9 	bl	8001774 <HAL_GetTick>
 8004022:	1b80      	subs	r0, r0, r6
 8004024:	2802      	cmp	r0, #2
 8004026:	d9f4      	bls.n	8004012 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8004028:	2003      	movs	r0, #3
 800402a:	e0a3      	b.n	8004174 <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800402c:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800402e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004032:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 8004036:	f023 030f 	bic.w	r3, r3, #15
 800403a:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 800403e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8004042:	f7fd fb97 	bl	8001774 <HAL_GetTick>
 8004046:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800404c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004050:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004054:	d19c      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004056:	f7fd fb8d 	bl	8001774 <HAL_GetTick>
 800405a:	1b80      	subs	r0, r0, r6
 800405c:	2802      	cmp	r0, #2
 800405e:	d9f3      	bls.n	8004048 <HAL_RCC_ClockConfig+0xe0>
        return HAL_TIMEOUT;
 8004060:	2003      	movs	r0, #3
 8004062:	e087      	b.n	8004174 <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004064:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004066:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800406a:	688a      	ldr	r2, [r1, #8]
 800406c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004070:	4313      	orrs	r3, r2
 8004072:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004074:	f7fd fb7e 	bl	8001774 <HAL_GetTick>
 8004078:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004084:	d188      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004086:	f7fd fb75 	bl	8001774 <HAL_GetTick>
 800408a:	1b80      	subs	r0, r0, r6
 800408c:	2802      	cmp	r0, #2
 800408e:	d9f4      	bls.n	800407a <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8004090:	2003      	movs	r0, #3
 8004092:	e06f      	b.n	8004174 <HAL_RCC_ClockConfig+0x20c>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004094:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004096:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800409a:	6893      	ldr	r3, [r2, #8]
 800409c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80040a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040a4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80040a6:	f7fd fb65 	bl	8001774 <HAL_GetTick>
 80040aa:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80040b6:	f47f af73 	bne.w	8003fa0 <HAL_RCC_ClockConfig+0x38>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80040ba:	f7fd fb5b 	bl	8001774 <HAL_GetTick>
 80040be:	1b80      	subs	r0, r0, r6
 80040c0:	2802      	cmp	r0, #2
 80040c2:	d9f3      	bls.n	80040ac <HAL_RCC_ClockConfig+0x144>
        return HAL_TIMEOUT;
 80040c4:	2003      	movs	r0, #3
 80040c6:	e055      	b.n	8004174 <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80040c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80040d2:	d10f      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 80040d4:	2001      	movs	r0, #1
 80040d6:	e04d      	b.n	8004174 <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80040d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x18c>
        return HAL_ERROR;
 80040e4:	2001      	movs	r0, #1
 80040e6:	e045      	b.n	8004174 <HAL_RCC_ClockConfig+0x20c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80040e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80040f2:	d042      	beq.n	800417a <HAL_RCC_ClockConfig+0x212>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80040f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040f8:	688a      	ldr	r2, [r1, #8]
 80040fa:	f022 0203 	bic.w	r2, r2, #3
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004102:	f7fd fb37 	bl	8001774 <HAL_GetTick>
 8004106:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	686a      	ldr	r2, [r5, #4]
 8004114:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004118:	d008      	beq.n	800412c <HAL_RCC_ClockConfig+0x1c4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411a:	f7fd fb2b 	bl	8001774 <HAL_GetTick>
 800411e:	1b80      	subs	r0, r0, r6
 8004120:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004124:	4298      	cmp	r0, r3
 8004126:	d9ef      	bls.n	8004108 <HAL_RCC_ClockConfig+0x1a0>
        return HAL_TIMEOUT;
 8004128:	2003      	movs	r0, #3
 800412a:	e023      	b.n	8004174 <HAL_RCC_ClockConfig+0x20c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800412c:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <HAL_RCC_ClockConfig+0x218>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	42a3      	cmp	r3, r4
 8004136:	d915      	bls.n	8004164 <HAL_RCC_ClockConfig+0x1fc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004138:	4a11      	ldr	r2, [pc, #68]	@ (8004180 <HAL_RCC_ClockConfig+0x218>)
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	f023 0307 	bic.w	r3, r3, #7
 8004140:	4323      	orrs	r3, r4
 8004142:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004144:	f7fd fb16 	bl	8001774 <HAL_GetTick>
 8004148:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <HAL_RCC_ClockConfig+0x218>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	42a3      	cmp	r3, r4
 8004154:	d006      	beq.n	8004164 <HAL_RCC_ClockConfig+0x1fc>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004156:	f7fd fb0d 	bl	8001774 <HAL_GetTick>
 800415a:	1b40      	subs	r0, r0, r5
 800415c:	2802      	cmp	r0, #2
 800415e:	d9f4      	bls.n	800414a <HAL_RCC_ClockConfig+0x1e2>
        return HAL_TIMEOUT;
 8004160:	2003      	movs	r0, #3
 8004162:	e007      	b.n	8004174 <HAL_RCC_ClockConfig+0x20c>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004164:	f7ff fbb4 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8004168:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <HAL_RCC_ClockConfig+0x21c>)
 800416a:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_RCC_ClockConfig+0x220>)
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	f7fd fafe 	bl	8001770 <HAL_InitTick>
}
 8004174:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004176:	2001      	movs	r0, #1
}
 8004178:	4770      	bx	lr
        return HAL_ERROR;
 800417a:	2001      	movs	r0, #1
 800417c:	e7fa      	b.n	8004174 <HAL_RCC_ClockConfig+0x20c>
 800417e:	bf00      	nop
 8004180:	58004000 	.word	0x58004000
 8004184:	2000004c 	.word	0x2000004c
 8004188:	20000054 	.word	0x20000054

0800418c <HAL_RCC_GetPCLK1Freq>:
{
 800418c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800418e:	f7ff fb9f 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800419c:	4a02      	ldr	r2, [pc, #8]	@ (80041a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80041a2:	40d8      	lsrs	r0, r3
 80041a4:	bd08      	pop	{r3, pc}
 80041a6:	bf00      	nop
 80041a8:	0801410c 	.word	0x0801410c

080041ac <HAL_RCC_GetPCLK2Freq>:
{
 80041ac:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80041ae:	f7ff fb8f 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80041bc:	4a02      	ldr	r2, [pc, #8]	@ (80041c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80041be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80041c2:	40d8      	lsrs	r0, r3
 80041c4:	bd08      	pop	{r3, pc}
 80041c6:	bf00      	nop
 80041c8:	0801410c 	.word	0x0801410c

080041cc <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80041cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041d0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80041d4:	0902      	lsrs	r2, r0, #4
 80041d6:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 80041da:	ea23 0302 	bic.w	r3, r3, r2
 80041de:	0100      	lsls	r0, r0, #4
 80041e0:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 80041e4:	4303      	orrs	r3, r0
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80041ea:	4770      	bx	lr

080041ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041f0:	6803      	ldr	r3, [r0, #0]
 80041f2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80041f6:	f040 80aa 	bne.w	800434e <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80041fa:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	f013 0f01 	tst.w	r3, #1
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004204:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004206:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800420a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800420e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004212:	b292      	uxth	r2, r2
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	f013 0f02 	tst.w	r3, #2
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004222:	68a2      	ldr	r2, [r4, #8]
 8004224:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004228:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800422c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004230:	b292      	uxth	r2, r2
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	f013 0f20 	tst.w	r3, #32
 800423e:	d009      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004240:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004242:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004246:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800424a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800425a:	d00c      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800425c:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800425e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004262:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004266:	0c02      	lsrs	r2, r0, #16
 8004268:	0412      	lsls	r2, r2, #16
 800426a:	ea23 0302 	bic.w	r3, r3, r2
 800426e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800427c:	d00c      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800427e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004280:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004284:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004288:	0c02      	lsrs	r2, r0, #16
 800428a:	0412      	lsls	r2, r2, #16
 800428c:	ea23 0302 	bic.w	r3, r3, r2
 8004290:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800429e:	d00c      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80042a0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80042a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80042aa:	0c02      	lsrs	r2, r0, #16
 80042ac:	0412      	lsls	r2, r2, #16
 80042ae:	ea23 0302 	bic.w	r3, r3, r2
 80042b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80042c0:	f040 809d 	bne.w	80043fe <HAL_RCCEx_PeriphCLKConfig+0x212>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80042ca:	f040 809c 	bne.w	8004406 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80042d4:	f040 809b 	bne.w	800440e <HAL_RCCEx_PeriphCLKConfig+0x222>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	f013 0f10 	tst.w	r3, #16
 80042de:	d00e      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80042e0:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80042e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80042ea:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80042f4:	68e3      	ldr	r3, [r4, #12]
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042fa:	f000 808c 	beq.w	8004416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004304:	d00f      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004306:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004308:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800430c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004310:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800431a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800431c:	b91b      	cbnz	r3, 8004326 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800431e:	68cb      	ldr	r3, [r1, #12]
 8004320:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004324:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800432c:	d00d      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800432e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004330:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004334:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004338:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004342:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004348:	d06a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 800434a:	4628      	mov	r0, r5
 800434c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 800434e:	f7ff f935 	bl	80035bc <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004352:	f7fd fa0f 	bl	8001774 <HAL_GetTick>
 8004356:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004358:	4b34      	ldr	r3, [pc, #208]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004360:	d106      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004362:	f7fd fa07 	bl	8001774 <HAL_GetTick>
 8004366:	1b40      	subs	r0, r0, r5
 8004368:	2802      	cmp	r0, #2
 800436a:	d9f5      	bls.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 800436c:	2503      	movs	r5, #3
 800436e:	e000      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004370:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004372:	2d00      	cmp	r5, #0
 8004374:	f47f af42 	bne.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004384:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004386:	429a      	cmp	r2, r3
 8004388:	d024      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800438a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800438e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004392:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004396:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800439a:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800439e:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80043a2:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80043a6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80043aa:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 80043ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80043b2:	f012 0f02 	tst.w	r2, #2
 80043b6:	d10f      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      if (ret == HAL_OK)
 80043b8:	2d00      	cmp	r5, #0
 80043ba:	f47f af1f 	bne.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80043c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80043c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80043d2:	e713      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 80043d4:	2200      	movs	r2, #0
 80043d6:	e7ec      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        tickstart = HAL_GetTick();
 80043d8:	f7fd f9cc 	bl	8001774 <HAL_GetTick>
 80043dc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80043de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e6:	f013 0f02 	tst.w	r3, #2
 80043ea:	d1e5      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ec:	f7fd f9c2 	bl	8001774 <HAL_GetTick>
 80043f0:	1b80      	subs	r0, r0, r6
 80043f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80043f6:	4298      	cmp	r0, r3
 80043f8:	d9f1      	bls.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            ret = HAL_TIMEOUT;
 80043fa:	2503      	movs	r5, #3
 80043fc:	e7dc      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043fe:	6960      	ldr	r0, [r4, #20]
 8004400:	f7ff fee4 	bl	80041cc <LL_RCC_SetI2CClockSource>
 8004404:	e75e      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004406:	69a0      	ldr	r0, [r4, #24]
 8004408:	f7ff fee0 	bl	80041cc <LL_RCC_SetI2CClockSource>
 800440c:	e75f      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800440e:	69e0      	ldr	r0, [r4, #28]
 8004410:	f7ff fedc 	bl	80041cc <LL_RCC_SetI2CClockSource>
 8004414:	e760      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004416:	68cb      	ldr	r3, [r1, #12]
 8004418:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800441c:	60cb      	str	r3, [r1, #12]
 800441e:	e76e      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004420:	68cb      	ldr	r3, [r1, #12]
 8004422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004426:	60cb      	str	r3, [r1, #12]
 8004428:	e78f      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800442a:	bf00      	nop
 800442c:	58000400 	.word	0x58000400

08004430 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004430:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004432:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8004436:	2a01      	cmp	r2, #1
 8004438:	d035      	beq.n	80044a6 <HAL_RTC_DeactivateAlarm+0x76>
 800443a:	2201      	movs	r2, #1
 800443c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004440:	2202      	movs	r2, #2
 8004442:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004446:	4a19      	ldr	r2, [pc, #100]	@ (80044ac <HAL_RTC_DeactivateAlarm+0x7c>)
 8004448:	20ca      	movs	r0, #202	@ 0xca
 800444a:	6250      	str	r0, [r2, #36]	@ 0x24
 800444c:	2053      	movs	r0, #83	@ 0x53
 800444e:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8004450:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004454:	d018      	beq.n	8004488 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004456:	4a15      	ldr	r2, [pc, #84]	@ (80044ac <HAL_RTC_DeactivateAlarm+0x7c>)
 8004458:	6991      	ldr	r1, [r2, #24]
 800445a:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 800445e:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004460:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8004462:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004466:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004468:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800446a:	f021 0102 	bic.w	r1, r1, #2
 800446e:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004470:	2102      	movs	r1, #2
 8004472:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004474:	4a0d      	ldr	r2, [pc, #52]	@ (80044ac <HAL_RTC_DeactivateAlarm+0x7c>)
 8004476:	21ff      	movs	r1, #255	@ 0xff
 8004478:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800447a:	2201      	movs	r2, #1
 800447c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004480:	2000      	movs	r0, #0
 8004482:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004486:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004488:	6991      	ldr	r1, [r2, #24]
 800448a:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 800448e:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004490:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004492:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004496:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004498:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800449a:	f021 0101 	bic.w	r1, r1, #1
 800449e:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80044a0:	2101      	movs	r1, #1
 80044a2:	65d1      	str	r1, [r2, #92]	@ 0x5c
 80044a4:	e7e6      	b.n	8004474 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 80044a6:	2002      	movs	r0, #2
}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40002800 	.word	0x40002800

080044b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80044b4:	4b0d      	ldr	r3, [pc, #52]	@ (80044ec <HAL_RTC_AlarmIRQHandler+0x3c>)
 80044b6:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80044b8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80044ba:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80044bc:	f015 0f01 	tst.w	r5, #1
 80044c0:	d106      	bne.n	80044d0 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80044c2:	f015 0f02 	tst.w	r5, #2
 80044c6:	d109      	bne.n	80044dc <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80044d0:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <HAL_RTC_AlarmIRQHandler+0x3c>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80044d6:	f7fd fac9 	bl	8001a6c <HAL_RTC_AlarmAEventCallback>
 80044da:	e7f2      	b.n	80044c2 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80044dc:	4b03      	ldr	r3, [pc, #12]	@ (80044ec <HAL_RTC_AlarmIRQHandler+0x3c>)
 80044de:	2202      	movs	r2, #2
 80044e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80044e2:	4620      	mov	r0, r4
 80044e4:	f000 f9e8 	bl	80048b8 <HAL_RTCEx_AlarmBEventCallback>
 80044e8:	e7ee      	b.n	80044c8 <HAL_RTC_AlarmIRQHandler+0x18>
 80044ea:	bf00      	nop
 80044ec:	40002800 	.word	0x40002800

080044f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044f0:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80044f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004520 <HAL_RTC_WaitForSynchro+0x30>)
 80044f4:	68d3      	ldr	r3, [r2, #12]
 80044f6:	f023 0320 	bic.w	r3, r3, #32
 80044fa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80044fc:	f7fd f93a 	bl	8001774 <HAL_GetTick>
 8004500:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004502:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <HAL_RTC_WaitForSynchro+0x30>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f013 0f20 	tst.w	r3, #32
 800450a:	d107      	bne.n	800451c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800450c:	f7fd f932 	bl	8001774 <HAL_GetTick>
 8004510:	1b00      	subs	r0, r0, r4
 8004512:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004516:	d9f4      	bls.n	8004502 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8004518:	2003      	movs	r0, #3
 800451a:	e000      	b.n	800451e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800451c:	2000      	movs	r0, #0
}
 800451e:	bd10      	pop	{r4, pc}
 8004520:	40002800 	.word	0x40002800

08004524 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004524:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004526:	4b11      	ldr	r3, [pc, #68]	@ (800456c <RTC_EnterInitMode+0x48>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800452e:	d002      	beq.n	8004536 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004530:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8004532:	4620      	mov	r0, r4
 8004534:	bd70      	pop	{r4, r5, r6, pc}
 8004536:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004538:	4a0c      	ldr	r2, [pc, #48]	@ (800456c <RTC_EnterInitMode+0x48>)
 800453a:	68d3      	ldr	r3, [r2, #12]
 800453c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004540:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004542:	f7fd f917 	bl	8001774 <HAL_GetTick>
 8004546:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004548:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800454a:	4b08      	ldr	r3, [pc, #32]	@ (800456c <RTC_EnterInitMode+0x48>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004552:	d1ee      	bne.n	8004532 <RTC_EnterInitMode+0xe>
 8004554:	2c03      	cmp	r4, #3
 8004556:	d0ec      	beq.n	8004532 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004558:	f7fd f90c 	bl	8001774 <HAL_GetTick>
 800455c:	1b43      	subs	r3, r0, r5
 800455e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004562:	d9f2      	bls.n	800454a <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004564:	2403      	movs	r4, #3
 8004566:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 800456a:	e7ee      	b.n	800454a <RTC_EnterInitMode+0x26>
 800456c:	40002800 	.word	0x40002800

08004570 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004570:	b510      	push	{r4, lr}
 8004572:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004574:	4b10      	ldr	r3, [pc, #64]	@ (80045b8 <RTC_ExitInitMode+0x48>)
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800457c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f013 0f20 	tst.w	r3, #32
 8004584:	d106      	bne.n	8004594 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004586:	f7ff ffb3 	bl	80044f0 <HAL_RTC_WaitForSynchro>
 800458a:	b198      	cbz	r0, 80045b4 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800458c:	2003      	movs	r0, #3
 800458e:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8004592:	e00f      	b.n	80045b4 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004594:	4a08      	ldr	r2, [pc, #32]	@ (80045b8 <RTC_ExitInitMode+0x48>)
 8004596:	6993      	ldr	r3, [r2, #24]
 8004598:	f023 0320 	bic.w	r3, r3, #32
 800459c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800459e:	f7ff ffa7 	bl	80044f0 <HAL_RTC_WaitForSynchro>
 80045a2:	b110      	cbz	r0, 80045aa <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045a4:	2003      	movs	r0, #3
 80045a6:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80045aa:	4a03      	ldr	r2, [pc, #12]	@ (80045b8 <RTC_ExitInitMode+0x48>)
 80045ac:	6993      	ldr	r3, [r2, #24]
 80045ae:	f043 0320 	orr.w	r3, r3, #32
 80045b2:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80045b4:	bd10      	pop	{r4, pc}
 80045b6:	bf00      	nop
 80045b8:	40002800 	.word	0x40002800

080045bc <HAL_RTC_Init>:
  if (hrtc != NULL)
 80045bc:	2800      	cmp	r0, #0
 80045be:	d04e      	beq.n	800465e <HAL_RTC_Init+0xa2>
{
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80045c4:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80045c8:	b17b      	cbz	r3, 80045ea <HAL_RTC_Init+0x2e>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80045ca:	2302      	movs	r3, #2
 80045cc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045d0:	4b24      	ldr	r3, [pc, #144]	@ (8004664 <HAL_RTC_Init+0xa8>)
 80045d2:	22ca      	movs	r2, #202	@ 0xca
 80045d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80045d6:	2253      	movs	r2, #83	@ 0x53
 80045d8:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80045da:	4620      	mov	r0, r4
 80045dc:	f7ff ffa2 	bl	8004524 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80045e0:	b140      	cbz	r0, 80045f4 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045e2:	4b20      	ldr	r3, [pc, #128]	@ (8004664 <HAL_RTC_Init+0xa8>)
 80045e4:	22ff      	movs	r2, #255	@ 0xff
 80045e6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80045e8:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80045ea:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 80045ee:	f7fc ff27 	bl	8001440 <HAL_RTC_MspInit>
 80045f2:	e7ea      	b.n	80045ca <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80045f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004664 <HAL_RTC_Init+0xa8>)
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 80045fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004600:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004602:	6999      	ldr	r1, [r3, #24]
 8004604:	6862      	ldr	r2, [r4, #4]
 8004606:	6920      	ldr	r0, [r4, #16]
 8004608:	4302      	orrs	r2, r0
 800460a:	69a0      	ldr	r0, [r4, #24]
 800460c:	4302      	orrs	r2, r0
 800460e:	430a      	orrs	r2, r1
 8004610:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004612:	68e2      	ldr	r2, [r4, #12]
 8004614:	68a1      	ldr	r1, [r4, #8]
 8004616:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800461a:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8004622:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004624:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004626:	4301      	orrs	r1, r0
 8004628:	430a      	orrs	r2, r1
 800462a:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 800462c:	4620      	mov	r0, r4
 800462e:	f7ff ff9f 	bl	8004570 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004632:	b118      	cbz	r0, 800463c <HAL_RTC_Init+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004634:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <HAL_RTC_Init+0xa8>)
 8004636:	22ff      	movs	r2, #255	@ 0xff
 8004638:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800463a:	e7d5      	b.n	80045e8 <HAL_RTC_Init+0x2c>
        MODIFY_REG(RTC->CR, \
 800463c:	4909      	ldr	r1, [pc, #36]	@ (8004664 <HAL_RTC_Init+0xa8>)
 800463e:	698b      	ldr	r3, [r1, #24]
 8004640:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8004644:	6a22      	ldr	r2, [r4, #32]
 8004646:	69e5      	ldr	r5, [r4, #28]
 8004648:	432a      	orrs	r2, r5
 800464a:	6965      	ldr	r5, [r4, #20]
 800464c:	432a      	orrs	r2, r5
 800464e:	4313      	orrs	r3, r2
 8004650:	618b      	str	r3, [r1, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004652:	23ff      	movs	r3, #255	@ 0xff
 8004654:	624b      	str	r3, [r1, #36]	@ 0x24
      hrtc->State = HAL_RTC_STATE_READY;
 8004656:	2301      	movs	r3, #1
 8004658:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800465c:	e7c4      	b.n	80045e8 <HAL_RTC_Init+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 800465e:	2001      	movs	r0, #1
}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40002800 	.word	0x40002800

08004668 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004668:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 800466a:	e002      	b.n	8004672 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800466c:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800466e:	380a      	subs	r0, #10
 8004670:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8004672:	2809      	cmp	r0, #9
 8004674:	d8fa      	bhi.n	800466c <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	b2db      	uxtb	r3, r3
}
 800467a:	4318      	orrs	r0, r3
 800467c:	4770      	bx	lr
	...

08004680 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004680:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8004684:	2b01      	cmp	r3, #1
 8004686:	f000 80b0 	beq.w	80047ea <HAL_RTC_SetAlarm_IT+0x16a>
{
 800468a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468e:	4605      	mov	r5, r0
 8004690:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8004692:	2301      	movs	r3, #1
 8004694:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004698:	2302      	movs	r3, #2
 800469a:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800469e:	4b54      	ldr	r3, [pc, #336]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 80046a0:	68de      	ldr	r6, [r3, #12]
 80046a2:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80046a6:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80046aa:	d043      	beq.n	8004734 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80046ac:	bb12      	cbnz	r2, 80046f4 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80046b4:	d101      	bne.n	80046ba <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80046ba:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046be:	7820      	ldrb	r0, [r4, #0]
 80046c0:	f7ff ffd2 	bl	8004668 <RTC_ByteToBcd2>
 80046c4:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80046c6:	7860      	ldrb	r0, [r4, #1]
 80046c8:	f7ff ffce 	bl	8004668 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046cc:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80046d0:	78a0      	ldrb	r0, [r4, #2]
 80046d2:	f7ff ffc9 	bl	8004668 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80046d6:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80046d8:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80046da:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80046de:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80046e2:	f7ff ffc1 	bl	8004668 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80046e6:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80046ea:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80046ec:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046ee:	ea48 0000 	orr.w	r0, r8, r0
 80046f2:	e020      	b.n	8004736 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80046f4:	6948      	ldr	r0, [r1, #20]
 80046f6:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 80046fa:	d009      	beq.n	8004710 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80046fc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8004700:	d006      	beq.n	8004710 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004702:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800470a:	d101      	bne.n	8004710 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800470c:	2300      	movs	r3, #0
 800470e:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004710:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004712:	7863      	ldrb	r3, [r4, #1]
 8004714:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800471a:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800471c:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800471e:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004720:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004724:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004728:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800472c:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800472e:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004730:	4318      	orrs	r0, r3
 8004732:	e000      	b.n	8004736 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8004734:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004736:	4b2e      	ldr	r3, [pc, #184]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 8004738:	22ca      	movs	r2, #202	@ 0xca
 800473a:	625a      	str	r2, [r3, #36]	@ 0x24
 800473c:	2253      	movs	r2, #83	@ 0x53
 800473e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004740:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004746:	d02a      	beq.n	800479e <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004748:	4b29      	ldr	r3, [pc, #164]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 800474a:	699a      	ldr	r2, [r3, #24]
 800474c:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 8004750:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004752:	2202      	movs	r2, #2
 8004754:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8004756:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800475a:	d040      	beq.n	80047de <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800475c:	4b24      	ldr	r3, [pc, #144]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 800475e:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004760:	69a2      	ldr	r2, [r4, #24]
 8004762:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004764:	6862      	ldr	r2, [r4, #4]
 8004766:	4b22      	ldr	r3, [pc, #136]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 8004768:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800476a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800476c:	f042 0202 	orr.w	r2, r2, #2
 8004770:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 8004778:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800477a:	4a1e      	ldr	r2, [pc, #120]	@ (80047f4 <HAL_RTC_SetAlarm_IT+0x174>)
 800477c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8004780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004784:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004788:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 800478a:	22ff      	movs	r2, #255	@ 0xff
 800478c:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800478e:	2301      	movs	r3, #1
 8004790:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8004794:	2000      	movs	r0, #0
 8004796:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 800479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800479e:	4b14      	ldr	r3, [pc, #80]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80047a6:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80047a8:	2201      	movs	r2, #1
 80047aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80047ac:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80047b0:	d00f      	beq.n	80047d2 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80047b2:	4b0f      	ldr	r3, [pc, #60]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 80047b4:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80047b6:	69a2      	ldr	r2, [r4, #24]
 80047b8:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80047ba:	6862      	ldr	r2, [r4, #4]
 80047bc:	4b0c      	ldr	r3, [pc, #48]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 80047be:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80047c0:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 80047ce:	619a      	str	r2, [r3, #24]
 80047d0:	e7d3      	b.n	800477a <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80047d2:	69a3      	ldr	r3, [r4, #24]
 80047d4:	69e2      	ldr	r2, [r4, #28]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	4a05      	ldr	r2, [pc, #20]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 80047da:	6453      	str	r3, [r2, #68]	@ 0x44
 80047dc:	e7ed      	b.n	80047ba <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80047de:	69a3      	ldr	r3, [r4, #24]
 80047e0:	69e2      	ldr	r2, [r4, #28]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	4a02      	ldr	r2, [pc, #8]	@ (80047f0 <HAL_RTC_SetAlarm_IT+0x170>)
 80047e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047e8:	e7bc      	b.n	8004764 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80047ea:	2002      	movs	r0, #2
}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40002800 	.word	0x40002800
 80047f4:	58000800 	.word	0x58000800

080047f8 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047f8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d017      	beq.n	8004830 <HAL_RTCEx_EnableBypassShadow+0x38>
 8004800:	2101      	movs	r1, #1
 8004802:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004806:	2302      	movs	r3, #2
 8004808:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800480c:	4b09      	ldr	r3, [pc, #36]	@ (8004834 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800480e:	22ca      	movs	r2, #202	@ 0xca
 8004810:	625a      	str	r2, [r3, #36]	@ 0x24
 8004812:	2253      	movs	r2, #83	@ 0x53
 8004814:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004816:	699a      	ldr	r2, [r3, #24]
 8004818:	f042 0220 	orr.w	r2, r2, #32
 800481c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800481e:	22ff      	movs	r2, #255	@ 0xff
 8004820:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004822:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004826:	2300      	movs	r3, #0
 8004828:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 800482c:	4618      	mov	r0, r3
 800482e:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8004830:	2002      	movs	r0, #2
}
 8004832:	4770      	bx	lr
 8004834:	40002800 	.word	0x40002800

08004838 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004838:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d020      	beq.n	8004882 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8004840:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8004842:	2101      	movs	r1, #1
 8004844:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004848:	2302      	movs	r3, #2
 800484a:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800484e:	4b0e      	ldr	r3, [pc, #56]	@ (8004888 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8004850:	22ca      	movs	r2, #202	@ 0xca
 8004852:	625a      	str	r2, [r3, #36]	@ 0x24
 8004854:	2253      	movs	r2, #83	@ 0x53
 8004856:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800485e:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8004860:	4c0a      	ldr	r4, [pc, #40]	@ (800488c <HAL_RTCEx_SetSSRU_IT+0x54>)
 8004862:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8004866:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800486a:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800486e:	22ff      	movs	r2, #255	@ 0xff
 8004870:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004872:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004876:	2300      	movs	r3, #0
 8004878:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 800487c:	4618      	mov	r0, r3
}
 800487e:	bc10      	pop	{r4}
 8004880:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8004882:	2002      	movs	r0, #2
}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40002800 	.word	0x40002800
 800488c:	58000800 	.word	0x58000800

08004890 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004890:	b510      	push	{r4, lr}
 8004892:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004894:	4b07      	ldr	r3, [pc, #28]	@ (80048b4 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8004896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004898:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800489c:	d103      	bne.n	80048a6 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800489e:	2301      	movs	r3, #1
 80048a0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80048a4:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80048a6:	4b03      	ldr	r3, [pc, #12]	@ (80048b4 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80048a8:	2240      	movs	r2, #64	@ 0x40
 80048aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80048ac:	f7fd f8e2 	bl	8001a74 <HAL_RTCEx_SSRUEventCallback>
 80048b0:	e7f5      	b.n	800489e <HAL_RTCEx_SSRUIRQHandler+0xe>
 80048b2:	bf00      	nop
 80048b4:	40002800 	.word	0x40002800

080048b8 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80048b8:	4770      	bx	lr

080048ba <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80048ba:	0089      	lsls	r1, r1, #2
 80048bc:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80048c0:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80048c4:	600a      	str	r2, [r1, #0]
}
 80048c6:	4770      	bx	lr

080048c8 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80048c8:	0089      	lsls	r1, r1, #2
 80048ca:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80048ce:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80048d2:	6808      	ldr	r0, [r1, #0]
}
 80048d4:	4770      	bx	lr
	...

080048d8 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80048d8:	4b07      	ldr	r3, [pc, #28]	@ (80048f8 <SUBGHZSPI_Init+0x20>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048e0:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80048e2:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 80048e6:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80048e8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80048ec:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	4770      	bx	lr
 80048f8:	58010000 	.word	0x58010000

080048fc <HAL_SUBGHZ_Init>:
{
 80048fc:	b530      	push	{r4, r5, lr}
 80048fe:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8004900:	2800      	cmp	r0, #0
 8004902:	d052      	beq.n	80049aa <HAL_SUBGHZ_Init+0xae>
 8004904:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8004906:	7983      	ldrb	r3, [r0, #6]
 8004908:	b1a3      	cbz	r3, 8004934 <HAL_SUBGHZ_Init+0x38>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800490a:	2302      	movs	r3, #2
 800490c:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800490e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004912:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004916:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800491a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800491e:	4b24      	ldr	r3, [pc, #144]	@ (80049b0 <HAL_SUBGHZ_Init+0xb4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004926:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800492a:	2264      	movs	r2, #100	@ 0x64
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	e021      	b.n	8004978 <HAL_SUBGHZ_Init+0x7c>
    hsubghz->Lock = HAL_UNLOCKED;
 8004934:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8004936:	f7fc fe2d 	bl	8001594 <HAL_SUBGHZ_MspInit>
 800493a:	e7e6      	b.n	800490a <HAL_SUBGHZ_Init+0xe>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800493c:	2501      	movs	r5, #1
 800493e:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004940:	4b1c      	ldr	r3, [pc, #112]	@ (80049b4 <HAL_SUBGHZ_Init+0xb8>)
 8004942:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004946:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800494a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 800494e:	491a      	ldr	r1, [pc, #104]	@ (80049b8 <HAL_SUBGHZ_Init+0xbc>)
 8004950:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004954:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004958:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004962:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004964:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004968:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 800496a:	b1b5      	cbz	r5, 800499a <HAL_SUBGHZ_Init+0x9e>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800496c:	2301      	movs	r3, #1
 800496e:	71a3      	strb	r3, [r4, #6]
}
 8004970:	4628      	mov	r0, r5
 8004972:	b003      	add	sp, #12
 8004974:	bd30      	pop	{r4, r5, pc}
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004976:	b173      	cbz	r3, 8004996 <HAL_SUBGHZ_Init+0x9a>
    if (count == 0U)
 8004978:	9b01      	ldr	r3, [sp, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0de      	beq.n	800493c <HAL_SUBGHZ_Init+0x40>
    count--;
 800497e:	9b01      	ldr	r3, [sp, #4]
 8004980:	3b01      	subs	r3, #1
 8004982:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800498c:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 8004990:	d0f1      	beq.n	8004976 <HAL_SUBGHZ_Init+0x7a>
 8004992:	2301      	movs	r3, #1
 8004994:	e7ef      	b.n	8004976 <HAL_SUBGHZ_Init+0x7a>
    status = HAL_OK;
 8004996:	2500      	movs	r5, #0
 8004998:	e7d2      	b.n	8004940 <HAL_SUBGHZ_Init+0x44>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800499a:	6820      	ldr	r0, [r4, #0]
 800499c:	f7ff ff9c 	bl	80048d8 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60a3      	str	r3, [r4, #8]
 80049a8:	e7e0      	b.n	800496c <HAL_SUBGHZ_Init+0x70>
    return status;
 80049aa:	2501      	movs	r5, #1
 80049ac:	e7e0      	b.n	8004970 <HAL_SUBGHZ_Init+0x74>
 80049ae:	bf00      	nop
 80049b0:	2000004c 	.word	0x2000004c
 80049b4:	58000400 	.word	0x58000400
 80049b8:	58000800 	.word	0x58000800

080049bc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80049bc:	b082      	sub	sp, #8
 80049be:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80049c0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a2c <SUBGHZSPI_Transmit+0x70>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80049c8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80049cc:	2064      	movs	r0, #100	@ 0x64
 80049ce:	fb00 f303 	mul.w	r3, r0, r3
 80049d2:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80049d4:	9b01      	ldr	r3, [sp, #4]
 80049d6:	b14b      	cbz	r3, 80049ec <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80049d8:	9b01      	ldr	r3, [sp, #4]
 80049da:	3b01      	subs	r3, #1
 80049dc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80049de:	4b14      	ldr	r3, [pc, #80]	@ (8004a30 <SUBGHZSPI_Transmit+0x74>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f013 0f02 	tst.w	r3, #2
 80049e6:	d0f5      	beq.n	80049d4 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80049e8:	2000      	movs	r0, #0
 80049ea:	e001      	b.n	80049f0 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80049ec:	2001      	movs	r0, #1
 80049ee:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 80049f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <SUBGHZSPI_Transmit+0x74>)
 80049f2:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80049f4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <SUBGHZSPI_Transmit+0x70>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80049fc:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004a00:	2164      	movs	r1, #100	@ 0x64
 8004a02:	fb01 f303 	mul.w	r3, r1, r3
 8004a06:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004a08:	9b01      	ldr	r3, [sp, #4]
 8004a0a:	b143      	cbz	r3, 8004a1e <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004a0c:	9b01      	ldr	r3, [sp, #4]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004a12:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <SUBGHZSPI_Transmit+0x74>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f013 0f01 	tst.w	r3, #1
 8004a1a:	d0f5      	beq.n	8004a08 <SUBGHZSPI_Transmit+0x4c>
 8004a1c:	e001      	b.n	8004a22 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a1e:	2001      	movs	r0, #1
 8004a20:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004a22:	4b03      	ldr	r3, [pc, #12]	@ (8004a30 <SUBGHZSPI_Transmit+0x74>)
 8004a24:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8004a26:	b002      	add	sp, #8
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	2000004c 	.word	0x2000004c
 8004a30:	58010000 	.word	0x58010000

08004a34 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004a34:	b082      	sub	sp, #8
 8004a36:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a38:	4b1c      	ldr	r3, [pc, #112]	@ (8004aac <SUBGHZSPI_Receive+0x78>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004a40:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004a44:	2064      	movs	r0, #100	@ 0x64
 8004a46:	fb00 f303 	mul.w	r3, r0, r3
 8004a4a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004a4c:	9b01      	ldr	r3, [sp, #4]
 8004a4e:	b14b      	cbz	r3, 8004a64 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004a50:	9b01      	ldr	r3, [sp, #4]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004a56:	4b16      	ldr	r3, [pc, #88]	@ (8004ab0 <SUBGHZSPI_Receive+0x7c>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f013 0f02 	tst.w	r3, #2
 8004a5e:	d0f5      	beq.n	8004a4c <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004a60:	2000      	movs	r0, #0
 8004a62:	e001      	b.n	8004a68 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a64:	2001      	movs	r0, #1
 8004a66:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8004a68:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <SUBGHZSPI_Receive+0x7c>)
 8004a6a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004a6e:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a72:	4b0e      	ldr	r3, [pc, #56]	@ (8004aac <SUBGHZSPI_Receive+0x78>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004a7a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004a7e:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8004a82:	fb0c f303 	mul.w	r3, ip, r3
 8004a86:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004a88:	9b01      	ldr	r3, [sp, #4]
 8004a8a:	b143      	cbz	r3, 8004a9e <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004a8c:	9b01      	ldr	r3, [sp, #4]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004a92:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <SUBGHZSPI_Receive+0x7c>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f013 0f01 	tst.w	r3, #1
 8004a9a:	d0f5      	beq.n	8004a88 <SUBGHZSPI_Receive+0x54>
 8004a9c:	e001      	b.n	8004aa2 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004aa2:	4b03      	ldr	r3, [pc, #12]	@ (8004ab0 <SUBGHZSPI_Receive+0x7c>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	700b      	strb	r3, [r1, #0]

  return status;
}
 8004aa8:	b002      	add	sp, #8
 8004aaa:	4770      	bx	lr
 8004aac:	2000004c 	.word	0x2000004c
 8004ab0:	58010000 	.word	0x58010000

08004ab4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004ab4:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004ab6:	4b13      	ldr	r3, [pc, #76]	@ (8004b04 <SUBGHZ_WaitOnBusy+0x50>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004abe:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8004ac2:	2264      	movs	r2, #100	@ 0x64
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	e006      	b.n	8004ada <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004acc:	2302      	movs	r3, #2
 8004ace:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8004ad0:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8004ad2:	b002      	add	sp, #8
 8004ad4:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004ad6:	4213      	tst	r3, r2
 8004ad8:	d012      	beq.n	8004b00 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004ada:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <SUBGHZ_WaitOnBusy+0x54>)
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f013 0304 	ands.w	r3, r3, #4
 8004ae2:	d000      	beq.n	8004ae6 <SUBGHZ_WaitOnBusy+0x32>
 8004ae4:	2301      	movs	r3, #1
    if (count == 0U)
 8004ae6:	9a01      	ldr	r2, [sp, #4]
 8004ae8:	2a00      	cmp	r2, #0
 8004aea:	d0ef      	beq.n	8004acc <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8004aec:	9a01      	ldr	r2, [sp, #4]
 8004aee:	3a01      	subs	r2, #1
 8004af0:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004af2:	4a05      	ldr	r2, [pc, #20]	@ (8004b08 <SUBGHZ_WaitOnBusy+0x54>)
 8004af4:	6952      	ldr	r2, [r2, #20]
 8004af6:	f012 0202 	ands.w	r2, r2, #2
 8004afa:	d0ec      	beq.n	8004ad6 <SUBGHZ_WaitOnBusy+0x22>
 8004afc:	2201      	movs	r2, #1
 8004afe:	e7ea      	b.n	8004ad6 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8004b00:	2000      	movs	r0, #0
 8004b02:	e7e6      	b.n	8004ad2 <SUBGHZ_WaitOnBusy+0x1e>
 8004b04:	2000004c 	.word	0x2000004c
 8004b08:	58000400 	.word	0x58000400

08004b0c <SUBGHZ_CheckDeviceReady>:
{
 8004b0c:	b500      	push	{lr}
 8004b0e:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004b10:	7903      	ldrb	r3, [r0, #4]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d004      	beq.n	8004b20 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004b16:	f7ff ffcd 	bl	8004ab4 <SUBGHZ_WaitOnBusy>
}
 8004b1a:	b003      	add	sp, #12
 8004b1c:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004b20:	4b0d      	ldr	r3, [pc, #52]	@ (8004b58 <SUBGHZ_CheckDeviceReady+0x4c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b28:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8004b2c:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8004b5c <SUBGHZ_CheckDeviceReady+0x50>)
 8004b30:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004b34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 8004b3c:	9b01      	ldr	r3, [sp, #4]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8004b42:	9b01      	ldr	r3, [sp, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f9      	bne.n	8004b3c <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004b48:	4a04      	ldr	r2, [pc, #16]	@ (8004b5c <SUBGHZ_CheckDeviceReady+0x50>)
 8004b4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004b56:	e7de      	b.n	8004b16 <SUBGHZ_CheckDeviceReady+0xa>
 8004b58:	2000004c 	.word	0x2000004c
 8004b5c:	58000400 	.word	0x58000400

08004b60 <HAL_SUBGHZ_WriteRegisters>:
{
 8004b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b64:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b66:	7980      	ldrb	r0, [r0, #6]
 8004b68:	fa5f f880 	uxtb.w	r8, r0
 8004b6c:	f1b8 0f01 	cmp.w	r8, #1
 8004b70:	d13e      	bne.n	8004bf0 <HAL_SUBGHZ_WriteRegisters+0x90>
 8004b72:	460c      	mov	r4, r1
 8004b74:	4617      	mov	r7, r2
 8004b76:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004b78:	796b      	ldrb	r3, [r5, #5]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d03b      	beq.n	8004bf6 <HAL_SUBGHZ_WriteRegisters+0x96>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004b82:	2302      	movs	r3, #2
 8004b84:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b86:	4628      	mov	r0, r5
 8004b88:	f7ff ffc0 	bl	8004b0c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bfc <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8004b8e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004b92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004b9a:	210d      	movs	r1, #13
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	f7ff ff0d 	bl	80049bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004ba2:	0a21      	lsrs	r1, r4, #8
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f7ff ff09 	bl	80049bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004baa:	b2e1      	uxtb	r1, r4
 8004bac:	4628      	mov	r0, r5
 8004bae:	f7ff ff05 	bl	80049bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004bb2:	2400      	movs	r4, #0
 8004bb4:	e005      	b.n	8004bc2 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004bb6:	5d39      	ldrb	r1, [r7, r4]
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f7ff feff 	bl	80049bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004bbe:	3401      	adds	r4, #1
 8004bc0:	b2a4      	uxth	r4, r4
 8004bc2:	42b4      	cmp	r4, r6
 8004bc4:	d3f7      	bcc.n	8004bb6 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8004bfc <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8004bc8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f7ff ff6d 	bl	8004ab4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004bda:	68ab      	ldr	r3, [r5, #8]
 8004bdc:	b90b      	cbnz	r3, 8004be2 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8004bde:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004be2:	2301      	movs	r3, #1
 8004be4:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004be6:	2300      	movs	r3, #0
 8004be8:	716b      	strb	r3, [r5, #5]
}
 8004bea:	4640      	mov	r0, r8
 8004bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004bf0:	f04f 0802 	mov.w	r8, #2
 8004bf4:	e7f9      	b.n	8004bea <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8004bf6:	f04f 0802 	mov.w	r8, #2
 8004bfa:	e7f6      	b.n	8004bea <HAL_SUBGHZ_WriteRegisters+0x8a>
 8004bfc:	58000400 	.word	0x58000400

08004c00 <HAL_SUBGHZ_ReadRegisters>:
{
 8004c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c04:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004c06:	7980      	ldrb	r0, [r0, #6]
 8004c08:	fa5f f880 	uxtb.w	r8, r0
 8004c0c:	f1b8 0f01 	cmp.w	r8, #1
 8004c10:	d141      	bne.n	8004c96 <HAL_SUBGHZ_ReadRegisters+0x96>
 8004c12:	460c      	mov	r4, r1
 8004c14:	4615      	mov	r5, r2
 8004c16:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004c18:	7973      	ldrb	r3, [r6, #5]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d03e      	beq.n	8004c9c <HAL_SUBGHZ_ReadRegisters+0x9c>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004c22:	4630      	mov	r0, r6
 8004c24:	f7ff ff72 	bl	8004b0c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004c28:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca4 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8004c2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004c2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004c36:	211d      	movs	r1, #29
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f7ff febf 	bl	80049bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004c3e:	0a21      	lsrs	r1, r4, #8
 8004c40:	4630      	mov	r0, r6
 8004c42:	f7ff febb 	bl	80049bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004c46:	b2e1      	uxtb	r1, r4
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f7ff feb7 	bl	80049bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4630      	mov	r0, r6
 8004c52:	f7ff feb3 	bl	80049bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004c56:	2400      	movs	r4, #0
 8004c58:	e006      	b.n	8004c68 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f7ff fee9 	bl	8004a34 <SUBGHZSPI_Receive>
      pData++;
 8004c62:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004c64:	3401      	adds	r4, #1
 8004c66:	b2a4      	uxth	r4, r4
 8004c68:	42bc      	cmp	r4, r7
 8004c6a:	d3f6      	bcc.n	8004c5a <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ca4 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8004c6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f7ff ff1a 	bl	8004ab4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004c80:	68b3      	ldr	r3, [r6, #8]
 8004c82:	b90b      	cbnz	r3, 8004c88 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8004c84:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	7173      	strb	r3, [r6, #5]
}
 8004c90:	4640      	mov	r0, r8
 8004c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004c96:	f04f 0802 	mov.w	r8, #2
 8004c9a:	e7f9      	b.n	8004c90 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8004c9c:	f04f 0802 	mov.w	r8, #2
 8004ca0:	e7f6      	b.n	8004c90 <HAL_SUBGHZ_ReadRegisters+0x90>
 8004ca2:	bf00      	nop
 8004ca4:	58000400 	.word	0x58000400

08004ca8 <HAL_SUBGHZ_ExecSetCmd>:
{
 8004ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cac:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004cae:	7980      	ldrb	r0, [r0, #6]
 8004cb0:	fa5f f980 	uxtb.w	r9, r0
 8004cb4:	f1b9 0f01 	cmp.w	r9, #1
 8004cb8:	d143      	bne.n	8004d42 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8004cba:	4688      	mov	r8, r1
 8004cbc:	4617      	mov	r7, r2
 8004cbe:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004cc0:	796b      	ldrb	r3, [r5, #5]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d040      	beq.n	8004d48 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f7ff ff1e 	bl	8004b0c <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004cd0:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8004cd4:	d005      	beq.n	8004ce2 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8004cd6:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 8004cda:	d002      	beq.n	8004ce2 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	712b      	strb	r3, [r5, #4]
 8004ce0:	e001      	b.n	8004ce6 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d50 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8004ce8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004cec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f7ff fe60 	bl	80049bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004cfc:	2400      	movs	r4, #0
 8004cfe:	e005      	b.n	8004d0c <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004d00:	5d39      	ldrb	r1, [r7, r4]
 8004d02:	4628      	mov	r0, r5
 8004d04:	f7ff fe5a 	bl	80049bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004d08:	3401      	adds	r4, #1
 8004d0a:	b2a4      	uxth	r4, r4
 8004d0c:	42b4      	cmp	r4, r6
 8004d0e:	d3f7      	bcc.n	8004d00 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d10:	4a0f      	ldr	r2, [pc, #60]	@ (8004d50 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8004d12:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 8004d1e:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8004d22:	d10a      	bne.n	8004d3a <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004d24:	68ab      	ldr	r3, [r5, #8]
 8004d26:	b90b      	cbnz	r3, 8004d2c <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8004d28:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004d30:	2300      	movs	r3, #0
 8004d32:	716b      	strb	r3, [r5, #5]
}
 8004d34:	4648      	mov	r0, r9
 8004d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f7ff feba 	bl	8004ab4 <SUBGHZ_WaitOnBusy>
 8004d40:	e7f0      	b.n	8004d24 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8004d42:	f04f 0902 	mov.w	r9, #2
 8004d46:	e7f5      	b.n	8004d34 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8004d48:	f04f 0902 	mov.w	r9, #2
 8004d4c:	e7f2      	b.n	8004d34 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8004d4e:	bf00      	nop
 8004d50:	58000400 	.word	0x58000400

08004d54 <HAL_SUBGHZ_ExecGetCmd>:
{
 8004d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d58:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004d5a:	7980      	ldrb	r0, [r0, #6]
 8004d5c:	fa5f f880 	uxtb.w	r8, r0
 8004d60:	f1b8 0f01 	cmp.w	r8, #1
 8004d64:	d139      	bne.n	8004dda <HAL_SUBGHZ_ExecGetCmd+0x86>
 8004d66:	460c      	mov	r4, r1
 8004d68:	4615      	mov	r5, r2
 8004d6a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004d6c:	7973      	ldrb	r3, [r6, #5]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d036      	beq.n	8004de0 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8004d72:	2301      	movs	r3, #1
 8004d74:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004d76:	4630      	mov	r0, r6
 8004d78:	f7ff fec8 	bl	8004b0c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004de8 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8004d7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004d82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f7ff fe15 	bl	80049bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004d92:	2100      	movs	r1, #0
 8004d94:	4630      	mov	r0, r6
 8004d96:	f7ff fe11 	bl	80049bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004d9a:	2400      	movs	r4, #0
 8004d9c:	e006      	b.n	8004dac <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4630      	mov	r0, r6
 8004da2:	f7ff fe47 	bl	8004a34 <SUBGHZSPI_Receive>
      pData++;
 8004da6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004da8:	3401      	adds	r4, #1
 8004daa:	b2a4      	uxth	r4, r4
 8004dac:	42bc      	cmp	r4, r7
 8004dae:	d3f6      	bcc.n	8004d9e <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004db0:	4a0d      	ldr	r2, [pc, #52]	@ (8004de8 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8004db2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	f7ff fe78 	bl	8004ab4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004dc4:	68b3      	ldr	r3, [r6, #8]
 8004dc6:	b90b      	cbnz	r3, 8004dcc <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8004dc8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	7173      	strb	r3, [r6, #5]
}
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004dda:	f04f 0802 	mov.w	r8, #2
 8004dde:	e7f9      	b.n	8004dd4 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8004de0:	f04f 0802 	mov.w	r8, #2
 8004de4:	e7f6      	b.n	8004dd4 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8004de6:	bf00      	nop
 8004de8:	58000400 	.word	0x58000400

08004dec <HAL_SUBGHZ_IRQHandler>:
{
 8004dec:	b530      	push	{r4, r5, lr}
 8004dee:	b083      	sub	sp, #12
 8004df0:	4605      	mov	r5, r0
  uint8_t tmpisr[2] = {0};
 8004df2:	2300      	movs	r3, #0
 8004df4:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8004df8:	2302      	movs	r3, #2
 8004dfa:	aa01      	add	r2, sp, #4
 8004dfc:	2112      	movs	r1, #18
 8004dfe:	f7ff ffa9 	bl	8004d54 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8004e02:	f89d 2004 	ldrb.w	r2, [sp, #4]
  itsource = (itsource << 8) | tmpisr[1];
 8004e06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004e0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e0e:	b21c      	sxth	r4, r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004e10:	f013 0f01 	tst.w	r3, #1
 8004e14:	d126      	bne.n	8004e64 <HAL_SUBGHZ_IRQHandler+0x78>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004e16:	f014 0f02 	tst.w	r4, #2
 8004e1a:	d127      	bne.n	8004e6c <HAL_SUBGHZ_IRQHandler+0x80>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004e1c:	f014 0f04 	tst.w	r4, #4
 8004e20:	d128      	bne.n	8004e74 <HAL_SUBGHZ_IRQHandler+0x88>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004e22:	f014 0f08 	tst.w	r4, #8
 8004e26:	d129      	bne.n	8004e7c <HAL_SUBGHZ_IRQHandler+0x90>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004e28:	f014 0f10 	tst.w	r4, #16
 8004e2c:	d12a      	bne.n	8004e84 <HAL_SUBGHZ_IRQHandler+0x98>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004e2e:	f014 0f20 	tst.w	r4, #32
 8004e32:	d12b      	bne.n	8004e8c <HAL_SUBGHZ_IRQHandler+0xa0>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004e34:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8004e38:	d12c      	bne.n	8004e94 <HAL_SUBGHZ_IRQHandler+0xa8>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004e3a:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8004e3e:	d006      	beq.n	8004e4e <HAL_SUBGHZ_IRQHandler+0x62>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004e40:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8004e44:	d02a      	beq.n	8004e9c <HAL_SUBGHZ_IRQHandler+0xb0>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004e46:	2101      	movs	r1, #1
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f00b fb2f 	bl	80104ac <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004e4e:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8004e52:	d128      	bne.n	8004ea6 <HAL_SUBGHZ_IRQHandler+0xba>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004e54:	2302      	movs	r3, #2
 8004e56:	aa01      	add	r2, sp, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f7ff ff24 	bl	8004ca8 <HAL_SUBGHZ_ExecSetCmd>
}
 8004e60:	b003      	add	sp, #12
 8004e62:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004e64:	4628      	mov	r0, r5
 8004e66:	f00b fb09 	bl	801047c <HAL_SUBGHZ_TxCpltCallback>
 8004e6a:	e7d4      	b.n	8004e16 <HAL_SUBGHZ_IRQHandler+0x2a>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f00b fb0d 	bl	801048c <HAL_SUBGHZ_RxCpltCallback>
 8004e72:	e7d3      	b.n	8004e1c <HAL_SUBGHZ_IRQHandler+0x30>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004e74:	4628      	mov	r0, r5
 8004e76:	f00b fb3d 	bl	80104f4 <HAL_SUBGHZ_PreambleDetectedCallback>
 8004e7a:	e7d2      	b.n	8004e22 <HAL_SUBGHZ_IRQHandler+0x36>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f00b fb41 	bl	8010504 <HAL_SUBGHZ_SyncWordValidCallback>
 8004e82:	e7d1      	b.n	8004e28 <HAL_SUBGHZ_IRQHandler+0x3c>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004e84:	4628      	mov	r0, r5
 8004e86:	f00b fb45 	bl	8010514 <HAL_SUBGHZ_HeaderValidCallback>
 8004e8a:	e7d0      	b.n	8004e2e <HAL_SUBGHZ_IRQHandler+0x42>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f00b fb29 	bl	80104e4 <HAL_SUBGHZ_HeaderErrorCallback>
 8004e92:	e7cf      	b.n	8004e34 <HAL_SUBGHZ_IRQHandler+0x48>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004e94:	4628      	mov	r0, r5
 8004e96:	f00b fb01 	bl	801049c <HAL_SUBGHZ_CRCErrorCallback>
 8004e9a:	e7ce      	b.n	8004e3a <HAL_SUBGHZ_IRQHandler+0x4e>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f00b fb04 	bl	80104ac <HAL_SUBGHZ_CADStatusCallback>
 8004ea4:	e7d3      	b.n	8004e4e <HAL_SUBGHZ_IRQHandler+0x62>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f00b fb12 	bl	80104d0 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8004eac:	e7d2      	b.n	8004e54 <HAL_SUBGHZ_IRQHandler+0x68>
	...

08004eb0 <HAL_SUBGHZ_WriteBuffer>:
{
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004eb6:	7980      	ldrb	r0, [r0, #6]
 8004eb8:	fa5f f880 	uxtb.w	r8, r0
 8004ebc:	f1b8 0f01 	cmp.w	r8, #1
 8004ec0:	d138      	bne.n	8004f34 <HAL_SUBGHZ_WriteBuffer+0x84>
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	4617      	mov	r7, r2
 8004ec6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004ec8:	796b      	ldrb	r3, [r5, #5]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d035      	beq.n	8004f3a <HAL_SUBGHZ_WriteBuffer+0x8a>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f7ff fe1a 	bl	8004b0c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004ed8:	4a19      	ldr	r2, [pc, #100]	@ (8004f40 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8004eda:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004ede:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004ee6:	210e      	movs	r1, #14
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f7ff fd67 	bl	80049bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004eee:	4621      	mov	r1, r4
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f7ff fd63 	bl	80049bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004ef6:	2400      	movs	r4, #0
 8004ef8:	e005      	b.n	8004f06 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004efa:	5d39      	ldrb	r1, [r7, r4]
 8004efc:	4628      	mov	r0, r5
 8004efe:	f7ff fd5d 	bl	80049bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004f02:	3401      	adds	r4, #1
 8004f04:	b2a4      	uxth	r4, r4
 8004f06:	42b4      	cmp	r4, r6
 8004f08:	d3f7      	bcc.n	8004efa <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f40 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8004f0c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f7ff fdcb 	bl	8004ab4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004f1e:	68ab      	ldr	r3, [r5, #8]
 8004f20:	b90b      	cbnz	r3, 8004f26 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8004f22:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004f26:	2301      	movs	r3, #1
 8004f28:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	716b      	strb	r3, [r5, #5]
}
 8004f2e:	4640      	mov	r0, r8
 8004f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004f34:	f04f 0802 	mov.w	r8, #2
 8004f38:	e7f9      	b.n	8004f2e <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8004f3a:	f04f 0802 	mov.w	r8, #2
 8004f3e:	e7f6      	b.n	8004f2e <HAL_SUBGHZ_WriteBuffer+0x7e>
 8004f40:	58000400 	.word	0x58000400

08004f44 <HAL_SUBGHZ_ReadBuffer>:
{
 8004f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f48:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004f4a:	7980      	ldrb	r0, [r0, #6]
 8004f4c:	fa5f f880 	uxtb.w	r8, r0
 8004f50:	f1b8 0f01 	cmp.w	r8, #1
 8004f54:	d13d      	bne.n	8004fd2 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8004f56:	460c      	mov	r4, r1
 8004f58:	4615      	mov	r5, r2
 8004f5a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004f5c:	7973      	ldrb	r3, [r6, #5]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d03a      	beq.n	8004fd8 <HAL_SUBGHZ_ReadBuffer+0x94>
 8004f62:	2301      	movs	r3, #1
 8004f64:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004f66:	4630      	mov	r0, r6
 8004f68:	f7ff fdd0 	bl	8004b0c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8004f6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004f72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004f7a:	211e      	movs	r1, #30
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff fd1d 	bl	80049bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004f82:	4621      	mov	r1, r4
 8004f84:	4630      	mov	r0, r6
 8004f86:	f7ff fd19 	bl	80049bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f7ff fd15 	bl	80049bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004f92:	2400      	movs	r4, #0
 8004f94:	e006      	b.n	8004fa4 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004f96:	4629      	mov	r1, r5
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f7ff fd4b 	bl	8004a34 <SUBGHZSPI_Receive>
      pData++;
 8004f9e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004fa0:	3401      	adds	r4, #1
 8004fa2:	b2a4      	uxth	r4, r4
 8004fa4:	42bc      	cmp	r4, r7
 8004fa6:	d3f6      	bcc.n	8004f96 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8004faa:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f7ff fd7c 	bl	8004ab4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004fbc:	68b3      	ldr	r3, [r6, #8]
 8004fbe:	b90b      	cbnz	r3, 8004fc4 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8004fc0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004fc8:	2300      	movs	r3, #0
 8004fca:	7173      	strb	r3, [r6, #5]
}
 8004fcc:	4640      	mov	r0, r8
 8004fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004fd2:	f04f 0802 	mov.w	r8, #2
 8004fd6:	e7f9      	b.n	8004fcc <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8004fd8:	f04f 0802 	mov.w	r8, #2
 8004fdc:	e7f6      	b.n	8004fcc <HAL_SUBGHZ_ReadBuffer+0x88>
 8004fde:	bf00      	nop
 8004fe0:	58000400 	.word	0x58000400

08004fe4 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004fe4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	e852 3f00 	ldrex	r3, [r2]
 8004fea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	e842 3100 	strex	r1, r3, [r2]
 8004ff2:	2900      	cmp	r1, #0
 8004ff4:	d1f6      	bne.n	8004fe4 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004ff6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	f102 0308 	add.w	r3, r2, #8
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	3208      	adds	r2, #8
 8005006:	e842 3100 	strex	r1, r3, [r2]
 800500a:	2900      	cmp	r1, #0
 800500c:	d1f3      	bne.n	8004ff6 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800500e:	2320      	movs	r3, #32
 8005010:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
}
 8005014:	4770      	bx	lr

08005016 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005016:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	e852 3f00 	ldrex	r3, [r2]
 800501c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	e842 3100 	strex	r1, r3, [r2]
 8005024:	2900      	cmp	r1, #0
 8005026:	d1f6      	bne.n	8005016 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005028:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	f102 0308 	add.w	r3, r2, #8
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005036:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	3208      	adds	r2, #8
 800503c:	e842 3100 	strex	r1, r3, [r2]
 8005040:	2900      	cmp	r1, #0
 8005042:	d1f1      	bne.n	8005028 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005044:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d006      	beq.n	8005058 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800504a:	2320      	movs	r3, #32
 800504c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005050:	2300      	movs	r3, #0
 8005052:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005054:	6703      	str	r3, [r0, #112]	@ 0x70
}
 8005056:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005058:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	e852 3f00 	ldrex	r3, [r2]
 800505e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	e842 3100 	strex	r1, r3, [r2]
 8005066:	2900      	cmp	r1, #0
 8005068:	d1f6      	bne.n	8005058 <UART_EndRxTransfer+0x42>
 800506a:	e7ee      	b.n	800504a <UART_EndRxTransfer+0x34>

0800506c <HAL_UART_Transmit_DMA>:
{
 800506c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800506e:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8005072:	2a20      	cmp	r2, #32
 8005074:	d14a      	bne.n	800510c <HAL_UART_Transmit_DMA+0xa0>
{
 8005076:	b510      	push	{r4, lr}
 8005078:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800507a:	2900      	cmp	r1, #0
 800507c:	d048      	beq.n	8005110 <HAL_UART_Transmit_DMA+0xa4>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d048      	beq.n	8005114 <HAL_UART_Transmit_DMA+0xa8>
    __HAL_LOCK(huart);
 8005082:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 8005086:	2a01      	cmp	r2, #1
 8005088:	d046      	beq.n	8005118 <HAL_UART_Transmit_DMA+0xac>
 800508a:	2201      	movs	r2, #1
 800508c:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
    huart->pTxBuffPtr  = pData;
 8005090:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005092:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005096:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509a:	2200      	movs	r2, #0
 800509c:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a0:	2221      	movs	r2, #33	@ 0x21
 80050a2:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    if (huart->hdmatx != NULL)
 80050a6:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 80050a8:	b1e2      	cbz	r2, 80050e4 <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80050aa:	491c      	ldr	r1, [pc, #112]	@ (800511c <HAL_UART_Transmit_DMA+0xb0>)
 80050ac:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80050ae:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 80050b0:	491b      	ldr	r1, [pc, #108]	@ (8005120 <HAL_UART_Transmit_DMA+0xb4>)
 80050b2:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80050b4:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 80050b6:	491b      	ldr	r1, [pc, #108]	@ (8005124 <HAL_UART_Transmit_DMA+0xb8>)
 80050b8:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80050ba:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 80050bc:	2100      	movs	r1, #0
 80050be:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80050c0:	6802      	ldr	r2, [r0, #0]
 80050c2:	3228      	adds	r2, #40	@ 0x28
 80050c4:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80050c6:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 80050c8:	f7fd ffd8 	bl	800307c <HAL_DMA_Start_IT>
 80050cc:	b150      	cbz	r0, 80050e4 <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050ce:	2310      	movs	r3, #16
 80050d0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 80050d4:	2300      	movs	r3, #0
 80050d6:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
        huart->gState = HAL_UART_STATE_READY;
 80050da:	2320      	movs	r3, #32
 80050dc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        return HAL_ERROR;
 80050e0:	2001      	movs	r0, #1
 80050e2:	e012      	b.n	800510a <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	2240      	movs	r2, #64	@ 0x40
 80050e8:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80050ea:	2300      	movs	r3, #0
 80050ec:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050f0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	f102 0308 	add.w	r3, r2, #8
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	3208      	adds	r2, #8
 8005100:	e842 3100 	strex	r1, r3, [r2]
 8005104:	2900      	cmp	r1, #0
 8005106:	d1f3      	bne.n	80050f0 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 8005108:	2000      	movs	r0, #0
}
 800510a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800510c:	2002      	movs	r0, #2
}
 800510e:	4770      	bx	lr
      return HAL_ERROR;
 8005110:	2001      	movs	r0, #1
 8005112:	e7fa      	b.n	800510a <HAL_UART_Transmit_DMA+0x9e>
 8005114:	2001      	movs	r0, #1
 8005116:	e7f8      	b.n	800510a <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 8005118:	2002      	movs	r0, #2
 800511a:	e7f6      	b.n	800510a <HAL_UART_Transmit_DMA+0x9e>
 800511c:	08005129 	.word	0x08005129
 8005120:	08005197 	.word	0x08005197
 8005124:	080051a3 	.word	0x080051a3

08005128 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005128:	b508      	push	{r3, lr}
 800512a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800512c:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f013 0f20 	tst.w	r3, #32
 8005136:	d118      	bne.n	800516a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800513e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	f102 0308 	add.w	r3, r2, #8
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	3208      	adds	r2, #8
 800514e:	e842 3100 	strex	r1, r3, [r2]
 8005152:	2900      	cmp	r1, #0
 8005154:	d1f3      	bne.n	800513e <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005156:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	e852 3f00 	ldrex	r3, [r2]
 800515c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	e842 3100 	strex	r1, r3, [r2]
 8005164:	2900      	cmp	r1, #0
 8005166:	d1f6      	bne.n	8005156 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005168:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800516a:	f7fc fdbb 	bl	8001ce4 <HAL_UART_TxCpltCallback>
}
 800516e:	e7fb      	b.n	8005168 <UART_DMATransmitCplt+0x40>

08005170 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005170:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005172:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	e852 3f00 	ldrex	r3, [r2]
 8005178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	e842 3100 	strex	r1, r3, [r2]
 8005180:	2900      	cmp	r1, #0
 8005182:	d1f6      	bne.n	8005172 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005184:	2320      	movs	r3, #32
 8005186:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	6743      	str	r3, [r0, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800518e:	f7fc fda9 	bl	8001ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005192:	bd08      	pop	{r3, pc}

08005194 <HAL_UART_TxHalfCpltCallback>:
}
 8005194:	4770      	bx	lr

08005196 <UART_DMATxHalfCplt>:
{
 8005196:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005198:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800519a:	f7ff fffb 	bl	8005194 <HAL_UART_TxHalfCpltCallback>
}
 800519e:	bd08      	pop	{r3, pc}

080051a0 <HAL_UART_ErrorCallback>:
}
 80051a0:	4770      	bx	lr

080051a2 <UART_DMAError>:
{
 80051a2:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051a4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80051a6:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80051aa:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80051b6:	d001      	beq.n	80051bc <UART_DMAError+0x1a>
 80051b8:	2a21      	cmp	r2, #33	@ 0x21
 80051ba:	d010      	beq.n	80051de <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80051c4:	d001      	beq.n	80051ca <UART_DMAError+0x28>
 80051c6:	2d22      	cmp	r5, #34	@ 0x22
 80051c8:	d010      	beq.n	80051ec <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051ca:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80051ce:	f043 0310 	orr.w	r3, r3, #16
 80051d2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  HAL_UART_ErrorCallback(huart);
 80051d6:	4620      	mov	r0, r4
 80051d8:	f7ff ffe2 	bl	80051a0 <HAL_UART_ErrorCallback>
}
 80051dc:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80051e4:	4620      	mov	r0, r4
 80051e6:	f7ff fefd 	bl	8004fe4 <UART_EndTxTransfer>
 80051ea:	e7e7      	b.n	80051bc <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80051f2:	4620      	mov	r0, r4
 80051f4:	f7ff ff0f 	bl	8005016 <UART_EndRxTransfer>
 80051f8:	e7e7      	b.n	80051ca <UART_DMAError+0x28>

080051fa <UART_DMAAbortOnError>:
{
 80051fa:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051fc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005204:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8005208:	f7ff ffca 	bl	80051a0 <HAL_UART_ErrorCallback>
}
 800520c:	bd08      	pop	{r3, pc}

0800520e <HAL_UARTEx_RxEventCallback>:
}
 800520e:	4770      	bx	lr

08005210 <HAL_UART_IRQHandler>:
{
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005214:	6802      	ldr	r2, [r0, #0]
 8005216:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005218:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800521a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800521c:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8005220:	ea13 0f0c 	tst.w	r3, ip
 8005224:	d10d      	bne.n	8005242 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005226:	f013 0f20 	tst.w	r3, #32
 800522a:	d010      	beq.n	800524e <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800522c:	f010 0f20 	tst.w	r0, #32
 8005230:	d102      	bne.n	8005238 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005232:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8005236:	d00a      	beq.n	800524e <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8005238:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800523a:	b393      	cbz	r3, 80052a2 <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 800523c:	4620      	mov	r0, r4
 800523e:	4798      	blx	r3
      return;
 8005240:	e02f      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005242:	4db0      	ldr	r5, [pc, #704]	@ (8005504 <HAL_UART_IRQHandler+0x2f4>)
 8005244:	400d      	ands	r5, r1
 8005246:	d12d      	bne.n	80052a4 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005248:	4eaf      	ldr	r6, [pc, #700]	@ (8005508 <HAL_UART_IRQHandler+0x2f8>)
 800524a:	4230      	tst	r0, r6
 800524c:	d12a      	bne.n	80052a4 <HAL_UART_IRQHandler+0x94>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8005250:	2d01      	cmp	r5, #1
 8005252:	f000 80bd 	beq.w	80053d0 <HAL_UART_IRQHandler+0x1c0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005256:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800525a:	d003      	beq.n	8005264 <HAL_UART_IRQHandler+0x54>
 800525c:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8005260:	f040 8156 	bne.w	8005510 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005264:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005268:	d007      	beq.n	800527a <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800526a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800526e:	f040 8156 	bne.w	800551e <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005272:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 8005276:	f040 8152 	bne.w	800551e <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800527a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800527e:	d003      	beq.n	8005288 <HAL_UART_IRQHandler+0x78>
 8005280:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8005284:	f040 8152 	bne.w	800552c <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005288:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800528c:	d003      	beq.n	8005296 <HAL_UART_IRQHandler+0x86>
 800528e:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8005292:	f040 814f 	bne.w	8005534 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005296:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800529a:	d002      	beq.n	80052a2 <HAL_UART_IRQHandler+0x92>
 800529c:	2800      	cmp	r0, #0
 800529e:	f2c0 814d 	blt.w	800553c <HAL_UART_IRQHandler+0x32c>
}
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052a4:	f013 0f01 	tst.w	r3, #1
 80052a8:	d009      	beq.n	80052be <HAL_UART_IRQHandler+0xae>
 80052aa:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80052ae:	d006      	beq.n	80052be <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052b0:	2601      	movs	r6, #1
 80052b2:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052b4:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 80052b8:	4332      	orrs	r2, r6
 80052ba:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052be:	f013 0f02 	tst.w	r3, #2
 80052c2:	d00b      	beq.n	80052dc <HAL_UART_IRQHandler+0xcc>
 80052c4:	f011 0f01 	tst.w	r1, #1
 80052c8:	d008      	beq.n	80052dc <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052ca:	6822      	ldr	r2, [r4, #0]
 80052cc:	2602      	movs	r6, #2
 80052ce:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052d0:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 80052d4:	f042 0204 	orr.w	r2, r2, #4
 80052d8:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052dc:	f013 0f04 	tst.w	r3, #4
 80052e0:	d00b      	beq.n	80052fa <HAL_UART_IRQHandler+0xea>
 80052e2:	f011 0f01 	tst.w	r1, #1
 80052e6:	d008      	beq.n	80052fa <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	2604      	movs	r6, #4
 80052ec:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ee:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 80052f2:	f042 0202 	orr.w	r2, r2, #2
 80052f6:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052fa:	f013 0f08 	tst.w	r3, #8
 80052fe:	d00b      	beq.n	8005318 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005300:	f010 0f20 	tst.w	r0, #32
 8005304:	d100      	bne.n	8005308 <HAL_UART_IRQHandler+0xf8>
 8005306:	b13d      	cbz	r5, 8005318 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005308:	6822      	ldr	r2, [r4, #0]
 800530a:	2508      	movs	r5, #8
 800530c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800530e:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8005312:	432a      	orrs	r2, r5
 8005314:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005318:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800531c:	d00c      	beq.n	8005338 <HAL_UART_IRQHandler+0x128>
 800531e:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8005322:	d009      	beq.n	8005338 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005324:	6822      	ldr	r2, [r4, #0]
 8005326:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800532a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800532c:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8005330:	f042 0220 	orr.w	r2, r2, #32
 8005334:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005338:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800533c:	2a00      	cmp	r2, #0
 800533e:	d0b0      	beq.n	80052a2 <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005340:	f013 0f20 	tst.w	r3, #32
 8005344:	d009      	beq.n	800535a <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005346:	f010 0f20 	tst.w	r0, #32
 800534a:	d102      	bne.n	8005352 <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800534c:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8005350:	d003      	beq.n	800535a <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 8005352:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8005354:	b10b      	cbz	r3, 800535a <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 8005356:	4620      	mov	r0, r4
 8005358:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800535a:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005366:	d102      	bne.n	800536e <HAL_UART_IRQHandler+0x15e>
 8005368:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800536c:	d029      	beq.n	80053c2 <HAL_UART_IRQHandler+0x1b2>
        UART_EndRxTransfer(huart);
 800536e:	4620      	mov	r0, r4
 8005370:	f7ff fe51 	bl	8005016 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800537c:	d01d      	beq.n	80053ba <HAL_UART_IRQHandler+0x1aa>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800537e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	f102 0308 	add.w	r3, r2, #8
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	3208      	adds	r2, #8
 800538e:	e842 3100 	strex	r1, r3, [r2]
 8005392:	2900      	cmp	r1, #0
 8005394:	d1f3      	bne.n	800537e <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 8005396:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8005398:	b15b      	cbz	r3, 80053b2 <HAL_UART_IRQHandler+0x1a2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800539a:	4a5c      	ldr	r2, [pc, #368]	@ (800550c <HAL_UART_IRQHandler+0x2fc>)
 800539c:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800539e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80053a0:	f7fd fef2 	bl	8003188 <HAL_DMA_Abort_IT>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	f43f af7c 	beq.w	80052a2 <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053aa:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80053ac:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80053ae:	4798      	blx	r3
 80053b0:	e777      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 80053b2:	4620      	mov	r0, r4
 80053b4:	f7ff fef4 	bl	80051a0 <HAL_UART_ErrorCallback>
 80053b8:	e773      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 80053ba:	4620      	mov	r0, r4
 80053bc:	f7ff fef0 	bl	80051a0 <HAL_UART_ErrorCallback>
 80053c0:	e76f      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 80053c2:	4620      	mov	r0, r4
 80053c4:	f7ff feec 	bl	80051a0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    return;
 80053ce:	e768      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80053d0:	f013 0f10 	tst.w	r3, #16
 80053d4:	f43f af3f 	beq.w	8005256 <HAL_UART_IRQHandler+0x46>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80053d8:	f010 0f10 	tst.w	r0, #16
 80053dc:	f43f af3b 	beq.w	8005256 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053e0:	2310      	movs	r3, #16
 80053e2:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80053ec:	d04f      	beq.n	800548e <HAL_UART_IRQHandler+0x27e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ee:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80053f0:	6813      	ldr	r3, [r2, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f43f af53 	beq.w	80052a2 <HAL_UART_IRQHandler+0x92>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80053fc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005400:	4299      	cmp	r1, r3
 8005402:	f67f af4e 	bls.w	80052a2 <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 8005406:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f013 0f20 	tst.w	r3, #32
 8005412:	d131      	bne.n	8005478 <HAL_UART_IRQHandler+0x268>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005414:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	e852 3f00 	ldrex	r3, [r2]
 800541a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	e842 3100 	strex	r1, r3, [r2]
 8005422:	2900      	cmp	r1, #0
 8005424:	d1f6      	bne.n	8005414 <HAL_UART_IRQHandler+0x204>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005426:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	f102 0308 	add.w	r3, r2, #8
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	3208      	adds	r2, #8
 8005436:	e842 3100 	strex	r1, r3, [r2]
 800543a:	2900      	cmp	r1, #0
 800543c:	d1f3      	bne.n	8005426 <HAL_UART_IRQHandler+0x216>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800543e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	f102 0308 	add.w	r3, r2, #8
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	3208      	adds	r2, #8
 800544e:	e842 3100 	strex	r1, r3, [r2]
 8005452:	2900      	cmp	r1, #0
 8005454:	d1f3      	bne.n	800543e <HAL_UART_IRQHandler+0x22e>
          huart->RxState = HAL_UART_STATE_READY;
 8005456:	2320      	movs	r3, #32
 8005458:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545c:	2300      	movs	r3, #0
 800545e:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005460:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	e852 3f00 	ldrex	r3, [r2]
 8005466:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	e842 3100 	strex	r1, r3, [r2]
 800546e:	2900      	cmp	r1, #0
 8005470:	d1f6      	bne.n	8005460 <HAL_UART_IRQHandler+0x250>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005472:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005474:	f7fd fe4e 	bl	8003114 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005478:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800547c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005480:	b29b      	uxth	r3, r3
 8005482:	1ac9      	subs	r1, r1, r3
 8005484:	b289      	uxth	r1, r1
 8005486:	4620      	mov	r0, r4
 8005488:	f7ff fec1 	bl	800520e <HAL_UARTEx_RxEventCallback>
      return;
 800548c:	e709      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800548e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005492:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005496:	b29b      	uxth	r3, r3
 8005498:	1ac9      	subs	r1, r1, r3
 800549a:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 800549c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f43f aefd 	beq.w	80052a2 <HAL_UART_IRQHandler+0x92>
          &&(nb_rx_data > 0U) )
 80054a8:	2900      	cmp	r1, #0
 80054aa:	f43f aefa 	beq.w	80052a2 <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	e852 3f00 	ldrex	r3, [r2]
 80054b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	e842 3000 	strex	r0, r3, [r2]
 80054bc:	2800      	cmp	r0, #0
 80054be:	d1f6      	bne.n	80054ae <HAL_UART_IRQHandler+0x29e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	f102 0308 	add.w	r3, r2, #8
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054ce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	3208      	adds	r2, #8
 80054d4:	e842 3000 	strex	r0, r3, [r2]
 80054d8:	2800      	cmp	r0, #0
 80054da:	d1f1      	bne.n	80054c0 <HAL_UART_IRQHandler+0x2b0>
        huart->RxState = HAL_UART_STATE_READY;
 80054dc:	2320      	movs	r3, #32
 80054de:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e2:	2300      	movs	r3, #0
 80054e4:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 80054e6:	6723      	str	r3, [r4, #112]	@ 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	e852 3f00 	ldrex	r3, [r2]
 80054ee:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	e842 3000 	strex	r0, r3, [r2]
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d1f6      	bne.n	80054e8 <HAL_UART_IRQHandler+0x2d8>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054fa:	4620      	mov	r0, r4
 80054fc:	f7ff fe87 	bl	800520e <HAL_UARTEx_RxEventCallback>
      return;
 8005500:	e6cf      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>
 8005502:	bf00      	nop
 8005504:	10000001 	.word	0x10000001
 8005508:	04000120 	.word	0x04000120
 800550c:	080051fb 	.word	0x080051fb
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005510:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005514:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005516:	4620      	mov	r0, r4
 8005518:	f000 fe0a 	bl	8006130 <HAL_UARTEx_WakeupCallback>
    return;
 800551c:	e6c1      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 800551e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005520:	2b00      	cmp	r3, #0
 8005522:	f43f aebe 	beq.w	80052a2 <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 8005526:	4620      	mov	r0, r4
 8005528:	4798      	blx	r3
    return;
 800552a:	e6ba      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 800552c:	4620      	mov	r0, r4
 800552e:	f7ff fe1f 	bl	8005170 <UART_EndTransmit_IT>
    return;
 8005532:	e6b6      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005534:	4620      	mov	r0, r4
 8005536:	f000 fdfd 	bl	8006134 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800553a:	e6b2      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800553c:	4620      	mov	r0, r4
 800553e:	f000 fdf8 	bl	8006132 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005542:	e6ae      	b.n	80052a2 <HAL_UART_IRQHandler+0x92>

08005544 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005544:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8005546:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800554a:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800554e:	2a22      	cmp	r2, #34	@ 0x22
 8005550:	d005      	beq.n	800555e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005552:	6802      	ldr	r2, [r0, #0]
 8005554:	6993      	ldr	r3, [r2, #24]
 8005556:	f043 0308 	orr.w	r3, r3, #8
 800555a:	6193      	str	r3, [r2, #24]
  }
}
 800555c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800555e:	6802      	ldr	r2, [r0, #0]
 8005560:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005562:	b2db      	uxtb	r3, r3
 8005564:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8005566:	400b      	ands	r3, r1
 8005568:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800556a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800556c:	3301      	adds	r3, #1
 800556e:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8005570:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29b      	uxth	r3, r3
 800557a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 800557e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e9      	bne.n	800555c <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005588:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	e852 3f00 	ldrex	r3, [r2]
 800558e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	e842 3100 	strex	r1, r3, [r2]
 8005596:	2900      	cmp	r1, #0
 8005598:	d1f6      	bne.n	8005588 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	f102 0308 	add.w	r3, r2, #8
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	3208      	adds	r2, #8
 80055aa:	e842 3100 	strex	r1, r3, [r2]
 80055ae:	2900      	cmp	r1, #0
 80055b0:	d1f3      	bne.n	800559a <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 80055b2:	2320      	movs	r3, #32
 80055b4:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
      huart->RxISR = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	6703      	str	r3, [r0, #112]	@ 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055bc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d116      	bne.n	80055f0 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c2:	2300      	movs	r3, #0
 80055c4:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	e852 3f00 	ldrex	r3, [r2]
 80055cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	e842 3100 	strex	r1, r3, [r2]
 80055d4:	2900      	cmp	r1, #0
 80055d6:	d1f6      	bne.n	80055c6 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055d8:	6803      	ldr	r3, [r0, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	f012 0f10 	tst.w	r2, #16
 80055e0:	d001      	beq.n	80055e6 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055e2:	2210      	movs	r2, #16
 80055e4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055e6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 80055ea:	f7ff fe10 	bl	800520e <HAL_UARTEx_RxEventCallback>
 80055ee:	e7b5      	b.n	800555c <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80055f0:	f7fc fb80 	bl	8001cf4 <HAL_UART_RxCpltCallback>
 80055f4:	e7b2      	b.n	800555c <UART_RxISR_8BIT+0x18>

080055f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055f6:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055f8:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055fc:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8005600:	2b22      	cmp	r3, #34	@ 0x22
 8005602:	d005      	beq.n	8005610 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005604:	6802      	ldr	r2, [r0, #0]
 8005606:	6993      	ldr	r3, [r2, #24]
 8005608:	f043 0308 	orr.w	r3, r3, #8
 800560c:	6193      	str	r3, [r2, #24]
  }
}
 800560e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005610:	6803      	ldr	r3, [r0, #0]
 8005612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005614:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8005616:	4013      	ands	r3, r2
 8005618:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800561a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800561c:	3302      	adds	r3, #2
 800561e:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8005620:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29b      	uxth	r3, r3
 800562a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 800562e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1ea      	bne.n	800560e <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005638:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	e852 3f00 	ldrex	r3, [r2]
 800563e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	e842 3100 	strex	r1, r3, [r2]
 8005646:	2900      	cmp	r1, #0
 8005648:	d1f6      	bne.n	8005638 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	f102 0308 	add.w	r3, r2, #8
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	3208      	adds	r2, #8
 800565a:	e842 3100 	strex	r1, r3, [r2]
 800565e:	2900      	cmp	r1, #0
 8005660:	d1f3      	bne.n	800564a <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8005662:	2320      	movs	r3, #32
 8005664:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
      huart->RxISR = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	6703      	str	r3, [r0, #112]	@ 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800566e:	2b01      	cmp	r3, #1
 8005670:	d116      	bne.n	80056a0 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	2300      	movs	r3, #0
 8005674:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005676:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	e852 3f00 	ldrex	r3, [r2]
 800567c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	e842 3100 	strex	r1, r3, [r2]
 8005684:	2900      	cmp	r1, #0
 8005686:	d1f6      	bne.n	8005676 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005688:	6803      	ldr	r3, [r0, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	f012 0f10 	tst.w	r2, #16
 8005690:	d001      	beq.n	8005696 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005692:	2210      	movs	r2, #16
 8005694:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005696:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800569a:	f7ff fdb8 	bl	800520e <HAL_UARTEx_RxEventCallback>
 800569e:	e7b6      	b.n	800560e <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80056a0:	f7fc fb28 	bl	8001cf4 <HAL_UART_RxCpltCallback>
 80056a4:	e7b3      	b.n	800560e <UART_RxISR_16BIT+0x18>
	...

080056a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80056a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80056ac:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80056b0:	6803      	ldr	r3, [r0, #0]
 80056b2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80056b4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80056b8:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056bc:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80056c0:	2a22      	cmp	r2, #34	@ 0x22
 80056c2:	d005      	beq.n	80056d0 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	f042 0208 	orr.w	r2, r2, #8
 80056ca:	619a      	str	r2, [r3, #24]
  }
}
 80056cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056d0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80056d2:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056d6:	e008      	b.n	80056ea <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056d8:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d14c      	bne.n	800577a <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80056e0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d04e      	beq.n	8005788 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056ea:	2f00      	cmp	r7, #0
 80056ec:	f000 8087 	beq.w	80057fe <UART_RxISR_8BIT_FIFOEN+0x156>
 80056f0:	f015 0f20 	tst.w	r5, #32
 80056f4:	f000 8083 	beq.w	80057fe <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056fc:	b2f3      	uxtb	r3, r6
 80056fe:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005700:	400b      	ands	r3, r1
 8005702:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8005704:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005706:	3301      	adds	r3, #1
 8005708:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800570a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29b      	uxth	r3, r3
 8005714:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800571c:	f015 0f07 	tst.w	r5, #7
 8005720:	d0de      	beq.n	80056e0 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005722:	f015 0f01 	tst.w	r5, #1
 8005726:	d009      	beq.n	800573c <UART_RxISR_8BIT_FIFOEN+0x94>
 8005728:	f419 7f80 	tst.w	r9, #256	@ 0x100
 800572c:	d006      	beq.n	800573c <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800572e:	2201      	movs	r2, #1
 8005730:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005732:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800573c:	f015 0f02 	tst.w	r5, #2
 8005740:	d00b      	beq.n	800575a <UART_RxISR_8BIT_FIFOEN+0xb2>
 8005742:	f018 0f01 	tst.w	r8, #1
 8005746:	d008      	beq.n	800575a <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	2202      	movs	r2, #2
 800574c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005752:	f043 0304 	orr.w	r3, r3, #4
 8005756:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800575a:	f015 0f04 	tst.w	r5, #4
 800575e:	d0bb      	beq.n	80056d8 <UART_RxISR_8BIT_FIFOEN+0x30>
 8005760:	f018 0f01 	tst.w	r8, #1
 8005764:	d0b8      	beq.n	80056d8 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	2204      	movs	r2, #4
 800576a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800576c:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005770:	f043 0302 	orr.w	r3, r3, #2
 8005774:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8005778:	e7ae      	b.n	80056d8 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800577a:	4620      	mov	r0, r4
 800577c:	f7ff fd10 	bl	80051a0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005780:	2300      	movs	r3, #0
 8005782:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8005786:	e7ab      	b.n	80056e0 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005788:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	e852 3f00 	ldrex	r3, [r2]
 800578e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	e842 3100 	strex	r1, r3, [r2]
 8005796:	2900      	cmp	r1, #0
 8005798:	d1f6      	bne.n	8005788 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800579a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	f102 0308 	add.w	r3, r2, #8
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	3208      	adds	r2, #8
 80057ae:	e842 3100 	strex	r1, r3, [r2]
 80057b2:	2900      	cmp	r1, #0
 80057b4:	d1f1      	bne.n	800579a <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80057b6:	2320      	movs	r3, #32
 80057b8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        huart->RxISR = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	6723      	str	r3, [r4, #112]	@ 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d003      	beq.n	80057ce <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 80057c6:	4620      	mov	r0, r4
 80057c8:	f7fc fa94 	bl	8001cf4 <HAL_UART_RxCpltCallback>
 80057cc:	e78d      	b.n	80056ea <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	2300      	movs	r3, #0
 80057d0:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	e852 3f00 	ldrex	r3, [r2]
 80057d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	e842 3100 	strex	r1, r3, [r2]
 80057e0:	2900      	cmp	r1, #0
 80057e2:	d1f6      	bne.n	80057d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	f012 0f10 	tst.w	r2, #16
 80057ec:	d001      	beq.n	80057f2 <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ee:	2210      	movs	r2, #16
 80057f0:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057f2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80057f6:	4620      	mov	r0, r4
 80057f8:	f7ff fd09 	bl	800520e <HAL_UARTEx_RxEventCallback>
 80057fc:	e775      	b.n	80056ea <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80057fe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005802:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005804:	2b00      	cmp	r3, #0
 8005806:	f43f af61 	beq.w	80056cc <UART_RxISR_8BIT_FIFOEN+0x24>
 800580a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800580e:	429a      	cmp	r2, r3
 8005810:	f67f af5c 	bls.w	80056cc <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005814:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	f102 0308 	add.w	r3, r2, #8
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	3208      	adds	r2, #8
 8005824:	e842 3100 	strex	r1, r3, [r2]
 8005828:	2900      	cmp	r1, #0
 800582a:	d1f3      	bne.n	8005814 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 800582c:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 800582e:	6723      	str	r3, [r4, #112]	@ 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005830:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	e852 3f00 	ldrex	r3, [r2]
 8005836:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	e842 3100 	strex	r1, r3, [r2]
 800583e:	2900      	cmp	r1, #0
 8005840:	d1f6      	bne.n	8005830 <UART_RxISR_8BIT_FIFOEN+0x188>
 8005842:	e743      	b.n	80056cc <UART_RxISR_8BIT_FIFOEN+0x24>
 8005844:	08005545 	.word	0x08005545

08005848 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800584c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005850:	6803      	ldr	r3, [r0, #0]
 8005852:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005854:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005858:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800585c:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8005860:	2a22      	cmp	r2, #34	@ 0x22
 8005862:	d005      	beq.n	8005870 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	f042 0208 	orr.w	r2, r2, #8
 800586a:	619a      	str	r2, [r3, #24]
  }
}
 800586c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005870:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8005872:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005876:	e008      	b.n	800588a <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005878:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d14b      	bne.n	8005918 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8005880:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d04d      	beq.n	8005926 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800588a:	2f00      	cmp	r7, #0
 800588c:	f000 8086 	beq.w	800599c <UART_RxISR_16BIT_FIFOEN+0x154>
 8005890:	f015 0f20 	tst.w	r5, #32
 8005894:	f000 8082 	beq.w	800599c <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800589c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800589e:	4033      	ands	r3, r6
 80058a0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80058a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058a4:	3302      	adds	r3, #2
 80058a6:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80058a8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80058ba:	f015 0f07 	tst.w	r5, #7
 80058be:	d0df      	beq.n	8005880 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058c0:	f015 0f01 	tst.w	r5, #1
 80058c4:	d009      	beq.n	80058da <UART_RxISR_16BIT_FIFOEN+0x92>
 80058c6:	f419 7f80 	tst.w	r9, #256	@ 0x100
 80058ca:	d006      	beq.n	80058da <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058cc:	2201      	movs	r2, #1
 80058ce:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058d0:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058da:	f015 0f02 	tst.w	r5, #2
 80058de:	d00b      	beq.n	80058f8 <UART_RxISR_16BIT_FIFOEN+0xb0>
 80058e0:	f018 0f01 	tst.w	r8, #1
 80058e4:	d008      	beq.n	80058f8 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	2202      	movs	r2, #2
 80058ea:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058ec:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80058f0:	f043 0304 	orr.w	r3, r3, #4
 80058f4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058f8:	f015 0f04 	tst.w	r5, #4
 80058fc:	d0bc      	beq.n	8005878 <UART_RxISR_16BIT_FIFOEN+0x30>
 80058fe:	f018 0f01 	tst.w	r8, #1
 8005902:	d0b9      	beq.n	8005878 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	2204      	movs	r2, #4
 8005908:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800590a:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800590e:	f043 0302 	orr.w	r3, r3, #2
 8005912:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8005916:	e7af      	b.n	8005878 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8005918:	4620      	mov	r0, r4
 800591a:	f7ff fc41 	bl	80051a0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591e:	2300      	movs	r3, #0
 8005920:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8005924:	e7ac      	b.n	8005880 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005926:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	e852 3f00 	ldrex	r3, [r2]
 800592c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	e842 3100 	strex	r1, r3, [r2]
 8005934:	2900      	cmp	r1, #0
 8005936:	d1f6      	bne.n	8005926 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005938:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	f102 0308 	add.w	r3, r2, #8
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005946:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	3208      	adds	r2, #8
 800594c:	e842 3100 	strex	r1, r3, [r2]
 8005950:	2900      	cmp	r1, #0
 8005952:	d1f1      	bne.n	8005938 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8005954:	2320      	movs	r3, #32
 8005956:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        huart->RxISR = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	6723      	str	r3, [r4, #112]	@ 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d003      	beq.n	800596c <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8005964:	4620      	mov	r0, r4
 8005966:	f7fc f9c5 	bl	8001cf4 <HAL_UART_RxCpltCallback>
 800596a:	e78e      	b.n	800588a <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596c:	2300      	movs	r3, #0
 800596e:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005970:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	e852 3f00 	ldrex	r3, [r2]
 8005976:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	e842 3100 	strex	r1, r3, [r2]
 800597e:	2900      	cmp	r1, #0
 8005980:	d1f6      	bne.n	8005970 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	69da      	ldr	r2, [r3, #28]
 8005986:	f012 0f10 	tst.w	r2, #16
 800598a:	d001      	beq.n	8005990 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800598c:	2210      	movs	r2, #16
 800598e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005990:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005994:	4620      	mov	r0, r4
 8005996:	f7ff fc3a 	bl	800520e <HAL_UARTEx_RxEventCallback>
 800599a:	e776      	b.n	800588a <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800599c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80059a0:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f43f af62 	beq.w	800586c <UART_RxISR_16BIT_FIFOEN+0x24>
 80059a8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 80059ac:	429a      	cmp	r2, r3
 80059ae:	f67f af5d 	bls.w	800586c <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	f102 0308 	add.w	r3, r2, #8
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	3208      	adds	r2, #8
 80059c2:	e842 3100 	strex	r1, r3, [r2]
 80059c6:	2900      	cmp	r1, #0
 80059c8:	d1f3      	bne.n	80059b2 <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 80059ca:	4b06      	ldr	r3, [pc, #24]	@ (80059e4 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 80059cc:	6723      	str	r3, [r4, #112]	@ 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	e852 3f00 	ldrex	r3, [r2]
 80059d4:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	e842 3100 	strex	r1, r3, [r2]
 80059dc:	2900      	cmp	r1, #0
 80059de:	d1f6      	bne.n	80059ce <UART_RxISR_16BIT_FIFOEN+0x186>
 80059e0:	e744      	b.n	800586c <UART_RxISR_16BIT_FIFOEN+0x24>
 80059e2:	bf00      	nop
 80059e4:	080055f7 	.word	0x080055f7

080059e8 <UART_SetConfig>:
{
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ec:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059ee:	6883      	ldr	r3, [r0, #8]
 80059f0:	6902      	ldr	r2, [r0, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	6942      	ldr	r2, [r0, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	69c2      	ldr	r2, [r0, #28]
 80059fa:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059fc:	6808      	ldr	r0, [r1, #0]
 80059fe:	4a9d      	ldr	r2, [pc, #628]	@ (8005c74 <UART_SetConfig+0x28c>)
 8005a00:	4002      	ands	r2, r0
 8005a02:	431a      	orrs	r2, r3
 8005a04:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	6853      	ldr	r3, [r2, #4]
 8005a0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005a0e:	68e1      	ldr	r1, [r4, #12]
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a14:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a16:	6822      	ldr	r2, [r4, #0]
 8005a18:	4b97      	ldr	r3, [pc, #604]	@ (8005c78 <UART_SetConfig+0x290>)
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d001      	beq.n	8005a22 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8005a1e:	6a23      	ldr	r3, [r4, #32]
 8005a20:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a22:	6893      	ldr	r3, [r2, #8]
 8005a24:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005a28:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a30:	6822      	ldr	r2, [r4, #0]
 8005a32:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005a34:	f023 030f 	bic.w	r3, r3, #15
 8005a38:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005a3a:	430b      	orrs	r3, r1
 8005a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	4a8e      	ldr	r2, [pc, #568]	@ (8005c7c <UART_SetConfig+0x294>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01c      	beq.n	8005a80 <UART_SetConfig+0x98>
 8005a46:	4a8e      	ldr	r2, [pc, #568]	@ (8005c80 <UART_SetConfig+0x298>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d031      	beq.n	8005ab0 <UART_SetConfig+0xc8>
 8005a4c:	4a8a      	ldr	r2, [pc, #552]	@ (8005c78 <UART_SetConfig+0x290>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d04b      	beq.n	8005aea <UART_SetConfig+0x102>
 8005a52:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a54:	4988      	ldr	r1, [pc, #544]	@ (8005c78 <UART_SetConfig+0x290>)
 8005a56:	428b      	cmp	r3, r1
 8005a58:	d068      	beq.n	8005b2c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a5a:	69e0      	ldr	r0, [r4, #28]
 8005a5c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005a60:	f000 80a5 	beq.w	8005bae <UART_SetConfig+0x1c6>
    switch (clocksource)
 8005a64:	2a08      	cmp	r2, #8
 8005a66:	f200 811f 	bhi.w	8005ca8 <UART_SetConfig+0x2c0>
 8005a6a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005a6e:	00d3      	.short	0x00d3
 8005a70:	00d100f5 	.word	0x00d100f5
 8005a74:	00f8011d 	.word	0x00f8011d
 8005a78:	011d011d 	.word	0x011d011d
 8005a7c:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005a80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a84:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8005a88:	f002 0203 	and.w	r2, r2, #3
 8005a8c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a90:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 8005a94:	2a03      	cmp	r2, #3
 8005a96:	d809      	bhi.n	8005aac <UART_SetConfig+0xc4>
 8005a98:	e8df f002 	tbb	[pc, r2]
 8005a9c:	063c0402 	.word	0x063c0402
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	e7d7      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	e7d5      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	e7d3      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005aac:	2210      	movs	r2, #16
 8005aae:	e7d1      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005ab0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ab4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8005ab8:	f002 020c 	and.w	r2, r2, #12
 8005abc:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 8005ac0:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 8005ac4:	2a0c      	cmp	r2, #12
 8005ac6:	d80e      	bhi.n	8005ae6 <UART_SetConfig+0xfe>
 8005ac8:	e8df f002 	tbb	[pc, r2]
 8005acc:	0d0d0d07 	.word	0x0d0d0d07
 8005ad0:	0d0d0d09 	.word	0x0d0d0d09
 8005ad4:	0d0d0d26 	.word	0x0d0d0d26
 8005ad8:	0b          	.byte	0x0b
 8005ad9:	00          	.byte	0x00
 8005ada:	2200      	movs	r2, #0
 8005adc:	e7ba      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005ade:	2204      	movs	r2, #4
 8005ae0:	e7b8      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	e7b6      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005ae6:	2210      	movs	r2, #16
 8005ae8:	e7b4      	b.n	8005a54 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005aea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aee:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8005af2:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8005af6:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8005afa:	d00f      	beq.n	8005b1c <UART_SetConfig+0x134>
 8005afc:	d805      	bhi.n	8005b0a <UART_SetConfig+0x122>
 8005afe:	b17a      	cbz	r2, 8005b20 <UART_SetConfig+0x138>
 8005b00:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005b04:	d10e      	bne.n	8005b24 <UART_SetConfig+0x13c>
 8005b06:	2204      	movs	r2, #4
 8005b08:	e7a4      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005b0a:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8005b0e:	d10b      	bne.n	8005b28 <UART_SetConfig+0x140>
 8005b10:	2208      	movs	r2, #8
 8005b12:	e79f      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005b14:	2202      	movs	r2, #2
 8005b16:	e79d      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005b18:	2202      	movs	r2, #2
 8005b1a:	e79b      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	e799      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005b20:	2200      	movs	r2, #0
 8005b22:	e797      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005b24:	2210      	movs	r2, #16
 8005b26:	e795      	b.n	8005a54 <UART_SetConfig+0x6c>
 8005b28:	2210      	movs	r2, #16
 8005b2a:	e793      	b.n	8005a54 <UART_SetConfig+0x6c>
    switch (clocksource)
 8005b2c:	2a08      	cmp	r2, #8
 8005b2e:	f200 809c 	bhi.w	8005c6a <UART_SetConfig+0x282>
 8005b32:	e8df f002 	tbb	[pc, r2]
 8005b36:	9a08      	.short	0x9a08
 8005b38:	9a379a3a 	.word	0x9a379a3a
 8005b3c:	9a9a      	.short	0x9a9a
 8005b3e:	05          	.byte	0x05
 8005b3f:	00          	.byte	0x00
 8005b40:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005b44:	e004      	b.n	8005b50 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b46:	f7fe fb21 	bl	800418c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	f000 808f 	beq.w	8005c6e <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b50:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005b52:	4b4c      	ldr	r3, [pc, #304]	@ (8005c84 <UART_SetConfig+0x29c>)
 8005b54:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005b58:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b5c:	6865      	ldr	r5, [r4, #4]
 8005b5e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005b62:	4299      	cmp	r1, r3
 8005b64:	f200 8094 	bhi.w	8005c90 <UART_SetConfig+0x2a8>
 8005b68:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005b6c:	f200 8092 	bhi.w	8005c94 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b70:	2600      	movs	r6, #0
 8005b72:	4633      	mov	r3, r6
 8005b74:	4631      	mov	r1, r6
 8005b76:	f7fb f8fd 	bl	8000d74 <__aeabi_uldivmod>
 8005b7a:	0209      	lsls	r1, r1, #8
 8005b7c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005b80:	0200      	lsls	r0, r0, #8
 8005b82:	086b      	lsrs	r3, r5, #1
 8005b84:	18c0      	adds	r0, r0, r3
 8005b86:	462a      	mov	r2, r5
 8005b88:	4633      	mov	r3, r6
 8005b8a:	f141 0100 	adc.w	r1, r1, #0
 8005b8e:	f7fb f8f1 	bl	8000d74 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b92:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8005b96:	4b3c      	ldr	r3, [pc, #240]	@ (8005c88 <UART_SetConfig+0x2a0>)
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d87d      	bhi.n	8005c98 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	60d8      	str	r0, [r3, #12]
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	e050      	b.n	8005c46 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba4:	f7fd fe0c 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
        break;
 8005ba8:	e7cf      	b.n	8005b4a <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8005baa:	4838      	ldr	r0, [pc, #224]	@ (8005c8c <UART_SetConfig+0x2a4>)
 8005bac:	e7d0      	b.n	8005b50 <UART_SetConfig+0x168>
    switch (clocksource)
 8005bae:	2a08      	cmp	r2, #8
 8005bb0:	d874      	bhi.n	8005c9c <UART_SetConfig+0x2b4>
 8005bb2:	e8df f002 	tbb	[pc, r2]
 8005bb6:	2707      	.short	0x2707
 8005bb8:	732a7305 	.word	0x732a7305
 8005bbc:	7373      	.short	0x7373
 8005bbe:	0b          	.byte	0x0b
 8005bbf:	00          	.byte	0x00
 8005bc0:	4832      	ldr	r0, [pc, #200]	@ (8005c8c <UART_SetConfig+0x2a4>)
 8005bc2:	e003      	b.n	8005bcc <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc4:	f7fe fae2 	bl	800418c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d069      	beq.n	8005ca0 <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bcc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005bce:	4b2d      	ldr	r3, [pc, #180]	@ (8005c84 <UART_SetConfig+0x29c>)
 8005bd0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005bd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8005bd8:	6862      	ldr	r2, [r4, #4]
 8005bda:	0853      	lsrs	r3, r2, #1
 8005bdc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005be4:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be6:	f1a3 0110 	sub.w	r1, r3, #16
 8005bea:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005bee:	4291      	cmp	r1, r2
 8005bf0:	d858      	bhi.n	8005ca4 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bf2:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005bfa:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	60d3      	str	r3, [r2, #12]
 8005c00:	2000      	movs	r0, #0
 8005c02:	e020      	b.n	8005c46 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c04:	f7fe fad2 	bl	80041ac <HAL_RCC_GetPCLK2Freq>
        break;
 8005c08:	e7de      	b.n	8005bc8 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fd fdd9 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
        break;
 8005c0e:	e7db      	b.n	8005bc8 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8005c10:	481e      	ldr	r0, [pc, #120]	@ (8005c8c <UART_SetConfig+0x2a4>)
 8005c12:	e003      	b.n	8005c1c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fe faba 	bl	800418c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d047      	beq.n	8005cac <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c1c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005c1e:	4b19      	ldr	r3, [pc, #100]	@ (8005c84 <UART_SetConfig+0x29c>)
 8005c20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005c24:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c28:	6863      	ldr	r3, [r4, #4]
 8005c2a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005c2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c32:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c34:	f1a0 0210 	sub.w	r2, r0, #16
 8005c38:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d837      	bhi.n	8005cb0 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	60d8      	str	r0, [r3, #12]
 8005c44:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c4c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	6723      	str	r3, [r4, #112]	@ 0x70
  huart->TxISR = NULL;
 8005c54:	6763      	str	r3, [r4, #116]	@ 0x74
}
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c58:	f7fe faa8 	bl	80041ac <HAL_RCC_GetPCLK2Freq>
        break;
 8005c5c:	e7dc      	b.n	8005c18 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5e:	f7fd fdaf 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
        break;
 8005c62:	e7d9      	b.n	8005c18 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8005c64:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005c68:	e7d8      	b.n	8005c1c <UART_SetConfig+0x234>
    switch (clocksource)
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	e7eb      	b.n	8005c46 <UART_SetConfig+0x25e>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e7e9      	b.n	8005c46 <UART_SetConfig+0x25e>
 8005c72:	bf00      	nop
 8005c74:	cfff69f3 	.word	0xcfff69f3
 8005c78:	40008000 	.word	0x40008000
 8005c7c:	40013800 	.word	0x40013800
 8005c80:	40004400 	.word	0x40004400
 8005c84:	0801416c 	.word	0x0801416c
 8005c88:	000ffcff 	.word	0x000ffcff
 8005c8c:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8005c90:	2001      	movs	r0, #1
 8005c92:	e7d8      	b.n	8005c46 <UART_SetConfig+0x25e>
 8005c94:	2001      	movs	r0, #1
 8005c96:	e7d6      	b.n	8005c46 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8005c98:	2001      	movs	r0, #1
 8005c9a:	e7d4      	b.n	8005c46 <UART_SetConfig+0x25e>
    switch (clocksource)
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	e7d2      	b.n	8005c46 <UART_SetConfig+0x25e>
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	e7d0      	b.n	8005c46 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	e7ce      	b.n	8005c46 <UART_SetConfig+0x25e>
    switch (clocksource)
 8005ca8:	2001      	movs	r0, #1
 8005caa:	e7cc      	b.n	8005c46 <UART_SetConfig+0x25e>
 8005cac:	2000      	movs	r0, #0
 8005cae:	e7ca      	b.n	8005c46 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	e7c8      	b.n	8005c46 <UART_SetConfig+0x25e>

08005cb4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cb4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005cb6:	f013 0f01 	tst.w	r3, #1
 8005cba:	d006      	beq.n	8005cca <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cbc:	6802      	ldr	r2, [r0, #0]
 8005cbe:	6853      	ldr	r3, [r2, #4]
 8005cc0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005cc4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cca:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005ccc:	f013 0f02 	tst.w	r3, #2
 8005cd0:	d006      	beq.n	8005ce0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cd2:	6802      	ldr	r2, [r0, #0]
 8005cd4:	6853      	ldr	r3, [r2, #4]
 8005cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cda:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ce0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005ce2:	f013 0f04 	tst.w	r3, #4
 8005ce6:	d006      	beq.n	8005cf6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ce8:	6802      	ldr	r2, [r0, #0]
 8005cea:	6853      	ldr	r3, [r2, #4]
 8005cec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cf0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cf6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005cf8:	f013 0f08 	tst.w	r3, #8
 8005cfc:	d006      	beq.n	8005d0c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cfe:	6802      	ldr	r2, [r0, #0]
 8005d00:	6853      	ldr	r3, [r2, #4]
 8005d02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d06:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d0c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005d0e:	f013 0f10 	tst.w	r3, #16
 8005d12:	d006      	beq.n	8005d22 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d14:	6802      	ldr	r2, [r0, #0]
 8005d16:	6893      	ldr	r3, [r2, #8]
 8005d18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d1c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d22:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005d24:	f013 0f20 	tst.w	r3, #32
 8005d28:	d006      	beq.n	8005d38 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d2a:	6802      	ldr	r2, [r0, #0]
 8005d2c:	6893      	ldr	r3, [r2, #8]
 8005d2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d32:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d38:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005d3a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005d3e:	d00a      	beq.n	8005d56 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d40:	6802      	ldr	r2, [r0, #0]
 8005d42:	6853      	ldr	r3, [r2, #4]
 8005d44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d48:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d4e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005d50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d54:	d00b      	beq.n	8005d6e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d56:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005d58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d5c:	d006      	beq.n	8005d6c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d5e:	6802      	ldr	r2, [r0, #0]
 8005d60:	6853      	ldr	r3, [r2, #4]
 8005d62:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005d66:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6053      	str	r3, [r2, #4]
}
 8005d6c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d6e:	6802      	ldr	r2, [r0, #0]
 8005d70:	6853      	ldr	r3, [r2, #4]
 8005d72:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005d76:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	6053      	str	r3, [r2, #4]
 8005d7c:	e7eb      	b.n	8005d56 <UART_AdvFeatureConfig+0xa2>

08005d7e <UART_WaitOnFlagUntilTimeout>:
{
 8005d7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d82:	4605      	mov	r5, r0
 8005d84:	460f      	mov	r7, r1
 8005d86:	4616      	mov	r6, r2
 8005d88:	4699      	mov	r9, r3
 8005d8a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8e:	682b      	ldr	r3, [r5, #0]
 8005d90:	69dc      	ldr	r4, [r3, #28]
 8005d92:	ea37 0404 	bics.w	r4, r7, r4
 8005d96:	bf0c      	ite	eq
 8005d98:	2401      	moveq	r4, #1
 8005d9a:	2400      	movne	r4, #0
 8005d9c:	42b4      	cmp	r4, r6
 8005d9e:	d157      	bne.n	8005e50 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8005da0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005da4:	d0f3      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fb fce5 	bl	8001774 <HAL_GetTick>
 8005daa:	eba0 0009 	sub.w	r0, r0, r9
 8005dae:	4540      	cmp	r0, r8
 8005db0:	d82f      	bhi.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x94>
 8005db2:	f1b8 0f00 	cmp.w	r8, #0
 8005db6:	d02c      	beq.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	f012 0f04 	tst.w	r2, #4
 8005dc0:	d0e5      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8005dc8:	d0e1      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005dce:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005dd0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	e852 3f00 	ldrex	r3, [r2]
 8005dd6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	e842 3100 	strex	r1, r3, [r2]
 8005dde:	2900      	cmp	r1, #0
 8005de0:	d1f6      	bne.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	f102 0308 	add.w	r3, r2, #8
 8005de8:	e853 3f00 	ldrex	r3, [r3]
 8005dec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	3208      	adds	r2, #8
 8005df2:	e842 3100 	strex	r1, r3, [r2]
 8005df6:	2900      	cmp	r1, #0
 8005df8:	d1f3      	bne.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e00:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e04:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
          return HAL_TIMEOUT;
 8005e0e:	2003      	movs	r0, #3
 8005e10:	e01f      	b.n	8005e52 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e12:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	e852 3f00 	ldrex	r3, [r2]
 8005e18:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	e842 3100 	strex	r1, r3, [r2]
 8005e20:	2900      	cmp	r1, #0
 8005e22:	d1f6      	bne.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e24:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	f102 0308 	add.w	r3, r2, #8
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	3208      	adds	r2, #8
 8005e34:	e842 3100 	strex	r1, r3, [r2]
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	d1f3      	bne.n	8005e24 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8005e3c:	2320      	movs	r3, #32
 8005e3e:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005e42:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        __HAL_UNLOCK(huart);
 8005e46:	2300      	movs	r3, #0
 8005e48:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
        return HAL_TIMEOUT;
 8005e4c:	2003      	movs	r0, #3
 8005e4e:	e000      	b.n	8005e52 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8005e50:	2000      	movs	r0, #0
}
 8005e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005e56 <UART_CheckIdleState>:
{
 8005e56:	b530      	push	{r4, r5, lr}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 8005e62:	f7fb fc87 	bl	8001774 <HAL_GetTick>
 8005e66:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e68:	6822      	ldr	r2, [r4, #0]
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	f012 0f08 	tst.w	r2, #8
 8005e70:	d10f      	bne.n	8005e92 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f013 0f04 	tst.w	r3, #4
 8005e7a:	d118      	bne.n	8005eae <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005e7c:	2320      	movs	r3, #32
 8005e7e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e82:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	2000      	movs	r0, #0
 8005e88:	66e0      	str	r0, [r4, #108]	@ 0x6c
  __HAL_UNLOCK(huart);
 8005e8a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 8005e8e:	b003      	add	sp, #12
 8005e90:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f7ff ff6c 	bl	8005d7e <UART_WaitOnFlagUntilTimeout>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d0e3      	beq.n	8005e72 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005eaa:	2003      	movs	r0, #3
 8005eac:	e7ef      	b.n	8005e8e <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	462b      	mov	r3, r5
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff ff5e 	bl	8005d7e <UART_WaitOnFlagUntilTimeout>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d0da      	beq.n	8005e7c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005ec6:	2003      	movs	r0, #3
 8005ec8:	e7e1      	b.n	8005e8e <UART_CheckIdleState+0x38>

08005eca <HAL_UART_Init>:
  if (huart == NULL)
 8005eca:	b378      	cbz	r0, 8005f2c <HAL_UART_Init+0x62>
{
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005ed0:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8005ed4:	b30b      	cbz	r3, 8005f1a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005ed6:	2324      	movs	r3, #36	@ 0x24
 8005ed8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f7ff fd7e 	bl	80059e8 <UART_SetConfig>
 8005eec:	2801      	cmp	r0, #1
 8005eee:	d013      	beq.n	8005f18 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ef0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005ef2:	b9bb      	cbnz	r3, 8005f24 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef4:	6822      	ldr	r2, [r4, #0]
 8005ef6:	6853      	ldr	r3, [r2, #4]
 8005ef8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8005efc:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005efe:	6822      	ldr	r2, [r4, #0]
 8005f00:	6893      	ldr	r3, [r2, #8]
 8005f02:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8005f06:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	6813      	ldr	r3, [r2, #0]
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005f12:	4620      	mov	r0, r4
 8005f14:	f7ff ff9f 	bl	8005e56 <UART_CheckIdleState>
}
 8005f18:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005f1a:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 8005f1e:	f7fb fde5 	bl	8001aec <HAL_UART_MspInit>
 8005f22:	e7d8      	b.n	8005ed6 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005f24:	4620      	mov	r0, r4
 8005f26:	f7ff fec5 	bl	8005cb4 <UART_AdvFeatureConfig>
 8005f2a:	e7e3      	b.n	8005ef4 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005f2c:	2001      	movs	r0, #1
}
 8005f2e:	4770      	bx	lr

08005f30 <UART_Start_Receive_IT>:
{
 8005f30:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8005f32:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005f34:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005f38:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	6703      	str	r3, [r0, #112]	@ 0x70
  UART_MASK_COMPUTATION(huart);
 8005f40:	6883      	ldr	r3, [r0, #8]
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f46:	d006      	beq.n	8005f56 <UART_Start_Receive_IT+0x26>
 8005f48:	b9a3      	cbnz	r3, 8005f74 <UART_Start_Receive_IT+0x44>
 8005f4a:	6903      	ldr	r3, [r0, #16]
 8005f4c:	b973      	cbnz	r3, 8005f6c <UART_Start_Receive_IT+0x3c>
 8005f4e:	23ff      	movs	r3, #255	@ 0xff
 8005f50:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8005f54:	e014      	b.n	8005f80 <UART_Start_Receive_IT+0x50>
 8005f56:	6903      	ldr	r3, [r0, #16]
 8005f58:	b923      	cbnz	r3, 8005f64 <UART_Start_Receive_IT+0x34>
 8005f5a:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8005f5e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8005f62:	e00d      	b.n	8005f80 <UART_Start_Receive_IT+0x50>
 8005f64:	23ff      	movs	r3, #255	@ 0xff
 8005f66:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8005f6a:	e009      	b.n	8005f80 <UART_Start_Receive_IT+0x50>
 8005f6c:	237f      	movs	r3, #127	@ 0x7f
 8005f6e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8005f72:	e005      	b.n	8005f80 <UART_Start_Receive_IT+0x50>
 8005f74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f78:	d02d      	beq.n	8005fd6 <UART_Start_Receive_IT+0xa6>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f86:	2322      	movs	r3, #34	@ 0x22
 8005f88:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	f101 0308 	add.w	r3, r1, #8
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	3108      	adds	r1, #8
 8005f9c:	e841 3400 	strex	r4, r3, [r1]
 8005fa0:	2c00      	cmp	r4, #0
 8005fa2:	d1f3      	bne.n	8005f8c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005fa4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8005fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005faa:	d01e      	beq.n	8005fea <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fac:	6883      	ldr	r3, [r0, #8]
 8005fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb2:	d043      	beq.n	800603c <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 8005fb4:	4b24      	ldr	r3, [pc, #144]	@ (8006048 <UART_Start_Receive_IT+0x118>)
 8005fb6:	6703      	str	r3, [r0, #112]	@ 0x70
    __HAL_UNLOCK(huart);
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005fbe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	e852 3f00 	ldrex	r3, [r2]
 8005fc4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	e842 3100 	strex	r1, r3, [r2]
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	d1f6      	bne.n	8005fbe <UART_Start_Receive_IT+0x8e>
}
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	bc10      	pop	{r4}
 8005fd4:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8005fd6:	6903      	ldr	r3, [r0, #16]
 8005fd8:	b91b      	cbnz	r3, 8005fe2 <UART_Start_Receive_IT+0xb2>
 8005fda:	237f      	movs	r3, #127	@ 0x7f
 8005fdc:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8005fe0:	e7ce      	b.n	8005f80 <UART_Start_Receive_IT+0x50>
 8005fe2:	233f      	movs	r3, #63	@ 0x3f
 8005fe4:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8005fe8:	e7ca      	b.n	8005f80 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005fea:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d8dc      	bhi.n	8005fac <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff2:	6883      	ldr	r3, [r0, #8]
 8005ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff8:	d01a      	beq.n	8006030 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005ffa:	4b14      	ldr	r3, [pc, #80]	@ (800604c <UART_Start_Receive_IT+0x11c>)
 8005ffc:	6703      	str	r3, [r0, #112]	@ 0x70
    __HAL_UNLOCK(huart);
 8005ffe:	2300      	movs	r3, #0
 8006000:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006004:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	e852 3f00 	ldrex	r3, [r2]
 800600a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	e842 3100 	strex	r1, r3, [r2]
 8006012:	2900      	cmp	r1, #0
 8006014:	d1f6      	bne.n	8006004 <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006016:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	f102 0308 	add.w	r3, r2, #8
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	3208      	adds	r2, #8
 8006026:	e842 3100 	strex	r1, r3, [r2]
 800602a:	2900      	cmp	r1, #0
 800602c:	d1f3      	bne.n	8006016 <UART_Start_Receive_IT+0xe6>
 800602e:	e7cf      	b.n	8005fd0 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006030:	6903      	ldr	r3, [r0, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e1      	bne.n	8005ffa <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006036:	4b06      	ldr	r3, [pc, #24]	@ (8006050 <UART_Start_Receive_IT+0x120>)
 8006038:	6703      	str	r3, [r0, #112]	@ 0x70
 800603a:	e7e0      	b.n	8005ffe <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800603c:	6903      	ldr	r3, [r0, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1b8      	bne.n	8005fb4 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006042:	4b04      	ldr	r3, [pc, #16]	@ (8006054 <UART_Start_Receive_IT+0x124>)
 8006044:	6703      	str	r3, [r0, #112]	@ 0x70
 8006046:	e7b7      	b.n	8005fb8 <UART_Start_Receive_IT+0x88>
 8006048:	08005545 	.word	0x08005545
 800604c:	080056a9 	.word	0x080056a9
 8006050:	08005849 	.word	0x08005849
 8006054:	080055f7 	.word	0x080055f7

08006058 <HAL_UART_Receive_IT>:
{
 8006058:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800605a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800605e:	2b20      	cmp	r3, #32
 8006060:	d11e      	bne.n	80060a0 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8006062:	b1f9      	cbz	r1, 80060a4 <HAL_UART_Receive_IT+0x4c>
 8006064:	b302      	cbz	r2, 80060a8 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8006066:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800606a:	2b01      	cmp	r3, #1
 800606c:	d01e      	beq.n	80060ac <HAL_UART_Receive_IT+0x54>
 800606e:	2301      	movs	r3, #1
 8006070:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006074:	2300      	movs	r3, #0
 8006076:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006078:	6803      	ldr	r3, [r0, #0]
 800607a:	4c0d      	ldr	r4, [pc, #52]	@ (80060b0 <HAL_UART_Receive_IT+0x58>)
 800607c:	42a3      	cmp	r3, r4
 800607e:	d00c      	beq.n	800609a <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006086:	d008      	beq.n	800609a <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006088:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	e854 3f00 	ldrex	r3, [r4]
 800608e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	e844 3500 	strex	r5, r3, [r4]
 8006096:	2d00      	cmp	r5, #0
 8006098:	d1f6      	bne.n	8006088 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 800609a:	f7ff ff49 	bl	8005f30 <UART_Start_Receive_IT>
 800609e:	e000      	b.n	80060a2 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 80060a0:	2002      	movs	r0, #2
}
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80060a4:	2001      	movs	r0, #1
 80060a6:	e7fc      	b.n	80060a2 <HAL_UART_Receive_IT+0x4a>
 80060a8:	2001      	movs	r0, #1
 80060aa:	e7fa      	b.n	80060a2 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80060ac:	2002      	movs	r0, #2
 80060ae:	e7f8      	b.n	80060a2 <HAL_UART_Receive_IT+0x4a>
 80060b0:	40008000 	.word	0x40008000

080060b4 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80060b4:	b082      	sub	sp, #8
 80060b6:	ab02      	add	r3, sp, #8
 80060b8:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80060bc:	6802      	ldr	r2, [r0, #0]
 80060be:	6853      	ldr	r3, [r2, #4]
 80060c0:	f023 0310 	bic.w	r3, r3, #16
 80060c4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80060cc:	6802      	ldr	r2, [r0, #0]
 80060ce:	6853      	ldr	r3, [r2, #4]
 80060d0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80060d4:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80060d8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80060dc:	6053      	str	r3, [r2, #4]
}
 80060de:	b002      	add	sp, #8
 80060e0:	4770      	bx	lr
	...

080060e4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060e4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80060e6:	b92b      	cbnz	r3, 80060f4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80060ee:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 80060f2:	4770      	bx	lr
{
 80060f4:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060f6:	6803      	ldr	r3, [r0, #0]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060fe:	6899      	ldr	r1, [r3, #8]
 8006100:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006102:	4d09      	ldr	r5, [pc, #36]	@ (8006128 <UARTEx_SetNbDataToProcess+0x44>)
 8006104:	5c6b      	ldrb	r3, [r5, r1]
 8006106:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006108:	4c08      	ldr	r4, [pc, #32]	@ (800612c <UARTEx_SetNbDataToProcess+0x48>)
 800610a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800610c:	fb93 f3f1 	sdiv	r3, r3, r1
 8006110:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006114:	5cab      	ldrb	r3, [r5, r2]
 8006116:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006118:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800611a:	fb93 f3f2 	sdiv	r3, r3, r2
 800611e:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 8006122:	bc30      	pop	{r4, r5}
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	0801418c 	.word	0x0801418c
 800612c:	08014184 	.word	0x08014184

08006130 <HAL_UARTEx_WakeupCallback>:
}
 8006130:	4770      	bx	lr

08006132 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006132:	4770      	bx	lr

08006134 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006134:	4770      	bx	lr

08006136 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8006136:	b510      	push	{r4, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	ab04      	add	r3, sp, #16
 800613c:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8006140:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8006144:	2b01      	cmp	r3, #1
 8006146:	d035      	beq.n	80061b4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8006148:	4604      	mov	r4, r0
 800614a:	2301      	movs	r3, #1
 800614c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006150:	2324      	movs	r3, #36	@ 0x24
 8006152:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 8006156:	6802      	ldr	r2, [r0, #0]
 8006158:	6813      	ldr	r3, [r2, #0]
 800615a:	f023 0301 	bic.w	r3, r3, #1
 800615e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006160:	6801      	ldr	r1, [r0, #0]
 8006162:	688b      	ldr	r3, [r1, #8]
 8006164:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006168:	9a02      	ldr	r2, [sp, #8]
 800616a:	4313      	orrs	r3, r2
 800616c:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800616e:	b1aa      	cbz	r2, 800619c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006170:	6822      	ldr	r2, [r4, #0]
 8006172:	6813      	ldr	r3, [r2, #0]
 8006174:	f043 0301 	orr.w	r3, r3, #1
 8006178:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800617a:	f7fb fafb 	bl	8001774 <HAL_GetTick>
 800617e:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006180:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 8006184:	9200      	str	r2, [sp, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800618c:	4620      	mov	r0, r4
 800618e:	f7ff fdf6 	bl	8005d7e <UART_WaitOnFlagUntilTimeout>
 8006192:	b948      	cbnz	r0, 80061a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006194:	2320      	movs	r3, #32
 8006196:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800619a:	e006      	b.n	80061aa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800619c:	ab04      	add	r3, sp, #16
 800619e:	e913 0006 	ldmdb	r3, {r1, r2}
 80061a2:	f7ff ff87 	bl	80060b4 <UARTEx_Wakeup_AddressConfig>
 80061a6:	e7e3      	b.n	8006170 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80061a8:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80061aa:	2300      	movs	r3, #0
 80061ac:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 80061b0:	b004      	add	sp, #16
 80061b2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80061b4:	2002      	movs	r0, #2
 80061b6:	e7fb      	b.n	80061b0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080061b8 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80061b8:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d010      	beq.n	80061e2 <HAL_UARTEx_EnableStopMode+0x2a>
 80061c0:	2301      	movs	r3, #1
 80061c2:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80061c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	e852 3f00 	ldrex	r3, [r2]
 80061cc:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	e842 3100 	strex	r1, r3, [r2]
 80061d4:	2900      	cmp	r1, #0
 80061d6:	d1f6      	bne.n	80061c6 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 80061d8:	2300      	movs	r3, #0
 80061da:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  return HAL_OK;
 80061de:	4618      	mov	r0, r3
 80061e0:	4770      	bx	lr
  __HAL_LOCK(huart);
 80061e2:	2002      	movs	r0, #2
}
 80061e4:	4770      	bx	lr

080061e6 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 80061e6:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d01d      	beq.n	800622a <HAL_UARTEx_EnableFifoMode+0x44>
{
 80061ee:	b510      	push	{r4, lr}
 80061f0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80061f2:	2301      	movs	r3, #1
 80061f4:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80061f8:	2324      	movs	r3, #36	@ 0x24
 80061fa:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061fe:	6802      	ldr	r2, [r0, #0]
 8006200:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006202:	6811      	ldr	r1, [r2, #0]
 8006204:	f021 0101 	bic.w	r1, r1, #1
 8006208:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800620a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800620e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006212:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006214:	6802      	ldr	r2, [r0, #0]
 8006216:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006218:	f7ff ff64 	bl	80060e4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800621c:	2320      	movs	r3, #32
 800621e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 8006222:	2000      	movs	r0, #0
 8006224:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 8006228:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800622a:	2002      	movs	r0, #2
}
 800622c:	4770      	bx	lr

0800622e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800622e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006230:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8006234:	2b01      	cmp	r3, #1
 8006236:	d01d      	beq.n	8006274 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006238:	4604      	mov	r4, r0
 800623a:	2301      	movs	r3, #1
 800623c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006240:	2324      	movs	r3, #36	@ 0x24
 8006242:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006246:	6803      	ldr	r3, [r0, #0]
 8006248:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	f022 0201 	bic.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006252:	6802      	ldr	r2, [r0, #0]
 8006254:	6893      	ldr	r3, [r2, #8]
 8006256:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800625a:	4319      	orrs	r1, r3
 800625c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800625e:	f7ff ff41 	bl	80060e4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006266:	2320      	movs	r3, #32
 8006268:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800626c:	2000      	movs	r0, #0
 800626e:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 8006272:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006274:	2002      	movs	r0, #2
 8006276:	e7fc      	b.n	8006272 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006278 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006278:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800627a:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800627e:	2b01      	cmp	r3, #1
 8006280:	d01d      	beq.n	80062be <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006282:	4604      	mov	r4, r0
 8006284:	2301      	movs	r3, #1
 8006286:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800628a:	2324      	movs	r3, #36	@ 0x24
 800628c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006290:	6803      	ldr	r3, [r0, #0]
 8006292:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800629c:	6802      	ldr	r2, [r0, #0]
 800629e:	6893      	ldr	r3, [r2, #8]
 80062a0:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80062a4:	4319      	orrs	r1, r3
 80062a6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80062a8:	f7ff ff1c 	bl	80060e4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80062b0:	2320      	movs	r3, #32
 80062b2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 80062b6:	2000      	movs	r0, #0
 80062b8:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 80062bc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80062be:	2002      	movs	r0, #2
 80062c0:	e7fc      	b.n	80062bc <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080062c4 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 80062c4:	2804      	cmp	r0, #4
 80062c6:	d807      	bhi.n	80062d8 <LmHandlerPackageIsInitialized+0x14>
{
 80062c8:	b508      	push	{r3, lr}
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 80062ca:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <LmHandlerPackageIsInitialized+0x1c>)
 80062cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	b11b      	cbz	r3, 80062dc <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80062d4:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 80062d6:	bd08      	pop	{r3, pc}
        return false;
 80062d8:	2000      	movs	r0, #0
}
 80062da:	4770      	bx	lr
        return false;
 80062dc:	2000      	movs	r0, #0
 80062de:	e7fa      	b.n	80062d6 <LmHandlerPackageIsInitialized+0x12>
 80062e0:	20000724 	.word	0x20000724

080062e4 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 80062e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e6:	4605      	mov	r5, r0
 80062e8:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80062ea:	2400      	movs	r4, #0
 80062ec:	e018      	b.n	8006320 <LmHandlerPackagesNotify+0x3c>
                    }
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 80062ee:	69da      	ldr	r2, [r3, #28]
 80062f0:	b1a2      	cbz	r2, 800631c <LmHandlerPackagesNotify+0x38>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 80062f2:	781a      	ldrb	r2, [r3, #0]
 80062f4:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d005      	beq.n	8006306 <LmHandlerPackagesNotify+0x22>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 80062fa:	b97c      	cbnz	r4, 800631c <LmHandlerPackagesNotify+0x38>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 80062fc:	4b13      	ldr	r3, [pc, #76]	@ (800634c <LmHandlerPackagesNotify+0x68>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	4798      	blx	r3
 8006304:	b150      	cbz	r0, 800631c <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8006306:	4b11      	ldr	r3, [pc, #68]	@ (800634c <LmHandlerPackagesNotify+0x68>)
 8006308:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	4638      	mov	r0, r7
 8006310:	4798      	blx	r3
 8006312:	e003      	b.n	800631c <LmHandlerPackagesNotify+0x38>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	b10b      	cbz	r3, 800631c <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8006318:	4638      	mov	r0, r7
 800631a:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800631c:	3401      	adds	r4, #1
 800631e:	b264      	sxtb	r4, r4
 8006320:	2c04      	cmp	r4, #4
 8006322:	dc11      	bgt.n	8006348 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8006324:	4626      	mov	r6, r4
 8006326:	4b09      	ldr	r3, [pc, #36]	@ (800634c <LmHandlerPackagesNotify+0x68>)
 8006328:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0f5      	beq.n	800631c <LmHandlerPackagesNotify+0x38>
            switch( notifyType )
 8006330:	2d01      	cmp	r5, #1
 8006332:	d0dc      	beq.n	80062ee <LmHandlerPackagesNotify+0xa>
 8006334:	2d02      	cmp	r5, #2
 8006336:	d0ed      	beq.n	8006314 <LmHandlerPackagesNotify+0x30>
 8006338:	2d00      	cmp	r5, #0
 800633a:	d1ef      	bne.n	800631c <LmHandlerPackagesNotify+0x38>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0ec      	beq.n	800631c <LmHandlerPackagesNotify+0x38>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006342:	4638      	mov	r0, r7
 8006344:	4798      	blx	r3
 8006346:	e7e9      	b.n	800631c <LmHandlerPackagesNotify+0x38>
                    break;
                }
            }
        }
    }
}
 8006348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634a:	bf00      	nop
 800634c:	20000724 	.word	0x20000724

08006350 <McpsConfirm>:
{
 8006350:	b510      	push	{r4, lr}
 8006352:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8006354:	480c      	ldr	r0, [pc, #48]	@ (8006388 <McpsConfirm+0x38>)
 8006356:	2301      	movs	r3, #1
 8006358:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 800635a:	7863      	ldrb	r3, [r4, #1]
 800635c:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800635e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006362:	7103      	strb	r3, [r0, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006364:	68e3      	ldr	r3, [r4, #12]
 8006366:	6083      	str	r3, [r0, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006368:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800636c:	7503      	strb	r3, [r0, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800636e:	6923      	ldr	r3, [r4, #16]
 8006370:	7543      	strb	r3, [r0, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006372:	7923      	ldrb	r3, [r4, #4]
 8006374:	70c3      	strb	r3, [r0, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006376:	4b05      	ldr	r3, [pc, #20]	@ (800638c <McpsConfirm+0x3c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800637e:	4621      	mov	r1, r4
 8006380:	2000      	movs	r0, #0
 8006382:	f7ff ffaf 	bl	80062e4 <LmHandlerPackagesNotify>
}
 8006386:	bd10      	pop	{r4, pc}
 8006388:	200006d4 	.word	0x200006d4
 800638c:	20000710 	.word	0x20000710

08006390 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8006390:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006392:	2400      	movs	r4, #0
 8006394:	e001      	b.n	800639a <LmHandlerPackagesProcess+0xa>
 8006396:	3401      	adds	r4, #1
 8006398:	b264      	sxtb	r4, r4
 800639a:	2c04      	cmp	r4, #4
 800639c:	dc12      	bgt.n	80063c4 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800639e:	4b0a      	ldr	r3, [pc, #40]	@ (80063c8 <LmHandlerPackagesProcess+0x38>)
 80063a0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f6      	beq.n	8006396 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80063a8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0f3      	beq.n	8006396 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 80063ae:	b2e0      	uxtb	r0, r4
 80063b0:	f7ff ff88 	bl	80062c4 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d0ee      	beq.n	8006396 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 80063b8:	4b03      	ldr	r3, [pc, #12]	@ (80063c8 <LmHandlerPackagesProcess+0x38>)
 80063ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	4798      	blx	r3
 80063c2:	e7e8      	b.n	8006396 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 80063c4:	bd38      	pop	{r3, r4, r5, pc}
 80063c6:	bf00      	nop
 80063c8:	20000724 	.word	0x20000724

080063cc <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 80063cc:	b500      	push	{lr}
 80063ce:	b083      	sub	sp, #12
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80063d0:	4b05      	ldr	r3, [pc, #20]	@ (80063e8 <DisplayClassUpdate+0x1c>)
 80063d2:	5c1b      	ldrb	r3, [r3, r0]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	4b05      	ldr	r3, [pc, #20]	@ (80063ec <DisplayClassUpdate+0x20>)
 80063d8:	2200      	movs	r2, #0
 80063da:	4611      	mov	r1, r2
 80063dc:	2002      	movs	r0, #2
 80063de:	f00a f9ed 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 80063e2:	b003      	add	sp, #12
 80063e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80063e8:	080141b0 	.word	0x080141b0
 80063ec:	08014194 	.word	0x08014194

080063f0 <LmHandlerSetSystemMaxRxError>:
{
 80063f0:	b500      	push	{lr}
 80063f2:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80063f4:	2322      	movs	r3, #34	@ 0x22
 80063f6:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 80063fa:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80063fc:	a801      	add	r0, sp, #4
 80063fe:	f003 fa87 	bl	8009910 <LoRaMacMibSetRequestConfirm>
 8006402:	b910      	cbnz	r0, 800640a <LmHandlerSetSystemMaxRxError+0x1a>
}
 8006404:	b00b      	add	sp, #44	@ 0x2c
 8006406:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800640a:	f04f 30ff 	mov.w	r0, #4294967295
 800640e:	e7f9      	b.n	8006404 <LmHandlerSetSystemMaxRxError+0x14>

08006410 <LmHandlerDeviceTimeReq>:
{
 8006410:	b500      	push	{lr}
 8006412:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8006414:	230a      	movs	r3, #10
 8006416:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800641a:	a801      	add	r0, sp, #4
 800641c:	f003 fcf4 	bl	8009e08 <LoRaMacMlmeRequest>
    if( status == LORAMAC_STATUS_OK )
 8006420:	b910      	cbnz	r0, 8006428 <LmHandlerDeviceTimeReq+0x18>
}
 8006422:	b007      	add	sp, #28
 8006424:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8006428:	f04f 30ff 	mov.w	r0, #4294967295
 800642c:	e7f9      	b.n	8006422 <LmHandlerDeviceTimeReq+0x12>
	...

08006430 <LmHandlerConfigure>:
{
 8006430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006432:	b095      	sub	sp, #84	@ 0x54
 8006434:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006436:	4c61      	ldr	r4, [pc, #388]	@ (80065bc <LmHandlerConfigure+0x18c>)
 8006438:	2210      	movs	r2, #16
 800643a:	4620      	mov	r0, r4
 800643c:	f00a fad4 	bl	80109e8 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8006440:	f7fb fe7c 	bl	800213c <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8006444:	7822      	ldrb	r2, [r4, #0]
 8006446:	2301      	movs	r3, #1
 8006448:	4093      	lsls	r3, r2
 800644a:	6841      	ldr	r1, [r0, #4]
 800644c:	420b      	tst	r3, r1
 800644e:	f000 80a7 	beq.w	80065a0 <LmHandlerConfigure+0x170>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8006452:	495b      	ldr	r1, [pc, #364]	@ (80065c0 <LmHandlerConfigure+0x190>)
 8006454:	485b      	ldr	r0, [pc, #364]	@ (80065c4 <LmHandlerConfigure+0x194>)
 8006456:	f002 fef7 	bl	8009248 <LoRaMacInitialization>
 800645a:	2800      	cmp	r0, #0
 800645c:	f040 80ab 	bne.w	80065b6 <LmHandlerConfigure+0x186>
    nbNvmData = NvmDataMgmtRestore( );
 8006460:	f004 fecd 	bl	800b1fe <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 8006464:	2800      	cmp	r0, #0
 8006466:	f000 80a2 	beq.w	80065ae <LmHandlerConfigure+0x17e>
        CtxRestoreDone = true;
 800646a:	4b57      	ldr	r3, [pc, #348]	@ (80065c8 <LmHandlerConfigure+0x198>)
 800646c:	2201      	movs	r2, #1
 800646e:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8006470:	2502      	movs	r5, #2
 8006472:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006476:	a80b      	add	r0, sp, #44	@ 0x2c
 8006478:	f003 f92e 	bl	80096d8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800647c:	4c53      	ldr	r4, [pc, #332]	@ (80065cc <LmHandlerConfigure+0x19c>)
 800647e:	2208      	movs	r2, #8
 8006480:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006482:	4620      	mov	r0, r4
 8006484:	f008 f801 	bl	800e48a <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8006488:	2303      	movs	r3, #3
 800648a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 800648e:	a80b      	add	r0, sp, #44	@ 0x2c
 8006490:	f003 f922 	bl	80096d8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8006494:	2208      	movs	r2, #8
 8006496:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006498:	18a0      	adds	r0, r4, r2
 800649a:	f007 fff6 	bl	800e48a <memcpy1>
    mibReq.Type = MIB_DEV_ADDR;
 800649e:	2306      	movs	r3, #6
 80064a0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 80064a4:	6963      	ldr	r3, [r4, #20]
 80064a6:	930c      	str	r3, [sp, #48]	@ 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80064a8:	a80b      	add	r0, sp, #44	@ 0x2c
 80064aa:	f003 fa31 	bl	8009910 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80064ae:	7823      	ldrb	r3, [r4, #0]
 80064b0:	7862      	ldrb	r2, [r4, #1]
 80064b2:	78a1      	ldrb	r1, [r4, #2]
 80064b4:	78e0      	ldrb	r0, [r4, #3]
 80064b6:	7926      	ldrb	r6, [r4, #4]
 80064b8:	7967      	ldrb	r7, [r4, #5]
 80064ba:	f894 c006 	ldrb.w	ip, [r4, #6]
 80064be:	f894 e007 	ldrb.w	lr, [r4, #7]
 80064c2:	f8cd e01c 	str.w	lr, [sp, #28]
 80064c6:	f8cd c018 	str.w	ip, [sp, #24]
 80064ca:	9705      	str	r7, [sp, #20]
 80064cc:	9604      	str	r6, [sp, #16]
 80064ce:	9003      	str	r0, [sp, #12]
 80064d0:	9102      	str	r1, [sp, #8]
 80064d2:	9201      	str	r2, [sp, #4]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	4b3e      	ldr	r3, [pc, #248]	@ (80065d0 <LmHandlerConfigure+0x1a0>)
 80064d8:	2200      	movs	r2, #0
 80064da:	4611      	mov	r1, r2
 80064dc:	4628      	mov	r0, r5
 80064de:	f00a f96d 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80064e2:	7a23      	ldrb	r3, [r4, #8]
 80064e4:	7a62      	ldrb	r2, [r4, #9]
 80064e6:	7aa1      	ldrb	r1, [r4, #10]
 80064e8:	7ae0      	ldrb	r0, [r4, #11]
 80064ea:	7b26      	ldrb	r6, [r4, #12]
 80064ec:	f894 c00d 	ldrb.w	ip, [r4, #13]
 80064f0:	f894 e00e 	ldrb.w	lr, [r4, #14]
 80064f4:	7be7      	ldrb	r7, [r4, #15]
 80064f6:	9707      	str	r7, [sp, #28]
 80064f8:	f8cd e018 	str.w	lr, [sp, #24]
 80064fc:	f8cd c014 	str.w	ip, [sp, #20]
 8006500:	9604      	str	r6, [sp, #16]
 8006502:	9003      	str	r0, [sp, #12]
 8006504:	9102      	str	r1, [sp, #8]
 8006506:	9201      	str	r2, [sp, #4]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	4b32      	ldr	r3, [pc, #200]	@ (80065d4 <LmHandlerConfigure+0x1a4>)
 800650c:	2200      	movs	r2, #0
 800650e:	4611      	mov	r1, r2
 8006510:	4628      	mov	r0, r5
 8006512:	f00a f953 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8006516:	7de3      	ldrb	r3, [r4, #23]
 8006518:	7da2      	ldrb	r2, [r4, #22]
 800651a:	7d61      	ldrb	r1, [r4, #21]
 800651c:	7d20      	ldrb	r0, [r4, #20]
 800651e:	9003      	str	r0, [sp, #12]
 8006520:	9102      	str	r1, [sp, #8]
 8006522:	9201      	str	r2, [sp, #4]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	4b2c      	ldr	r3, [pc, #176]	@ (80065d8 <LmHandlerConfigure+0x1a8>)
 8006528:	2200      	movs	r2, #0
 800652a:	4611      	mov	r1, r2
 800652c:	4628      	mov	r0, r5
 800652e:	f00a f945 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8006532:	260f      	movs	r6, #15
 8006534:	f88d 602c 	strb.w	r6, [sp, #44]	@ 0x2c
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8006538:	2301      	movs	r3, #1
 800653a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 800653e:	a80b      	add	r0, sp, #44	@ 0x2c
 8006540:	f003 f9e6 	bl	8009910 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 8006544:	2305      	movs	r3, #5
 8006546:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800654a:	2400      	movs	r4, #0
 800654c:	940c      	str	r4, [sp, #48]	@ 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 800654e:	a80b      	add	r0, sp, #44	@ 0x2c
 8006550:	f003 f9de 	bl	8009910 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8006554:	2310      	movs	r3, #16
 8006556:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800655a:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800655e:	a80b      	add	r0, sp, #44	@ 0x2c
 8006560:	f003 f9d6 	bl	8009910 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8006564:	2304      	movs	r3, #4
 8006566:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800656a:	4d14      	ldr	r5, [pc, #80]	@ (80065bc <LmHandlerConfigure+0x18c>)
 800656c:	78ab      	ldrb	r3, [r5, #2]
 800656e:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006572:	a80b      	add	r0, sp, #44	@ 0x2c
 8006574:	f003 f9cc 	bl	8009910 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8006578:	f88d 6024 	strb.w	r6, [sp, #36]	@ 0x24
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800657c:	a909      	add	r1, sp, #36	@ 0x24
 800657e:	7828      	ldrb	r0, [r5, #0]
 8006580:	f004 fe49 	bl	800b216 <RegionGetPhyParam>
 8006584:	9008      	str	r0, [sp, #32]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8006586:	1b03      	subs	r3, r0, r4
 8006588:	bf18      	it	ne
 800658a:	2301      	movne	r3, #1
 800658c:	716b      	strb	r3, [r5, #5]
    LmHandlerSetSystemMaxRxError( 20 );
 800658e:	2014      	movs	r0, #20
 8006590:	f7ff ff2e 	bl	80063f0 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8006594:	7968      	ldrb	r0, [r5, #5]
 8006596:	f003 fdcb 	bl	800a130 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800659a:	4620      	mov	r0, r4
}
 800659c:	b015      	add	sp, #84	@ 0x54
 800659e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 80065a0:	4b0e      	ldr	r3, [pc, #56]	@ (80065dc <LmHandlerConfigure+0x1ac>)
 80065a2:	2201      	movs	r2, #1
 80065a4:	2100      	movs	r1, #0
 80065a6:	4608      	mov	r0, r1
 80065a8:	f00a f908 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 80065ac:	e7fe      	b.n	80065ac <LmHandlerConfigure+0x17c>
        CtxRestoreDone = false;
 80065ae:	4b06      	ldr	r3, [pc, #24]	@ (80065c8 <LmHandlerConfigure+0x198>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	e75c      	b.n	8006470 <LmHandlerConfigure+0x40>
            return LORAMAC_HANDLER_ERROR;
 80065b6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ba:	e7ef      	b.n	800659c <LmHandlerConfigure+0x16c>
 80065bc:	20000714 	.word	0x20000714
 80065c0:	200006ec 	.word	0x200006ec
 80065c4:	20000700 	.word	0x20000700
 80065c8:	200005dc 	.word	0x200005dc
 80065cc:	20000078 	.word	0x20000078
 80065d0:	08014200 	.word	0x08014200
 80065d4:	0801423c 	.word	0x0801423c
 80065d8:	08014278 	.word	0x08014278
 80065dc:	080141b4 	.word	0x080141b4

080065e0 <LmHandlerProcess>:
{
 80065e0:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 80065e2:	f002 fdfd 	bl	80091e0 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 80065e6:	f7ff fed3 	bl	8006390 <LmHandlerPackagesProcess>
    NvmDataMgmtStore( );
 80065ea:	f004 fe06 	bl	800b1fa <NvmDataMgmtStore>
}
 80065ee:	bd08      	pop	{r3, pc}

080065f0 <LmHandlerJoinStatus>:
{
 80065f0:	b500      	push	{lr}
 80065f2:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80065f4:	2301      	movs	r3, #1
 80065f6:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80065fa:	a801      	add	r0, sp, #4
 80065fc:	f003 f86c 	bl	80096d8 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8006600:	b920      	cbnz	r0, 800660c <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006602:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006606:	b110      	cbz	r0, 800660e <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8006608:	2001      	movs	r0, #1
 800660a:	e000      	b.n	800660e <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800660c:	2000      	movs	r0, #0
}
 800660e:	b00b      	add	sp, #44	@ 0x2c
 8006610:	f85d fb04 	ldr.w	pc, [sp], #4

08006614 <LmHandlerRequestClass>:
{
 8006614:	b510      	push	{r4, lr}
 8006616:	b08a      	sub	sp, #40	@ 0x28
 8006618:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 800661a:	f002 fdcf 	bl	80091bc <LoRaMacIsBusy>
 800661e:	2800      	cmp	r0, #0
 8006620:	d13d      	bne.n	800669e <LmHandlerRequestClass+0x8a>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8006622:	f7ff ffe5 	bl	80065f0 <LmHandlerJoinStatus>
 8006626:	2801      	cmp	r0, #1
 8006628:	d13c      	bne.n	80066a4 <LmHandlerRequestClass+0x90>
    mibReq.Type = MIB_DEVICE_CLASS;
 800662a:	2300      	movs	r3, #0
 800662c:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006630:	a801      	add	r0, sp, #4
 8006632:	f003 f851 	bl	80096d8 <LoRaMacMibGetRequestConfirm>
 8006636:	2800      	cmp	r0, #0
 8006638:	d137      	bne.n	80066aa <LmHandlerRequestClass+0x96>
    currentClass = mibReq.Param.Class;
 800663a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 800663e:	42a3      	cmp	r3, r4
 8006640:	d036      	beq.n	80066b0 <LmHandlerRequestClass+0x9c>
        switch( newClass )
 8006642:	2c01      	cmp	r4, #1
 8006644:	d036      	beq.n	80066b4 <LmHandlerRequestClass+0xa0>
 8006646:	2c02      	cmp	r4, #2
 8006648:	d017      	beq.n	800667a <LmHandlerRequestClass+0x66>
 800664a:	b114      	cbz	r4, 8006652 <LmHandlerRequestClass+0x3e>
 800664c:	2000      	movs	r0, #0
}
 800664e:	b00a      	add	sp, #40	@ 0x28
 8006650:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8006652:	b90b      	cbnz	r3, 8006658 <LmHandlerRequestClass+0x44>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006654:	2000      	movs	r0, #0
 8006656:	e7fa      	b.n	800664e <LmHandlerRequestClass+0x3a>
                    mibReq.Param.Class = newClass;
 8006658:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800665c:	a801      	add	r0, sp, #4
 800665e:	f003 f957 	bl	8009910 <LoRaMacMibSetRequestConfirm>
 8006662:	bb50      	cbnz	r0, 80066ba <LmHandlerRequestClass+0xa6>
                        DisplayClassUpdate(newClass);
 8006664:	4620      	mov	r0, r4
 8006666:	f7ff feb1 	bl	80063cc <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800666a:	4b1a      	ldr	r3, [pc, #104]	@ (80066d4 <LmHandlerRequestClass+0xc0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006670:	b333      	cbz	r3, 80066c0 <LmHandlerRequestClass+0xac>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006672:	4620      	mov	r0, r4
 8006674:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006676:	2000      	movs	r0, #0
 8006678:	e7e9      	b.n	800664e <LmHandlerRequestClass+0x3a>
                if( currentClass != CLASS_A )
 800667a:	bb1b      	cbnz	r3, 80066c4 <LmHandlerRequestClass+0xb0>
                    mibReq.Param.Class = newClass;
 800667c:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8006680:	a801      	add	r0, sp, #4
 8006682:	f003 f945 	bl	8009910 <LoRaMacMibSetRequestConfirm>
 8006686:	bb00      	cbnz	r0, 80066ca <LmHandlerRequestClass+0xb6>
                        DisplayClassUpdate(newClass);
 8006688:	4620      	mov	r0, r4
 800668a:	f7ff fe9f 	bl	80063cc <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800668e:	4b11      	ldr	r3, [pc, #68]	@ (80066d4 <LmHandlerRequestClass+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006694:	b1e3      	cbz	r3, 80066d0 <LmHandlerRequestClass+0xbc>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006696:	4620      	mov	r0, r4
 8006698:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800669a:	2000      	movs	r0, #0
 800669c:	e7d7      	b.n	800664e <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800669e:	f06f 0001 	mvn.w	r0, #1
 80066a2:	e7d4      	b.n	800664e <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80066a4:	f06f 0002 	mvn.w	r0, #2
 80066a8:	e7d1      	b.n	800664e <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_ERROR;
 80066aa:	f04f 30ff 	mov.w	r0, #4294967295
 80066ae:	e7ce      	b.n	800664e <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80066b0:	2000      	movs	r0, #0
 80066b2:	e7cc      	b.n	800664e <LmHandlerRequestClass+0x3a>
                errorStatus = LORAMAC_HANDLER_ERROR;
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	e7c9      	b.n	800664e <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80066ba:	f04f 30ff 	mov.w	r0, #4294967295
 80066be:	e7c6      	b.n	800664e <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80066c0:	2000      	movs	r0, #0
 80066c2:	e7c4      	b.n	800664e <LmHandlerRequestClass+0x3a>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295
 80066c8:	e7c1      	b.n	800664e <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80066ca:	f04f 30ff 	mov.w	r0, #4294967295
 80066ce:	e7be      	b.n	800664e <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80066d0:	2000      	movs	r0, #0
 80066d2:	e7bc      	b.n	800664e <LmHandlerRequestClass+0x3a>
 80066d4:	20000710 	.word	0x20000710

080066d8 <LmHandlerJoin>:
{
 80066d8:	b500      	push	{lr}
 80066da:	b08f      	sub	sp, #60	@ 0x3c
    if ( mode == ACTIVATION_TYPE_OTAA )
 80066dc:	2802      	cmp	r0, #2
 80066de:	d021      	beq.n	8006724 <LmHandlerJoin+0x4c>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80066e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006758 <LmHandlerJoin+0x80>)
 80066e2:	2201      	movs	r2, #1
 80066e4:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 80066e6:	4a1d      	ldr	r2, [pc, #116]	@ (800675c <LmHandlerJoin+0x84>)
 80066e8:	f992 2003 	ldrsb.w	r2, [r2, #3]
 80066ec:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80066ee:	2200      	movs	r2, #0
 80066f0:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 80066f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006760 <LmHandlerJoin+0x88>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	b32b      	cbz	r3, 8006744 <LmHandlerJoin+0x6c>
        LoRaMacStart();
 80066f8:	f002 ff80 	bl	80095fc <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f88d 3014 	strb.w	r3, [sp, #20]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006702:	f88d 3018 	strb.w	r3, [sp, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006706:	a805      	add	r0, sp, #20
 8006708:	f003 f902 	bl	8009910 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800670c:	4b15      	ldr	r3, [pc, #84]	@ (8006764 <LmHandlerJoin+0x8c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	4811      	ldr	r0, [pc, #68]	@ (8006758 <LmHandlerJoin+0x80>)
 8006714:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006716:	4b11      	ldr	r3, [pc, #68]	@ (800675c <LmHandlerJoin+0x84>)
 8006718:	7858      	ldrb	r0, [r3, #1]
 800671a:	f7ff ff7b 	bl	8006614 <LmHandlerRequestClass>
}
 800671e:	b00f      	add	sp, #60	@ 0x3c
 8006720:	f85d fb04 	ldr.w	pc, [sp], #4
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8006724:	4b0c      	ldr	r3, [pc, #48]	@ (8006758 <LmHandlerJoin+0x80>)
 8006726:	2202      	movs	r2, #2
 8006728:	709a      	strb	r2, [r3, #2]
        LoRaMacStart();
 800672a:	f002 ff67 	bl	80095fc <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 800672e:	2301      	movs	r3, #1
 8006730:	f88d 3000 	strb.w	r3, [sp]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006734:	4b09      	ldr	r3, [pc, #36]	@ (800675c <LmHandlerJoin+0x84>)
 8006736:	78db      	ldrb	r3, [r3, #3]
 8006738:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 800673c:	4668      	mov	r0, sp
 800673e:	f003 fb63 	bl	8009e08 <LoRaMacMlmeRequest>
 8006742:	e7ec      	b.n	800671e <LmHandlerJoin+0x46>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8006744:	2327      	movs	r3, #39	@ 0x27
 8006746:	f88d 3014 	strb.w	r3, [sp, #20]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800674a:	4b07      	ldr	r3, [pc, #28]	@ (8006768 <LmHandlerJoin+0x90>)
 800674c:	9306      	str	r3, [sp, #24]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800674e:	a805      	add	r0, sp, #20
 8006750:	f003 f8de 	bl	8009910 <LoRaMacMibSetRequestConfirm>
 8006754:	e7d0      	b.n	80066f8 <LmHandlerJoin+0x20>
 8006756:	bf00      	nop
 8006758:	20000068 	.word	0x20000068
 800675c:	20000714 	.word	0x20000714
 8006760:	200005dc 	.word	0x200005dc
 8006764:	20000710 	.word	0x20000710
 8006768:	01000300 	.word	0x01000300

0800676c <LmHandlerSend>:
{
 800676c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676e:	b087      	sub	sp, #28
 8006770:	4604      	mov	r4, r0
 8006772:	460f      	mov	r7, r1
 8006774:	4615      	mov	r5, r2
 8006776:	461e      	mov	r6, r3
    if (LoRaMacIsBusy() == true)
 8006778:	f002 fd20 	bl	80091bc <LoRaMacIsBusy>
 800677c:	2800      	cmp	r0, #0
 800677e:	d16c      	bne.n	800685a <LmHandlerSend+0xee>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8006780:	f7ff ff36 	bl	80065f0 <LmHandlerJoinStatus>
 8006784:	2801      	cmp	r0, #1
 8006786:	d13d      	bne.n	8006804 <LmHandlerSend+0x98>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8006788:	4b39      	ldr	r3, [pc, #228]	@ (8006870 <LmHandlerSend+0x104>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	4798      	blx	r3
 8006790:	b138      	cbz	r0, 80067a2 <LmHandlerSend+0x36>
 8006792:	7823      	ldrb	r3, [r4, #0]
 8006794:	4a36      	ldr	r2, [pc, #216]	@ (8006870 <LmHandlerSend+0x104>)
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	4293      	cmp	r3, r2
 800679c:	d001      	beq.n	80067a2 <LmHandlerSend+0x36>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d15e      	bne.n	8006860 <LmHandlerSend+0xf4>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80067a2:	4b34      	ldr	r3, [pc, #208]	@ (8006874 <LmHandlerSend+0x108>)
 80067a4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80067a8:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80067ac:	4669      	mov	r1, sp
 80067ae:	7860      	ldrb	r0, [r4, #1]
 80067b0:	f002 ff2c 	bl	800960c <LoRaMacQueryTxPossible>
 80067b4:	b368      	cbz	r0, 8006812 <LmHandlerSend+0xa6>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80067b6:	2200      	movs	r2, #0
 80067b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006878 <LmHandlerSend+0x10c>)
 80067ba:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80067bc:	f88d 2004 	strb.w	r2, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80067c0:	9203      	str	r2, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80067c2:	f8ad 2010 	strh.w	r2, [sp, #16]
    TxParams.AppData = *appData;
 80067c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006878 <LmHandlerSend+0x10c>)
 80067c8:	f102 0c0c 	add.w	ip, r2, #12
 80067cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067d0:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 80067d4:	4b27      	ldr	r3, [pc, #156]	@ (8006874 <LmHandlerSend+0x108>)
 80067d6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80067da:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 80067dc:	4631      	mov	r1, r6
 80067de:	a801      	add	r0, sp, #4
 80067e0:	f003 fbe8 	bl	8009fb4 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 80067e4:	b10d      	cbz	r5, 80067ea <LmHandlerSend+0x7e>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 80067e6:	9b05      	ldr	r3, [sp, #20]
 80067e8:	602b      	str	r3, [r5, #0]
    switch (status)
 80067ea:	2811      	cmp	r0, #17
 80067ec:	d832      	bhi.n	8006854 <LmHandlerSend+0xe8>
 80067ee:	e8df f000 	tbb	[pc, r0]
 80067f2:	3a26      	.short	0x3a26
 80067f4:	31313131 	.word	0x31313131
 80067f8:	31312831 	.word	0x31312831
 80067fc:	31312e31 	.word	0x31312e31
 8006800:	2b3a3a3a 	.word	0x2b3a3a3a
        LmHandlerJoin(JoinParams.Mode);
 8006804:	4b1d      	ldr	r3, [pc, #116]	@ (800687c <LmHandlerSend+0x110>)
 8006806:	7898      	ldrb	r0, [r3, #2]
 8006808:	f7ff ff66 	bl	80066d8 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800680c:	f06f 0002 	mvn.w	r0, #2
 8006810:	e02b      	b.n	800686a <LmHandlerSend+0xfe>
        TxParams.MsgType = isTxConfirmed;
 8006812:	4b19      	ldr	r3, [pc, #100]	@ (8006878 <LmHandlerSend+0x10c>)
 8006814:	709f      	strb	r7, [r3, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8006816:	7823      	ldrb	r3, [r4, #0]
 8006818:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800681c:	7863      	ldrb	r3, [r4, #1]
 800681e:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8006822:	6863      	ldr	r3, [r4, #4]
 8006824:	9303      	str	r3, [sp, #12]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 8006826:	b91f      	cbnz	r7, 8006830 <LmHandlerSend+0xc4>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8006828:	2300      	movs	r3, #0
 800682a:	f88d 3004 	strb.w	r3, [sp, #4]
 800682e:	e7ca      	b.n	80067c6 <LmHandlerSend+0x5a>
            mcpsReq.Type = MCPS_CONFIRMED;
 8006830:	2301      	movs	r3, #1
 8006832:	f88d 3004 	strb.w	r3, [sp, #4]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 8006836:	2308      	movs	r3, #8
 8006838:	f88d 3013 	strb.w	r3, [sp, #19]
 800683c:	e7c3      	b.n	80067c6 <LmHandlerSend+0x5a>
    switch (status)
 800683e:	2000      	movs	r0, #0
 8006840:	e013      	b.n	800686a <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006842:	f06f 0002 	mvn.w	r0, #2
            break;
 8006846:	e010      	b.n	800686a <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8006848:	f06f 0004 	mvn.w	r0, #4
            break;
 800684c:	e00d      	b.n	800686a <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800684e:	f06f 0005 	mvn.w	r0, #5
            break;
 8006852:	e00a      	b.n	800686a <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
            break;
 8006858:	e007      	b.n	800686a <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800685a:	f06f 0001 	mvn.w	r0, #1
 800685e:	e004      	b.n	800686a <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8006860:	f06f 0003 	mvn.w	r0, #3
 8006864:	e001      	b.n	800686a <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8006866:	f06f 0001 	mvn.w	r0, #1
}
 800686a:	b007      	add	sp, #28
 800686c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800686e:	bf00      	nop
 8006870:	20000724 	.word	0x20000724
 8006874:	20000714 	.word	0x20000714
 8006878:	200006d4 	.word	0x200006d4
 800687c:	20000068 	.word	0x20000068

08006880 <MlmeIndication>:
{
 8006880:	b510      	push	{r4, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8006886:	4b17      	ldr	r3, [pc, #92]	@ (80068e4 <MlmeIndication+0x64>)
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800688c:	7842      	ldrb	r2, [r0, #1]
 800688e:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 8006890:	f9b1 0000 	ldrsh.w	r0, [r1]
 8006894:	70d8      	strb	r0, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 8006896:	f991 0002 	ldrsb.w	r0, [r1, #2]
 800689a:	7118      	strb	r0, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800689c:	f991 1003 	ldrsb.w	r1, [r1, #3]
 80068a0:	7319      	strb	r1, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 80068a2:	2a0e      	cmp	r2, #14
 80068a4:	d005      	beq.n	80068b2 <MlmeIndication+0x32>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80068a6:	4b10      	ldr	r3, [pc, #64]	@ (80068e8 <MlmeIndication+0x68>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	490d      	ldr	r1, [pc, #52]	@ (80068e4 <MlmeIndication+0x64>)
 80068ae:	2000      	movs	r0, #0
 80068b0:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 80068b2:	7823      	ldrb	r3, [r4, #0]
 80068b4:	2b07      	cmp	r3, #7
 80068b6:	d001      	beq.n	80068bc <MlmeIndication+0x3c>
}
 80068b8:	b002      	add	sp, #8
 80068ba:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 80068bc:	2300      	movs	r3, #0
 80068be:	f88d 3000 	strb.w	r3, [sp]
 80068c2:	f88d 3001 	strb.w	r3, [sp, #1]
 80068c6:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 80068c8:	4b08      	ldr	r3, [pc, #32]	@ (80068ec <MlmeIndication+0x6c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	4798      	blx	r3
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d1f1      	bne.n	80068b8 <MlmeIndication+0x38>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 80068d4:	2301      	movs	r3, #1
 80068d6:	2200      	movs	r2, #0
 80068d8:	4611      	mov	r1, r2
 80068da:	4668      	mov	r0, sp
 80068dc:	f7ff ff46 	bl	800676c <LmHandlerSend>
}
 80068e0:	e7ea      	b.n	80068b8 <MlmeIndication+0x38>
 80068e2:	bf00      	nop
 80068e4:	20000058 	.word	0x20000058
 80068e8:	20000710 	.word	0x20000710
 80068ec:	20000724 	.word	0x20000724

080068f0 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 80068f0:	b170      	cbz	r0, 8006910 <LmHandlerGetCurrentClass+0x20>
{
 80068f2:	b510      	push	{r4, lr}
 80068f4:	b08a      	sub	sp, #40	@ 0x28
 80068f6:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 80068f8:	2300      	movs	r3, #0
 80068fa:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 80068fe:	a801      	add	r0, sp, #4
 8006900:	f002 feea 	bl	80096d8 <LoRaMacMibGetRequestConfirm>
 8006904:	b938      	cbnz	r0, 8006916 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8006906:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800690a:	7023      	strb	r3, [r4, #0]
}
 800690c:	b00a      	add	sp, #40	@ 0x28
 800690e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006914:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8006916:	f04f 30ff 	mov.w	r0, #4294967295
 800691a:	e7f7      	b.n	800690c <LmHandlerGetCurrentClass+0x1c>

0800691c <McpsIndication>:
{
 800691c:	b530      	push	{r4, r5, lr}
 800691e:	b087      	sub	sp, #28
 8006920:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8006922:	2200      	movs	r2, #0
 8006924:	f88d 200f 	strb.w	r2, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 8006928:	4922      	ldr	r1, [pc, #136]	@ (80069b4 <McpsIndication+0x98>)
 800692a:	2201      	movs	r2, #1
 800692c:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 800692e:	7842      	ldrb	r2, [r0, #1]
 8006930:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8006932:	bb62      	cbnz	r2, 800698e <McpsIndication+0x72>
 8006934:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8006936:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800693a:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800693c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006940:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = RxStatus->Snr;
 8006942:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8006946:	710a      	strb	r2, [r1, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 8006948:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800694c:	730b      	strb	r3, [r1, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800694e:	6903      	ldr	r3, [r0, #16]
 8006950:	608b      	str	r3, [r1, #8]
    appData.Port = mcpsIndication->Port;
 8006952:	78c3      	ldrb	r3, [r0, #3]
 8006954:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8006958:	7b03      	ldrb	r3, [r0, #12]
 800695a:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800695e:	6883      	ldr	r3, [r0, #8]
 8006960:	9305      	str	r3, [sp, #20]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8006962:	4d15      	ldr	r5, [pc, #84]	@ (80069b8 <McpsIndication+0x9c>)
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	a804      	add	r0, sp, #16
 800696a:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006970:	b113      	cbz	r3, 8006978 <McpsIndication+0x5c>
 8006972:	7e22      	ldrb	r2, [r4, #24]
 8006974:	b102      	cbz	r2, 8006978 <McpsIndication+0x5c>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8006976:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8006978:	4621      	mov	r1, r4
 800697a:	2001      	movs	r0, #1
 800697c:	f7ff fcb2 	bl	80062e4 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass(&deviceClass);
 8006980:	f10d 000f 	add.w	r0, sp, #15
 8006984:	f7ff ffb4 	bl	80068f0 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8006988:	7963      	ldrb	r3, [r4, #5]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d001      	beq.n	8006992 <McpsIndication+0x76>
}
 800698e:	b007      	add	sp, #28
 8006990:	bd30      	pop	{r4, r5, pc}
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8006992:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f9      	bne.n	800698e <McpsIndication+0x72>
        LmHandlerAppData_t appData =
 800699a:	2100      	movs	r1, #0
 800699c:	f88d 1004 	strb.w	r1, [sp, #4]
 80069a0:	f88d 1005 	strb.w	r1, [sp, #5]
 80069a4:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80069a6:	2301      	movs	r3, #1
 80069a8:	460a      	mov	r2, r1
 80069aa:	a801      	add	r0, sp, #4
 80069ac:	f7ff fede 	bl	800676c <LmHandlerSend>
 80069b0:	e7ed      	b.n	800698e <McpsIndication+0x72>
 80069b2:	bf00      	nop
 80069b4:	20000058 	.word	0x20000058
 80069b8:	20000710 	.word	0x20000710

080069bc <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 80069bc:	b180      	cbz	r0, 80069e0 <LmHandlerGetTxDatarate+0x24>
{
 80069be:	b510      	push	{r4, lr}
 80069c0:	b08a      	sub	sp, #40	@ 0x28
 80069c2:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 80069c4:	231f      	movs	r3, #31
 80069c6:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 80069ca:	a801      	add	r0, sp, #4
 80069cc:	f002 fe84 	bl	80096d8 <LoRaMacMibGetRequestConfirm>
 80069d0:	b948      	cbnz	r0, 80069e6 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 80069d2:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 80069d6:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80069d8:	4a04      	ldr	r2, [pc, #16]	@ (80069ec <LmHandlerGetTxDatarate+0x30>)
 80069da:	70d3      	strb	r3, [r2, #3]
}
 80069dc:	b00a      	add	sp, #40	@ 0x28
 80069de:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80069e4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80069e6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ea:	e7f7      	b.n	80069dc <LmHandlerGetTxDatarate+0x20>
 80069ec:	20000714 	.word	0x20000714

080069f0 <MlmeConfirm>:
{
 80069f0:	b510      	push	{r4, lr}
 80069f2:	b08a      	sub	sp, #40	@ 0x28
 80069f4:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80069f6:	481d      	ldr	r0, [pc, #116]	@ (8006a6c <MlmeConfirm+0x7c>)
 80069f8:	2300      	movs	r3, #0
 80069fa:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 80069fc:	7863      	ldrb	r3, [r4, #1]
 80069fe:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006a00:	4b1b      	ldr	r3, [pc, #108]	@ (8006a70 <MlmeConfirm+0x80>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8006a08:	4621      	mov	r1, r4
 8006a0a:	2002      	movs	r0, #2
 8006a0c:	f7ff fc6a 	bl	80062e4 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8006a10:	7823      	ldrb	r3, [r4, #0]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d003      	beq.n	8006a1e <MlmeConfirm+0x2e>
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d020      	beq.n	8006a5c <MlmeConfirm+0x6c>
}
 8006a1a:	b00a      	add	sp, #40	@ 0x28
 8006a1c:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8006a1e:	2306      	movs	r3, #6
 8006a20:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8006a24:	a801      	add	r0, sp, #4
 8006a26:	f002 fe57 	bl	80096d8 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8006a2a:	9a02      	ldr	r2, [sp, #8]
 8006a2c:	4b11      	ldr	r3, [pc, #68]	@ (8006a74 <MlmeConfirm+0x84>)
 8006a2e:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8006a30:	4811      	ldr	r0, [pc, #68]	@ (8006a78 <MlmeConfirm+0x88>)
 8006a32:	f7ff ffc3 	bl	80069bc <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8006a36:	7863      	ldrb	r3, [r4, #1]
 8006a38:	b143      	cbz	r3, 8006a4c <MlmeConfirm+0x5c>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8006a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006a78 <MlmeConfirm+0x88>)
 8006a3c:	22ff      	movs	r2, #255	@ 0xff
 8006a3e:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8006a40:	4b0b      	ldr	r3, [pc, #44]	@ (8006a70 <MlmeConfirm+0x80>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	480c      	ldr	r0, [pc, #48]	@ (8006a78 <MlmeConfirm+0x88>)
 8006a48:	4798      	blx	r3
        break;
 8006a4a:	e7e6      	b.n	8006a1a <MlmeConfirm+0x2a>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a78 <MlmeConfirm+0x88>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006a52:	4b0a      	ldr	r3, [pc, #40]	@ (8006a7c <MlmeConfirm+0x8c>)
 8006a54:	7858      	ldrb	r0, [r3, #1]
 8006a56:	f7ff fddd 	bl	8006614 <LmHandlerRequestClass>
 8006a5a:	e7f1      	b.n	8006a40 <MlmeConfirm+0x50>
            RxParams.LinkCheck = true;
 8006a5c:	4b08      	ldr	r3, [pc, #32]	@ (8006a80 <MlmeConfirm+0x90>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8006a62:	7a22      	ldrb	r2, [r4, #8]
 8006a64:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8006a66:	7a62      	ldrb	r2, [r4, #9]
 8006a68:	73da      	strb	r2, [r3, #15]
}
 8006a6a:	e7d6      	b.n	8006a1a <MlmeConfirm+0x2a>
 8006a6c:	200006d4 	.word	0x200006d4
 8006a70:	20000710 	.word	0x20000710
 8006a74:	20000078 	.word	0x20000078
 8006a78:	20000068 	.word	0x20000068
 8006a7c:	20000714 	.word	0x20000714
 8006a80:	20000058 	.word	0x20000058

08006a84 <LmHandlerPackageRegister>:
    switch( id )
 8006a84:	b9e0      	cbnz	r0, 8006ac0 <LmHandlerPackageRegister+0x3c>
{
 8006a86:	b538      	push	{r3, r4, r5, lr}
 8006a88:	460c      	mov	r4, r1
 8006a8a:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 8006a8c:	f000 fa20 	bl	8006ed0 <LmhpCompliancePackageFactory>
    if( package != NULL )
 8006a90:	b198      	cbz	r0, 8006aba <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 8006a92:	4a0d      	ldr	r2, [pc, #52]	@ (8006ac8 <LmHandlerPackageRegister+0x44>)
 8006a94:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8006a98:	4a0c      	ldr	r2, [pc, #48]	@ (8006acc <LmHandlerPackageRegister+0x48>)
 8006a9a:	6242      	str	r2, [r0, #36]	@ 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8006a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad0 <LmHandlerPackageRegister+0x4c>)
 8006a9e:	6282      	str	r2, [r0, #40]	@ 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8006aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad4 <LmHandlerPackageRegister+0x50>)
 8006aa2:	62c2      	str	r2, [r0, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8006aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad8 <LmHandlerPackageRegister+0x54>)
 8006aa6:	6812      	ldr	r2, [r2, #0]
 8006aa8:	6912      	ldr	r2, [r2, #16]
 8006aaa:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8006aac:	6843      	ldr	r3, [r0, #4]
 8006aae:	22f2      	movs	r2, #242	@ 0xf2
 8006ab0:	490a      	ldr	r1, [pc, #40]	@ (8006adc <LmHandlerPackageRegister+0x58>)
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8006ab6:	2000      	movs	r0, #0
}
 8006ab8:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 8006aba:	f04f 30ff 	mov.w	r0, #4294967295
 8006abe:	e7fb      	b.n	8006ab8 <LmHandlerPackageRegister+0x34>
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000724 	.word	0x20000724
 8006acc:	080066d9 	.word	0x080066d9
 8006ad0:	0800676d 	.word	0x0800676d
 8006ad4:	08006411 	.word	0x08006411
 8006ad8:	20000710 	.word	0x20000710
 8006adc:	200005e0 	.word	0x200005e0

08006ae0 <LmHandlerInit>:
{
 8006ae0:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8006ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b20 <LmHandlerInit+0x40>)
 8006ae4:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8006ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b24 <LmHandlerInit+0x44>)
 8006ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8006b28 <LmHandlerInit+0x48>)
 8006aea:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8006aec:	4a0f      	ldr	r2, [pc, #60]	@ (8006b2c <LmHandlerInit+0x4c>)
 8006aee:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8006af0:	4a0f      	ldr	r2, [pc, #60]	@ (8006b30 <LmHandlerInit+0x50>)
 8006af2:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8006af4:	4a0f      	ldr	r2, [pc, #60]	@ (8006b34 <LmHandlerInit+0x54>)
 8006af6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8006af8:	6802      	ldr	r2, [r0, #0]
 8006afa:	4b0f      	ldr	r3, [pc, #60]	@ (8006b38 <LmHandlerInit+0x58>)
 8006afc:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8006afe:	6842      	ldr	r2, [r0, #4]
 8006b00:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8006b02:	6882      	ldr	r2, [r0, #8]
 8006b04:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8006b06:	4a0d      	ldr	r2, [pc, #52]	@ (8006b3c <LmHandlerInit+0x5c>)
 8006b08:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8006b0a:	6902      	ldr	r2, [r0, #16]
 8006b0c:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8006b0e:	490c      	ldr	r1, [pc, #48]	@ (8006b40 <LmHandlerInit+0x60>)
 8006b10:	2000      	movs	r0, #0
 8006b12:	f7ff ffb7 	bl	8006a84 <LmHandlerPackageRegister>
 8006b16:	b900      	cbnz	r0, 8006b1a <LmHandlerInit+0x3a>
}
 8006b18:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 8006b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1e:	e7fb      	b.n	8006b18 <LmHandlerInit+0x38>
 8006b20:	20000710 	.word	0x20000710
 8006b24:	20000700 	.word	0x20000700
 8006b28:	08006351 	.word	0x08006351
 8006b2c:	0800691d 	.word	0x0800691d
 8006b30:	080069f1 	.word	0x080069f1
 8006b34:	08006881 	.word	0x08006881
 8006b38:	200006ec 	.word	0x200006ec
 8006b3c:	0800b1f9 	.word	0x0800b1f9
 8006b40:	2000006c 	.word	0x2000006c

08006b44 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8006b44:	4603      	mov	r3, r0
 8006b46:	b140      	cbz	r0, 8006b5a <LmhpComplianceInit+0x16>
 8006b48:	b139      	cbz	r1, 8006b5a <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 8006b4a:	4807      	ldr	r0, [pc, #28]	@ (8006b68 <LmhpComplianceInit+0x24>)
 8006b4c:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8006b4e:	4b07      	ldr	r3, [pc, #28]	@ (8006b6c <LmhpComplianceInit+0x28>)
 8006b50:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8006b52:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8006b54:	2201      	movs	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4a02      	ldr	r2, [pc, #8]	@ (8006b68 <LmhpComplianceInit+0x24>)
 8006b5e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8006b60:	4a02      	ldr	r2, [pc, #8]	@ (8006b6c <LmhpComplianceInit+0x28>)
 8006b62:	7013      	strb	r3, [r2, #0]
    }
}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000738 	.word	0x20000738
 8006b6c:	2000073c 	.word	0x2000073c

08006b70 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8006b70:	4b01      	ldr	r3, [pc, #4]	@ (8006b78 <LmhpComplianceIsInitialized+0x8>)
 8006b72:	7818      	ldrb	r0, [r3, #0]
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	2000073c 	.word	0x2000073c

08006b7c <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8006b7c:	4b02      	ldr	r3, [pc, #8]	@ (8006b88 <LmhpComplianceIsRunning+0xc>)
 8006b7e:	7818      	ldrb	r0, [r3, #0]
 8006b80:	b100      	cbz	r0, 8006b84 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8006b82:	7858      	ldrb	r0, [r3, #1]
}
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	2000073c 	.word	0x2000073c

08006b8c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 8006b8c:	4b08      	ldr	r3, [pc, #32]	@ (8006bb0 <LmhpComplianceOnMcpsConfirm+0x24>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	b12b      	cbz	r3, 8006b9e <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8006b92:	4b07      	ldr	r3, [pc, #28]	@ (8006bb0 <LmhpComplianceOnMcpsConfirm+0x24>)
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	b113      	cbz	r3, 8006b9e <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8006b98:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d000      	beq.n	8006ba0 <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 8006b9e:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 8006ba0:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0fb      	beq.n	8006b9e <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 8006ba6:	4a02      	ldr	r2, [pc, #8]	@ (8006bb0 <LmhpComplianceOnMcpsConfirm+0x24>)
 8006ba8:	8993      	ldrh	r3, [r2, #12]
 8006baa:	3301      	adds	r3, #1
 8006bac:	8193      	strh	r3, [r2, #12]
 8006bae:	e7f6      	b.n	8006b9e <LmhpComplianceOnMcpsConfirm+0x12>
 8006bb0:	2000073c 	.word	0x2000073c

08006bb4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 8006bb4:	4b08      	ldr	r3, [pc, #32]	@ (8006bd8 <LmhpComplianceOnMlmeConfirm+0x24>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	b12b      	cbz	r3, 8006bc6 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8006bba:	4b07      	ldr	r3, [pc, #28]	@ (8006bd8 <LmhpComplianceOnMlmeConfirm+0x24>)
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	b113      	cbz	r3, 8006bc6 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8006bc0:	7803      	ldrb	r3, [r0, #0]
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d000      	beq.n	8006bc8 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 8006bc6:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8006bc8:	4b03      	ldr	r3, [pc, #12]	@ (8006bd8 <LmhpComplianceOnMlmeConfirm+0x24>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8006bce:	7a02      	ldrb	r2, [r0, #8]
 8006bd0:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8006bd2:	7a42      	ldrb	r2, [r0, #9]
 8006bd4:	741a      	strb	r2, [r3, #16]
 8006bd6:	e7f6      	b.n	8006bc6 <LmhpComplianceOnMlmeConfirm+0x12>
 8006bd8:	2000073c 	.word	0x2000073c

08006bdc <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8006bdc:	4770      	bx	lr
	...

08006be0 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8006be0:	4b23      	ldr	r3, [pc, #140]	@ (8006c70 <LmhpComplianceTxProcess+0x90>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d03e      	beq.n	8006c66 <LmhpComplianceTxProcess+0x86>
    if( ComplianceTestState.IsRunning == false )
 8006be8:	4b21      	ldr	r3, [pc, #132]	@ (8006c70 <LmhpComplianceTxProcess+0x90>)
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d03d      	beq.n	8006c6c <LmhpComplianceTxProcess+0x8c>
{
 8006bf0:	b530      	push	{r4, r5, lr}
 8006bf2:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 8006bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8006c70 <LmhpComplianceTxProcess+0x90>)
 8006bf6:	7b9b      	ldrb	r3, [r3, #14]
 8006bf8:	b313      	cbz	r3, 8006c40 <LmhpComplianceTxProcess+0x60>
        ComplianceTestState.LinkCheck = false;
 8006bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8006c70 <LmhpComplianceTxProcess+0x90>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8006c00:	2203      	movs	r2, #3
 8006c02:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	2105      	movs	r1, #5
 8006c08:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8006c0a:	7bd9      	ldrb	r1, [r3, #15]
 8006c0c:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8006c0e:	7c19      	ldrb	r1, [r3, #16]
 8006c10:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 8006c12:	2201      	movs	r2, #1
 8006c14:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 8006c16:	23e0      	movs	r3, #224	@ 0xe0
 8006c18:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 8006c1c:	4c14      	ldr	r4, [pc, #80]	@ (8006c70 <LmhpComplianceTxProcess+0x90>)
 8006c1e:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 8006c20:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8006c24:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 8006c26:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8006c28:	4812      	ldr	r0, [pc, #72]	@ (8006c74 <LmhpComplianceTxProcess+0x94>)
 8006c2a:	f00a f965 	bl	8010ef8 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8006c2e:	4b12      	ldr	r3, [pc, #72]	@ (8006c78 <LmhpComplianceTxProcess+0x98>)
 8006c30:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8006c32:	2301      	movs	r3, #1
 8006c34:	2200      	movs	r2, #0
 8006c36:	78e1      	ldrb	r1, [r4, #3]
 8006c38:	4668      	mov	r0, sp
 8006c3a:	47a8      	blx	r5
}
 8006c3c:	b003      	add	sp, #12
 8006c3e:	bd30      	pop	{r4, r5, pc}
        switch( ComplianceTestState.State )
 8006c40:	4b0b      	ldr	r3, [pc, #44]	@ (8006c70 <LmhpComplianceTxProcess+0x90>)
 8006c42:	789b      	ldrb	r3, [r3, #2]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d005      	beq.n	8006c54 <LmhpComplianceTxProcess+0x74>
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d1e4      	bne.n	8006c16 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 8006c4c:	4b08      	ldr	r3, [pc, #32]	@ (8006c70 <LmhpComplianceTxProcess+0x90>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	709a      	strb	r2, [r3, #2]
            break;
 8006c52:	e7e0      	b.n	8006c16 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 8006c54:	4b06      	ldr	r3, [pc, #24]	@ (8006c70 <LmhpComplianceTxProcess+0x90>)
 8006c56:	2202      	movs	r2, #2
 8006c58:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8006c5a:	899a      	ldrh	r2, [r3, #12]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	0a11      	lsrs	r1, r2, #8
 8006c60:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8006c62:	705a      	strb	r2, [r3, #1]
            break;
 8006c64:	e7d7      	b.n	8006c16 <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8006c66:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6a:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 8006c6c:	2000      	movs	r0, #0
}
 8006c6e:	4770      	bx	lr
 8006c70:	2000073c 	.word	0x2000073c
 8006c74:	20000750 	.word	0x20000750
 8006c78:	20000090 	.word	0x20000090

08006c7c <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8006c7c:	4b8d      	ldr	r3, [pc, #564]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8116 	beq.w	8006eb2 <LmhpComplianceOnMcpsIndication+0x236>
    if( mcpsIndication->RxData == false )
 8006c86:	7b43      	ldrb	r3, [r0, #13]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8112 	beq.w	8006eb2 <LmhpComplianceOnMcpsIndication+0x236>
    if ((ComplianceTestState.IsRunning == true) &&
 8006c8e:	4b89      	ldr	r3, [pc, #548]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	b12b      	cbz	r3, 8006ca0 <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 8006c94:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 8006c96:	b91a      	cbnz	r2, 8006ca0 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8006c98:	4986      	ldr	r1, [pc, #536]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006c9a:	898a      	ldrh	r2, [r1, #12]
 8006c9c:	3201      	adds	r2, #1
 8006c9e:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8006ca0:	78c2      	ldrb	r2, [r0, #3]
 8006ca2:	2ae0      	cmp	r2, #224	@ 0xe0
 8006ca4:	f040 8105 	bne.w	8006eb2 <LmhpComplianceOnMcpsIndication+0x236>
{
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	b08c      	sub	sp, #48	@ 0x30
    if( ComplianceTestState.IsRunning == false )
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d140      	bne.n	8006d32 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006cb0:	7b03      	ldrb	r3, [r0, #12]
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d001      	beq.n	8006cba <LmhpComplianceOnMcpsIndication+0x3e>
}
 8006cb6:	b00c      	add	sp, #48	@ 0x30
 8006cb8:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006cba:	6883      	ldr	r3, [r0, #8]
 8006cbc:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8006cbe:	2a01      	cmp	r2, #1
 8006cc0:	d1f9      	bne.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8006cc2:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8006cc4:	2a01      	cmp	r2, #1
 8006cc6:	d1f6      	bne.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8006cc8:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8006cca:	2a01      	cmp	r2, #1
 8006ccc:	d1f3      	bne.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8006cce:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d1f0      	bne.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8006cd4:	4b77      	ldr	r3, [pc, #476]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006cd6:	2400      	movs	r4, #0
 8006cd8:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 8006cda:	22e0      	movs	r2, #224	@ 0xe0
 8006cdc:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8006cde:	2202      	movs	r2, #2
 8006ce0:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8006ce2:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8006ce4:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8006ce6:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8006ce8:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8006cea:	2201      	movs	r2, #1
 8006cec:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8006cee:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 8006cf6:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006cfa:	a803      	add	r0, sp, #12
 8006cfc:	f002 fe08 	bl	8009910 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8006d00:	4620      	mov	r0, r4
 8006d02:	f003 fa15 	bl	800a130 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8006d06:	4b6c      	ldr	r3, [pc, #432]	@ (8006eb8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	b103      	cbz	r3, 8006d10 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 8006d0e:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8006d10:	4c6a      	ldr	r4, [pc, #424]	@ (8006ebc <LmhpComplianceOnMcpsIndication+0x240>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	9200      	str	r2, [sp, #0]
 8006d16:	4b6a      	ldr	r3, [pc, #424]	@ (8006ec0 <LmhpComplianceOnMcpsIndication+0x244>)
 8006d18:	f04f 31ff 	mov.w	r1, #4294967295
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f00a f833 	bl	8010d88 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8006d22:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006d26:	4620      	mov	r0, r4
 8006d28:	f00a f92c 	bl	8010f84 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8006d2c:	f7ff ff58 	bl	8006be0 <LmhpComplianceTxProcess>
 8006d30:	e7c1      	b.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8006d32:	6882      	ldr	r2, [r0, #8]
 8006d34:	7813      	ldrb	r3, [r2, #0]
 8006d36:	495f      	ldr	r1, [pc, #380]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006d38:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 8006d3a:	2b0a      	cmp	r3, #10
 8006d3c:	d8bb      	bhi.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
 8006d3e:	e8df f003 	tbb	[pc, r3]
 8006d42:	2206      	.short	0x2206
 8006d44:	47312b26 	.word	0x47312b26
 8006d48:	a49d6d4e 	.word	0xa49d6d4e
 8006d4c:	ae          	.byte	0xae
 8006d4d:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8006d4e:	485b      	ldr	r0, [pc, #364]	@ (8006ebc <LmhpComplianceOnMcpsIndication+0x240>)
 8006d50:	f00a f878 	bl	8010e44 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8006d54:	4b57      	ldr	r3, [pc, #348]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8006d5a:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006d62:	4c55      	ldr	r4, [pc, #340]	@ (8006eb8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006d6c:	a803      	add	r0, sp, #12
 8006d6e:	f002 fdcf 	bl	8009910 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	7858      	ldrb	r0, [r3, #1]
 8006d76:	f003 f9db 	bl	800a130 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d099      	beq.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 8006d82:	4798      	blx	r3
            break;
 8006d84:	e797      	b.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 8006d86:	4b4b      	ldr	r3, [pc, #300]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006d88:	2202      	movs	r2, #2
 8006d8a:	719a      	strb	r2, [r3, #6]
            break;
 8006d8c:	e793      	b.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 8006d8e:	4b49      	ldr	r3, [pc, #292]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006d90:	2201      	movs	r2, #1
 8006d92:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8006d94:	709a      	strb	r2, [r3, #2]
            break;
 8006d96:	e78e      	b.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8006d98:	4b46      	ldr	r3, [pc, #280]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8006d9e:	2201      	movs	r2, #1
 8006da0:	709a      	strb	r2, [r3, #2]
            break;
 8006da2:	e788      	b.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8006da4:	7b01      	ldrb	r1, [r0, #12]
 8006da6:	4b43      	ldr	r3, [pc, #268]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006da8:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8006daa:	689c      	ldr	r4, [r3, #8]
 8006dac:	2304      	movs	r3, #4
 8006dae:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006db0:	2301      	movs	r3, #1
 8006db2:	4a40      	ldr	r2, [pc, #256]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006db4:	7952      	ldrb	r2, [r2, #5]
 8006db6:	428a      	cmp	r2, r1
 8006db8:	bf28      	it	cs
 8006dba:	460a      	movcs	r2, r1
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	f67f af7a 	bls.w	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8006dc2:	6882      	ldr	r2, [r0, #8]
 8006dc4:	5cd2      	ldrb	r2, [r2, r3]
 8006dc6:	3201      	adds	r2, #1
 8006dc8:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006dca:	3301      	adds	r3, #1
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	e7f0      	b.n	8006db2 <LmhpComplianceOnMcpsIndication+0x136>
                mlmeReq.Type = MLME_LINK_CHECK;
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8006dd6:	a803      	add	r0, sp, #12
 8006dd8:	f003 f816 	bl	8009e08 <LoRaMacMlmeRequest>
            break;
 8006ddc:	e76b      	b.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 8006dde:	4837      	ldr	r0, [pc, #220]	@ (8006ebc <LmhpComplianceOnMcpsIndication+0x240>)
 8006de0:	f00a f830 	bl	8010e44 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8006de4:	4b33      	ldr	r3, [pc, #204]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8006dea:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8006dec:	2304      	movs	r3, #4
 8006dee:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8006df2:	4c31      	ldr	r4, [pc, #196]	@ (8006eb8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006dfc:	a803      	add	r0, sp, #12
 8006dfe:	f002 fd87 	bl	8009910 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	7858      	ldrb	r0, [r3, #1]
 8006e06:	f003 f993 	bl	800a130 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	b103      	cbz	r3, 8006e12 <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 8006e10:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8006e12:	4b2c      	ldr	r3, [pc, #176]	@ (8006ec4 <LmhpComplianceOnMcpsIndication+0x248>)
 8006e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e16:	2002      	movs	r0, #2
 8006e18:	4798      	blx	r3
            break;
 8006e1a:	e74c      	b.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 8006e1c:	7b03      	ldrb	r3, [r0, #12]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d008      	beq.n	8006e34 <LmhpComplianceOnMcpsIndication+0x1b8>
                else if( mcpsIndication->BufferSize == 7 )
 8006e22:	2b07      	cmp	r3, #7
 8006e24:	d010      	beq.n	8006e48 <LmhpComplianceOnMcpsIndication+0x1cc>
                LoRaMacMlmeRequest( &mlmeReq );
 8006e26:	a803      	add	r0, sp, #12
 8006e28:	f002 ffee 	bl	8009e08 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8006e2c:	4b21      	ldr	r3, [pc, #132]	@ (8006eb4 <LmhpComplianceOnMcpsIndication+0x238>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	709a      	strb	r2, [r3, #2]
            break;
 8006e32:	e740      	b.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 8006e34:	2305      	movs	r3, #5
 8006e36:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006e3a:	7851      	ldrb	r1, [r2, #1]
 8006e3c:	7893      	ldrb	r3, [r2, #2]
 8006e3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e42:	f8ad 3010 	strh.w	r3, [sp, #16]
 8006e46:	e7ee      	b.n	8006e26 <LmhpComplianceOnMcpsIndication+0x1aa>
                    mlmeReq.Type = MLME_TXCW_1;
 8006e48:	2306      	movs	r3, #6
 8006e4a:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8006e4e:	7851      	ldrb	r1, [r2, #1]
 8006e50:	7893      	ldrb	r3, [r2, #2]
 8006e52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e56:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8006e5a:	78d1      	ldrb	r1, [r2, #3]
 8006e5c:	7913      	ldrb	r3, [r2, #4]
 8006e5e:	021b      	lsls	r3, r3, #8
 8006e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006e64:	7952      	ldrb	r2, [r2, #5]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	2264      	movs	r2, #100	@ 0x64
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8006e70:	6883      	ldr	r3, [r0, #8]
 8006e72:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8006e76:	f88d 3018 	strb.w	r3, [sp, #24]
 8006e7a:	e7d4      	b.n	8006e26 <LmhpComplianceOnMcpsIndication+0x1aa>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8006e7c:	230a      	movs	r3, #10
 8006e7e:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8006e82:	a803      	add	r0, sp, #12
 8006e84:	f002 ffc0 	bl	8009e08 <LoRaMacMlmeRequest>
            break;
 8006e88:	e715      	b.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8006e90:	7853      	ldrb	r3, [r2, #1]
 8006e92:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8006e96:	a803      	add	r0, sp, #12
 8006e98:	f002 fd3a 	bl	8009910 <LoRaMacMibSetRequestConfirm>
            break;
 8006e9c:	e70b      	b.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8006e9e:	230d      	movs	r3, #13
 8006ea0:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8006ea4:	7853      	ldrb	r3, [r2, #1]
 8006ea6:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8006eaa:	a803      	add	r0, sp, #12
 8006eac:	f002 ffac 	bl	8009e08 <LoRaMacMlmeRequest>
            break;
 8006eb0:	e701      	b.n	8006cb6 <LmhpComplianceOnMcpsIndication+0x3a>
 8006eb2:	4770      	bx	lr
 8006eb4:	2000073c 	.word	0x2000073c
 8006eb8:	20000738 	.word	0x20000738
 8006ebc:	20000750 	.word	0x20000750
 8006ec0:	08006ec9 	.word	0x08006ec9
 8006ec4:	20000090 	.word	0x20000090

08006ec8 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8006ec8:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8006eca:	f7ff fe89 	bl	8006be0 <LmhpComplianceTxProcess>
}
 8006ece:	bd08      	pop	{r3, pc}

08006ed0 <LmhpCompliancePackageFactory>:
}
 8006ed0:	4800      	ldr	r0, [pc, #0]	@ (8006ed4 <LmhpCompliancePackageFactory+0x4>)
 8006ed2:	4770      	bx	lr
 8006ed4:	20000090 	.word	0x20000090

08006ed8 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8006ed8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8006eda:	4a06      	ldr	r2, [pc, #24]	@ (8006ef4 <OnRadioRxError+0x1c>)
 8006edc:	7813      	ldrb	r3, [r2, #0]
 8006ede:	f043 0302 	orr.w	r3, r3, #2
 8006ee2:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006ee4:	4b04      	ldr	r3, [pc, #16]	@ (8006ef8 <OnRadioRxError+0x20>)
 8006ee6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8006eea:	b113      	cbz	r3, 8006ef2 <OnRadioRxError+0x1a>
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	b103      	cbz	r3, 8006ef2 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8006ef0:	4798      	blx	r3
    }
}
 8006ef2:	bd08      	pop	{r3, pc}
 8006ef4:	2000077c 	.word	0x2000077c
 8006ef8:	20000d90 	.word	0x20000d90

08006efc <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8006efc:	4b07      	ldr	r3, [pc, #28]	@ (8006f1c <UpdateRxSlotIdleState+0x20>)
 8006efe:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d004      	beq.n	8006f10 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8006f06:	4b06      	ldr	r3, [pc, #24]	@ (8006f20 <UpdateRxSlotIdleState+0x24>)
 8006f08:	2206      	movs	r2, #6
 8006f0a:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
 8006f0e:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8006f10:	4b03      	ldr	r3, [pc, #12]	@ (8006f20 <UpdateRxSlotIdleState+0x24>)
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000780 	.word	0x20000780
 8006f20:	20000d90 	.word	0x20000d90

08006f24 <LoRaMacEnableRequests>:
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8006f24:	4b01      	ldr	r3, [pc, #4]	@ (8006f2c <LoRaMacEnableRequests+0x8>)
 8006f26:	f883 0482 	strb.w	r0, [r3, #1154]	@ 0x482
}
 8006f2a:	4770      	bx	lr
 8006f2c:	20000d90 	.word	0x20000d90

08006f30 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8006f30:	b530      	push	{r4, r5, lr}
 8006f32:	b089      	sub	sp, #36	@ 0x24
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8006f34:	4b22      	ldr	r3, [pc, #136]	@ (8006fc0 <LoRaMacHandleIndicationEvents+0x90>)
 8006f36:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8006f3a:	f013 0f08 	tst.w	r3, #8
 8006f3e:	d00e      	beq.n	8006f5e <LoRaMacHandleIndicationEvents+0x2e>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8006f40:	481f      	ldr	r0, [pc, #124]	@ (8006fc0 <LoRaMacHandleIndicationEvents+0x90>)
 8006f42:	f890 3481 	ldrb.w	r3, [r0, #1153]	@ 0x481
 8006f46:	f36f 03c3 	bfc	r3, #3, #1
 8006f4a:	f880 3481 	strb.w	r3, [r0, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8006f4e:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f200 417c 	addw	r1, r0, #1148	@ 0x47c
 8006f58:	f500 608c 	add.w	r0, r0, #1120	@ 0x460
 8006f5c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8006f5e:	4b18      	ldr	r3, [pc, #96]	@ (8006fc0 <LoRaMacHandleIndicationEvents+0x90>)
 8006f60:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8006f64:	f013 0f10 	tst.w	r3, #16
 8006f68:	d013      	beq.n	8006f92 <LoRaMacHandleIndicationEvents+0x62>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8006f6a:	2307      	movs	r3, #7
 8006f6c:	f88d 3004 	strb.w	r3, [sp, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8006f70:	2500      	movs	r5, #0
 8006f72:	f88d 5005 	strb.w	r5, [sp, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8006f76:	4c12      	ldr	r4, [pc, #72]	@ (8006fc0 <LoRaMacHandleIndicationEvents+0x90>)
 8006f78:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f204 417c 	addw	r1, r4, #1148	@ 0x47c
 8006f82:	a801      	add	r0, sp, #4
 8006f84:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8006f86:	f894 3481 	ldrb.w	r3, [r4, #1153]	@ 0x481
 8006f8a:	f365 1304 	bfi	r3, r5, #4, #1
 8006f8e:	f884 3481 	strb.w	r3, [r4, #1153]	@ 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8006f92:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc0 <LoRaMacHandleIndicationEvents+0x90>)
 8006f94:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8006f98:	f013 0f02 	tst.w	r3, #2
 8006f9c:	d00e      	beq.n	8006fbc <LoRaMacHandleIndicationEvents+0x8c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8006f9e:	4808      	ldr	r0, [pc, #32]	@ (8006fc0 <LoRaMacHandleIndicationEvents+0x90>)
 8006fa0:	f890 3481 	ldrb.w	r3, [r0, #1153]	@ 0x481
 8006fa4:	f36f 0341 	bfc	r3, #1, #1
 8006fa8:	f880 3481 	strb.w	r3, [r0, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8006fac:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f200 417c 	addw	r1, r0, #1148	@ 0x47c
 8006fb6:	f200 401c 	addw	r0, r0, #1052	@ 0x41c
 8006fba:	4798      	blx	r3
    }
}
 8006fbc:	b009      	add	sp, #36	@ 0x24
 8006fbe:	bd30      	pop	{r4, r5, pc}
 8006fc0:	20000d90 	.word	0x20000d90

08006fc4 <LoRaMacCheckForRxAbort>:
}

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8006fc4:	4b07      	ldr	r3, [pc, #28]	@ (8006fe4 <LoRaMacCheckForRxAbort+0x20>)
 8006fc6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8006fca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fce:	d008      	beq.n	8006fe2 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8006fd0:	4a04      	ldr	r2, [pc, #16]	@ (8006fe4 <LoRaMacCheckForRxAbort+0x20>)
 8006fd2:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006fd6:	f8c2 1340 	str.w	r1, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8006fda:	f023 0382 	bic.w	r3, r3, #130	@ 0x82
 8006fde:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 8006fe2:	4770      	bx	lr
 8006fe4:	20000d90 	.word	0x20000d90

08006fe8 <SetMlmeScheduleUplinkIndication>:
    return false;
}

static void SetMlmeScheduleUplinkIndication( void )
{
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006fe8:	4a03      	ldr	r2, [pc, #12]	@ (8006ff8 <SetMlmeScheduleUplinkIndication+0x10>)
 8006fea:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8006fee:	f043 0310 	orr.w	r3, r3, #16
 8006ff2:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 8006ff6:	4770      	bx	lr
 8006ff8:	20000d90 	.word	0x20000d90

08006ffc <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8006ffc:	4b06      	ldr	r3, [pc, #24]	@ (8007018 <CalculateBackOff+0x1c>)
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007000:	b94b      	cbnz	r3, 8007016 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007002:	4a05      	ldr	r2, [pc, #20]	@ (8007018 <CalculateBackOff+0x1c>)
 8007004:	f8b2 3102 	ldrh.w	r3, [r2, #258]	@ 0x102
 8007008:	4904      	ldr	r1, [pc, #16]	@ (800701c <CalculateBackOff+0x20>)
 800700a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	@ 0x418
 800700e:	3b01      	subs	r3, #1
 8007010:	fb01 f303 	mul.w	r3, r1, r3
 8007014:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8007016:	4770      	bx	lr
 8007018:	20000780 	.word	0x20000780
 800701c:	20000d90 	.word	0x20000d90

08007020 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007020:	b508      	push	{r3, lr}
 8007022:	4684      	mov	ip, r0
 8007024:	4608      	mov	r0, r1
 8007026:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007028:	4b06      	ldr	r3, [pc, #24]	@ (8007044 <SetTxContinuousWave1+0x24>)
 800702a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702c:	4662      	mov	r2, ip
 800702e:	b249      	sxtb	r1, r1
 8007030:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007032:	4a05      	ldr	r2, [pc, #20]	@ (8007048 <SetTxContinuousWave1+0x28>)
 8007034:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 8007038:	f043 0302 	orr.w	r3, r3, #2
 800703c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
}
 8007040:	2000      	movs	r0, #0
 8007042:	bd08      	pop	{r3, pc}
 8007044:	08014918 	.word	0x08014918
 8007048:	20000d90 	.word	0x20000d90

0800704c <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
    return &Nvm;
}
 800704c:	4800      	ldr	r0, [pc, #0]	@ (8007050 <GetNvmData+0x4>)
 800704e:	4770      	bx	lr
 8007050:	20000780 	.word	0x20000780

08007054 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8007054:	4602      	mov	r2, r0
 8007056:	b1f8      	cbz	r0, 8007098 <DetermineFrameType+0x44>
 8007058:	b301      	cbz	r1, 800709c <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800705a:	7b03      	ldrb	r3, [r0, #12]
 800705c:	f013 030f 	ands.w	r3, r3, #15
 8007060:	d005      	beq.n	800706e <DetermineFrameType+0x1a>
 8007062:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007066:	b110      	cbz	r0, 800706e <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8007068:	2000      	movs	r0, #0
 800706a:	7008      	strb	r0, [r1, #0]
 800706c:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800706e:	f892 0028 	ldrb.w	r0, [r2, #40]	@ 0x28
 8007072:	b910      	cbnz	r0, 800707a <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8007074:	2301      	movs	r3, #1
 8007076:	700b      	strb	r3, [r1, #0]
 8007078:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800707a:	b92b      	cbnz	r3, 8007088 <DetermineFrameType+0x34>
 800707c:	f892 0020 	ldrb.w	r0, [r2, #32]
 8007080:	b910      	cbnz	r0, 8007088 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8007082:	2302      	movs	r3, #2
 8007084:	700b      	strb	r3, [r1, #0]
 8007086:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8007088:	b953      	cbnz	r3, 80070a0 <DetermineFrameType+0x4c>
 800708a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800708e:	b14a      	cbz	r2, 80070a4 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8007090:	2203      	movs	r2, #3
 8007092:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8007094:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8007096:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007098:	2003      	movs	r0, #3
 800709a:	4770      	bx	lr
 800709c:	2003      	movs	r0, #3
 800709e:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 80070a0:	2017      	movs	r0, #23
 80070a2:	4770      	bx	lr
 80070a4:	2017      	movs	r0, #23
}
 80070a6:	4770      	bx	lr

080070a8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80070a8:	4b0f      	ldr	r3, [pc, #60]	@ (80070e8 <CheckRetransUnconfirmedUplink+0x40>)
 80070aa:	f893 2410 	ldrb.w	r2, [r3, #1040]	@ 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80070ae:	4b0f      	ldr	r3, [pc, #60]	@ (80070ec <CheckRetransUnconfirmedUplink+0x44>)
 80070b0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d20f      	bcs.n	80070d8 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80070b8:	4b0b      	ldr	r3, [pc, #44]	@ (80070e8 <CheckRetransUnconfirmedUplink+0x40>)
 80070ba:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80070be:	f013 0f02 	tst.w	r3, #2
 80070c2:	d00b      	beq.n	80070dc <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80070c4:	4b09      	ldr	r3, [pc, #36]	@ (80070ec <CheckRetransUnconfirmedUplink+0x44>)
 80070c6:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80070ca:	b14b      	cbz	r3, 80070e0 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <CheckRetransUnconfirmedUplink+0x40>)
 80070ce:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 80070d2:	b13b      	cbz	r3, 80070e4 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 80070d4:	2000      	movs	r0, #0
 80070d6:	4770      	bx	lr
        return true;
 80070d8:	2001      	movs	r0, #1
 80070da:	4770      	bx	lr
    return false;
 80070dc:	2000      	movs	r0, #0
 80070de:	4770      	bx	lr
            return true;
 80070e0:	2001      	movs	r0, #1
 80070e2:	4770      	bx	lr
                return true;
 80070e4:	2001      	movs	r0, #1
}
 80070e6:	4770      	bx	lr
 80070e8:	20000d90 	.word	0x20000d90
 80070ec:	20000780 	.word	0x20000780

080070f0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80070f0:	4b0a      	ldr	r3, [pc, #40]	@ (800711c <CheckRetransConfirmedUplink+0x2c>)
 80070f2:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
        MacCtx.AckTimeoutRetries )
 80070f6:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d209      	bcs.n	8007112 <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80070fe:	4b07      	ldr	r3, [pc, #28]	@ (800711c <CheckRetransConfirmedUplink+0x2c>)
 8007100:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8007104:	f013 0f02 	tst.w	r3, #2
 8007108:	d005      	beq.n	8007116 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800710a:	4b04      	ldr	r3, [pc, #16]	@ (800711c <CheckRetransConfirmedUplink+0x2c>)
 800710c:	f893 043c 	ldrb.w	r0, [r3, #1084]	@ 0x43c
 8007110:	4770      	bx	lr
        return true;
 8007112:	2001      	movs	r0, #1
 8007114:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8007116:	2000      	movs	r0, #0
}
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	20000d90 	.word	0x20000d90

08007120 <StopRetransmission>:

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007120:	4b11      	ldr	r3, [pc, #68]	@ (8007168 <StopRetransmission+0x48>)
 8007122:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8007126:	f013 0f02 	tst.w	r3, #2
 800712a:	d004      	beq.n	8007136 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800712c:	4b0e      	ldr	r3, [pc, #56]	@ (8007168 <StopRetransmission+0x48>)
 800712e:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007132:	2b01      	cmp	r3, #1
 8007134:	d907      	bls.n	8007146 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8007136:	4b0d      	ldr	r3, [pc, #52]	@ (800716c <StopRetransmission+0x4c>)
 8007138:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 800713c:	b11b      	cbz	r3, 8007146 <StopRetransmission+0x26>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 800713e:	4a0b      	ldr	r2, [pc, #44]	@ (800716c <StopRetransmission+0x4c>)
 8007140:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8007142:	3301      	adds	r3, #1
 8007144:	6293      	str	r3, [r2, #40]	@ 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8007146:	4b08      	ldr	r3, [pc, #32]	@ (8007168 <StopRetransmission+0x48>)
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    MacCtx.NodeAckRequested = false;
 800714e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    MacCtx.AckTimeoutRetry = false;
 8007152:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007156:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 800715a:	f022 0202 	bic.w	r2, r2, #2
 800715e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return true;
}
 8007162:	2001      	movs	r0, #1
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20000d90 	.word	0x20000d90
 800716c:	20000780 	.word	0x20000780

08007170 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8007170:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007172:	4b04      	ldr	r3, [pc, #16]	@ (8007184 <CallNvmDataChangeCallback+0x14>)
 8007174:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8007178:	b113      	cbz	r3, 8007180 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800717a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800717c:	b103      	cbz	r3, 8007180 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800717e:	4798      	blx	r3
    }
}
 8007180:	bd08      	pop	{r3, pc}
 8007182:	bf00      	nop
 8007184:	20000d90 	.word	0x20000d90

08007188 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007188:	4b04      	ldr	r3, [pc, #16]	@ (800719c <IsRequestPending+0x14>)
 800718a:	f893 0481 	ldrb.w	r0, [r3, #1153]	@ 0x481
 800718e:	f010 0005 	ands.w	r0, r0, #5
 8007192:	d100      	bne.n	8007196 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8007194:	4770      	bx	lr
        return 1;
 8007196:	2001      	movs	r0, #1
 8007198:	e7fc      	b.n	8007194 <IsRequestPending+0xc>
 800719a:	bf00      	nop
 800719c:	20000d90 	.word	0x20000d90

080071a0 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80071a0:	4a13      	ldr	r2, [pc, #76]	@ (80071f0 <AckTimeoutRetriesProcess+0x50>)
 80071a2:	f892 3412 	ldrb.w	r3, [r2, #1042]	@ 0x412
 80071a6:	f892 2411 	ldrb.w	r2, [r2, #1041]	@ 0x411
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d207      	bcs.n	80071be <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 80071ae:	3301      	adds	r3, #1
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	4a0f      	ldr	r2, [pc, #60]	@ (80071f0 <AckTimeoutRetriesProcess+0x50>)
 80071b4:	f882 3412 	strb.w	r3, [r2, #1042]	@ 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80071b8:	f013 0f01 	tst.w	r3, #1
 80071bc:	d100      	bne.n	80071c0 <AckTimeoutRetriesProcess+0x20>
 80071be:	4770      	bx	lr
{
 80071c0:	b510      	push	{r4, lr}
 80071c2:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80071c4:	2322      	movs	r3, #34	@ 0x22
 80071c6:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80071ca:	4c0a      	ldr	r4, [pc, #40]	@ (80071f4 <AckTimeoutRetriesProcess+0x54>)
 80071cc:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 80071d0:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80071d4:	f994 3039 	ldrsb.w	r3, [r4, #57]	@ 0x39
 80071d8:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80071dc:	a902      	add	r1, sp, #8
 80071de:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80071e2:	f004 f818 	bl	800b216 <RegionGetPhyParam>
 80071e6:	9001      	str	r0, [sp, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80071e8:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
}
 80071ec:	b004      	add	sp, #16
 80071ee:	bd10      	pop	{r4, pc}
 80071f0:	20000d90 	.word	0x20000d90
 80071f4:	20000780 	.word	0x20000780

080071f8 <GetMaxAppPayloadWithoutFOptsLength>:
{
 80071f8:	b500      	push	{lr}
 80071fa:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80071fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 80071fe:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 8007202:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8007206:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800720a:	220d      	movs	r2, #13
 800720c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007210:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007214:	b113      	cbz	r3, 800721c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007216:	230e      	movs	r3, #14
 8007218:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800721c:	a902      	add	r1, sp, #8
 800721e:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007220:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8007224:	f003 fff7 	bl	800b216 <RegionGetPhyParam>
 8007228:	9001      	str	r0, [sp, #4]
}
 800722a:	b2c0      	uxtb	r0, r0
 800722c:	b005      	add	sp, #20
 800722e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007232:	bf00      	nop
 8007234:	20000780 	.word	0x20000780

08007238 <ValidatePayloadLength>:
{
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4604      	mov	r4, r0
 800723c:	4615      	mov	r5, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800723e:	4608      	mov	r0, r1
 8007240:	f7ff ffda 	bl	80071f8 <GetMaxAppPayloadWithoutFOptsLength>
    payloadSize = ( lenN + fOptsLen );
 8007244:	442c      	add	r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007246:	42a0      	cmp	r0, r4
 8007248:	d201      	bcs.n	800724e <ValidatePayloadLength+0x16>
    return false;
 800724a:	2000      	movs	r0, #0
}
 800724c:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800724e:	2001      	movs	r0, #1
 8007250:	e7fc      	b.n	800724c <ValidatePayloadLength+0x14>
	...

08007254 <ProcessRadioTxDone>:
{
 8007254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007256:	b08f      	sub	sp, #60	@ 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007258:	4b39      	ldr	r3, [pc, #228]	@ (8007340 <ProcessRadioTxDone+0xec>)
 800725a:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800725e:	2b02      	cmp	r3, #2
 8007260:	d002      	beq.n	8007268 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8007262:	4b38      	ldr	r3, [pc, #224]	@ (8007344 <ProcessRadioTxDone+0xf0>)
 8007264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007266:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8007268:	4c37      	ldr	r4, [pc, #220]	@ (8007348 <ProcessRadioTxDone+0xf4>)
 800726a:	f504 7560 	add.w	r5, r4, #896	@ 0x380
 800726e:	f8d4 13b0 	ldr.w	r1, [r4, #944]	@ 0x3b0
 8007272:	4628      	mov	r0, r5
 8007274:	f009 fe86 	bl	8010f84 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8007278:	4628      	mov	r0, r5
 800727a:	f009 fe3d 	bl	8010ef8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800727e:	f504 7566 	add.w	r5, r4, #920	@ 0x398
 8007282:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 8007286:	4628      	mov	r0, r5
 8007288:	f009 fe7c 	bl	8010f84 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800728c:	4628      	mov	r0, r5
 800728e:	f009 fe33 	bl	8010ef8 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8007292:	4b2b      	ldr	r3, [pc, #172]	@ (8007340 <ProcessRadioTxDone+0xec>)
 8007294:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8007298:	2b02      	cmp	r3, #2
 800729a:	d002      	beq.n	80072a2 <ProcessRadioTxDone+0x4e>
 800729c:	f894 3414 	ldrb.w	r3, [r4, #1044]	@ 0x414
 80072a0:	b1ab      	cbz	r3, 80072ce <ProcessRadioTxDone+0x7a>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80072a2:	2316      	movs	r3, #22
 80072a4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80072a8:	a90a      	add	r1, sp, #40	@ 0x28
 80072aa:	4b25      	ldr	r3, [pc, #148]	@ (8007340 <ProcessRadioTxDone+0xec>)
 80072ac:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80072b0:	f003 ffb1 	bl	800b216 <RegionGetPhyParam>
 80072b4:	9009      	str	r0, [sp, #36]	@ 0x24
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80072b6:	4c24      	ldr	r4, [pc, #144]	@ (8007348 <ProcessRadioTxDone+0xf4>)
 80072b8:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 80072bc:	f504 747e 	add.w	r4, r4, #1016	@ 0x3f8
 80072c0:	4401      	add	r1, r0
 80072c2:	4620      	mov	r0, r4
 80072c4:	f009 fe5e 	bl	8010f84 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 80072c8:	4620      	mov	r0, r4
 80072ca:	f009 fe15 	bl	8010ef8 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80072ce:	4b1f      	ldr	r3, [pc, #124]	@ (800734c <ProcessRadioTxDone+0xf8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4c1b      	ldr	r4, [pc, #108]	@ (8007340 <ProcessRadioTxDone+0xec>)
 80072d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    txDone.Channel = MacCtx.Channel;
 80072d6:	4f1c      	ldr	r7, [pc, #112]	@ (8007348 <ProcessRadioTxDone+0xf4>)
 80072d8:	f897 2415 	ldrb.w	r2, [r7, #1045]	@ 0x415
 80072dc:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80072e0:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80072e2:	ae0c      	add	r6, sp, #48	@ 0x30
 80072e4:	4630      	mov	r0, r6
 80072e6:	f009 fce1 	bl	8010cac <SysTimeGetMcuTime>
 80072ea:	ad02      	add	r5, sp, #8
 80072ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 80072f6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80072fa:	4628      	mov	r0, r5
 80072fc:	f009 fc73 	bl	8010be6 <SysTimeSub>
 8007300:	ab07      	add	r3, sp, #28
 8007302:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007306:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800730a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 800730e:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8007310:	2301      	movs	r3, #1
 8007312:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007316:	f894 3110 	ldrb.w	r3, [r4, #272]	@ 0x110
 800731a:	b90b      	cbnz	r3, 8007320 <ProcessRadioTxDone+0xcc>
        txDone.Joined  = false;
 800731c:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8007320:	a904      	add	r1, sp, #16
 8007322:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <ProcessRadioTxDone+0xec>)
 8007324:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8007328:	f003 ff8d 	bl	800b246 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 800732c:	4b06      	ldr	r3, [pc, #24]	@ (8007348 <ProcessRadioTxDone+0xf4>)
 800732e:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8007332:	b91b      	cbnz	r3, 800733c <ProcessRadioTxDone+0xe8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007334:	4b04      	ldr	r3, [pc, #16]	@ (8007348 <ProcessRadioTxDone+0xf4>)
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
}
 800733c:	b00f      	add	sp, #60	@ 0x3c
 800733e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007340:	20000780 	.word	0x20000780
 8007344:	08014918 	.word	0x08014918
 8007348:	20000d90 	.word	0x20000d90
 800734c:	20000778 	.word	0x20000778

08007350 <OnAckTimeoutTimerEvent>:
{
 8007350:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8007352:	4c10      	ldr	r4, [pc, #64]	@ (8007394 <OnAckTimeoutTimerEvent+0x44>)
 8007354:	4620      	mov	r0, r4
 8007356:	f009 fd75 	bl	8010e44 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800735a:	7f23      	ldrb	r3, [r4, #28]
 800735c:	b123      	cbz	r3, 8007368 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 800735e:	f5a4 737e 	sub.w	r3, r4, #1016	@ 0x3f8
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007368:	4b0b      	ldr	r3, [pc, #44]	@ (8007398 <OnAckTimeoutTimerEvent+0x48>)
 800736a:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800736e:	2b02      	cmp	r3, #2
 8007370:	d007      	beq.n	8007382 <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007372:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <OnAckTimeoutTimerEvent+0x4c>)
 8007374:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8007378:	b113      	cbz	r3, 8007380 <OnAckTimeoutTimerEvent+0x30>
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	b103      	cbz	r3, 8007380 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800737e:	4798      	blx	r3
}
 8007380:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 8007382:	4a06      	ldr	r2, [pc, #24]	@ (800739c <OnAckTimeoutTimerEvent+0x4c>)
 8007384:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8007388:	f043 0320 	orr.w	r3, r3, #32
 800738c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 8007390:	e7ef      	b.n	8007372 <OnAckTimeoutTimerEvent+0x22>
 8007392:	bf00      	nop
 8007394:	20001188 	.word	0x20001188
 8007398:	20000780 	.word	0x20000780
 800739c:	20000d90 	.word	0x20000d90

080073a0 <PrepareRxDoneAbort>:
{
 80073a0:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80073a2:	4b0e      	ldr	r3, [pc, #56]	@ (80073dc <PrepareRxDoneAbort+0x3c>)
 80073a4:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 80073a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80073ac:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == true )
 80073b0:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 80073b4:	b973      	cbnz	r3, 80073d4 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80073b6:	4b09      	ldr	r3, [pc, #36]	@ (80073dc <PrepareRxDoneAbort+0x3c>)
 80073b8:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 80073bc:	f042 0202 	orr.w	r2, r2, #2
 80073c0:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	f042 0220 	orr.w	r2, r2, #32
 80073ca:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    UpdateRxSlotIdleState( );
 80073ce:	f7ff fd95 	bl	8006efc <UpdateRxSlotIdleState>
}
 80073d2:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 80073d4:	2000      	movs	r0, #0
 80073d6:	f7ff ffbb 	bl	8007350 <OnAckTimeoutTimerEvent>
 80073da:	e7ec      	b.n	80073b6 <PrepareRxDoneAbort+0x16>
 80073dc:	20000d90 	.word	0x20000d90

080073e0 <LoRaMacCheckForBeaconAcquisition>:
{
 80073e0:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80073e2:	200c      	movs	r0, #12
 80073e4:	f003 f9b2 	bl	800a74c <LoRaMacConfirmQueueIsCmdActive>
 80073e8:	b188      	cbz	r0, 800740e <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80073ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007418 <LoRaMacCheckForBeaconAcquisition+0x38>)
 80073ec:	f893 0481 	ldrb.w	r0, [r3, #1153]	@ 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80073f0:	f010 0f01 	tst.w	r0, #1
 80073f4:	d10d      	bne.n	8007412 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80073f6:	f010 0004 	ands.w	r0, r0, #4
 80073fa:	d009      	beq.n	8007410 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80073fc:	461a      	mov	r2, r3
 80073fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8007402:	f023 0302 	bic.w	r3, r3, #2
 8007406:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800740a:	2001      	movs	r0, #1
 800740c:	e000      	b.n	8007410 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800740e:	2000      	movs	r0, #0
}
 8007410:	bd08      	pop	{r3, pc}
    return 0x00;
 8007412:	2000      	movs	r0, #0
 8007414:	e7fc      	b.n	8007410 <LoRaMacCheckForBeaconAcquisition+0x30>
 8007416:	bf00      	nop
 8007418:	20000d90 	.word	0x20000d90

0800741c <GetFCntDown>:
{
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	9c05      	ldr	r4, [sp, #20]
 8007420:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8007422:	b302      	cbz	r2, 8007466 <GetFCntDown+0x4a>
 8007424:	4694      	mov	ip, r2
 8007426:	b304      	cbz	r4, 800746a <GetFCntDown+0x4e>
 8007428:	b30d      	cbz	r5, 800746e <GetFCntDown+0x52>
    switch( addrID )
 800742a:	b188      	cbz	r0, 8007450 <GetFCntDown+0x34>
 800742c:	2801      	cmp	r0, #1
 800742e:	d120      	bne.n	8007472 <GetFCntDown+0x56>
            if( lrWanVersion.Fields.Minor == 1 )
 8007430:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007434:	2a01      	cmp	r2, #1
 8007436:	d002      	beq.n	800743e <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8007438:	2303      	movs	r3, #3
 800743a:	7023      	strb	r3, [r4, #0]
 800743c:	e00a      	b.n	8007454 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800743e:	b121      	cbz	r1, 800744a <GetFCntDown+0x2e>
 8007440:	2903      	cmp	r1, #3
 8007442:	d002      	beq.n	800744a <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8007444:	2301      	movs	r3, #1
 8007446:	7023      	strb	r3, [r4, #0]
 8007448:	e004      	b.n	8007454 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800744a:	2302      	movs	r3, #2
 800744c:	7023      	strb	r3, [r4, #0]
 800744e:	e001      	b.n	8007454 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8007450:	2304      	movs	r3, #4
 8007452:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8007454:	462b      	mov	r3, r5
 8007456:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 800745a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800745e:	7820      	ldrb	r0, [r4, #0]
 8007460:	f003 fb92 	bl	800ab88 <LoRaMacCryptoGetFCntDown>
}
 8007464:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8007466:	200a      	movs	r0, #10
 8007468:	e7fc      	b.n	8007464 <GetFCntDown+0x48>
 800746a:	200a      	movs	r0, #10
 800746c:	e7fa      	b.n	8007464 <GetFCntDown+0x48>
 800746e:	200a      	movs	r0, #10
 8007470:	e7f8      	b.n	8007464 <GetFCntDown+0x48>
    switch( addrID )
 8007472:	2005      	movs	r0, #5
 8007474:	e7f6      	b.n	8007464 <GetFCntDown+0x48>

08007476 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8007476:	2801      	cmp	r0, #1
 8007478:	d900      	bls.n	800747c <RemoveMacCommands+0x6>
 800747a:	4770      	bx	lr
{
 800747c:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800747e:	2a01      	cmp	r2, #1
 8007480:	d105      	bne.n	800748e <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8007482:	f011 0f20 	tst.w	r1, #32
 8007486:	d004      	beq.n	8007492 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8007488:	f002 fffc 	bl	800a484 <LoRaMacCommandsRemoveStickyAnsCmds>
 800748c:	e001      	b.n	8007492 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800748e:	f002 fff9 	bl	800a484 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8007492:	bd08      	pop	{r3, pc}

08007494 <ProcessMacCommands>:
{
 8007494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007498:	b08f      	sub	sp, #60	@ 0x3c
 800749a:	4605      	mov	r5, r0
 800749c:	460c      	mov	r4, r1
 800749e:	4616      	mov	r6, r2
 80074a0:	4698      	mov	r8, r3
    uint8_t status = 0;
 80074a2:	2700      	movs	r7, #0
 80074a4:	f88d 702f 	strb.w	r7, [sp, #47]	@ 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80074a8:	f8ad 702c 	strh.w	r7, [sp, #44]	@ 0x2c
    while( macIndex < commandsSize )
 80074ac:	42b4      	cmp	r4, r6
 80074ae:	f080 82c6 	bcs.w	8007a3e <ProcessMacCommands+0x5aa>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80074b2:	5d28      	ldrb	r0, [r5, r4]
 80074b4:	f003 f84e 	bl	800a554 <LoRaMacCommandsGetCmdSize>
 80074b8:	4420      	add	r0, r4
 80074ba:	42b0      	cmp	r0, r6
 80074bc:	f300 82bf 	bgt.w	8007a3e <ProcessMacCommands+0x5aa>
        switch( payload[macIndex++] )
 80074c0:	1c63      	adds	r3, r4, #1
 80074c2:	fa5f f983 	uxtb.w	r9, r3
 80074c6:	5d29      	ldrb	r1, [r5, r4]
 80074c8:	3902      	subs	r1, #2
 80074ca:	2911      	cmp	r1, #17
 80074cc:	f200 82b7 	bhi.w	8007a3e <ProcessMacCommands+0x5aa>
 80074d0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80074d4:	00290012 	.word	0x00290012
 80074d8:	00a50091 	.word	0x00a50091
 80074dc:	010500ed 	.word	0x010500ed
 80074e0:	0158013f 	.word	0x0158013f
 80074e4:	02b501ae 	.word	0x02b501ae
 80074e8:	01e102b5 	.word	0x01e102b5
 80074ec:	02b502b5 	.word	0x02b502b5
 80074f0:	02580241 	.word	0x02580241
 80074f4:	02940278 	.word	0x02940278
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80074f8:	2004      	movs	r0, #4
 80074fa:	f003 f927 	bl	800a74c <LoRaMacConfirmQueueIsCmdActive>
 80074fe:	b908      	cbnz	r0, 8007504 <ProcessMacCommands+0x70>
        switch( payload[macIndex++] )
 8007500:	464c      	mov	r4, r9
 8007502:	e7d3      	b.n	80074ac <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8007504:	2104      	movs	r1, #4
 8007506:	2000      	movs	r0, #0
 8007508:	f003 f8d4 	bl	800a6b4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800750c:	1ca3      	adds	r3, r4, #2
 800750e:	b2db      	uxtb	r3, r3
 8007510:	f815 1009 	ldrb.w	r1, [r5, r9]
 8007514:	4ac2      	ldr	r2, [pc, #776]	@ (8007820 <ProcessMacCommands+0x38c>)
 8007516:	f882 1454 	strb.w	r1, [r2, #1108]	@ 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800751a:	3403      	adds	r4, #3
 800751c:	b2e4      	uxtb	r4, r4
 800751e:	5ceb      	ldrb	r3, [r5, r3]
 8007520:	f882 3455 	strb.w	r3, [r2, #1109]	@ 0x455
 8007524:	e7c2      	b.n	80074ac <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 8007526:	2300      	movs	r3, #0
 8007528:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800752c:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8007530:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8007534:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8007538:	b10f      	cbz	r7, 800753e <ProcessMacCommands+0xaa>
                break;
 800753a:	464c      	mov	r4, r9
 800753c:	e7b6      	b.n	80074ac <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800753e:	f109 33ff 	add.w	r3, r9, #4294967295
 8007542:	442b      	add	r3, r5
 8007544:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8007546:	eba6 0309 	sub.w	r3, r6, r9
 800754a:	3301      	adds	r3, #1
 800754c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007550:	48b4      	ldr	r0, [pc, #720]	@ (8007824 <ProcessMacCommands+0x390>)
 8007552:	f890 30fe 	ldrb.w	r3, [r0, #254]	@ 0xfe
 8007556:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800755a:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800755e:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8007562:	f990 3039 	ldrsb.w	r3, [r0, #57]	@ 0x39
 8007566:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800756a:	f990 3038 	ldrsb.w	r3, [r0, #56]	@ 0x38
 800756e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007572:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8007576:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800757a:	f8d0 310c 	ldr.w	r3, [r0, #268]	@ 0x10c
 800757e:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8007580:	ab05      	add	r3, sp, #20
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	ab03      	add	r3, sp, #12
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	f10d 030b 	add.w	r3, sp, #11
 800758c:	f10d 020a 	add.w	r2, sp, #10
 8007590:	a907      	add	r1, sp, #28
 8007592:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8007596:	f003 fed6 	bl	800b346 <RegionLinkAdrReq>
 800759a:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 800759e:	f000 0007 	and.w	r0, r0, #7
 80075a2:	2807      	cmp	r0, #7
 80075a4:	d001      	beq.n	80075aa <ProcessMacCommands+0x116>
{
 80075a6:	2400      	movs	r4, #0
 80075a8:	e015      	b.n	80075d6 <ProcessMacCommands+0x142>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80075aa:	4b9e      	ldr	r3, [pc, #632]	@ (8007824 <ProcessMacCommands+0x390>)
 80075ac:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80075b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80075b4:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80075b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80075bc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80075c0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 80075c4:	e7ef      	b.n	80075a6 <ProcessMacCommands+0x112>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80075c6:	2201      	movs	r2, #1
 80075c8:	f10d 012f 	add.w	r1, sp, #47	@ 0x2f
 80075cc:	2003      	movs	r0, #3
 80075ce:	f002 fef9 	bl	800a3c4 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80075d2:	3401      	adds	r4, #1
 80075d4:	b2e4      	uxtb	r4, r4
 80075d6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80075da:	4b93      	ldr	r3, [pc, #588]	@ (8007828 <ProcessMacCommands+0x394>)
 80075dc:	fba3 1302 	umull	r1, r3, r3, r2
 80075e0:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 80075e4:	d3ef      	bcc.n	80075c6 <ProcessMacCommands+0x132>
                    macIndex += linkAdrNbBytesParsed - 1;
 80075e6:	eb02 0309 	add.w	r3, r2, r9
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	fa5f f983 	uxtb.w	r9, r3
                    adrBlockFound = true;
 80075f2:	2701      	movs	r7, #1
 80075f4:	e7a1      	b.n	800753a <ProcessMacCommands+0xa6>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80075f6:	3402      	adds	r4, #2
 80075f8:	b2e4      	uxtb	r4, r4
 80075fa:	f815 3009 	ldrb.w	r3, [r5, r9]
 80075fe:	f003 030f 	and.w	r3, r3, #15
 8007602:	4988      	ldr	r1, [pc, #544]	@ (8007824 <ProcessMacCommands+0x390>)
 8007604:	f881 30ff 	strb.w	r3, [r1, #255]	@ 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8007608:	2201      	movs	r2, #1
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	f8a1 3102 	strh.w	r3, [r1, #258]	@ 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8007612:	2200      	movs	r2, #0
 8007614:	a90b      	add	r1, sp, #44	@ 0x2c
 8007616:	2004      	movs	r0, #4
 8007618:	f002 fed4 	bl	800a3c4 <LoRaMacCommandsAddCmd>
                break;
 800761c:	e746      	b.n	80074ac <ProcessMacCommands+0x18>
                status = 0x07;
 800761e:	2307      	movs	r3, #7
 8007620:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8007624:	f815 3009 	ldrb.w	r3, [r5, r9]
 8007628:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800762c:	f88d 201d 	strb.w	r2, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8007630:	f003 030f 	and.w	r3, r3, #15
 8007634:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8007638:	1ca3      	adds	r3, r4, #2
 800763a:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800763c:	1ce1      	adds	r1, r4, #3
 800763e:	b2c9      	uxtb	r1, r1
 8007640:	5ceb      	ldrb	r3, [r5, r3]
 8007642:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007644:	1d22      	adds	r2, r4, #4
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	5c69      	ldrb	r1, [r5, r1]
 800764a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800764e:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007650:	3405      	adds	r4, #5
 8007652:	b2e4      	uxtb	r4, r4
 8007654:	5caa      	ldrb	r2, [r5, r2]
 8007656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800765a:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800765c:	2264      	movs	r2, #100	@ 0x64
 800765e:	fb02 f303 	mul.w	r3, r2, r3
 8007662:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8007664:	a907      	add	r1, sp, #28
 8007666:	4b6f      	ldr	r3, [pc, #444]	@ (8007824 <ProcessMacCommands+0x390>)
 8007668:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800766c:	f003 fe87 	bl	800b37e <RegionRxParamSetupReq>
 8007670:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8007674:	f000 0307 	and.w	r3, r0, #7
 8007678:	2b07      	cmp	r3, #7
 800767a:	d009      	beq.n	8007690 <ProcessMacCommands+0x1fc>
                macCmdPayload[0] = status;
 800767c:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8007680:	2201      	movs	r2, #1
 8007682:	a90b      	add	r1, sp, #44	@ 0x2c
 8007684:	2005      	movs	r0, #5
 8007686:	f002 fe9d 	bl	800a3c4 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 800768a:	f7ff fcad 	bl	8006fe8 <SetMlmeScheduleUplinkIndication>
                break;
 800768e:	e70d      	b.n	80074ac <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8007690:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8007694:	4b63      	ldr	r3, [pc, #396]	@ (8007824 <ProcessMacCommands+0x390>)
 8007696:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800769a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800769e:	9a08      	ldr	r2, [sp, #32]
 80076a0:	665a      	str	r2, [r3, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80076a2:	66da      	str	r2, [r3, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80076a4:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80076a8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 80076ac:	e7e6      	b.n	800767c <ProcessMacCommands+0x1e8>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80076ae:	4b5c      	ldr	r3, [pc, #368]	@ (8007820 <ProcessMacCommands+0x38c>)
 80076b0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80076b4:	b17b      	cbz	r3, 80076d6 <ProcessMacCommands+0x242>
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	b17b      	cbz	r3, 80076da <ProcessMacCommands+0x246>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80076ba:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80076bc:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80076c0:	f008 033f 	and.w	r3, r8, #63	@ 0x3f
 80076c4:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80076c8:	2202      	movs	r2, #2
 80076ca:	a90b      	add	r1, sp, #44	@ 0x2c
 80076cc:	2006      	movs	r0, #6
 80076ce:	f002 fe79 	bl	800a3c4 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 80076d2:	464c      	mov	r4, r9
                break;
 80076d4:	e6ea      	b.n	80074ac <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80076d6:	20ff      	movs	r0, #255	@ 0xff
 80076d8:	e7f0      	b.n	80076bc <ProcessMacCommands+0x228>
 80076da:	20ff      	movs	r0, #255	@ 0xff
 80076dc:	e7ee      	b.n	80076bc <ProcessMacCommands+0x228>
                status = 0x03;
 80076de:	2303      	movs	r3, #3
 80076e0:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 80076e4:	1ca3      	adds	r3, r4, #2
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	f915 2009 	ldrsb.w	r2, [r5, r9]
 80076ec:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 80076f0:	aa07      	add	r2, sp, #28
 80076f2:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80076f4:	1ce2      	adds	r2, r4, #3
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	5ceb      	ldrb	r3, [r5, r3]
 80076fa:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80076fc:	1d21      	adds	r1, r4, #4
 80076fe:	b2c9      	uxtb	r1, r1
 8007700:	5caa      	ldrb	r2, [r5, r2]
 8007702:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007706:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007708:	1d62      	adds	r2, r4, #5
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	5c69      	ldrb	r1, [r5, r1]
 800770e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007712:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8007714:	2164      	movs	r1, #100	@ 0x64
 8007716:	fb01 f303 	mul.w	r3, r1, r3
 800771a:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8007720:	3406      	adds	r4, #6
 8007722:	b2e4      	uxtb	r4, r4
 8007724:	56ab      	ldrsb	r3, [r5, r2]
 8007726:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800772a:	a905      	add	r1, sp, #20
 800772c:	4b3d      	ldr	r3, [pc, #244]	@ (8007824 <ProcessMacCommands+0x390>)
 800772e:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8007732:	f003 fe33 	bl	800b39c <RegionNewChannelReq>
 8007736:	b2c3      	uxtb	r3, r0
 8007738:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 800773c:	2800      	cmp	r0, #0
 800773e:	f6ff aeb5 	blt.w	80074ac <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8007742:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8007746:	2201      	movs	r2, #1
 8007748:	a90b      	add	r1, sp, #44	@ 0x2c
 800774a:	2007      	movs	r0, #7
 800774c:	f002 fe3a 	bl	800a3c4 <LoRaMacCommandsAddCmd>
                break;
 8007750:	e6ac      	b.n	80074ac <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8007752:	3402      	adds	r4, #2
 8007754:	b2e4      	uxtb	r4, r4
 8007756:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 800775a:	f013 030f 	ands.w	r3, r3, #15
 800775e:	d100      	bne.n	8007762 <ProcessMacCommands+0x2ce>
                    delay++;
 8007760:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8007762:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	4a2e      	ldr	r2, [pc, #184]	@ (8007824 <ProcessMacCommands+0x390>)
 800776c:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800776e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8007772:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8007774:	2200      	movs	r2, #0
 8007776:	a90b      	add	r1, sp, #44	@ 0x2c
 8007778:	2008      	movs	r0, #8
 800777a:	f002 fe23 	bl	800a3c4 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 800777e:	f7ff fc33 	bl	8006fe8 <SetMlmeScheduleUplinkIndication>
                break;
 8007782:	e693      	b.n	80074ac <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 8007784:	3402      	adds	r4, #2
 8007786:	b2e4      	uxtb	r4, r4
 8007788:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 800778c:	2200      	movs	r2, #0
 800778e:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8007792:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8007796:	f013 0f20 	tst.w	r3, #32
 800779a:	d002      	beq.n	80077a2 <ProcessMacCommands+0x30e>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800779c:	2201      	movs	r2, #1
 800779e:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80077a2:	f013 0f10 	tst.w	r3, #16
 80077a6:	d002      	beq.n	80077ae <ProcessMacCommands+0x31a>
                    txParamSetupReq.UplinkDwellTime = 1;
 80077a8:	2201      	movs	r2, #1
 80077aa:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80077b6:	a903      	add	r1, sp, #12
 80077b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007824 <ProcessMacCommands+0x390>)
 80077ba:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80077be:	f003 fdfc 	bl	800b3ba <RegionTxParamSetupReq>
 80077c2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077c6:	f43f ae71 	beq.w	80074ac <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80077ca:	f89d a00c 	ldrb.w	sl, [sp, #12]
 80077ce:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 8007824 <ProcessMacCommands+0x390>
 80077d2:	f889 a074 	strb.w	sl, [r9, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80077d6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80077da:	f889 3075 	strb.w	r3, [r9, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80077de:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80077e2:	4a12      	ldr	r2, [pc, #72]	@ (800782c <ProcessMacCommands+0x398>)
 80077e4:	5cd0      	ldrb	r0, [r2, r3]
 80077e6:	f7f9 fa6d 	bl	8000cc4 <__aeabi_ui2f>
 80077ea:	f8c9 0078 	str.w	r0, [r9, #120]	@ 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80077ee:	2302      	movs	r3, #2
 80077f0:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80077f4:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80077f8:	a907      	add	r1, sp, #28
 80077fa:	f899 0040 	ldrb.w	r0, [r9, #64]	@ 0x40
 80077fe:	f003 fd0a 	bl	800b216 <RegionGetPhyParam>
 8007802:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8007804:	b240      	sxtb	r0, r0
 8007806:	f999 3039 	ldrsb.w	r3, [r9, #57]	@ 0x39
 800780a:	4298      	cmp	r0, r3
 800780c:	bfb8      	it	lt
 800780e:	4618      	movlt	r0, r3
 8007810:	f889 0039 	strb.w	r0, [r9, #57]	@ 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8007814:	2200      	movs	r2, #0
 8007816:	a90b      	add	r1, sp, #44	@ 0x2c
 8007818:	2009      	movs	r0, #9
 800781a:	f002 fdd3 	bl	800a3c4 <LoRaMacCommandsAddCmd>
                break;
 800781e:	e645      	b.n	80074ac <ProcessMacCommands+0x18>
 8007820:	20000d90 	.word	0x20000d90
 8007824:	20000780 	.word	0x20000780
 8007828:	cccccccd 	.word	0xcccccccd
 800782c:	080142e0 	.word	0x080142e0
                status = 0x03;
 8007830:	2303      	movs	r3, #3
 8007832:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8007836:	1ca3      	adds	r3, r4, #2
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f815 2009 	ldrb.w	r2, [r5, r9]
 800783e:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8007842:	1ce1      	adds	r1, r4, #3
 8007844:	b2c9      	uxtb	r1, r1
 8007846:	5ceb      	ldrb	r3, [r5, r3]
 8007848:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800784a:	1d22      	adds	r2, r4, #4
 800784c:	b2d2      	uxtb	r2, r2
 800784e:	5c69      	ldrb	r1, [r5, r1]
 8007850:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007854:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007856:	3405      	adds	r4, #5
 8007858:	b2e4      	uxtb	r4, r4
 800785a:	5caa      	ldrb	r2, [r5, r2]
 800785c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007860:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 8007862:	2264      	movs	r2, #100	@ 0x64
 8007864:	fb02 f303 	mul.w	r3, r2, r3
 8007868:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800786a:	a907      	add	r1, sp, #28
 800786c:	4b75      	ldr	r3, [pc, #468]	@ (8007a44 <ProcessMacCommands+0x5b0>)
 800786e:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8007872:	f003 fdb1 	bl	800b3d8 <RegionDlChannelReq>
 8007876:	b2c3      	uxtb	r3, r0
 8007878:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 800787c:	2800      	cmp	r0, #0
 800787e:	f6ff ae15 	blt.w	80074ac <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8007882:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8007886:	2201      	movs	r2, #1
 8007888:	a90b      	add	r1, sp, #44	@ 0x2c
 800788a:	200a      	movs	r0, #10
 800788c:	f002 fd9a 	bl	800a3c4 <LoRaMacCommandsAddCmd>
                    SetMlmeScheduleUplinkIndication( );
 8007890:	f7ff fbaa 	bl	8006fe8 <SetMlmeScheduleUplinkIndication>
                break;
 8007894:	e60a      	b.n	80074ac <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8007896:	200a      	movs	r0, #10
 8007898:	f002 ff58 	bl	800a74c <LoRaMacConfirmQueueIsCmdActive>
 800789c:	b908      	cbnz	r0, 80078a2 <ProcessMacCommands+0x40e>
        switch( payload[macIndex++] )
 800789e:	464c      	mov	r4, r9
 80078a0:	e604      	b.n	80074ac <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80078a2:	210a      	movs	r1, #10
 80078a4:	2000      	movs	r0, #0
 80078a6:	f002 ff05 	bl	800a6b4 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80078aa:	a903      	add	r1, sp, #12
 80078ac:	2300      	movs	r3, #0
 80078ae:	9303      	str	r3, [sp, #12]
 80078b0:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 80078b2:	f10d 0a14 	add.w	sl, sp, #20
 80078b6:	9305      	str	r3, [sp, #20]
 80078b8:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 80078ba:	f10d 0b1c 	add.w	fp, sp, #28
 80078be:	9307      	str	r3, [sp, #28]
 80078c0:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80078c2:	1ca0      	adds	r0, r4, #2
 80078c4:	b2c0      	uxtb	r0, r0
 80078c6:	f815 3009 	ldrb.w	r3, [r5, r9]
 80078ca:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80078cc:	1ce2      	adds	r2, r4, #3
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	5c28      	ldrb	r0, [r5, r0]
 80078d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80078d6:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80078d8:	1d20      	adds	r0, r4, #4
 80078da:	b2c0      	uxtb	r0, r0
 80078dc:	5caa      	ldrb	r2, [r5, r2]
 80078de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078e2:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80078e4:	1d62      	adds	r2, r4, #5
 80078e6:	b2d2      	uxtb	r2, r2
 80078e8:	5c28      	ldrb	r0, [r5, r0]
 80078ea:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80078ee:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80078f0:	3406      	adds	r4, #6
 80078f2:	b2e4      	uxtb	r4, r4
 80078f4:	5caa      	ldrb	r2, [r5, r2]
 80078f6:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80078fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80078fe:	fb00 f202 	mul.w	r2, r0, r2
 8007902:	0a12      	lsrs	r2, r2, #8
 8007904:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8007908:	c903      	ldmia	r1, {r0, r1}
 800790a:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800790e:	4a4e      	ldr	r2, [pc, #312]	@ (8007a48 <ProcessMacCommands+0x5b4>)
 8007910:	441a      	add	r2, r3
 8007912:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8007914:	4658      	mov	r0, fp
 8007916:	f009 f9a7 	bl	8010c68 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800791a:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 8007a4c <ProcessMacCommands+0x5b8>
 800791e:	f8d9 333c 	ldr.w	r3, [r9, #828]	@ 0x33c
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	f8d9 3338 	ldr.w	r3, [r9, #824]	@ 0x338
 8007928:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800792c:	a80c      	add	r0, sp, #48	@ 0x30
 800792e:	f009 f95a 	bl	8010be6 <SysTimeSub>
 8007932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007938:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800793c:	4650      	mov	r0, sl
 800793e:	f009 f933 	bl	8010ba8 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8007942:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8007946:	f009 f96d 	bl	8010c24 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800794a:	f002 fca3 	bl	800a294 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800794e:	2301      	movs	r3, #1
 8007950:	f889 3434 	strb.w	r3, [r9, #1076]	@ 0x434
 8007954:	e5aa      	b.n	80074ac <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8007956:	200d      	movs	r0, #13
 8007958:	f002 fef8 	bl	800a74c <LoRaMacConfirmQueueIsCmdActive>
 800795c:	b908      	cbnz	r0, 8007962 <ProcessMacCommands+0x4ce>
        switch( payload[macIndex++] )
 800795e:	464c      	mov	r4, r9
 8007960:	e5a4      	b.n	80074ac <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8007962:	210d      	movs	r1, #13
 8007964:	2000      	movs	r0, #0
 8007966:	f002 fea5 	bl	800a6b4 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800796a:	4b38      	ldr	r3, [pc, #224]	@ (8007a4c <ProcessMacCommands+0x5b8>)
 800796c:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 8007970:	3b04      	subs	r3, #4
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b01      	cmp	r3, #1
 8007976:	d801      	bhi.n	800797c <ProcessMacCommands+0x4e8>
        switch( payload[macIndex++] )
 8007978:	464c      	mov	r4, r9
 800797a:	e597      	b.n	80074ac <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 800797c:	f002 fc86 	bl	800a28c <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8007980:	464c      	mov	r4, r9
 8007982:	e593      	b.n	80074ac <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 8007984:	1ca2      	adds	r2, r4, #2
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800798c:	1ce1      	adds	r1, r4, #3
 800798e:	b2c9      	uxtb	r1, r1
 8007990:	5caa      	ldrb	r2, [r5, r2]
 8007992:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007996:	1d22      	adds	r2, r4, #4
 8007998:	b2d2      	uxtb	r2, r2
 800799a:	5c69      	ldrb	r1, [r5, r1]
 800799c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 80079a0:	3405      	adds	r4, #5
 80079a2:	b2e4      	uxtb	r4, r4
 80079a4:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80079a6:	2164      	movs	r1, #100	@ 0x64
 80079a8:	fb03 f101 	mul.w	r1, r3, r1
 80079ac:	f000 000f 	and.w	r0, r0, #15
 80079b0:	f002 fc6d 	bl	800a28e <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 80079b4:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80079b8:	2201      	movs	r2, #1
 80079ba:	a90b      	add	r1, sp, #44	@ 0x2c
 80079bc:	2011      	movs	r0, #17
 80079be:	f002 fd01 	bl	800a3c4 <LoRaMacCommandsAddCmd>
                break;
 80079c2:	e573      	b.n	80074ac <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80079c4:	200e      	movs	r0, #14
 80079c6:	f002 fec1 	bl	800a74c <LoRaMacConfirmQueueIsCmdActive>
 80079ca:	b908      	cbnz	r0, 80079d0 <ProcessMacCommands+0x53c>
        switch( payload[macIndex++] )
 80079cc:	464c      	mov	r4, r9
 80079ce:	e56d      	b.n	80074ac <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80079d0:	210e      	movs	r1, #14
 80079d2:	2000      	movs	r0, #0
 80079d4:	f002 fe6e 	bl	800a6b4 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80079d8:	1ca2      	adds	r2, r4, #2
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80079e0:	1ce3      	adds	r3, r4, #3
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 80079e8:	3404      	adds	r4, #4
 80079ea:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80079ec:	4a18      	ldr	r2, [pc, #96]	@ (8007a50 <ProcessMacCommands+0x5bc>)
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	5ce9      	ldrb	r1, [r5, r3]
 80079f2:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 80079f6:	f002 fc4c 	bl	800a292 <LoRaMacClassBBeaconTimingAns>
 80079fa:	e557      	b.n	80074ac <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 80079fc:	1ca1      	adds	r1, r4, #2
 80079fe:	b2c9      	uxtb	r1, r1
 8007a00:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007a04:	1ce2      	adds	r2, r4, #3
 8007a06:	b2d2      	uxtb	r2, r2
 8007a08:	5c69      	ldrb	r1, [r5, r1]
 8007a0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007a0e:	3404      	adds	r4, #4
 8007a10:	b2e4      	uxtb	r4, r4
 8007a12:	5caa      	ldrb	r2, [r5, r2]
 8007a14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8007a18:	2064      	movs	r0, #100	@ 0x64
 8007a1a:	fb03 f000 	mul.w	r0, r3, r0
 8007a1e:	f002 fc3a 	bl	800a296 <LoRaMacClassBBeaconFreqReq>
 8007a22:	b140      	cbz	r0, 8007a36 <ProcessMacCommands+0x5a2>
                        macCmdPayload[0] = 1;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	a90b      	add	r1, sp, #44	@ 0x2c
 8007a2e:	2013      	movs	r0, #19
 8007a30:	f002 fcc8 	bl	800a3c4 <LoRaMacCommandsAddCmd>
                break;
 8007a34:	e53a      	b.n	80074ac <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8007a3c:	e7f5      	b.n	8007a2a <ProcessMacCommands+0x596>
}
 8007a3e:	b00f      	add	sp, #60	@ 0x3c
 8007a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a44:	20000780 	.word	0x20000780
 8007a48:	12d53d80 	.word	0x12d53d80
 8007a4c:	20000d90 	.word	0x20000d90
 8007a50:	20000768 	.word	0x20000768

08007a54 <ProcessRadioRxDone>:
{
 8007a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a58:	b0a3      	sub	sp, #140	@ 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 8007a5a:	4bbb      	ldr	r3, [pc, #748]	@ (8007d48 <ProcessRadioRxDone+0x2f4>)
 8007a5c:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8007a5e:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8007a60:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8007a64:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8007a6c:	4ab7      	ldr	r2, [pc, #732]	@ (8007d4c <ProcessRadioRxDone+0x2f8>)
 8007a6e:	f8d2 80cc 	ldr.w	r8, [r2, #204]	@ 0xcc
    MacCtx.McpsConfirm.AckReceived = false;
 8007a72:	4cb7      	ldr	r4, [pc, #732]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007a74:	f884 343c 	strb.w	r3, [r4, #1084]	@ 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 8007a78:	f8a4 947c 	strh.w	r9, [r4, #1148]	@ 0x47c
    MacCtx.RxStatus.Snr = snr;
 8007a7c:	f884 747e 	strb.w	r7, [r4, #1150]	@ 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8007a80:	f894 2480 	ldrb.w	r2, [r4, #1152]	@ 0x480
 8007a84:	f884 247f 	strb.w	r2, [r4, #1151]	@ 0x47f
    MacCtx.McpsIndication.Port = 0;
 8007a88:	f884 341f 	strb.w	r3, [r4, #1055]	@ 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 8007a8c:	f884 341e 	strb.w	r3, [r4, #1054]	@ 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8007a90:	f884 3421 	strb.w	r3, [r4, #1057]	@ 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8007a94:	f8c4 3424 	str.w	r3, [r4, #1060]	@ 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8007a98:	f884 3428 	strb.w	r3, [r4, #1064]	@ 0x428
    MacCtx.McpsIndication.RxData = false;
 8007a9c:	f884 3429 	strb.w	r3, [r4, #1065]	@ 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8007aa0:	f884 342a 	strb.w	r3, [r4, #1066]	@ 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8007aa4:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8007aa8:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 8007aac:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8007ab0:	f884 3434 	strb.w	r3, [r4, #1076]	@ 0x434
    Radio.Sleep( );
 8007ab4:	4ba7      	ldr	r3, [pc, #668]	@ (8007d54 <ProcessRadioRxDone+0x300>)
 8007ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab8:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8007aba:	f504 7066 	add.w	r0, r4, #920	@ 0x398
 8007abe:	f009 f9c1 	bl	8010e44 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	f002 fbce 	bl	800a266 <LoRaMacClassBRxBeacon>
 8007aca:	b998      	cbnz	r0, 8007af4 <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007acc:	4b9f      	ldr	r3, [pc, #636]	@ (8007d4c <ProcessRadioRxDone+0x2f8>)
 8007ace:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d013      	beq.n	8007afe <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 8007ad6:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8007ad8:	0963      	lsrs	r3, r4, #5
 8007ada:	3b01      	subs	r3, #1
 8007adc:	2b06      	cmp	r3, #6
 8007ade:	f200 827b 	bhi.w	8007fd8 <ProcessRadioRxDone+0x584>
 8007ae2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007ae6:	0029      	.short	0x0029
 8007ae8:	00aa0279 	.word	0x00aa0279
 8007aec:	00a60279 	.word	0x00a60279
 8007af0:	02550279 	.word	0x02550279
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8007af4:	f8a4 9472 	strh.w	r9, [r4, #1138]	@ 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8007af8:	f884 7474 	strb.w	r7, [r4, #1140]	@ 0x474
        return;
 8007afc:	e281      	b.n	8008002 <ProcessRadioRxDone+0x5ae>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007afe:	f002 fbb6 	bl	800a26e <LoRaMacClassBIsPingExpected>
 8007b02:	b150      	cbz	r0, 8007b1a <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007b04:	2000      	movs	r0, #0
 8007b06:	f002 fba7 	bl	800a258 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	f002 fba9 	bl	800a262 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8007b10:	4b8f      	ldr	r3, [pc, #572]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007b12:	2204      	movs	r2, #4
 8007b14:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 8007b18:	e7dd      	b.n	8007ad6 <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007b1a:	f002 fbaa 	bl	800a272 <LoRaMacClassBIsMulticastExpected>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d0d9      	beq.n	8007ad6 <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007b22:	2000      	movs	r0, #0
 8007b24:	f002 fb99 	bl	800a25a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007b28:	2000      	movs	r0, #0
 8007b2a:	f002 fb9b 	bl	800a264 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8007b2e:	4b88      	ldr	r3, [pc, #544]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007b30:	2205      	movs	r2, #5
 8007b32:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 8007b36:	e7ce      	b.n	8007ad6 <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8007b38:	2d10      	cmp	r5, #16
 8007b3a:	d95d      	bls.n	8007bf8 <ProcessRadioRxDone+0x1a4>
            macMsgJoinAccept.Buffer = payload;
 8007b3c:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 8007b3e:	b2ed      	uxtb	r5, r5
 8007b40:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8007b44:	4b81      	ldr	r3, [pc, #516]	@ (8007d4c <ProcessRadioRxDone+0x2f8>)
 8007b46:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d15b      	bne.n	8007c06 <ProcessRadioRxDone+0x1b2>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8007b4e:	f006 fc6b 	bl	800e428 <SecureElementGetJoinEui>
 8007b52:	4601      	mov	r1, r0
 8007b54:	aa07      	add	r2, sp, #28
 8007b56:	20ff      	movs	r0, #255	@ 0xff
 8007b58:	f003 f984 	bl	800ae64 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	d15e      	bne.n	8007c1e <ProcessRadioRxDone+0x1ca>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8007b60:	f89d 2025 	ldrb.w	r2, [sp, #37]	@ 0x25
 8007b64:	4b79      	ldr	r3, [pc, #484]	@ (8007d4c <ProcessRadioRxDone+0x2f8>)
 8007b66:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8007b6a:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 8007b6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007b72:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8007b76:	f89d 1027 	ldrb.w	r1, [sp, #39]	@ 0x27
 8007b7a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007b7e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8007b82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b84:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8007b88:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8007b8c:	f3c2 1102 	ubfx	r1, r2, #4, #3
 8007b90:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8007b94:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8007b98:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8007b9c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8007ba0:	f89d 202d 	ldrb.w	r2, [sp, #45]	@ 0x2d
 8007ba4:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8007ba6:	b90a      	cbnz	r2, 8007bac <ProcessRadioRxDone+0x158>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8007ba8:	2201      	movs	r2, #1
 8007baa:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8007bac:	4c67      	ldr	r4, [pc, #412]	@ (8007d4c <ProcessRadioRxDone+0x2f8>)
 8007bae:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007bb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007bb4:	fb02 f303 	mul.w	r3, r2, r3
 8007bb8:	6523      	str	r3, [r4, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8007bba:	4413      	add	r3, r2
 8007bbc:	6563      	str	r3, [r4, #84]	@ 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f884 310e 	strb.w	r3, [r4, #270]	@ 0x10e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8007bc4:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8007bc8:	9320      	str	r3, [sp, #128]	@ 0x80
                applyCFList.Size = size - 17;
 8007bca:	3d11      	subs	r5, #17
 8007bcc:	f88d 5084 	strb.w	r5, [sp, #132]	@ 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8007bd0:	a920      	add	r1, sp, #128	@ 0x80
 8007bd2:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8007bd6:	f003 fb62 	bl	800b29e <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007bda:	2302      	movs	r3, #2
 8007bdc:	f884 3110 	strb.w	r3, [r4, #272]	@ 0x110
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007be0:	2001      	movs	r0, #1
 8007be2:	f002 fdb3 	bl	800a74c <LoRaMacConfirmQueueIsCmdActive>
 8007be6:	b9a8      	cbnz	r0, 8007c14 <ProcessRadioRxDone+0x1c0>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8007be8:	4a59      	ldr	r2, [pc, #356]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007bea:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8007bee:	f043 0308 	orr.w	r3, r3, #8
 8007bf2:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 8007bf6:	e1e3      	b.n	8007fc0 <ProcessRadioRxDone+0x56c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007bf8:	4b55      	ldr	r3, [pc, #340]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 8007c00:	f7ff fbce 	bl	80073a0 <PrepareRxDoneAbort>
                return;
 8007c04:	e1fd      	b.n	8008002 <ProcessRadioRxDone+0x5ae>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007c06:	4b52      	ldr	r3, [pc, #328]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 8007c0e:	f7ff fbc7 	bl	80073a0 <PrepareRxDoneAbort>
                return;
 8007c12:	e1f6      	b.n	8008002 <ProcessRadioRxDone+0x5ae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8007c14:	2101      	movs	r1, #1
 8007c16:	2000      	movs	r0, #0
 8007c18:	f002 fd4c 	bl	800a6b4 <LoRaMacConfirmQueueSetStatus>
 8007c1c:	e7e4      	b.n	8007be8 <ProcessRadioRxDone+0x194>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007c1e:	2001      	movs	r0, #1
 8007c20:	f002 fd94 	bl	800a74c <LoRaMacConfirmQueueIsCmdActive>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d0df      	beq.n	8007be8 <ProcessRadioRxDone+0x194>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8007c28:	2101      	movs	r1, #1
 8007c2a:	2007      	movs	r0, #7
 8007c2c:	f002 fd42 	bl	800a6b4 <LoRaMacConfirmQueueSetStatus>
 8007c30:	e7da      	b.n	8007be8 <ProcessRadioRxDone+0x194>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8007c32:	4b47      	ldr	r3, [pc, #284]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007c3a:	4b44      	ldr	r3, [pc, #272]	@ (8007d4c <ProcessRadioRxDone+0x2f8>)
 8007c3c:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8007c40:	f88d 207a 	strb.w	r2, [sp, #122]	@ 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8007c44:	4a42      	ldr	r2, [pc, #264]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007c46:	f992 2420 	ldrsb.w	r2, [r2, #1056]	@ 0x420
 8007c4a:	f88d 2079 	strb.w	r2, [sp, #121]	@ 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007c4e:	220d      	movs	r2, #13
 8007c50:	f88d 2078 	strb.w	r2, [sp, #120]	@ 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007c54:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007c58:	b113      	cbz	r3, 8007c60 <ProcessRadioRxDone+0x20c>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007c5a:	230e      	movs	r3, #14
 8007c5c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007c60:	a91e      	add	r1, sp, #120	@ 0x78
 8007c62:	4b3a      	ldr	r3, [pc, #232]	@ (8007d4c <ProcessRadioRxDone+0x2f8>)
 8007c64:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8007c68:	f003 fad5 	bl	800b216 <RegionGetPhyParam>
 8007c6c:	901d      	str	r0, [sp, #116]	@ 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8007c6e:	f1a5 030d 	sub.w	r3, r5, #13
 8007c72:	b21b      	sxth	r3, r3
 8007c74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c78:	b200      	sxth	r0, r0
 8007c7a:	4283      	cmp	r3, r0
 8007c7c:	dc01      	bgt.n	8007c82 <ProcessRadioRxDone+0x22e>
 8007c7e:	2d0b      	cmp	r5, #11
 8007c80:	d806      	bhi.n	8007c90 <ProcessRadioRxDone+0x23c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007c82:	4b33      	ldr	r3, [pc, #204]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 8007c8a:	f7ff fb89 	bl	80073a0 <PrepareRxDoneAbort>
                return;
 8007c8e:	e1b8      	b.n	8008002 <ProcessRadioRxDone+0x5ae>
            macMsgData.Buffer = payload;
 8007c90:	9611      	str	r6, [sp, #68]	@ 0x44
            macMsgData.BufSize = size;
 8007c92:	f88d 5048 	strb.w	r5, [sp, #72]	@ 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8007c96:	4b30      	ldr	r3, [pc, #192]	@ (8007d58 <ProcessRadioRxDone+0x304>)
 8007c98:	931a      	str	r3, [sp, #104]	@ 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8007c9a:	23ff      	movs	r3, #255	@ 0xff
 8007c9c:	f88d 306c 	strb.w	r3, [sp, #108]	@ 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8007ca0:	a811      	add	r0, sp, #68	@ 0x44
 8007ca2:	f003 f9a5 	bl	800aff0 <LoRaMacParserData>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d147      	bne.n	8007d3a <ProcessRadioRxDone+0x2e6>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8007caa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007cac:	4b28      	ldr	r3, [pc, #160]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007cae:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8007cb2:	f10d 0116 	add.w	r1, sp, #22
 8007cb6:	a811      	add	r0, sp, #68	@ 0x44
 8007cb8:	f7ff f9cc 	bl	8007054 <DetermineFrameType>
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d14c      	bne.n	8007d5c <ProcessRadioRxDone+0x308>
            downLinkCounter = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d04e      	beq.n	8007d6a <ProcessRadioRxDone+0x316>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8007ccc:	f04f 0901 	mov.w	r9, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8007cd0:	2d01      	cmp	r5, #1
 8007cd2:	d108      	bne.n	8007ce6 <ProcessRadioRxDone+0x292>
 8007cd4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d172      	bne.n	8007dc2 <ProcessRadioRxDone+0x36e>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8007cdc:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8007ce0:	f013 0f60 	tst.w	r3, #96	@ 0x60
 8007ce4:	d16d      	bne.n	8007dc2 <ProcessRadioRxDone+0x36e>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8007ce6:	2315      	movs	r3, #21
 8007ce8:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007cec:	4e17      	ldr	r6, [pc, #92]	@ (8007d4c <ProcessRadioRxDone+0x2f8>)
 8007cee:	a91e      	add	r1, sp, #120	@ 0x78
 8007cf0:	f896 0040 	ldrb.w	r0, [r6, #64]	@ 0x40
 8007cf4:	f003 fa8f 	bl	800b216 <RegionGetPhyParam>
 8007cf8:	901d      	str	r0, [sp, #116]	@ 0x74
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8007cfa:	ab06      	add	r3, sp, #24
 8007cfc:	9302      	str	r3, [sp, #8]
 8007cfe:	f10d 0317 	add.w	r3, sp, #23
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	b280      	uxth	r0, r0
 8007d06:	9000      	str	r0, [sp, #0]
 8007d08:	f8d6 310c 	ldr.w	r3, [r6, #268]	@ 0x10c
 8007d0c:	aa11      	add	r2, sp, #68	@ 0x44
 8007d0e:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8007d12:	4648      	mov	r0, r9
 8007d14:	f7ff fb82 	bl	800741c <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d072      	beq.n	8007e02 <ProcessRadioRxDone+0x3ae>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8007d1c:	2807      	cmp	r0, #7
 8007d1e:	d057      	beq.n	8007dd0 <ProcessRadioRxDone+0x37c>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8007d20:	2808      	cmp	r0, #8
 8007d22:	d069      	beq.n	8007df8 <ProcessRadioRxDone+0x3a4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007d24:	4b0a      	ldr	r3, [pc, #40]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8007d2c:	4b08      	ldr	r3, [pc, #32]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007d2e:	9a06      	ldr	r2, [sp, #24]
 8007d30:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                PrepareRxDoneAbort( );
 8007d34:	f7ff fb34 	bl	80073a0 <PrepareRxDoneAbort>
                return;
 8007d38:	e163      	b.n	8008002 <ProcessRadioRxDone+0x5ae>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007d3a:	4b05      	ldr	r3, [pc, #20]	@ (8007d50 <ProcessRadioRxDone+0x2fc>)
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 8007d42:	f7ff fb2d 	bl	80073a0 <PrepareRxDoneAbort>
                return;
 8007d46:	e15c      	b.n	8008002 <ProcessRadioRxDone+0x5ae>
 8007d48:	20000768 	.word	0x20000768
 8007d4c:	20000780 	.word	0x20000780
 8007d50:	20000d90 	.word	0x20000d90
 8007d54:	08014918 	.word	0x08014918
 8007d58:	20000fc8 	.word	0x20000fc8
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007d5c:	4bac      	ldr	r3, [pc, #688]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 8007d64:	f7ff fb1c 	bl	80073a0 <PrepareRxDoneAbort>
                return;
 8007d68:	e14b      	b.n	8008002 <ProcessRadioRxDone+0x5ae>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	4aa9      	ldr	r2, [pc, #676]	@ (8008014 <ProcessRadioRxDone+0x5c0>)
 8007d6e:	212c      	movs	r1, #44	@ 0x2c
 8007d70:	fb01 2203 	mla	r2, r1, r3, r2
 8007d74:	f8d2 20d4 	ldr.w	r2, [r2, #212]	@ 0xd4
 8007d78:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007d7a:	428a      	cmp	r2, r1
 8007d7c:	d002      	beq.n	8007d84 <ProcessRadioRxDone+0x330>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007d7e:	3301      	adds	r3, #1
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	e7a1      	b.n	8007cc8 <ProcessRadioRxDone+0x274>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8007d84:	49a3      	ldr	r1, [pc, #652]	@ (8008014 <ProcessRadioRxDone+0x5c0>)
 8007d86:	262c      	movs	r6, #44	@ 0x2c
 8007d88:	fb06 1103 	mla	r1, r6, r3, r1
 8007d8c:	f891 10d2 	ldrb.w	r1, [r1, #210]	@ 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007d90:	2900      	cmp	r1, #0
 8007d92:	d0f4      	beq.n	8007d7e <ProcessRadioRxDone+0x32a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8007d94:	4b9f      	ldr	r3, [pc, #636]	@ (8008014 <ProcessRadioRxDone+0x5c0>)
 8007d96:	fb06 3000 	mla	r0, r6, r0, r3
 8007d9a:	f890 90d3 	ldrb.w	r9, [r0, #211]	@ 0xd3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8007d9e:	f8d0 10f0 	ldr.w	r1, [r0, #240]	@ 0xf0
 8007da2:	6809      	ldr	r1, [r1, #0]
 8007da4:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007da6:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d002      	beq.n	8007db4 <ProcessRadioRxDone+0x360>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8007dae:	4690      	mov	r8, r2
                    multicast = 1;
 8007db0:	2501      	movs	r5, #1
 8007db2:	e78d      	b.n	8007cd0 <ProcessRadioRxDone+0x27c>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8007db4:	4b96      	ldr	r3, [pc, #600]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007db6:	2103      	movs	r1, #3
 8007db8:	f883 147f 	strb.w	r1, [r3, #1151]	@ 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8007dbc:	4690      	mov	r8, r2
                    multicast = 1;
 8007dbe:	2501      	movs	r5, #1
 8007dc0:	e786      	b.n	8007cd0 <ProcessRadioRxDone+0x27c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007dc2:	4b93      	ldr	r3, [pc, #588]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 8007dca:	f7ff fae9 	bl	80073a0 <PrepareRxDoneAbort>
                return;
 8007dce:	e118      	b.n	8008002 <ProcessRadioRxDone+0x5ae>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8007dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8007dd8:	f896 310e 	ldrb.w	r3, [r6, #270]	@ 0x10e
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1a5      	bne.n	8007d2c <ProcessRadioRxDone+0x2d8>
 8007de0:	f004 04e0 	and.w	r4, r4, #224	@ 0xe0
 8007de4:	2ca0      	cmp	r4, #160	@ 0xa0
 8007de6:	d1a1      	bne.n	8007d2c <ProcessRadioRxDone+0x2d8>
 8007de8:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 8007dea:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d19d      	bne.n	8007d2c <ProcessRadioRxDone+0x2d8>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8007df0:	2201      	movs	r2, #1
 8007df2:	f886 203a 	strb.w	r2, [r6, #58]	@ 0x3a
 8007df6:	e799      	b.n	8007d2c <ProcessRadioRxDone+0x2d8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8007df8:	4b85      	ldr	r3, [pc, #532]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007dfa:	220a      	movs	r2, #10
 8007dfc:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
 8007e00:	e794      	b.n	8007d2c <ProcessRadioRxDone+0x2d8>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8007e02:	ab11      	add	r3, sp, #68	@ 0x44
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	9b06      	ldr	r3, [sp, #24]
 8007e08:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007e0c:	4641      	mov	r1, r8
 8007e0e:	4648      	mov	r0, r9
 8007e10:	f002 ff7c 	bl	800ad0c <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d13a      	bne.n	8007e8e <ProcessRadioRxDone+0x43a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007e18:	4b7d      	ldr	r3, [pc, #500]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	f883 141d 	strb.w	r1, [r3, #1053]	@ 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8007e20:	f883 541e 	strb.w	r5, [r3, #1054]	@ 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8007e24:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 8007e28:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8007e2c:	f883 0421 	strb.w	r0, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8007e30:	f8c3 1424 	str.w	r1, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8007e34:	f883 1428 	strb.w	r1, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8007e38:	9806      	ldr	r0, [sp, #24]
 8007e3a:	f8c3 042c 	str.w	r0, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8007e3e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8007e42:	f883 242a 	strb.w	r2, [r3, #1066]	@ 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007e46:	f883 1439 	strb.w	r1, [r3, #1081]	@ 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8007e4a:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8007e4e:	f893 047f 	ldrb.w	r0, [r3, #1151]	@ 0x47f
 8007e52:	2801      	cmp	r0, #1
 8007e54:	d929      	bls.n	8007eaa <ProcessRadioRxDone+0x456>
            if( multicast == 1 )
 8007e56:	2d01      	cmp	r5, #1
 8007e58:	d02a      	beq.n	8007eb0 <ProcessRadioRxDone+0x45c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8007e5a:	f004 04e0 	and.w	r4, r4, #224	@ 0xe0
 8007e5e:	2ca0      	cmp	r4, #160	@ 0xa0
 8007e60:	d02b      	beq.n	8007eba <ProcessRadioRxDone+0x466>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8007e62:	2300      	movs	r3, #0
 8007e64:	4a6b      	ldr	r2, [pc, #428]	@ (8008014 <ProcessRadioRxDone+0x5c0>)
 8007e66:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8007e6a:	4a69      	ldr	r2, [pc, #420]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007e6c:	f882 341c 	strb.w	r3, [r2, #1052]	@ 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8007e70:	4b67      	ldr	r3, [pc, #412]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007e72:	f893 2438 	ldrb.w	r2, [r3, #1080]	@ 0x438
 8007e76:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 8007e7a:	f7ff fafc 	bl	8007476 <RemoveMacCommands>
            switch( fType )
 8007e7e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d87d      	bhi.n	8007f82 <ProcessRadioRxDone+0x52e>
 8007e86:	e8df f003 	tbb	[pc, r3]
 8007e8a:	4a27      	.short	0x4a27
 8007e8c:	6c5c      	.short	0x6c5c
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8007e8e:	2802      	cmp	r0, #2
 8007e90:	d006      	beq.n	8007ea0 <ProcessRadioRxDone+0x44c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8007e92:	4b5f      	ldr	r3, [pc, #380]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007e94:	220c      	movs	r2, #12
 8007e96:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 8007e9a:	f7ff fa81 	bl	80073a0 <PrepareRxDoneAbort>
                return;
 8007e9e:	e0b0      	b.n	8008002 <ProcessRadioRxDone+0x5ae>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8007ea0:	4b5b      	ldr	r3, [pc, #364]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007ea2:	220b      	movs	r2, #11
 8007ea4:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
 8007ea8:	e7f7      	b.n	8007e9a <ProcessRadioRxDone+0x446>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8007eaa:	4b5a      	ldr	r3, [pc, #360]	@ (8008014 <ProcessRadioRxDone+0x5c0>)
 8007eac:	6299      	str	r1, [r3, #40]	@ 0x28
 8007eae:	e7d2      	b.n	8007e56 <ProcessRadioRxDone+0x402>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8007eb0:	4b57      	ldr	r3, [pc, #348]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
 8007eb8:	e7da      	b.n	8007e70 <ProcessRadioRxDone+0x41c>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8007eba:	4b56      	ldr	r3, [pc, #344]	@ (8008014 <ProcessRadioRxDone+0x5c0>)
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8007ec2:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8007ec6:	b913      	cbnz	r3, 8007ece <ProcessRadioRxDone+0x47a>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8007ec8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007eca:	4b52      	ldr	r3, [pc, #328]	@ (8008014 <ProcessRadioRxDone+0x5c0>)
 8007ecc:	635a      	str	r2, [r3, #52]	@ 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8007ece:	4b50      	ldr	r3, [pc, #320]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
 8007ed6:	e7cb      	b.n	8007e70 <ProcessRadioRxDone+0x41c>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8007ed8:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 8007edc:	4c4c      	ldr	r4, [pc, #304]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007ede:	f894 347f 	ldrb.w	r3, [r4, #1151]	@ 0x47f
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	f002 020f 	and.w	r2, r2, #15
 8007eea:	2100      	movs	r1, #0
 8007eec:	a815      	add	r0, sp, #84	@ 0x54
 8007eee:	f7ff fad1 	bl	8007494 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007ef2:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8007ef6:	f884 341f 	strb.w	r3, [r4, #1055]	@ 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8007efa:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007efc:	f8c4 3424 	str.w	r3, [r4, #1060]	@ 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8007f00:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 8007f04:	f884 3428 	strb.w	r3, [r4, #1064]	@ 0x428
                    MacCtx.McpsIndication.RxData = true;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f884 3429 	strb.w	r3, [r4, #1065]	@ 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007f0e:	4a40      	ldr	r2, [pc, #256]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007f10:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8007f14:	f043 0302 	orr.w	r3, r3, #2
 8007f18:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 8007f1c:	e050      	b.n	8007fc0 <ProcessRadioRxDone+0x56c>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8007f1e:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 8007f22:	4c3b      	ldr	r4, [pc, #236]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007f24:	f894 347f 	ldrb.w	r3, [r4, #1151]	@ 0x47f
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	f002 020f 	and.w	r2, r2, #15
 8007f30:	2100      	movs	r1, #0
 8007f32:	a815      	add	r0, sp, #84	@ 0x54
 8007f34:	f7ff faae 	bl	8007494 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007f38:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8007f3c:	f884 341f 	strb.w	r3, [r4, #1055]	@ 0x41f
                    break;
 8007f40:	e7e5      	b.n	8007f0e <ProcessRadioRxDone+0x4ba>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8007f42:	4c33      	ldr	r4, [pc, #204]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007f44:	f894 347f 	ldrb.w	r3, [r4, #1151]	@ 0x47f
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	463b      	mov	r3, r7
 8007f4c:	f89d 206c 	ldrb.w	r2, [sp, #108]	@ 0x6c
 8007f50:	2100      	movs	r1, #0
 8007f52:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8007f54:	f7ff fa9e 	bl	8007494 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007f58:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8007f5c:	f884 341f 	strb.w	r3, [r4, #1055]	@ 0x41f
                    break;
 8007f60:	e7d5      	b.n	8007f0e <ProcessRadioRxDone+0x4ba>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007f62:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8007f66:	4b2a      	ldr	r3, [pc, #168]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007f68:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8007f6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f6e:	f8c3 2424 	str.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8007f72:	f89d 206c 	ldrb.w	r2, [sp, #108]	@ 0x6c
 8007f76:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
                    MacCtx.McpsIndication.RxData = true;
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
                    break;
 8007f80:	e7c5      	b.n	8007f0e <ProcessRadioRxDone+0x4ba>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007f82:	4b23      	ldr	r3, [pc, #140]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                    PrepareRxDoneAbort( );
 8007f8a:	f7ff fa09 	bl	80073a0 <PrepareRxDoneAbort>
                    break;
 8007f8e:	e7be      	b.n	8007f0e <ProcessRadioRxDone+0x4ba>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8007f90:	1e6a      	subs	r2, r5, #1
 8007f92:	4c21      	ldr	r4, [pc, #132]	@ (8008018 <ProcessRadioRxDone+0x5c4>)
 8007f94:	b292      	uxth	r2, r2
 8007f96:	1c71      	adds	r1, r6, #1
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f006 fa76 	bl	800e48a <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	f884 21e4 	strb.w	r2, [r4, #484]	@ 0x1e4
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f884 21e5 	strb.w	r2, [r4, #485]	@ 0x1e5
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8007faa:	f8c4 41ec 	str.w	r4, [r4, #492]	@ 0x1ec
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8007fae:	3d01      	subs	r5, #1
 8007fb0:	f884 51f0 	strb.w	r5, [r4, #496]	@ 0x1f0
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007fb4:	f894 2249 	ldrb.w	r2, [r4, #585]	@ 0x249
 8007fb8:	f042 0202 	orr.w	r2, r2, #2
 8007fbc:	f884 2249 	strb.w	r2, [r4, #585]	@ 0x249
    if( MacCtx.NodeAckRequested == true )
 8007fc0:	4b13      	ldr	r3, [pc, #76]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007fc2:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8007fc6:	b173      	cbz	r3, 8007fe6 <ProcessRadioRxDone+0x592>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007fc8:	4b11      	ldr	r3, [pc, #68]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007fca:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 8007fce:	b17b      	cbz	r3, 8007ff0 <ProcessRadioRxDone+0x59c>
            OnAckTimeoutTimerEvent( NULL );
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	f7ff f9bd 	bl	8007350 <OnAckTimeoutTimerEvent>
 8007fd6:	e00b      	b.n	8007ff0 <ProcessRadioRxDone+0x59c>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            PrepareRxDoneAbort( );
 8007fe0:	f7ff f9de 	bl	80073a0 <PrepareRxDoneAbort>
            break;
 8007fe4:	e7ec      	b.n	8007fc0 <ProcessRadioRxDone+0x56c>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8008014 <ProcessRadioRxDone+0x5c0>)
 8007fe8:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d00b      	beq.n	8008008 <ProcessRadioRxDone+0x5b4>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007ff0:	4a07      	ldr	r2, [pc, #28]	@ (8008010 <ProcessRadioRxDone+0x5bc>)
 8007ff2:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8007ff6:	f043 0320 	orr.w	r3, r3, #32
 8007ffa:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    UpdateRxSlotIdleState( );
 8007ffe:	f7fe ff7d 	bl	8006efc <UpdateRxSlotIdleState>
}
 8008002:	b023      	add	sp, #140	@ 0x8c
 8008004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 8008008:	2000      	movs	r0, #0
 800800a:	f7ff f9a1 	bl	8007350 <OnAckTimeoutTimerEvent>
 800800e:	e7ef      	b.n	8007ff0 <ProcessRadioRxDone+0x59c>
 8008010:	20000d90 	.word	0x20000d90
 8008014:	20000780 	.word	0x20000780
 8008018:	20000fc8 	.word	0x20000fc8

0800801c <ProcessRadioTxTimeout>:
{
 800801c:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800801e:	4b0f      	ldr	r3, [pc, #60]	@ (800805c <ProcessRadioTxTimeout+0x40>)
 8008020:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8008024:	2b02      	cmp	r3, #2
 8008026:	d002      	beq.n	800802e <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8008028:	4b0d      	ldr	r3, [pc, #52]	@ (8008060 <ProcessRadioTxTimeout+0x44>)
 800802a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802c:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800802e:	f7fe ff65 	bl	8006efc <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008032:	4c0c      	ldr	r4, [pc, #48]	@ (8008064 <ProcessRadioTxTimeout+0x48>)
 8008034:	2002      	movs	r0, #2
 8008036:	f884 0439 	strb.w	r0, [r4, #1081]	@ 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800803a:	f002 fb69 	bl	800a710 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800803e:	f894 3414 	ldrb.w	r3, [r4, #1044]	@ 0x414
 8008042:	b113      	cbz	r3, 800804a <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 8008044:	2201      	movs	r2, #1
 8008046:	f884 2413 	strb.w	r2, [r4, #1043]	@ 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 800804a:	4a06      	ldr	r2, [pc, #24]	@ (8008064 <ProcessRadioTxTimeout+0x48>)
 800804c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8008050:	f043 0320 	orr.w	r3, r3, #32
 8008054:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 8008058:	bd10      	pop	{r4, pc}
 800805a:	bf00      	nop
 800805c:	20000780 	.word	0x20000780
 8008060:	08014918 	.word	0x08014918
 8008064:	20000d90 	.word	0x20000d90

08008068 <CheckForClassBCollision>:
{
 8008068:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800806a:	f002 f8fe 	bl	800a26a <LoRaMacClassBIsBeaconExpected>
 800806e:	b978      	cbnz	r0, 8008090 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008070:	4b09      	ldr	r3, [pc, #36]	@ (8008098 <CheckForClassBCollision+0x30>)
 8008072:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8008076:	2b01      	cmp	r3, #1
 8008078:	d001      	beq.n	800807e <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800807a:	2000      	movs	r0, #0
}
 800807c:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800807e:	f002 f8f6 	bl	800a26e <LoRaMacClassBIsPingExpected>
 8008082:	b938      	cbnz	r0, 8008094 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008084:	f002 f8f5 	bl	800a272 <LoRaMacClassBIsMulticastExpected>
 8008088:	2800      	cmp	r0, #0
 800808a:	d0f7      	beq.n	800807c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800808c:	200f      	movs	r0, #15
 800808e:	e7f5      	b.n	800807c <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008090:	200e      	movs	r0, #14
 8008092:	e7f3      	b.n	800807c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008094:	200f      	movs	r0, #15
 8008096:	e7f1      	b.n	800807c <CheckForClassBCollision+0x14>
 8008098:	20000780 	.word	0x20000780

0800809c <HandleRadioRxErrorTimeout>:
{
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	4605      	mov	r5, r0
 80080a0:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80080a2:	4b36      	ldr	r3, [pc, #216]	@ (800817c <HandleRadioRxErrorTimeout+0xe0>)
 80080a4:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d002      	beq.n	80080b2 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 80080ac:	4b34      	ldr	r3, [pc, #208]	@ (8008180 <HandleRadioRxErrorTimeout+0xe4>)
 80080ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b0:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80080b2:	f002 f8da 	bl	800a26a <LoRaMacClassBIsBeaconExpected>
 80080b6:	4606      	mov	r6, r0
 80080b8:	bb00      	cbnz	r0, 80080fc <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80080ba:	4b30      	ldr	r3, [pc, #192]	@ (800817c <HandleRadioRxErrorTimeout+0xe0>)
 80080bc:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d022      	beq.n	800810a <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 80080c4:	b9be      	cbnz	r6, 80080f6 <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80080c6:	4b2f      	ldr	r3, [pc, #188]	@ (8008184 <HandleRadioRxErrorTimeout+0xe8>)
 80080c8:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d13e      	bne.n	800814e <HandleRadioRxErrorTimeout+0xb2>
            if( MacCtx.NodeAckRequested == true )
 80080d0:	4b2c      	ldr	r3, [pc, #176]	@ (8008184 <HandleRadioRxErrorTimeout+0xe8>)
 80080d2:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 80080d6:	b113      	cbz	r3, 80080de <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80080d8:	4b2a      	ldr	r3, [pc, #168]	@ (8008184 <HandleRadioRxErrorTimeout+0xe8>)
 80080da:	f883 5439 	strb.w	r5, [r3, #1081]	@ 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80080de:	4628      	mov	r0, r5
 80080e0:	f002 fb16 	bl	800a710 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80080e4:	4b25      	ldr	r3, [pc, #148]	@ (800817c <HandleRadioRxErrorTimeout+0xe0>)
 80080e6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80080e8:	f008 fe76 	bl	8010dd8 <UTIL_TIMER_GetElapsedTime>
 80080ec:	4b25      	ldr	r3, [pc, #148]	@ (8008184 <HandleRadioRxErrorTimeout+0xe8>)
 80080ee:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 80080f2:	4298      	cmp	r0, r3
 80080f4:	d220      	bcs.n	8008138 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 80080f6:	f7fe ff01 	bl	8006efc <UpdateRxSlotIdleState>
}
 80080fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80080fc:	2002      	movs	r0, #2
 80080fe:	f002 f8aa 	bl	800a256 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008102:	2000      	movs	r0, #0
 8008104:	f002 f8ac 	bl	800a260 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8008108:	e7d7      	b.n	80080ba <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800810a:	f002 f8b0 	bl	800a26e <LoRaMacClassBIsPingExpected>
 800810e:	4607      	mov	r7, r0
 8008110:	b950      	cbnz	r0, 8008128 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008112:	f002 f8ae 	bl	800a272 <LoRaMacClassBIsMulticastExpected>
 8008116:	2800      	cmp	r0, #0
 8008118:	d0d4      	beq.n	80080c4 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800811a:	2000      	movs	r0, #0
 800811c:	f002 f89d 	bl	800a25a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008120:	2000      	movs	r0, #0
 8008122:	f002 f89f 	bl	800a264 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8008126:	e7e6      	b.n	80080f6 <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008128:	2000      	movs	r0, #0
 800812a:	f002 f895 	bl	800a258 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800812e:	2000      	movs	r0, #0
 8008130:	f002 f897 	bl	800a262 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8008134:	463e      	mov	r6, r7
 8008136:	e7ec      	b.n	8008112 <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8008138:	4c13      	ldr	r4, [pc, #76]	@ (8008188 <HandleRadioRxErrorTimeout+0xec>)
 800813a:	4620      	mov	r0, r4
 800813c:	f008 fe82 	bl	8010e44 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008140:	f894 30e9 	ldrb.w	r3, [r4, #233]	@ 0xe9
 8008144:	f043 0320 	orr.w	r3, r3, #32
 8008148:	f884 30e9 	strb.w	r3, [r4, #233]	@ 0xe9
 800814c:	e7d3      	b.n	80080f6 <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 800814e:	4b0d      	ldr	r3, [pc, #52]	@ (8008184 <HandleRadioRxErrorTimeout+0xe8>)
 8008150:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8008154:	b113      	cbz	r3, 800815c <HandleRadioRxErrorTimeout+0xc0>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008156:	4b0b      	ldr	r3, [pc, #44]	@ (8008184 <HandleRadioRxErrorTimeout+0xe8>)
 8008158:	f883 4439 	strb.w	r4, [r3, #1081]	@ 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800815c:	4620      	mov	r0, r4
 800815e:	f002 fad7 	bl	800a710 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008162:	4b06      	ldr	r3, [pc, #24]	@ (800817c <HandleRadioRxErrorTimeout+0xe0>)
 8008164:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8008168:	2b02      	cmp	r3, #2
 800816a:	d0c4      	beq.n	80080f6 <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800816c:	4a05      	ldr	r2, [pc, #20]	@ (8008184 <HandleRadioRxErrorTimeout+0xe8>)
 800816e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8008172:	f043 0320 	orr.w	r3, r3, #32
 8008176:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800817a:	e7bc      	b.n	80080f6 <HandleRadioRxErrorTimeout+0x5a>
 800817c:	20000780 	.word	0x20000780
 8008180:	08014918 	.word	0x08014918
 8008184:	20000d90 	.word	0x20000d90
 8008188:	20001128 	.word	0x20001128

0800818c <ProcessRadioRxError>:
{
 800818c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800818e:	2106      	movs	r1, #6
 8008190:	2005      	movs	r0, #5
 8008192:	f7ff ff83 	bl	800809c <HandleRadioRxErrorTimeout>
}
 8008196:	bd08      	pop	{r3, pc}

08008198 <ProcessRadioRxTimeout>:
{
 8008198:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800819a:	2104      	movs	r1, #4
 800819c:	2003      	movs	r0, #3
 800819e:	f7ff ff7d 	bl	800809c <HandleRadioRxErrorTimeout>
}
 80081a2:	bd08      	pop	{r3, pc}

080081a4 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80081a8:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 80081aa:	4a14      	ldr	r2, [pc, #80]	@ (80081fc <LoRaMacHandleIrqEvents+0x58>)
 80081ac:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 80081ae:	2000      	movs	r0, #0
 80081b0:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081b2:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 80081b6:	b303      	cbz	r3, 80081fa <LoRaMacHandleIrqEvents+0x56>
{
 80081b8:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 80081ba:	b2dc      	uxtb	r4, r3
 80081bc:	f013 0f10 	tst.w	r3, #16
 80081c0:	d10c      	bne.n	80081dc <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 80081c2:	f014 0f08 	tst.w	r4, #8
 80081c6:	d10c      	bne.n	80081e2 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 80081c8:	f014 0f04 	tst.w	r4, #4
 80081cc:	d10c      	bne.n	80081e8 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 80081ce:	f014 0f02 	tst.w	r4, #2
 80081d2:	d10c      	bne.n	80081ee <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 80081d4:	f014 0f01 	tst.w	r4, #1
 80081d8:	d10c      	bne.n	80081f4 <LoRaMacHandleIrqEvents+0x50>
}
 80081da:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 80081dc:	f7ff f83a 	bl	8007254 <ProcessRadioTxDone>
 80081e0:	e7ef      	b.n	80081c2 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 80081e2:	f7ff fc37 	bl	8007a54 <ProcessRadioRxDone>
 80081e6:	e7ef      	b.n	80081c8 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 80081e8:	f7ff ff18 	bl	800801c <ProcessRadioTxTimeout>
 80081ec:	e7ef      	b.n	80081ce <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 80081ee:	f7ff ffcd 	bl	800818c <ProcessRadioRxError>
 80081f2:	e7ef      	b.n	80081d4 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 80081f4:	f7ff ffd0 	bl	8008198 <ProcessRadioRxTimeout>
}
 80081f8:	e7ef      	b.n	80081da <LoRaMacHandleIrqEvents+0x36>
 80081fa:	4770      	bx	lr
 80081fc:	2000077c 	.word	0x2000077c

08008200 <LoRaMacHandleMlmeRequest>:
{
 8008200:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008202:	4b16      	ldr	r3, [pc, #88]	@ (800825c <LoRaMacHandleMlmeRequest+0x5c>)
 8008204:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8008208:	f013 0f04 	tst.w	r3, #4
 800820c:	d100      	bne.n	8008210 <LoRaMacHandleMlmeRequest+0x10>
}
 800820e:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008210:	2001      	movs	r0, #1
 8008212:	f002 fa9b 	bl	800a74c <LoRaMacConfirmQueueIsCmdActive>
 8008216:	b178      	cbz	r0, 8008238 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008218:	2001      	movs	r0, #1
 800821a:	f002 fa61 	bl	800a6e0 <LoRaMacConfirmQueueGetStatus>
 800821e:	b918      	cbnz	r0, 8008228 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8008220:	4b0e      	ldr	r3, [pc, #56]	@ (800825c <LoRaMacHandleMlmeRequest+0x5c>)
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008228:	4a0c      	ldr	r2, [pc, #48]	@ (800825c <LoRaMacHandleMlmeRequest+0x5c>)
 800822a:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 800822e:	f023 0302 	bic.w	r3, r3, #2
 8008232:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
 8008236:	e7ea      	b.n	800820e <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008238:	2005      	movs	r0, #5
 800823a:	f002 fa87 	bl	800a74c <LoRaMacConfirmQueueIsCmdActive>
 800823e:	b138      	cbz	r0, 8008250 <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008240:	4a06      	ldr	r2, [pc, #24]	@ (800825c <LoRaMacHandleMlmeRequest+0x5c>)
 8008242:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 8008246:	f023 0302 	bic.w	r3, r3, #2
 800824a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800824e:	e7de      	b.n	800820e <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8008250:	2006      	movs	r0, #6
 8008252:	f002 fa7b 	bl	800a74c <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008256:	2800      	cmp	r0, #0
 8008258:	d0d9      	beq.n	800820e <LoRaMacHandleMlmeRequest+0xe>
 800825a:	e7f1      	b.n	8008240 <LoRaMacHandleMlmeRequest+0x40>
 800825c:	20000d90 	.word	0x20000d90

08008260 <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 8008260:	4b14      	ldr	r3, [pc, #80]	@ (80082b4 <AckTimeoutRetriesFinalize+0x54>)
 8008262:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 8008266:	b12b      	cbz	r3, 8008274 <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008268:	4b12      	ldr	r3, [pc, #72]	@ (80082b4 <AckTimeoutRetriesFinalize+0x54>)
 800826a:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 800826e:	f883 243d 	strb.w	r2, [r3, #1085]	@ 0x43d
 8008272:	4770      	bx	lr
{
 8008274:	b500      	push	{lr}
 8008276:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8008278:	2302      	movs	r3, #2
 800827a:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800827e:	4b0e      	ldr	r3, [pc, #56]	@ (80082b8 <AckTimeoutRetriesFinalize+0x58>)
 8008280:	9301      	str	r3, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8008282:	f103 02a4 	add.w	r2, r3, #164	@ 0xa4
 8008286:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008288:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800828c:	a901      	add	r1, sp, #4
 800828e:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8008292:	f002 ffe6 	bl	800b262 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8008296:	4b07      	ldr	r3, [pc, #28]	@ (80082b4 <AckTimeoutRetriesFinalize+0x54>)
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800829e:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80082a2:	4b04      	ldr	r3, [pc, #16]	@ (80082b4 <AckTimeoutRetriesFinalize+0x54>)
 80082a4:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 80082a8:	f883 243d 	strb.w	r2, [r3, #1085]	@ 0x43d
}
 80082ac:	b005      	add	sp, #20
 80082ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80082b2:	bf00      	nop
 80082b4:	20000d90 	.word	0x20000d90
 80082b8:	20000958 	.word	0x20000958

080082bc <SerializeTxFrame>:
{
 80082bc:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 80082be:	4b0f      	ldr	r3, [pc, #60]	@ (80082fc <SerializeTxFrame+0x40>)
 80082c0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80082c4:	b11b      	cbz	r3, 80082ce <SerializeTxFrame+0x12>
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	d00a      	beq.n	80082e0 <SerializeTxFrame+0x24>
 80082ca:	2003      	movs	r0, #3
}
 80082cc:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80082ce:	480c      	ldr	r0, [pc, #48]	@ (8008300 <SerializeTxFrame+0x44>)
 80082d0:	f002 feed 	bl	800b0ae <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80082d4:	b968      	cbnz	r0, 80082f2 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80082d6:	4b09      	ldr	r3, [pc, #36]	@ (80082fc <SerializeTxFrame+0x40>)
 80082d8:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80082dc:	801a      	strh	r2, [r3, #0]
            break;
 80082de:	e7f5      	b.n	80082cc <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80082e0:	4807      	ldr	r0, [pc, #28]	@ (8008300 <SerializeTxFrame+0x44>)
 80082e2:	f002 ff1a 	bl	800b11a <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80082e6:	b930      	cbnz	r0, 80082f6 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80082e8:	4b04      	ldr	r3, [pc, #16]	@ (80082fc <SerializeTxFrame+0x40>)
 80082ea:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80082ee:	801a      	strh	r2, [r3, #0]
            break;
 80082f0:	e7ec      	b.n	80082cc <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80082f2:	2011      	movs	r0, #17
 80082f4:	e7ea      	b.n	80082cc <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80082f6:	2011      	movs	r0, #17
 80082f8:	e7e8      	b.n	80082cc <SerializeTxFrame+0x10>
 80082fa:	bf00      	nop
 80082fc:	20000d90 	.word	0x20000d90
 8008300:	20000e98 	.word	0x20000e98

08008304 <ComputeRxWindowParameters>:
{
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008308:	4c1c      	ldr	r4, [pc, #112]	@ (800837c <ComputeRxWindowParameters+0x78>)
 800830a:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800830e:	f994 3061 	ldrsb.w	r3, [r4, #97]	@ 0x61
 8008312:	f994 2039 	ldrsb.w	r2, [r4, #57]	@ 0x39
 8008316:	f894 1075 	ldrb.w	r1, [r4, #117]	@ 0x75
 800831a:	4630      	mov	r0, r6
 800831c:	f003 f89e 	bl	800b45c <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008320:	4d17      	ldr	r5, [pc, #92]	@ (8008380 <ComputeRxWindowParameters+0x7c>)
 8008322:	9500      	str	r5, [sp, #0]
 8008324:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008326:	f894 2048 	ldrb.w	r2, [r4, #72]	@ 0x48
 800832a:	b241      	sxtb	r1, r0
 800832c:	4630      	mov	r0, r6
 800832e:	f002 ffd3 	bl	800b2d8 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008332:	f105 0314 	add.w	r3, r5, #20
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800833a:	f894 2048 	ldrb.w	r2, [r4, #72]	@ 0x48
 800833e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8008342:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8008346:	f002 ffc7 	bl	800b2d8 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800834a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800834c:	68e8      	ldr	r0, [r5, #12]
 800834e:	4402      	add	r2, r0
 8008350:	f845 2c08 	str.w	r2, [r5, #-8]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008354:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008356:	6a29      	ldr	r1, [r5, #32]
 8008358:	440a      	add	r2, r1
 800835a:	f845 2c04 	str.w	r2, [r5, #-4]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800835e:	f894 3110 	ldrb.w	r3, [r4, #272]	@ 0x110
 8008362:	b94b      	cbnz	r3, 8008378 <ComputeRxWindowParameters+0x74>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008364:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008366:	4418      	add	r0, r3
 8008368:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 800836c:	f8c3 03b0 	str.w	r0, [r3, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008370:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8008372:	4411      	add	r1, r2
 8008374:	f8c3 13b4 	str.w	r1, [r3, #948]	@ 0x3b4
}
 8008378:	b002      	add	sp, #8
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	20000780 	.word	0x20000780
 8008380:	20001148 	.word	0x20001148

08008384 <VerifyTxFrame>:
{
 8008384:	b510      	push	{r4, lr}
 8008386:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800838c:	4b0d      	ldr	r3, [pc, #52]	@ (80083c4 <VerifyTxFrame+0x40>)
 800838e:	f893 4110 	ldrb.w	r4, [r3, #272]	@ 0x110
 8008392:	b914      	cbnz	r4, 800839a <VerifyTxFrame+0x16>
}
 8008394:	4620      	mov	r0, r4
 8008396:	b002      	add	sp, #8
 8008398:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800839a:	a801      	add	r0, sp, #4
 800839c:	f002 f886 	bl	800a4ac <LoRaMacCommandsGetSizeSerializedCmds>
 80083a0:	4604      	mov	r4, r0
 80083a2:	b968      	cbnz	r0, 80083c0 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80083a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80083a8:	4b06      	ldr	r3, [pc, #24]	@ (80083c4 <VerifyTxFrame+0x40>)
 80083aa:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 80083ae:	4b06      	ldr	r3, [pc, #24]	@ (80083c8 <VerifyTxFrame+0x44>)
 80083b0:	f893 0237 	ldrb.w	r0, [r3, #567]	@ 0x237
 80083b4:	f7fe ff40 	bl	8007238 <ValidatePayloadLength>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d1eb      	bne.n	8008394 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 80083bc:	2408      	movs	r4, #8
 80083be:	e7e9      	b.n	8008394 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80083c0:	2413      	movs	r4, #19
 80083c2:	e7e7      	b.n	8008394 <VerifyTxFrame+0x10>
 80083c4:	20000780 	.word	0x20000780
 80083c8:	20000d90 	.word	0x20000d90

080083cc <SecureFrame>:
{
 80083cc:	b530      	push	{r4, r5, lr}
 80083ce:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 80083d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008440 <SecureFrame+0x74>)
 80083d6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80083da:	b133      	cbz	r3, 80083ea <SecureFrame+0x1e>
 80083dc:	4605      	mov	r5, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d00b      	beq.n	80083fc <SecureFrame+0x30>
 80083e4:	2003      	movs	r0, #3
}
 80083e6:	b003      	add	sp, #12
 80083e8:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80083ea:	4816      	ldr	r0, [pc, #88]	@ (8008444 <SecureFrame+0x78>)
 80083ec:	f002 fc1e 	bl	800ac2c <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80083f0:	bb00      	cbnz	r0, 8008434 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80083f2:	4b13      	ldr	r3, [pc, #76]	@ (8008440 <SecureFrame+0x74>)
 80083f4:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80083f8:	801a      	strh	r2, [r3, #0]
            break;
 80083fa:	e7f4      	b.n	80083e6 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80083fc:	a801      	add	r0, sp, #4
 80083fe:	f002 fbb7 	bl	800ab70 <LoRaMacCryptoGetFCntUp>
 8008402:	b9c8      	cbnz	r0, 8008438 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008404:	4b0e      	ldr	r3, [pc, #56]	@ (8008440 <SecureFrame+0x74>)
 8008406:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800840a:	b923      	cbnz	r3, 8008416 <SecureFrame+0x4a>
 800840c:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <SecureFrame+0x74>)
 800840e:	f893 3412 	ldrb.w	r3, [r3, #1042]	@ 0x412
 8008412:	2b01      	cmp	r3, #1
 8008414:	d902      	bls.n	800841c <SecureFrame+0x50>
                fCntUp -= 1;
 8008416:	9b01      	ldr	r3, [sp, #4]
 8008418:	3b01      	subs	r3, #1
 800841a:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800841c:	4b09      	ldr	r3, [pc, #36]	@ (8008444 <SecureFrame+0x78>)
 800841e:	4622      	mov	r2, r4
 8008420:	4629      	mov	r1, r5
 8008422:	9801      	ldr	r0, [sp, #4]
 8008424:	f002 fc2e 	bl	800ac84 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008428:	b940      	cbnz	r0, 800843c <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800842a:	4b05      	ldr	r3, [pc, #20]	@ (8008440 <SecureFrame+0x74>)
 800842c:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 8008430:	801a      	strh	r2, [r3, #0]
            break;
 8008432:	e7d8      	b.n	80083e6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008434:	2011      	movs	r0, #17
 8008436:	e7d6      	b.n	80083e6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008438:	2012      	movs	r0, #18
 800843a:	e7d4      	b.n	80083e6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800843c:	2011      	movs	r0, #17
 800843e:	e7d2      	b.n	80083e6 <SecureFrame+0x1a>
 8008440:	20000d90 	.word	0x20000d90
 8008444:	20000e98 	.word	0x20000e98

08008448 <SendFrameOnChannel>:
{
 8008448:	b570      	push	{r4, r5, r6, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 8008454:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008458:	4d33      	ldr	r5, [pc, #204]	@ (8008528 <SendFrameOnChannel+0xe0>)
 800845a:	f995 3039 	ldrsb.w	r3, [r5, #57]	@ 0x39
 800845e:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008462:	f995 3038 	ldrsb.w	r3, [r5, #56]	@ 0x38
 8008466:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800846a:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800846c:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800846e:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8008470:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008472:	4c2e      	ldr	r4, [pc, #184]	@ (800852c <SendFrameOnChannel+0xe4>)
 8008474:	8823      	ldrh	r3, [r4, #0]
 8008476:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800847a:	f504 6383 	add.w	r3, r4, #1048	@ 0x418
 800847e:	f10d 0207 	add.w	r2, sp, #7
 8008482:	a902      	add	r1, sp, #8
 8008484:	f895 0040 	ldrb.w	r0, [r5, #64]	@ 0x40
 8008488:	f002 ff4a 	bl	800b320 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	f884 3439 	strb.w	r3, [r4, #1081]	@ 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008492:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 8008496:	f884 343a 	strb.w	r3, [r4, #1082]	@ 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800849a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800849e:	f884 343b 	strb.w	r3, [r4, #1083]	@ 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80084a2:	f8c4 6448 	str.w	r6, [r4, #1096]	@ 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80084a6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	@ 0x418
 80084aa:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80084ae:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80084b2:	f001 fee0 	bl	800a276 <LoRaMacClassBIsBeaconModeActive>
 80084b6:	bb58      	cbnz	r0, 8008510 <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80084b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008528 <SendFrameOnChannel+0xe0>)
 80084ba:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d02e      	beq.n	8008520 <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 80084c2:	f001 fedb 	bl	800a27c <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80084c6:	4b18      	ldr	r3, [pc, #96]	@ (8008528 <SendFrameOnChannel+0xe0>)
 80084c8:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 80084cc:	4b17      	ldr	r3, [pc, #92]	@ (800852c <SendFrameOnChannel+0xe4>)
 80084ce:	f893 1415 	ldrb.w	r1, [r3, #1045]	@ 0x415
 80084d2:	b2c0      	uxtb	r0, r0
 80084d4:	f7ff ff7a 	bl	80083cc <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 80084d8:	4604      	mov	r4, r0
 80084da:	b9b0      	cbnz	r0, 800850a <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80084dc:	4b13      	ldr	r3, [pc, #76]	@ (800852c <SendFrameOnChannel+0xe4>)
 80084de:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 80084e2:	f042 0202 	orr.w	r2, r2, #2
 80084e6:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
 80084ea:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 80084ee:	b92b      	cbnz	r3, 80084fc <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 80084f0:	4a0e      	ldr	r2, [pc, #56]	@ (800852c <SendFrameOnChannel+0xe4>)
 80084f2:	f892 3410 	ldrb.w	r3, [r2, #1040]	@ 0x410
 80084f6:	3301      	adds	r3, #1
 80084f8:	f882 3410 	strb.w	r3, [r2, #1040]	@ 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80084fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008530 <SendFrameOnChannel+0xe8>)
 80084fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008500:	480a      	ldr	r0, [pc, #40]	@ (800852c <SendFrameOnChannel+0xe4>)
 8008502:	f830 1b02 	ldrh.w	r1, [r0], #2
 8008506:	b2c9      	uxtb	r1, r1
 8008508:	4798      	blx	r3
}
 800850a:	4620      	mov	r0, r4
 800850c:	b006      	add	sp, #24
 800850e:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8008510:	f8d4 0418 	ldr.w	r0, [r4, #1048]	@ 0x418
 8008514:	f001 fec1 	bl	800a29a <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8008518:	2800      	cmp	r0, #0
 800851a:	d0cd      	beq.n	80084b8 <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800851c:	2410      	movs	r4, #16
 800851e:	e7f4      	b.n	800850a <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 8008520:	f001 febd 	bl	800a29e <LoRaMacClassBStopRxSlots>
 8008524:	e7cd      	b.n	80084c2 <SendFrameOnChannel+0x7a>
 8008526:	bf00      	nop
 8008528:	20000780 	.word	0x20000780
 800852c:	20000d90 	.word	0x20000d90
 8008530:	08014918 	.word	0x08014918

08008534 <ScheduleTx>:
{
 8008534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008538:	b08c      	sub	sp, #48	@ 0x30
 800853a:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800853c:	f7ff fd94 	bl	8008068 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 8008540:	4604      	mov	r4, r0
 8008542:	b118      	cbz	r0, 800854c <ScheduleTx+0x18>
}
 8008544:	4620      	mov	r0, r4
 8008546:	b00c      	add	sp, #48	@ 0x30
 8008548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800854c:	f7fe fd56 	bl	8006ffc <CalculateBackOff>
    status = SerializeTxFrame( );
 8008550:	f7ff feb4 	bl	80082bc <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8008554:	4604      	mov	r4, r0
 8008556:	2800      	cmp	r0, #0
 8008558:	d1f4      	bne.n	8008544 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800855a:	4e35      	ldr	r6, [pc, #212]	@ (8008630 <ScheduleTx+0xfc>)
 800855c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800855e:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008560:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 8008564:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8008568:	f896 3100 	ldrb.w	r3, [r6, #256]	@ 0x100
 800856c:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008570:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8008574:	4640      	mov	r0, r8
 8008576:	f008 fb99 	bl	8010cac <SysTimeGetMcuTime>
 800857a:	af02      	add	r7, sp, #8
 800857c:	f8d6 3108 	ldr.w	r3, [r6, #264]	@ 0x108
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	f8d6 3104 	ldr.w	r3, [r6, #260]	@ 0x104
 8008586:	e898 0006 	ldmia.w	r8, {r1, r2}
 800858a:	4638      	mov	r0, r7
 800858c:	f008 fb2b 	bl	8010be6 <SysTimeSub>
 8008590:	ab07      	add	r3, sp, #28
 8008592:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008596:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800859a:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 800859c:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800859e:	2300      	movs	r3, #0
 80085a0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    nextChan.Joined = true;
 80085a4:	2301      	movs	r3, #1
 80085a6:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80085aa:	4b22      	ldr	r3, [pc, #136]	@ (8008634 <ScheduleTx+0x100>)
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80085b2:	f896 3110 	ldrb.w	r3, [r6, #272]	@ 0x110
 80085b6:	b92b      	cbnz	r3, 80085c4 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 80085b8:	2301      	movs	r3, #1
 80085ba:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
        nextChan.Joined = false;
 80085be:	2300      	movs	r3, #0
 80085c0:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80085c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008638 <ScheduleTx+0x104>)
 80085c6:	481a      	ldr	r0, [pc, #104]	@ (8008630 <ScheduleTx+0xfc>)
 80085c8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80085cc:	9200      	str	r2, [sp, #0]
 80085ce:	f1a3 026f 	sub.w	r2, r3, #111	@ 0x6f
 80085d2:	a904      	add	r1, sp, #16
 80085d4:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80085d8:	f002 ff1d 	bl	800b416 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 80085dc:	b1b0      	cbz	r0, 800860c <ScheduleTx+0xd8>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80085de:	280b      	cmp	r0, #11
 80085e0:	d122      	bne.n	8008628 <ScheduleTx+0xf4>
 80085e2:	b31d      	cbz	r5, 800862c <ScheduleTx+0xf8>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80085e4:	4b13      	ldr	r3, [pc, #76]	@ (8008634 <ScheduleTx+0x100>)
 80085e6:	f8d3 1484 	ldr.w	r1, [r3, #1156]	@ 0x484
 80085ea:	2900      	cmp	r1, #0
 80085ec:	d0aa      	beq.n	8008544 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80085ee:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 80085f2:	f042 0220 	orr.w	r2, r2, #32
 80085f6:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80085fa:	f503 755a 	add.w	r5, r3, #872	@ 0x368
 80085fe:	4628      	mov	r0, r5
 8008600:	f008 fcc0 	bl	8010f84 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8008604:	4628      	mov	r0, r5
 8008606:	f008 fc77 	bl	8010ef8 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800860a:	e79b      	b.n	8008544 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800860c:	f7ff fe7a 	bl	8008304 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 8008610:	f7ff feb8 	bl	8008384 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8008614:	4604      	mov	r4, r0
 8008616:	2800      	cmp	r0, #0
 8008618:	d194      	bne.n	8008544 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800861a:	4b06      	ldr	r3, [pc, #24]	@ (8008634 <ScheduleTx+0x100>)
 800861c:	f893 0415 	ldrb.w	r0, [r3, #1045]	@ 0x415
 8008620:	f7ff ff12 	bl	8008448 <SendFrameOnChannel>
 8008624:	4604      	mov	r4, r0
 8008626:	e78d      	b.n	8008544 <ScheduleTx+0x10>
            return status;
 8008628:	4604      	mov	r4, r0
 800862a:	e78b      	b.n	8008544 <ScheduleTx+0x10>
 800862c:	4604      	mov	r4, r0
 800862e:	e789      	b.n	8008544 <ScheduleTx+0x10>
 8008630:	20000780 	.word	0x20000780
 8008634:	20000d90 	.word	0x20000d90
 8008638:	20001214 	.word	0x20001214

0800863c <OnTxDelayedTimerEvent>:
{
 800863c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800863e:	4c12      	ldr	r4, [pc, #72]	@ (8008688 <OnTxDelayedTimerEvent+0x4c>)
 8008640:	4620      	mov	r0, r4
 8008642:	f008 fbff 	bl	8010e44 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008646:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800864a:	f023 0320 	bic.w	r3, r3, #32
 800864e:	f844 3c28 	str.w	r3, [r4, #-40]
    switch( ScheduleTx( true ) )
 8008652:	2001      	movs	r0, #1
 8008654:	f7ff ff6e 	bl	8008534 <ScheduleTx>
 8008658:	b118      	cbz	r0, 8008662 <OnTxDelayedTimerEvent+0x26>
 800865a:	f5a4 745a 	sub.w	r4, r4, #872	@ 0x368
 800865e:	280b      	cmp	r0, #11
 8008660:	d100      	bne.n	8008664 <OnTxDelayedTimerEvent+0x28>
}
 8008662:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008664:	4b09      	ldr	r3, [pc, #36]	@ (800868c <OnTxDelayedTimerEvent+0x50>)
 8008666:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800866a:	f884 243a 	strb.w	r2, [r4, #1082]	@ 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800866e:	f894 2412 	ldrb.w	r2, [r4, #1042]	@ 0x412
 8008672:	f884 243d 	strb.w	r2, [r4, #1085]	@ 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008676:	2009      	movs	r0, #9
 8008678:	f884 0439 	strb.w	r0, [r4, #1081]	@ 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800867c:	f002 f848 	bl	800a710 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8008680:	f7fe fd4e 	bl	8007120 <StopRetransmission>
}
 8008684:	e7ed      	b.n	8008662 <OnTxDelayedTimerEvent+0x26>
 8008686:	bf00      	nop
 8008688:	200010f8 	.word	0x200010f8
 800868c:	20000780 	.word	0x20000780

08008690 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008690:	4b23      	ldr	r3, [pc, #140]	@ (8008720 <LoRaMacHandleMcpsRequest+0x90>)
 8008692:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8008696:	f013 0f01 	tst.w	r3, #1
 800869a:	d03f      	beq.n	800871c <LoRaMacHandleMcpsRequest+0x8c>
{
 800869c:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800869e:	4b20      	ldr	r3, [pc, #128]	@ (8008720 <LoRaMacHandleMcpsRequest+0x90>)
 80086a0:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 80086a4:	b12b      	cbz	r3, 80086b2 <LoRaMacHandleMcpsRequest+0x22>
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d003      	beq.n	80086b2 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d007      	beq.n	80086be <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 80086ae:	2400      	movs	r4, #0
 80086b0:	e003      	b.n	80086ba <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80086b2:	f7fe fcf9 	bl	80070a8 <CheckRetransUnconfirmedUplink>
 80086b6:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 80086b8:	b9a4      	cbnz	r4, 80086e4 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 80086ba:	b314      	cbz	r4, 8008702 <LoRaMacHandleMcpsRequest+0x72>
}
 80086bc:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 80086be:	4b18      	ldr	r3, [pc, #96]	@ (8008720 <LoRaMacHandleMcpsRequest+0x90>)
 80086c0:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 80086c4:	b1db      	cbz	r3, 80086fe <LoRaMacHandleMcpsRequest+0x6e>
                stopRetransmission = CheckRetransConfirmedUplink( );
 80086c6:	f7fe fd13 	bl	80070f0 <CheckRetransConfirmedUplink>
 80086ca:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80086cc:	4b15      	ldr	r3, [pc, #84]	@ (8008724 <LoRaMacHandleMcpsRequest+0x94>)
 80086ce:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1f0      	bne.n	80086b8 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 80086d6:	b910      	cbnz	r0, 80086de <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 80086d8:	f7fe fd62 	bl	80071a0 <AckTimeoutRetriesProcess>
 80086dc:	e7ec      	b.n	80086b8 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 80086de:	f7ff fdbf 	bl	8008260 <AckTimeoutRetriesFinalize>
 80086e2:	e7e9      	b.n	80086b8 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 80086e4:	4c10      	ldr	r4, [pc, #64]	@ (8008728 <LoRaMacHandleMcpsRequest+0x98>)
 80086e6:	4620      	mov	r0, r4
 80086e8:	f008 fbac 	bl	8010e44 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80086ec:	f854 3c28 	ldr.w	r3, [r4, #-40]
 80086f0:	f023 0320 	bic.w	r3, r3, #32
 80086f4:	f844 3c28 	str.w	r3, [r4, #-40]
            StopRetransmission( );
 80086f8:	f7fe fd12 	bl	8007120 <StopRetransmission>
 80086fc:	e7de      	b.n	80086bc <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 80086fe:	2401      	movs	r4, #1
 8008700:	e7db      	b.n	80086ba <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8008702:	4b07      	ldr	r3, [pc, #28]	@ (8008720 <LoRaMacHandleMcpsRequest+0x90>)
 8008704:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 8008708:	f36f 1245 	bfc	r2, #5, #1
 800870c:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
            MacCtx.AckTimeoutRetry = false;
 8008710:	2000      	movs	r0, #0
 8008712:	f883 0413 	strb.w	r0, [r3, #1043]	@ 0x413
            OnTxDelayedTimerEvent( NULL );
 8008716:	f7ff ff91 	bl	800863c <OnTxDelayedTimerEvent>
}
 800871a:	e7cf      	b.n	80086bc <LoRaMacHandleMcpsRequest+0x2c>
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20000d90 	.word	0x20000d90
 8008724:	20000780 	.word	0x20000780
 8008728:	200010f8 	.word	0x200010f8

0800872c <LoRaMacHandleRequestEvents>:
{
 800872c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800872e:	4b22      	ldr	r3, [pc, #136]	@ (80087b8 <LoRaMacHandleRequestEvents+0x8c>)
 8008730:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8008734:	bb7b      	cbnz	r3, 8008796 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008736:	4b20      	ldr	r3, [pc, #128]	@ (80087b8 <LoRaMacHandleRequestEvents+0x8c>)
 8008738:	f893 4481 	ldrb.w	r4, [r3, #1153]	@ 0x481
 800873c:	f014 0501 	ands.w	r5, r4, #1
 8008740:	d005      	beq.n	800874e <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8008742:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 8008746:	f36f 0200 	bfc	r2, #0, #1
 800874a:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800874e:	4b1a      	ldr	r3, [pc, #104]	@ (80087b8 <LoRaMacHandleRequestEvents+0x8c>)
 8008750:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8008754:	f013 0f04 	tst.w	r3, #4
 8008758:	d006      	beq.n	8008768 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800875a:	4b17      	ldr	r3, [pc, #92]	@ (80087b8 <LoRaMacHandleRequestEvents+0x8c>)
 800875c:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 8008760:	f36f 0282 	bfc	r2, #2, #1
 8008764:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8008768:	2001      	movs	r0, #1
 800876a:	f7fe fbdb 	bl	8006f24 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800876e:	b135      	cbz	r5, 800877e <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8008770:	4811      	ldr	r0, [pc, #68]	@ (80087b8 <LoRaMacHandleRequestEvents+0x8c>)
 8008772:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f500 6087 	add.w	r0, r0, #1080	@ 0x438
 800877c:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800877e:	f014 0f04 	tst.w	r4, #4
 8008782:	d109      	bne.n	8008798 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 8008784:	f001 fd7b 	bl	800a27e <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8008788:	4b0b      	ldr	r3, [pc, #44]	@ (80087b8 <LoRaMacHandleRequestEvents+0x8c>)
 800878a:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 800878e:	f36f 1245 	bfc	r2, #5, #1
 8008792:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
}
 8008796:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8008798:	4808      	ldr	r0, [pc, #32]	@ (80087bc <LoRaMacHandleRequestEvents+0x90>)
 800879a:	f001 ffe3 	bl	800a764 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800879e:	f002 f813 	bl	800a7c8 <LoRaMacConfirmQueueGetCnt>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d0ee      	beq.n	8008784 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80087a6:	4a04      	ldr	r2, [pc, #16]	@ (80087b8 <LoRaMacHandleRequestEvents+0x8c>)
 80087a8:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 80087ac:	f043 0304 	orr.w	r3, r3, #4
 80087b0:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 80087b4:	e7e6      	b.n	8008784 <LoRaMacHandleRequestEvents+0x58>
 80087b6:	bf00      	nop
 80087b8:	20000d90 	.word	0x20000d90
 80087bc:	200011dc 	.word	0x200011dc

080087c0 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 80087c0:	4b0a      	ldr	r3, [pc, #40]	@ (80087ec <LoRaMacHandleScheduleUplinkEvent+0x2c>)
 80087c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80087c6:	b103      	cbz	r3, 80087ca <LoRaMacHandleScheduleUplinkEvent+0xa>
 80087c8:	4770      	bx	lr
{
 80087ca:	b500      	push	{lr}
 80087cc:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 80087ce:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80087d2:	f10d 0007 	add.w	r0, sp, #7
 80087d6:	f001 fea7 	bl	800a528 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 80087da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80087de:	b913      	cbnz	r3, 80087e6 <LoRaMacHandleScheduleUplinkEvent+0x26>
}
 80087e0:	b003      	add	sp, #12
 80087e2:	f85d fb04 	ldr.w	pc, [sp], #4
            SetMlmeScheduleUplinkIndication( );
 80087e6:	f7fe fbff 	bl	8006fe8 <SetMlmeScheduleUplinkIndication>
}
 80087ea:	e7f9      	b.n	80087e0 <LoRaMacHandleScheduleUplinkEvent+0x20>
 80087ec:	20000d90 	.word	0x20000d90

080087f0 <LoRaMacHandleNvm>:
{
 80087f0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 80087f2:	4b30      	ldr	r3, [pc, #192]	@ (80088b4 <LoRaMacHandleNvm+0xc4>)
 80087f4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80087f8:	b103      	cbz	r3, 80087fc <LoRaMacHandleNvm+0xc>
}
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80087fe:	2124      	movs	r1, #36	@ 0x24
 8008800:	f005 fe64 	bl	800e4cc <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8008804:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008806:	4283      	cmp	r3, r0
 8008808:	d052      	beq.n	80088b0 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800880a:	6260      	str	r0, [r4, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800880c:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800880e:	2114      	movs	r1, #20
 8008810:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008814:	f005 fe5a 	bl	800e4cc <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8008818:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800881a:	4283      	cmp	r3, r0
 800881c:	d002      	beq.n	8008824 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800881e:	63e0      	str	r0, [r4, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8008820:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8008824:	21d4      	movs	r1, #212	@ 0xd4
 8008826:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 800882a:	f005 fe4f 	bl	800e4cc <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800882e:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 8008832:	4283      	cmp	r3, r0
 8008834:	d003      	beq.n	800883e <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 8008836:	f8c4 0114 	str.w	r0, [r4, #276]	@ 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800883a:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800883e:	21bc      	movs	r1, #188	@ 0xbc
 8008840:	f504 708c 	add.w	r0, r4, #280	@ 0x118
 8008844:	f005 fe42 	bl	800e4cc <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8008848:	f8d4 31d4 	ldr.w	r3, [r4, #468]	@ 0x1d4
 800884c:	4283      	cmp	r3, r0
 800884e:	d003      	beq.n	8008858 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8008850:	f8c4 01d4 	str.w	r0, [r4, #468]	@ 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8008854:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8008858:	21a0      	movs	r1, #160	@ 0xa0
 800885a:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 800885e:	f005 fe35 	bl	800e4cc <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8008862:	f8d4 3278 	ldr.w	r3, [r4, #632]	@ 0x278
 8008866:	4283      	cmp	r3, r0
 8008868:	d003      	beq.n	8008872 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800886a:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800886e:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8008872:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8008876:	f504 701f 	add.w	r0, r4, #636	@ 0x27c
 800887a:	f005 fe27 	bl	800e4cc <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800887e:	f8d4 35f4 	ldr.w	r3, [r4, #1524]	@ 0x5f4
 8008882:	4283      	cmp	r3, r0
 8008884:	d003      	beq.n	800888e <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 8008886:	f8c4 05f4 	str.w	r0, [r4, #1524]	@ 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800888a:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800888e:	2114      	movs	r1, #20
 8008890:	f504 60bf 	add.w	r0, r4, #1528	@ 0x5f8
 8008894:	f005 fe1a 	bl	800e4cc <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8008898:	f8d4 360c 	ldr.w	r3, [r4, #1548]	@ 0x60c
 800889c:	4283      	cmp	r3, r0
 800889e:	d003      	beq.n	80088a8 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 80088a0:	f8c4 060c 	str.w	r0, [r4, #1548]	@ 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80088a4:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
    CallNvmDataChangeCallback( notifyFlags );
 80088a8:	4628      	mov	r0, r5
 80088aa:	f7fe fc61 	bl	8007170 <CallNvmDataChangeCallback>
 80088ae:	e7a4      	b.n	80087fa <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80088b0:	2500      	movs	r5, #0
 80088b2:	e7ac      	b.n	800880e <LoRaMacHandleNvm+0x1e>
 80088b4:	20000d90 	.word	0x20000d90

080088b8 <RestoreNvmData>:
    if( nvm == NULL )
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d079      	beq.n	80089b0 <RestoreNvmData+0xf8>
{
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	4604      	mov	r4, r0
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80088c0:	4b3c      	ldr	r3, [pc, #240]	@ (80089b4 <RestoreNvmData+0xfc>)
 80088c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d001      	beq.n	80088ce <RestoreNvmData+0x16>
        return LORAMAC_STATUS_BUSY;
 80088ca:	2001      	movs	r0, #1
}
 80088cc:	bd70      	pop	{r4, r5, r6, pc}
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 80088ce:	2124      	movs	r1, #36	@ 0x24
 80088d0:	f005 fdfc 	bl	800e4cc <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 80088d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80088d6:	4283      	cmp	r3, r0
 80088d8:	d032      	beq.n	8008940 <RestoreNvmData+0x88>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 80088da:	f104 0528 	add.w	r5, r4, #40	@ 0x28
 80088de:	2114      	movs	r1, #20
 80088e0:	4628      	mov	r0, r5
 80088e2:	f005 fdf3 	bl	800e4cc <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 80088e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80088e8:	4283      	cmp	r3, r0
 80088ea:	d02f      	beq.n	800894c <RestoreNvmData+0x94>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80088ec:	f104 0540 	add.w	r5, r4, #64	@ 0x40
 80088f0:	21d4      	movs	r1, #212	@ 0xd4
 80088f2:	4628      	mov	r0, r5
 80088f4:	f005 fdea 	bl	800e4cc <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 80088f8:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 80088fc:	4283      	cmp	r3, r0
 80088fe:	d02b      	beq.n	8008958 <RestoreNvmData+0xa0>
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8008900:	f504 758c 	add.w	r5, r4, #280	@ 0x118
 8008904:	21bc      	movs	r1, #188	@ 0xbc
 8008906:	4628      	mov	r0, r5
 8008908:	f005 fde0 	bl	800e4cc <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 800890c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	@ 0x1d4
 8008910:	4283      	cmp	r3, r0
 8008912:	d03a      	beq.n	800898a <RestoreNvmData+0xd2>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8008914:	f504 75ec 	add.w	r5, r4, #472	@ 0x1d8
 8008918:	21a0      	movs	r1, #160	@ 0xa0
 800891a:	4628      	mov	r0, r5
 800891c:	f005 fdd6 	bl	800e4cc <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8008920:	f8d4 3278 	ldr.w	r3, [r4, #632]	@ 0x278
 8008924:	4283      	cmp	r3, r0
 8008926:	d036      	beq.n	8008996 <RestoreNvmData+0xde>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8008928:	f504 65bf 	add.w	r5, r4, #1528	@ 0x5f8
 800892c:	2114      	movs	r1, #20
 800892e:	4628      	mov	r0, r5
 8008930:	f005 fdcc 	bl	800e4cc <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 8008934:	f8d4 360c 	ldr.w	r3, [r4, #1548]	@ 0x60c
 8008938:	4283      	cmp	r3, r0
 800893a:	d032      	beq.n	80089a2 <RestoreNvmData+0xea>
    return LORAMAC_STATUS_OK;
 800893c:	2000      	movs	r0, #0
 800893e:	e7c5      	b.n	80088cc <RestoreNvmData+0x14>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8008940:	2228      	movs	r2, #40	@ 0x28
 8008942:	4621      	mov	r1, r4
 8008944:	481c      	ldr	r0, [pc, #112]	@ (80089b8 <RestoreNvmData+0x100>)
 8008946:	f005 fda0 	bl	800e48a <memcpy1>
 800894a:	e7c6      	b.n	80088da <RestoreNvmData+0x22>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800894c:	2218      	movs	r2, #24
 800894e:	4629      	mov	r1, r5
 8008950:	481a      	ldr	r0, [pc, #104]	@ (80089bc <RestoreNvmData+0x104>)
 8008952:	f005 fd9a 	bl	800e48a <memcpy1>
 8008956:	e7c9      	b.n	80088ec <RestoreNvmData+0x34>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8008958:	4e19      	ldr	r6, [pc, #100]	@ (80089c0 <RestoreNvmData+0x108>)
 800895a:	22d8      	movs	r2, #216	@ 0xd8
 800895c:	4629      	mov	r1, r5
 800895e:	4630      	mov	r0, r6
 8008960:	f005 fd93 	bl	800e48a <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8008964:	4b13      	ldr	r3, [pc, #76]	@ (80089b4 <RestoreNvmData+0xfc>)
 8008966:	f893 2415 	ldrb.w	r2, [r3, #1045]	@ 0x415
 800896a:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800896e:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8008970:	f8c3 23e4 	str.w	r2, [r3, #996]	@ 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008974:	f896 2035 	ldrb.w	r2, [r6, #53]	@ 0x35
 8008978:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 800897c:	2201      	movs	r2, #1
 800897e:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008982:	2202      	movs	r2, #2
 8008984:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
 8008988:	e7ba      	b.n	8008900 <RestoreNvmData+0x48>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800898a:	22c0      	movs	r2, #192	@ 0xc0
 800898c:	4629      	mov	r1, r5
 800898e:	480d      	ldr	r0, [pc, #52]	@ (80089c4 <RestoreNvmData+0x10c>)
 8008990:	f005 fd7b 	bl	800e48a <memcpy1>
 8008994:	e7be      	b.n	8008914 <RestoreNvmData+0x5c>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8008996:	22a4      	movs	r2, #164	@ 0xa4
 8008998:	4629      	mov	r1, r5
 800899a:	480b      	ldr	r0, [pc, #44]	@ (80089c8 <RestoreNvmData+0x110>)
 800899c:	f005 fd75 	bl	800e48a <memcpy1>
 80089a0:	e7c2      	b.n	8008928 <RestoreNvmData+0x70>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 80089a2:	2218      	movs	r2, #24
 80089a4:	4629      	mov	r1, r5
 80089a6:	4809      	ldr	r0, [pc, #36]	@ (80089cc <RestoreNvmData+0x114>)
 80089a8:	f005 fd6f 	bl	800e48a <memcpy1>
    return LORAMAC_STATUS_OK;
 80089ac:	2000      	movs	r0, #0
 80089ae:	e78d      	b.n	80088cc <RestoreNvmData+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80089b0:	2003      	movs	r0, #3
}
 80089b2:	4770      	bx	lr
 80089b4:	20000d90 	.word	0x20000d90
 80089b8:	20000780 	.word	0x20000780
 80089bc:	200007a8 	.word	0x200007a8
 80089c0:	200007c0 	.word	0x200007c0
 80089c4:	20000898 	.word	0x20000898
 80089c8:	20000958 	.word	0x20000958
 80089cc:	20000d78 	.word	0x20000d78

080089d0 <OpenContinuousRxCWindow>:
{
 80089d0:	b530      	push	{r4, r5, lr}
 80089d2:	b083      	sub	sp, #12
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80089d4:	4c11      	ldr	r4, [pc, #68]	@ (8008a1c <OpenContinuousRxCWindow+0x4c>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80089d6:	4d12      	ldr	r5, [pc, #72]	@ (8008a20 <OpenContinuousRxCWindow+0x50>)
 80089d8:	9500      	str	r5, [sp, #0]
 80089da:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80089dc:	f894 2048 	ldrb.w	r2, [r4, #72]	@ 0x48
 80089e0:	f994 1070 	ldrsb.w	r1, [r4, #112]	@ 0x70
 80089e4:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80089e8:	f002 fc76 	bl	800b2d8 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80089ec:	2302      	movs	r3, #2
 80089ee:	74eb      	strb	r3, [r5, #19]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80089f0:	2301      	movs	r3, #1
 80089f2:	74ab      	strb	r3, [r5, #18]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80089f4:	f105 0240 	add.w	r2, r5, #64	@ 0x40
 80089f8:	4629      	mov	r1, r5
 80089fa:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80089fe:	f002 fc7f 	bl	800b300 <RegionRxConfig>
 8008a02:	b148      	cbz	r0, 8008a18 <OpenContinuousRxCWindow+0x48>
        Radio.Rx( 0 ); // Continuous mode
 8008a04:	4b07      	ldr	r3, [pc, #28]	@ (8008a24 <OpenContinuousRxCWindow+0x54>)
 8008a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a08:	2000      	movs	r0, #0
 8008a0a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8008a0c:	f5a5 7378 	sub.w	r3, r5, #992	@ 0x3e0
 8008a10:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
 8008a14:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
}
 8008a18:	b003      	add	sp, #12
 8008a1a:	bd30      	pop	{r4, r5, pc}
 8008a1c:	20000780 	.word	0x20000780
 8008a20:	20001170 	.word	0x20001170
 8008a24:	08014918 	.word	0x08014918

08008a28 <RxWindowSetup>:
{
 8008a28:	b510      	push	{r4, lr}
 8008a2a:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8008a2c:	f008 fa0a 	bl	8010e44 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8008a30:	4b0a      	ldr	r3, [pc, #40]	@ (8008a5c <RxWindowSetup+0x34>)
 8008a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a34:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008a36:	4a0a      	ldr	r2, [pc, #40]	@ (8008a60 <RxWindowSetup+0x38>)
 8008a38:	4621      	mov	r1, r4
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a64 <RxWindowSetup+0x3c>)
 8008a3c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8008a40:	f002 fc5e 	bl	800b300 <RegionRxConfig>
 8008a44:	b140      	cbz	r0, 8008a58 <RxWindowSetup+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8008a46:	4b05      	ldr	r3, [pc, #20]	@ (8008a5c <RxWindowSetup+0x34>)
 8008a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a4a:	4a06      	ldr	r2, [pc, #24]	@ (8008a64 <RxWindowSetup+0x3c>)
 8008a4c:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8008a4e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8008a50:	7ce2      	ldrb	r2, [r4, #19]
 8008a52:	4b05      	ldr	r3, [pc, #20]	@ (8008a68 <RxWindowSetup+0x40>)
 8008a54:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
}
 8008a58:	bd10      	pop	{r4, pc}
 8008a5a:	bf00      	nop
 8008a5c:	08014918 	.word	0x08014918
 8008a60:	200011b0 	.word	0x200011b0
 8008a64:	20000780 	.word	0x20000780
 8008a68:	20000d90 	.word	0x20000d90

08008a6c <OnRxWindow2TimerEvent>:
{
 8008a6c:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008a6e:	4b11      	ldr	r3, [pc, #68]	@ (8008ab4 <OnRxWindow2TimerEvent+0x48>)
 8008a70:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 8008a74:	b903      	cbnz	r3, 8008a78 <OnRxWindow2TimerEvent+0xc>
}
 8008a76:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008a78:	480e      	ldr	r0, [pc, #56]	@ (8008ab4 <OnRxWindow2TimerEvent+0x48>)
 8008a7a:	f890 3415 	ldrb.w	r3, [r0, #1045]	@ 0x415
 8008a7e:	f880 33cc 	strb.w	r3, [r0, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8008a82:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab8 <OnRxWindow2TimerEvent+0x4c>)
 8008a84:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008a86:	f8c0 23d0 	str.w	r2, [r0, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008a8a:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8008a8e:	f880 23dc 	strb.w	r2, [r0, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008a92:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008a96:	f880 33dd 	strb.w	r3, [r0, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f880 33de 	strb.w	r3, [r0, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f880 33df 	strb.w	r3, [r0, #991]	@ 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8008aa6:	f500 7173 	add.w	r1, r0, #972	@ 0x3cc
 8008aaa:	f500 7066 	add.w	r0, r0, #920	@ 0x398
 8008aae:	f7ff ffbb 	bl	8008a28 <RxWindowSetup>
 8008ab2:	e7e0      	b.n	8008a76 <OnRxWindow2TimerEvent+0xa>
 8008ab4:	20000d90 	.word	0x20000d90
 8008ab8:	20000780 	.word	0x20000780

08008abc <OnRxWindow1TimerEvent>:
{
 8008abc:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8008abe:	480f      	ldr	r0, [pc, #60]	@ (8008afc <OnRxWindow1TimerEvent+0x40>)
 8008ac0:	f890 3415 	ldrb.w	r3, [r0, #1045]	@ 0x415
 8008ac4:	f880 33b8 	strb.w	r3, [r0, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8008ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8008b00 <OnRxWindow1TimerEvent+0x44>)
 8008aca:	f993 2061 	ldrsb.w	r2, [r3, #97]	@ 0x61
 8008ace:	f880 23bb 	strb.w	r2, [r0, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008ad2:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8008ad6:	f880 23c8 	strb.w	r2, [r0, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008ada:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008ade:	f880 33c9 	strb.w	r3, [r0, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f880 33ca 	strb.w	r3, [r0, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8008ae8:	f880 33cb 	strb.w	r3, [r0, #971]	@ 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8008aec:	f500 716e 	add.w	r1, r0, #952	@ 0x3b8
 8008af0:	f500 7060 	add.w	r0, r0, #896	@ 0x380
 8008af4:	f7ff ff98 	bl	8008a28 <RxWindowSetup>
}
 8008af8:	bd08      	pop	{r3, pc}
 8008afa:	bf00      	nop
 8008afc:	20000d90 	.word	0x20000d90
 8008b00:	20000780 	.word	0x20000780

08008b04 <OnRadioRxTimeout>:
{
 8008b04:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008b06:	4a09      	ldr	r2, [pc, #36]	@ (8008b2c <OnRadioRxTimeout+0x28>)
 8008b08:	7813      	ldrb	r3, [r2, #0]
 8008b0a:	f043 0301 	orr.w	r3, r3, #1
 8008b0e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008b10:	4b07      	ldr	r3, [pc, #28]	@ (8008b30 <OnRadioRxTimeout+0x2c>)
 8008b12:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8008b16:	b113      	cbz	r3, 8008b1e <OnRadioRxTimeout+0x1a>
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	b103      	cbz	r3, 8008b1e <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008b1c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8008b1e:	4b05      	ldr	r3, [pc, #20]	@ (8008b34 <OnRadioRxTimeout+0x30>)
 8008b20:	2201      	movs	r2, #1
 8008b22:	2100      	movs	r1, #0
 8008b24:	2002      	movs	r0, #2
 8008b26:	f007 fe49 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 8008b2a:	bd08      	pop	{r3, pc}
 8008b2c:	2000077c 	.word	0x2000077c
 8008b30:	20000d90 	.word	0x20000d90
 8008b34:	080142a0 	.word	0x080142a0

08008b38 <OnRadioTxTimeout>:
{
 8008b38:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8008b3a:	4a09      	ldr	r2, [pc, #36]	@ (8008b60 <OnRadioTxTimeout+0x28>)
 8008b3c:	7813      	ldrb	r3, [r2, #0]
 8008b3e:	f043 0304 	orr.w	r3, r3, #4
 8008b42:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008b44:	4b07      	ldr	r3, [pc, #28]	@ (8008b64 <OnRadioTxTimeout+0x2c>)
 8008b46:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8008b4a:	b113      	cbz	r3, 8008b52 <OnRadioTxTimeout+0x1a>
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	b103      	cbz	r3, 8008b52 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008b50:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8008b52:	4b05      	ldr	r3, [pc, #20]	@ (8008b68 <OnRadioTxTimeout+0x30>)
 8008b54:	2201      	movs	r2, #1
 8008b56:	2100      	movs	r1, #0
 8008b58:	2002      	movs	r0, #2
 8008b5a:	f007 fe2f 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 8008b5e:	bd08      	pop	{r3, pc}
 8008b60:	2000077c 	.word	0x2000077c
 8008b64:	20000d90 	.word	0x20000d90
 8008b68:	080142b0 	.word	0x080142b0

08008b6c <OnRadioRxDone>:
{
 8008b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b70:	4680      	mov	r8, r0
 8008b72:	460f      	mov	r7, r1
 8008b74:	4616      	mov	r6, r2
 8008b76:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8008b78:	f008 f924 	bl	8010dc4 <UTIL_TIMER_GetCurrentTime>
 8008b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8008bb4 <OnRadioRxDone+0x48>)
 8008b7e:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8008b80:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8008b84:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8008b86:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8008b88:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8008b8a:	4a0b      	ldr	r2, [pc, #44]	@ (8008bb8 <OnRadioRxDone+0x4c>)
 8008b8c:	7813      	ldrb	r3, [r2, #0]
 8008b8e:	f043 0308 	orr.w	r3, r3, #8
 8008b92:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008b94:	4b09      	ldr	r3, [pc, #36]	@ (8008bbc <OnRadioRxDone+0x50>)
 8008b96:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8008b9a:	b113      	cbz	r3, 8008ba2 <OnRadioRxDone+0x36>
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	b103      	cbz	r3, 8008ba2 <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008ba0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8008ba2:	4b07      	ldr	r3, [pc, #28]	@ (8008bc0 <OnRadioRxDone+0x54>)
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	2002      	movs	r0, #2
 8008baa:	f007 fe07 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 8008bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000768 	.word	0x20000768
 8008bb8:	2000077c 	.word	0x2000077c
 8008bbc:	20000d90 	.word	0x20000d90
 8008bc0:	080142c0 	.word	0x080142c0

08008bc4 <OnRadioTxDone>:
{
 8008bc4:	b530      	push	{r4, r5, lr}
 8008bc6:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008bc8:	f008 f8fc 	bl	8010dc4 <UTIL_TIMER_GetCurrentTime>
 8008bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8008c0c <OnRadioTxDone+0x48>)
 8008bce:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008bd0:	4d0f      	ldr	r5, [pc, #60]	@ (8008c10 <OnRadioTxDone+0x4c>)
 8008bd2:	466c      	mov	r4, sp
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f008 f847 	bl	8010c68 <SysTimeGet>
 8008bda:	f505 734e 	add.w	r3, r5, #824	@ 0x338
 8008bde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008be2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8008be6:	4a0b      	ldr	r2, [pc, #44]	@ (8008c14 <OnRadioTxDone+0x50>)
 8008be8:	7813      	ldrb	r3, [r2, #0]
 8008bea:	f043 0310 	orr.w	r3, r3, #16
 8008bee:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008bf0:	f8d5 3348 	ldr.w	r3, [r5, #840]	@ 0x348
 8008bf4:	b113      	cbz	r3, 8008bfc <OnRadioTxDone+0x38>
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	b103      	cbz	r3, 8008bfc <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008bfa:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8008bfc:	4b06      	ldr	r3, [pc, #24]	@ (8008c18 <OnRadioTxDone+0x54>)
 8008bfe:	2201      	movs	r2, #1
 8008c00:	2100      	movs	r1, #0
 8008c02:	2002      	movs	r0, #2
 8008c04:	f007 fdda 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 8008c08:	b003      	add	sp, #12
 8008c0a:	bd30      	pop	{r4, r5, pc}
 8008c0c:	20000778 	.word	0x20000778
 8008c10:	20000d90 	.word	0x20000d90
 8008c14:	2000077c 	.word	0x2000077c
 8008c18:	080142d0 	.word	0x080142d0

08008c1c <ResetMacParameters>:
{
 8008c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c1e:	b08f      	sub	sp, #60	@ 0x3c
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8008c20:	4c4a      	ldr	r4, [pc, #296]	@ (8008d4c <ResetMacParameters+0x130>)
 8008c22:	2600      	movs	r6, #0
 8008c24:	f884 6110 	strb.w	r6, [r4, #272]	@ 0x110
    Nvm.MacGroup1.AdrAckCounter = 0;
 8008c28:	62a6      	str	r6, [r4, #40]	@ 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8008c2a:	4d49      	ldr	r5, [pc, #292]	@ (8008d50 <ResetMacParameters+0x134>)
 8008c2c:	f885 6410 	strb.w	r6, [r5, #1040]	@ 0x410
    MacCtx.AckTimeoutRetries = 1;
 8008c30:	2701      	movs	r7, #1
 8008c32:	f885 7411 	strb.w	r7, [r5, #1041]	@ 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8008c36:	f885 7412 	strb.w	r7, [r5, #1042]	@ 0x412
    MacCtx.AckTimeoutRetry = false;
 8008c3a:	f885 6413 	strb.w	r6, [r5, #1043]	@ 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 8008c3e:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8008c42:	f8a4 7102 	strh.w	r7, [r4, #258]	@ 0x102
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8008c46:	f994 30c4 	ldrsb.w	r3, [r4, #196]	@ 0xc4
 8008c4a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8008c4e:	f994 30c5 	ldrsb.w	r3, [r4, #197]	@ 0xc5
 8008c52:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8008c56:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 8008c5a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8008c5e:	f104 0364 	add.w	r3, r4, #100	@ 0x64
 8008c62:	f104 02a4 	add.w	r2, r4, #164	@ 0xa4
 8008c66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c6a:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8008c6e:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 8008c72:	f104 02ac 	add.w	r2, r4, #172	@ 0xac
 8008c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c7a:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8008c7e:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 8008c82:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8008c86:	f894 30b5 	ldrb.w	r3, [r4, #181]	@ 0xb5
 8008c8a:	f884 3075 	strb.w	r3, [r4, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8008c8e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8008c92:	67a3      	str	r3, [r4, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8008c94:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8008c98:	67e3      	str	r3, [r4, #124]	@ 0x7c
    MacCtx.NodeAckRequested = false;
 8008c9a:	f885 6414 	strb.w	r6, [r5, #1044]	@ 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8008c9e:	f884 603a 	strb.w	r6, [r4, #58]	@ 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8008ca2:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8008ca6:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 8008caa:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8008cac:	f504 731f 	add.w	r3, r4, #636	@ 0x27c
 8008cb0:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008cb2:	a901      	add	r1, sp, #4
 8008cb4:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8008cb8:	f002 fad3 	bl	800b262 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8008cbc:	f885 6415 	strb.w	r6, [r5, #1045]	@ 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008cc0:	f885 63cc 	strb.w	r6, [r5, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8008cc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cc6:	f8c5 33d0 	str.w	r3, [r5, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008cca:	f894 3075 	ldrb.w	r3, [r4, #117]	@ 0x75
 8008cce:	f885 33dc 	strb.w	r3, [r5, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008cd2:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 8008cd6:	f885 33dd 	strb.w	r3, [r5, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008cda:	f885 63de 	strb.w	r6, [r5, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8008cde:	f885 73df 	strb.w	r7, [r5, #991]	@ 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008ce2:	f505 7478 	add.w	r4, r5, #992	@ 0x3e0
 8008ce6:	f505 7c73 	add.w	ip, r5, #972	@ 0x3cc
 8008cea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cf0:	f8dc 3000 	ldr.w	r3, [ip]
 8008cf4:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8008cf6:	f885 73f2 	strb.w	r7, [r5, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	f885 33f3 	strb.w	r3, [r5, #1011]	@ 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 8008d00:	960c      	str	r6, [sp, #48]	@ 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8008d02:	960d      	str	r6, [sp, #52]	@ 0x34
    if( MacCtx.MacCallbacks != NULL )
 8008d04:	f8d5 3348 	ldr.w	r3, [r5, #840]	@ 0x348
 8008d08:	b11b      	cbz	r3, 8008d12 <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	920c      	str	r2, [sp, #48]	@ 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	930d      	str	r3, [sp, #52]	@ 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8008d12:	4b10      	ldr	r3, [pc, #64]	@ (8008d54 <ResetMacParameters+0x138>)
 8008d14:	9304      	str	r3, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8008d16:	f1a3 0244 	sub.w	r2, r3, #68	@ 0x44
 8008d1a:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8008d1c:	f1a3 0214 	sub.w	r2, r3, #20
 8008d20:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8008d22:	3321      	adds	r3, #33	@ 0x21
 8008d24:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8008d26:	4a0c      	ldr	r2, [pc, #48]	@ (8008d58 <ResetMacParameters+0x13c>)
 8008d28:	9208      	str	r2, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8008d2a:	f1a2 038c 	sub.w	r3, r2, #140	@ 0x8c
 8008d2e:	9309      	str	r3, [sp, #36]	@ 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8008d30:	f1a2 0388 	sub.w	r3, r2, #136	@ 0x88
 8008d34:	930a      	str	r3, [sp, #40]	@ 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8008d36:	1d13      	adds	r3, r2, #4
 8008d38:	930b      	str	r3, [sp, #44]	@ 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8008d3a:	f202 522c 	addw	r2, r2, #1324	@ 0x52c
 8008d3e:	a90c      	add	r1, sp, #48	@ 0x30
 8008d40:	a804      	add	r0, sp, #16
 8008d42:	f001 fa87 	bl	800a254 <LoRaMacClassBInit>
}
 8008d46:	b00f      	add	sp, #60	@ 0x3c
 8008d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000780 	.word	0x20000780
 8008d50:	20000d90 	.word	0x20000d90
 8008d54:	200011f0 	.word	0x200011f0
 8008d58:	2000084c 	.word	0x2000084c

08008d5c <SwitchClass>:
{
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8008d60:	4b3d      	ldr	r3, [pc, #244]	@ (8008e58 <SwitchClass+0xfc>)
 8008d62:	f893 50fc 	ldrb.w	r5, [r3, #252]	@ 0xfc
 8008d66:	2d01      	cmp	r5, #1
 8008d68:	d063      	beq.n	8008e32 <SwitchClass+0xd6>
 8008d6a:	2d02      	cmp	r5, #2
 8008d6c:	d069      	beq.n	8008e42 <SwitchClass+0xe6>
 8008d6e:	b10d      	cbz	r5, 8008d74 <SwitchClass+0x18>
 8008d70:	2003      	movs	r0, #3
}
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 8008d74:	b930      	cbnz	r0, 8008d84 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8008d76:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8008d7a:	3364      	adds	r3, #100	@ 0x64
 8008d7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d80:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 8008d84:	2c01      	cmp	r4, #1
 8008d86:	d021      	beq.n	8008dcc <SwitchClass+0x70>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008d88:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 8008d8a:	2c02      	cmp	r4, #2
 8008d8c:	d1f1      	bne.n	8008d72 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008d8e:	4b32      	ldr	r3, [pc, #200]	@ (8008e58 <SwitchClass+0xfc>)
 8008d90:	f883 40fc 	strb.w	r4, [r3, #252]	@ 0xfc
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008d94:	4e31      	ldr	r6, [pc, #196]	@ (8008e5c <SwitchClass+0x100>)
 8008d96:	f506 7478 	add.w	r4, r6, #992	@ 0x3e0
 8008d9a:	f506 7c73 	add.w	ip, r6, #972	@ 0x3cc
 8008d9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008da4:	f8dc 3000 	ldr.w	r3, [ip]
 8008da8:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008daa:	2302      	movs	r3, #2
 8008dac:	f886 33f3 	strb.w	r3, [r6, #1011]	@ 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008db0:	2300      	movs	r3, #0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	dd13      	ble.n	8008dde <SwitchClass+0x82>
                MacCtx.NodeAckRequested = false;
 8008db6:	4b29      	ldr	r3, [pc, #164]	@ (8008e5c <SwitchClass+0x100>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
                Radio.Sleep( );
 8008dbe:	4b28      	ldr	r3, [pc, #160]	@ (8008e60 <SwitchClass+0x104>)
 8008dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc2:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8008dc4:	f7ff fe04 	bl	80089d0 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8008dc8:	4628      	mov	r0, r5
 8008dca:	e7d2      	b.n	8008d72 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f001 fa57 	bl	800a280 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d1d9      	bne.n	8008d8a <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8008dd6:	4b20      	ldr	r3, [pc, #128]	@ (8008e58 <SwitchClass+0xfc>)
 8008dd8:	f883 40fc 	strb.w	r4, [r3, #252]	@ 0xfc
 8008ddc:	e7d5      	b.n	8008d8a <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8008dde:	4a1e      	ldr	r2, [pc, #120]	@ (8008e58 <SwitchClass+0xfc>)
 8008de0:	212c      	movs	r1, #44	@ 0x2c
 8008de2:	fb01 2203 	mla	r2, r1, r3, r2
 8008de6:	f892 20d2 	ldrb.w	r2, [r2, #210]	@ 0xd2
 8008dea:	b912      	cbnz	r2, 8008df2 <SwitchClass+0x96>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008dec:	3301      	adds	r3, #1
 8008dee:	b25b      	sxtb	r3, r3
 8008df0:	e7df      	b.n	8008db2 <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8008df2:	4a19      	ldr	r2, [pc, #100]	@ (8008e58 <SwitchClass+0xfc>)
 8008df4:	fb01 2303 	mla	r3, r1, r3, r2
 8008df8:	f8d3 10e8 	ldr.w	r1, [r3, #232]	@ 0xe8
 8008dfc:	66d1      	str	r1, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8008dfe:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8008e02:	f882 3070 	strb.w	r3, [r2, #112]	@ 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8008e06:	4b15      	ldr	r3, [pc, #84]	@ (8008e5c <SwitchClass+0x100>)
 8008e08:	f893 0415 	ldrb.w	r0, [r3, #1045]	@ 0x415
 8008e0c:	f883 03e0 	strb.w	r0, [r3, #992]	@ 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8008e10:	f8c3 13e4 	str.w	r1, [r3, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008e14:	f892 1075 	ldrb.w	r1, [r2, #117]	@ 0x75
 8008e18:	f883 13f0 	strb.w	r1, [r3, #1008]	@ 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008e1c:	f892 2080 	ldrb.w	r2, [r2, #128]	@ 0x80
 8008e20:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008e24:	2203      	movs	r2, #3
 8008e26:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
                        break;
 8008e30:	e7c1      	b.n	8008db6 <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8008e32:	f001 fa25 	bl	800a280 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d19b      	bne.n	8008d72 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008e3a:	4b07      	ldr	r3, [pc, #28]	@ (8008e58 <SwitchClass+0xfc>)
 8008e3c:	f883 40fc 	strb.w	r4, [r3, #252]	@ 0xfc
 8008e40:	e797      	b.n	8008d72 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8008e42:	b938      	cbnz	r0, 8008e54 <SwitchClass+0xf8>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008e44:	4b04      	ldr	r3, [pc, #16]	@ (8008e58 <SwitchClass+0xfc>)
 8008e46:	f883 00fc 	strb.w	r0, [r3, #252]	@ 0xfc
                Radio.Sleep( );
 8008e4a:	4b05      	ldr	r3, [pc, #20]	@ (8008e60 <SwitchClass+0x104>)
 8008e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4e:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8008e50:	4620      	mov	r0, r4
 8008e52:	e78e      	b.n	8008d72 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008e54:	2003      	movs	r0, #3
 8008e56:	e78c      	b.n	8008d72 <SwitchClass+0x16>
 8008e58:	20000780 	.word	0x20000780
 8008e5c:	20000d90 	.word	0x20000d90
 8008e60:	08014918 	.word	0x08014918

08008e64 <SendReJoinReq>:
{
 8008e64:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 8008e66:	28ff      	cmp	r0, #255	@ 0xff
 8008e68:	d003      	beq.n	8008e72 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8008e6a:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8008e6c:	f7ff fb62 	bl	8008534 <ScheduleTx>
}
 8008e70:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 8008e72:	2000      	movs	r0, #0
 8008e74:	f7ff ff72 	bl	8008d5c <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008e78:	4d0e      	ldr	r5, [pc, #56]	@ (8008eb4 <SendReJoinReq+0x50>)
 8008e7a:	2400      	movs	r4, #0
 8008e7c:	f885 4104 	strb.w	r4, [r5, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8008e80:	1cab      	adds	r3, r5, #2
 8008e82:	f8c5 3108 	str.w	r3, [r5, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008e86:	23ff      	movs	r3, #255	@ 0xff
 8008e88:	f885 310c 	strb.w	r3, [r5, #268]	@ 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8008e8c:	f885 410d 	strb.w	r4, [r5, #269]	@ 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8008e90:	f005 faca 	bl	800e428 <SecureElementGetJoinEui>
 8008e94:	4601      	mov	r1, r0
 8008e96:	2208      	movs	r2, #8
 8008e98:	f505 7087 	add.w	r0, r5, #270	@ 0x10e
 8008e9c:	f005 faf5 	bl	800e48a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8008ea0:	f005 faac 	bl	800e3fc <SecureElementGetDevEui>
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	f505 708b 	add.w	r0, r5, #278	@ 0x116
 8008eac:	f005 faed 	bl	800e48a <memcpy1>
            allowDelayedTx = false;
 8008eb0:	4620      	mov	r0, r4
            break;
 8008eb2:	e7db      	b.n	8008e6c <SendReJoinReq+0x8>
 8008eb4:	20000d90 	.word	0x20000d90

08008eb8 <SetTxContinuousWave>:
{
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 8008ebc:	4c10      	ldr	r4, [pc, #64]	@ (8008f00 <SetTxContinuousWave+0x48>)
 8008ebe:	f894 3415 	ldrb.w	r3, [r4, #1045]	@ 0x415
 8008ec2:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f04 <SetTxContinuousWave+0x4c>)
 8008ec8:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8008ecc:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008ed0:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8008ed4:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8008ed8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008eda:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8008edc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008ede:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 8008ee0:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8008ee4:	4669      	mov	r1, sp
 8008ee6:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8008eea:	f002 faa9 	bl	800b440 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008eee:	f8d4 3340 	ldr.w	r3, [r4, #832]	@ 0x340
 8008ef2:	f043 0302 	orr.w	r3, r3, #2
 8008ef6:	f8c4 3340 	str.w	r3, [r4, #832]	@ 0x340
}
 8008efa:	2000      	movs	r0, #0
 8008efc:	b004      	add	sp, #16
 8008efe:	bd10      	pop	{r4, pc}
 8008f00:	20000d90 	.word	0x20000d90
 8008f04:	20000780 	.word	0x20000780

08008f08 <PrepareFrame>:
{
 8008f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	4605      	mov	r5, r0
 8008f10:	460e      	mov	r6, r1
 8008f12:	4617      	mov	r7, r2
 8008f14:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
    MacCtx.PktBufferLen = 0;
 8008f18:	495a      	ldr	r1, [pc, #360]	@ (8009084 <PrepareFrame+0x17c>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8008f1e:	f881 2414 	strb.w	r2, [r1, #1044]	@ 0x414
    uint32_t fCntUp = 0;
 8008f22:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8008f24:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8008f26:	4699      	mov	r9, r3
 8008f28:	b1cb      	cbz	r3, 8008f5e <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8008f2a:	4c57      	ldr	r4, [pc, #348]	@ (8009088 <PrepareFrame+0x180>)
 8008f2c:	4642      	mov	r2, r8
 8008f2e:	4649      	mov	r1, r9
 8008f30:	4620      	mov	r0, r4
 8008f32:	f005 faaa 	bl	800e48a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8008f36:	fa5f f088 	uxtb.w	r0, r8
 8008f3a:	f884 00ff 	strb.w	r0, [r4, #255]	@ 0xff
 8008f3e:	f5a4 749c 	sub.w	r4, r4, #312	@ 0x138
    MacCtx.PktBuffer[0] = macHdr->Value;
 8008f42:	782b      	ldrb	r3, [r5, #0]
 8008f44:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 8008f46:	782b      	ldrb	r3, [r5, #0]
 8008f48:	095b      	lsrs	r3, r3, #5
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d009      	beq.n	8008f62 <PrepareFrame+0x5a>
 8008f4e:	2b07      	cmp	r3, #7
 8008f50:	d079      	beq.n	8009046 <PrepareFrame+0x13e>
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d009      	beq.n	8008f6a <PrepareFrame+0x62>
 8008f56:	2002      	movs	r0, #2
}
 8008f58:	b003      	add	sp, #12
 8008f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8008f5e:	4690      	mov	r8, r2
 8008f60:	e7e3      	b.n	8008f2a <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8008f62:	4b48      	ldr	r3, [pc, #288]	@ (8009084 <PrepareFrame+0x17c>)
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8008f6a:	4b46      	ldr	r3, [pc, #280]	@ (8009084 <PrepareFrame+0x17c>)
 8008f6c:	2204      	movs	r2, #4
 8008f6e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8008f72:	1c9a      	adds	r2, r3, #2
 8008f74:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008f78:	22ff      	movs	r2, #255	@ 0xff
 8008f7a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8008f7e:	782a      	ldrb	r2, [r5, #0]
 8008f80:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8008f84:	f883 7128 	strb.w	r7, [r3, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8008f88:	4a40      	ldr	r2, [pc, #256]	@ (800908c <PrepareFrame+0x184>)
 8008f8a:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8008f8e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8008f92:	7832      	ldrb	r2, [r6, #0]
 8008f94:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8008f98:	f883 0130 	strb.w	r0, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8008f9c:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 8008fa0:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008fa4:	a801      	add	r0, sp, #4
 8008fa6:	f001 fde3 	bl	800ab70 <LoRaMacCryptoGetFCntUp>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d15e      	bne.n	800906c <PrepareFrame+0x164>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8008fae:	9a01      	ldr	r2, [sp, #4]
 8008fb0:	4b34      	ldr	r3, [pc, #208]	@ (8009084 <PrepareFrame+0x17c>)
 8008fb2:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	f883 143d 	strb.w	r1, [r3, #1085]	@ 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8008fbc:	f883 143c 	strb.w	r1, [r3, #1084]	@ 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8008fc0:	f8c3 2444 	str.w	r2, [r3, #1092]	@ 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008fc4:	4668      	mov	r0, sp
 8008fc6:	f001 fa71 	bl	800a4ac <LoRaMacCommandsGetSizeSerializedCmds>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d150      	bne.n	8009070 <PrepareFrame+0x168>
            if( macCmdsSize > 0 )
 8008fce:	9b00      	ldr	r3, [sp, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0c1      	beq.n	8008f58 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8008fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800908c <PrepareFrame+0x184>)
 8008fd6:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 8008fda:	f7fe f90d 	bl	80071f8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8008fde:	4b29      	ldr	r3, [pc, #164]	@ (8009084 <PrepareFrame+0x17c>)
 8008fe0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8008fe4:	b113      	cbz	r3, 8008fec <PrepareFrame+0xe4>
 8008fe6:	9a00      	ldr	r2, [sp, #0]
 8008fe8:	2a0f      	cmp	r2, #15
 8008fea:	d915      	bls.n	8009018 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8008fec:	b113      	cbz	r3, 8008ff4 <PrepareFrame+0xec>
 8008fee:	9b00      	ldr	r3, [sp, #0]
 8008ff0:	2b0f      	cmp	r3, #15
 8008ff2:	d821      	bhi.n	8009038 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008ff4:	4a26      	ldr	r2, [pc, #152]	@ (8009090 <PrepareFrame+0x188>)
 8008ff6:	4669      	mov	r1, sp
 8008ff8:	f001 fa64 	bl	800a4c4 <LoRaMacCommandsSerializeCmds>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d13d      	bne.n	800907c <PrepareFrame+0x174>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8009000:	4b20      	ldr	r3, [pc, #128]	@ (8009084 <PrepareFrame+0x17c>)
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8009008:	f503 6291 	add.w	r2, r3, #1160	@ 0x488
 800900c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8009010:	9a00      	ldr	r2, [sp, #0]
 8009012:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 8009016:	e79f      	b.n	8008f58 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8009018:	4a1e      	ldr	r2, [pc, #120]	@ (8009094 <PrepareFrame+0x18c>)
 800901a:	4669      	mov	r1, sp
 800901c:	200f      	movs	r0, #15
 800901e:	f001 fa51 	bl	800a4c4 <LoRaMacCommandsSerializeCmds>
 8009022:	bb38      	cbnz	r0, 8009074 <PrepareFrame+0x16c>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8009024:	7833      	ldrb	r3, [r6, #0]
 8009026:	9a00      	ldr	r2, [sp, #0]
 8009028:	f362 0303 	bfi	r3, r2, #0, #4
 800902c:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800902e:	b2da      	uxtb	r2, r3
 8009030:	4b14      	ldr	r3, [pc, #80]	@ (8009084 <PrepareFrame+0x17c>)
 8009032:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 8009036:	e78f      	b.n	8008f58 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009038:	4a15      	ldr	r2, [pc, #84]	@ (8009090 <PrepareFrame+0x188>)
 800903a:	4669      	mov	r1, sp
 800903c:	f001 fa42 	bl	800a4c4 <LoRaMacCommandsSerializeCmds>
 8009040:	b1d0      	cbz	r0, 8009078 <PrepareFrame+0x170>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009042:	2013      	movs	r0, #19
 8009044:	e788      	b.n	8008f58 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8009046:	f1b9 0f00 	cmp.w	r9, #0
 800904a:	d019      	beq.n	8009080 <PrepareFrame+0x178>
 800904c:	2800      	cmp	r0, #0
 800904e:	d083      	beq.n	8008f58 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8009050:	4c11      	ldr	r4, [pc, #68]	@ (8009098 <PrepareFrame+0x190>)
 8009052:	fa5f f288 	uxtb.w	r2, r8
 8009056:	4649      	mov	r1, r9
 8009058:	4620      	mov	r0, r4
 800905a:	f005 fa16 	bl	800e48a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800905e:	f894 3234 	ldrb.w	r3, [r4, #564]	@ 0x234
 8009062:	3301      	adds	r3, #1
 8009064:	f824 3c03 	strh.w	r3, [r4, #-3]
    return LORAMAC_STATUS_OK;
 8009068:	2000      	movs	r0, #0
 800906a:	e775      	b.n	8008f58 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800906c:	2012      	movs	r0, #18
 800906e:	e773      	b.n	8008f58 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009070:	2013      	movs	r0, #19
 8009072:	e771      	b.n	8008f58 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009074:	2013      	movs	r0, #19
 8009076:	e76f      	b.n	8008f58 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8009078:	200a      	movs	r0, #10
 800907a:	e76d      	b.n	8008f58 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800907c:	2013      	movs	r0, #19
 800907e:	e76b      	b.n	8008f58 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8009080:	2000      	movs	r0, #0
 8009082:	e769      	b.n	8008f58 <PrepareFrame+0x50>
 8009084:	20000d90 	.word	0x20000d90
 8009088:	20000ec8 	.word	0x20000ec8
 800908c:	20000780 	.word	0x20000780
 8009090:	20001218 	.word	0x20001218
 8009094:	20000ea8 	.word	0x20000ea8
 8009098:	20000d93 	.word	0x20000d93

0800909c <Send>:
{
 800909c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a0:	b08a      	sub	sp, #40	@ 0x28
 80090a2:	4617      	mov	r7, r2
 80090a4:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80090a6:	4c43      	ldr	r4, [pc, #268]	@ (80091b4 <Send+0x118>)
 80090a8:	f994 a039 	ldrsb.w	sl, [r4, #57]	@ 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80090ac:	f994 9038 	ldrsb.w	r9, [r4, #56]	@ 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80090b0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80090b2:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80090b4:	f894 3110 	ldrb.w	r3, [r4, #272]	@ 0x110
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d079      	beq.n	80091b0 <Send+0x114>
 80090bc:	4605      	mov	r5, r0
 80090be:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80090c0:	f894 30ff 	ldrb.w	r3, [r4, #255]	@ 0xff
 80090c4:	b90b      	cbnz	r3, 80090ca <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80090c6:	2100      	movs	r1, #0
 80090c8:	6321      	str	r1, [r4, #48]	@ 0x30
    fCtrl.Value = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80090d0:	4838      	ldr	r0, [pc, #224]	@ (80091b4 <Send+0x118>)
 80090d2:	f890 10fe 	ldrb.w	r1, [r0, #254]	@ 0xfe
 80090d6:	f361 13c7 	bfi	r3, r1, #7, #1
 80090da:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80090de:	f890 30fc 	ldrb.w	r3, [r0, #252]	@ 0xfc
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d051      	beq.n	800918a <Send+0xee>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80090e6:	4b33      	ldr	r3, [pc, #204]	@ (80091b4 <Send+0x118>)
 80090e8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80090ec:	b12b      	cbz	r3, 80090fa <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 80090ee:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80090f2:	f043 0320 	orr.w	r3, r3, #32
 80090f6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 80090fa:	4c2e      	ldr	r4, [pc, #184]	@ (80091b4 <Send+0x118>)
 80090fc:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8009100:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 8009102:	2301      	movs	r3, #1
 8009104:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009108:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800910c:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800910e:	4b2a      	ldr	r3, [pc, #168]	@ (80091b8 <Send+0x11c>)
 8009110:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	@ 0x3f4
 8009114:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8009118:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	@ 0x3f6
 800911c:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009120:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009124:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009128:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 800912c:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009130:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8009134:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009138:	ab08      	add	r3, sp, #32
 800913a:	f104 0238 	add.w	r2, r4, #56	@ 0x38
 800913e:	f104 0139 	add.w	r1, r4, #57	@ 0x39
 8009142:	a803      	add	r0, sp, #12
 8009144:	f001 f87e 	bl	800a244 <LoRaMacAdrCalcNext>
 8009148:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800914c:	f360 1386 	bfi	r3, r0, #6, #1
 8009150:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8009154:	f8cd 8000 	str.w	r8, [sp]
 8009158:	463b      	mov	r3, r7
 800915a:	4632      	mov	r2, r6
 800915c:	a909      	add	r1, sp, #36	@ 0x24
 800915e:	4628      	mov	r0, r5
 8009160:	f7ff fed2 	bl	8008f08 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009164:	4604      	mov	r4, r0
 8009166:	b108      	cbz	r0, 800916c <Send+0xd0>
 8009168:	280a      	cmp	r0, #10
 800916a:	d104      	bne.n	8009176 <Send+0xda>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800916c:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8009170:	f7ff f9e0 	bl	8008534 <ScheduleTx>
 8009174:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8009176:	b17c      	cbz	r4, 8009198 <Send+0xfc>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8009178:	4b0e      	ldr	r3, [pc, #56]	@ (80091b4 <Send+0x118>)
 800917a:	f883 a039 	strb.w	sl, [r3, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800917e:	f883 9038 	strb.w	r9, [r3, #56]	@ 0x38
}
 8009182:	4620      	mov	r0, r4
 8009184:	b00a      	add	sp, #40	@ 0x28
 8009186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800918a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800918e:	f043 0310 	orr.w	r3, r3, #16
 8009192:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009196:	e7a6      	b.n	80090e6 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8009198:	4b06      	ldr	r3, [pc, #24]	@ (80091b4 <Send+0x118>)
 800919a:	2200      	movs	r2, #0
 800919c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80091a0:	9a08      	ldr	r2, [sp, #32]
 80091a2:	629a      	str	r2, [r3, #40]	@ 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80091a4:	f001 f956 	bl	800a454 <LoRaMacCommandsRemoveNoneStickyCmds>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d0ea      	beq.n	8009182 <Send+0xe6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80091ac:	2413      	movs	r4, #19
 80091ae:	e7e8      	b.n	8009182 <Send+0xe6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80091b0:	2407      	movs	r4, #7
 80091b2:	e7e6      	b.n	8009182 <Send+0xe6>
 80091b4:	20000780 	.word	0x20000780
 80091b8:	20000d90 	.word	0x20000d90

080091bc <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80091bc:	4b07      	ldr	r3, [pc, #28]	@ (80091dc <LoRaMacIsBusy+0x20>)
 80091be:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80091c2:	b933      	cbnz	r3, 80091d2 <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80091c4:	4b05      	ldr	r3, [pc, #20]	@ (80091dc <LoRaMacIsBusy+0x20>)
 80091c6:	f893 3482 	ldrb.w	r3, [r3, #1154]	@ 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d003      	beq.n	80091d6 <LoRaMacIsBusy+0x1a>
    return true;
 80091ce:	2001      	movs	r0, #1
 80091d0:	4770      	bx	lr
 80091d2:	2001      	movs	r0, #1
 80091d4:	4770      	bx	lr
        return false;
 80091d6:	2000      	movs	r0, #0
}
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20000d90 	.word	0x20000d90

080091e0 <LoRaMacProcess>:
{
 80091e0:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 80091e2:	f7fe ffdf 	bl	80081a4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80091e6:	f001 f85b 	bl	800a2a0 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80091ea:	4b15      	ldr	r3, [pc, #84]	@ (8009240 <LoRaMacProcess+0x60>)
 80091ec:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80091f0:	f013 0f20 	tst.w	r3, #32
 80091f4:	d107      	bne.n	8009206 <LoRaMacProcess+0x26>
    LoRaMacHandleIndicationEvents( );
 80091f6:	f7fd fe9b 	bl	8006f30 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80091fa:	4b11      	ldr	r3, [pc, #68]	@ (8009240 <LoRaMacProcess+0x60>)
 80091fc:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 8009200:	2b02      	cmp	r3, #2
 8009202:	d01a      	beq.n	800923a <LoRaMacProcess+0x5a>
}
 8009204:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8009206:	2000      	movs	r0, #0
 8009208:	f7fd fe8c 	bl	8006f24 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800920c:	f7fd feda 	bl	8006fc4 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 8009210:	f7fd ffba 	bl	8007188 <IsRequestPending>
 8009214:	b110      	cbz	r0, 800921c <LoRaMacProcess+0x3c>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8009216:	f7fe f8e3 	bl	80073e0 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800921a:	b918      	cbnz	r0, 8009224 <LoRaMacProcess+0x44>
            LoRaMacHandleMlmeRequest( );
 800921c:	f7fe fff0 	bl	8008200 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8009220:	f7ff fa36 	bl	8008690 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 8009224:	f7ff fa82 	bl	800872c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8009228:	f7ff faca 	bl	80087c0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800922c:	4805      	ldr	r0, [pc, #20]	@ (8009244 <LoRaMacProcess+0x64>)
 800922e:	f7ff fadf 	bl	80087f0 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009232:	2001      	movs	r0, #1
 8009234:	f7fd fe76 	bl	8006f24 <LoRaMacEnableRequests>
 8009238:	e7dd      	b.n	80091f6 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800923a:	f7ff fbc9 	bl	80089d0 <OpenContinuousRxCWindow>
}
 800923e:	e7e1      	b.n	8009204 <LoRaMacProcess+0x24>
 8009240:	20000d90 	.word	0x20000d90
 8009244:	20000780 	.word	0x20000780

08009248 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8009248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	b08b      	sub	sp, #44	@ 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800924e:	2800      	cmp	r0, #0
 8009250:	f000 81a0 	beq.w	8009594 <LoRaMacInitialization+0x34c>
 8009254:	460e      	mov	r6, r1
 8009256:	4691      	mov	r9, r2
 8009258:	4680      	mov	r8, r0
 800925a:	2900      	cmp	r1, #0
 800925c:	f000 819c 	beq.w	8009598 <LoRaMacInitialization+0x350>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009260:	6803      	ldr	r3, [r0, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 819a 	beq.w	800959c <LoRaMacInitialization+0x354>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009268:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 8198 	beq.w	80095a0 <LoRaMacInitialization+0x358>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009270:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 8196 	beq.w	80095a4 <LoRaMacInitialization+0x35c>
        ( primitives->MacMlmeIndication == NULL ) )
 8009278:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 8194 	beq.w	80095a8 <LoRaMacInitialization+0x360>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009280:	4610      	mov	r0, r2
 8009282:	f001 ffbe 	bl	800b202 <RegionIsActive>
 8009286:	2800      	cmp	r0, #0
 8009288:	f000 8190 	beq.w	80095ac <LoRaMacInitialization+0x364>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800928c:	4640      	mov	r0, r8
 800928e:	f001 f9c3 	bl	800a618 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8009292:	4ccc      	ldr	r4, [pc, #816]	@ (80095c4 <LoRaMacInitialization+0x37c>)
 8009294:	f44f 62c2 	mov.w	r2, #1552	@ 0x610
 8009298:	2100      	movs	r1, #0
 800929a:	4620      	mov	r0, r4
 800929c:	f005 f90d 	bl	800e4ba <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80092a0:	4dc9      	ldr	r5, [pc, #804]	@ (80095c8 <LoRaMacInitialization+0x380>)
 80092a2:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 80092a6:	2100      	movs	r1, #0
 80092a8:	4628      	mov	r0, r5
 80092aa:	f005 f906 	bl	800e4ba <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80092ae:	f04f 0a01 	mov.w	sl, #1
 80092b2:	f885 a412 	strb.w	sl, [r5, #1042]	@ 0x412
    MacCtx.AckTimeoutRetries = 1;
 80092b6:	f885 a411 	strb.w	sl, [r5, #1041]	@ 0x411
    Nvm.MacGroup2.Region = region;
 80092ba:	f884 9040 	strb.w	r9, [r4, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80092be:	2700      	movs	r7, #0
 80092c0:	f884 70fc 	strb.w	r7, [r4, #252]	@ 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80092c4:	f884 7080 	strb.w	r7, [r4, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80092c8:	4bc0      	ldr	r3, [pc, #768]	@ (80095cc <LoRaMacInitialization+0x384>)
 80092ca:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80092ce:	230f      	movs	r3, #15
 80092d0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092d4:	a908      	add	r1, sp, #32
 80092d6:	4648      	mov	r0, r9
 80092d8:	f001 ff9d 	bl	800b216 <RegionGetPhyParam>
 80092dc:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80092de:	1bc0      	subs	r0, r0, r7
 80092e0:	bf18      	it	ne
 80092e2:	2001      	movne	r0, #1
 80092e4:	f884 0100 	strb.w	r0, [r4, #256]	@ 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80092e8:	f04f 0b0a 	mov.w	fp, #10
 80092ec:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092f0:	a908      	add	r1, sp, #32
 80092f2:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80092f6:	f001 ff8e 	bl	800b216 <RegionGetPhyParam>
 80092fa:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80092fc:	f884 00c4 	strb.w	r0, [r4, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009300:	f04f 0906 	mov.w	r9, #6
 8009304:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009308:	a908      	add	r1, sp, #32
 800930a:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 800930e:	f001 ff82 	bl	800b216 <RegionGetPhyParam>
 8009312:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8009314:	f884 00c5 	strb.w	r0, [r4, #197]	@ 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009318:	2310      	movs	r3, #16
 800931a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800931e:	a908      	add	r1, sp, #32
 8009320:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8009324:	f001 ff77 	bl	800b216 <RegionGetPhyParam>
 8009328:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800932a:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800932e:	2311      	movs	r3, #17
 8009330:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009334:	a908      	add	r1, sp, #32
 8009336:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 800933a:	f001 ff6c 	bl	800b216 <RegionGetPhyParam>
 800933e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009340:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009344:	2312      	movs	r3, #18
 8009346:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800934a:	a908      	add	r1, sp, #32
 800934c:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8009350:	f001 ff61 	bl	800b216 <RegionGetPhyParam>
 8009354:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009356:	f8c4 0094 	str.w	r0, [r4, #148]	@ 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800935a:	2313      	movs	r3, #19
 800935c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009360:	a908      	add	r1, sp, #32
 8009362:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8009366:	f001 ff56 	bl	800b216 <RegionGetPhyParam>
 800936a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800936c:	f8c4 0098 	str.w	r0, [r4, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009370:	2314      	movs	r3, #20
 8009372:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009376:	a908      	add	r1, sp, #32
 8009378:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 800937c:	f001 ff4b 	bl	800b216 <RegionGetPhyParam>
 8009380:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009382:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009386:	2317      	movs	r3, #23
 8009388:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800938c:	a908      	add	r1, sp, #32
 800938e:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8009392:	f001 ff40 	bl	800b216 <RegionGetPhyParam>
 8009396:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009398:	f884 00a1 	strb.w	r0, [r4, #161]	@ 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800939c:	2318      	movs	r3, #24
 800939e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80093a2:	a908      	add	r1, sp, #32
 80093a4:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80093a8:	f001 ff35 	bl	800b216 <RegionGetPhyParam>
 80093ac:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80093ae:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80093b2:	f8c4 00ac 	str.w	r0, [r4, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80093b6:	2319      	movs	r3, #25
 80093b8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80093bc:	a908      	add	r1, sp, #32
 80093be:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80093c2:	f001 ff28 	bl	800b216 <RegionGetPhyParam>
 80093c6:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80093c8:	b2c0      	uxtb	r0, r0
 80093ca:	f884 00a8 	strb.w	r0, [r4, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80093ce:	f884 00b0 	strb.w	r0, [r4, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80093d2:	231e      	movs	r3, #30
 80093d4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80093d8:	a908      	add	r1, sp, #32
 80093da:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80093de:	f001 ff1a 	bl	800b216 <RegionGetPhyParam>
 80093e2:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80093e4:	f884 00b4 	strb.w	r0, [r4, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80093e8:	231f      	movs	r3, #31
 80093ea:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80093ee:	a908      	add	r1, sp, #32
 80093f0:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80093f4:	f001 ff0f 	bl	800b216 <RegionGetPhyParam>
 80093f8:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80093fa:	f884 00b5 	strb.w	r0, [r4, #181]	@ 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80093fe:	2320      	movs	r3, #32
 8009400:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009404:	eb0d 0103 	add.w	r1, sp, r3
 8009408:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 800940c:	f001 ff03 	bl	800b216 <RegionGetPhyParam>
 8009410:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009412:	9b07      	ldr	r3, [sp, #28]
 8009414:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009418:	2321      	movs	r3, #33	@ 0x21
 800941a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800941e:	a908      	add	r1, sp, #32
 8009420:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8009424:	f001 fef7 	bl	800b216 <RegionGetPhyParam>
 8009428:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800942a:	9b07      	ldr	r3, [sp, #28]
 800942c:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009430:	230b      	movs	r3, #11
 8009432:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009436:	a908      	add	r1, sp, #32
 8009438:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 800943c:	f001 feeb 	bl	800b216 <RegionGetPhyParam>
 8009440:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckLimit = phyParam.Value;
 8009442:	f8a5 03f4 	strh.w	r0, [r5, #1012]	@ 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8009446:	230c      	movs	r3, #12
 8009448:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800944c:	a908      	add	r1, sp, #32
 800944e:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8009452:	f001 fee0 	bl	800b216 <RegionGetPhyParam>
 8009456:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckDelay = phyParam.Value;
 8009458:	f8a5 03f6 	strh.w	r0, [r5, #1014]	@ 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800945c:	f884 a0a0 	strb.w	sl, [r4, #160]	@ 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009460:	f8c4 b084 	str.w	fp, [r4, #132]	@ 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8009464:	f884 9088 	strb.w	r9, [r4, #136]	@ 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8009468:	f8c4 b044 	str.w	fp, [r4, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800946c:	f884 9048 	strb.w	r9, [r4, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8009470:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8009474:	64e3      	str	r3, [r4, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8009476:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800947a:	6523      	str	r3, [r4, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800947c:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8009480:	6563      	str	r3, [r4, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8009482:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8009486:	65a3      	str	r3, [r4, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8009488:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800948c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800948e:	f884 a060 	strb.w	sl, [r4, #96]	@ 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8009492:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009496:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 800949a:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800949c:	f504 731f 	add.w	r3, r4, #636	@ 0x27c
 80094a0:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80094a2:	a904      	add	r1, sp, #16
 80094a4:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80094a8:	f001 fedb 	bl	800b262 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 80094ac:	f8c5 6348 	str.w	r6, [r5, #840]	@ 0x348
    ResetMacParameters( );
 80094b0:	f7ff fbb4 	bl	8008c1c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80094b4:	f884 a0fd 	strb.w	sl, [r4, #253]	@ 0xfd

    MacCtx.MacPrimitives = primitives;
 80094b8:	f8c5 8344 	str.w	r8, [r5, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80094bc:	f885 7481 	strb.w	r7, [r5, #1153]	@ 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 80094c0:	f8c5 a340 	str.w	sl, [r5, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80094c4:	62e7      	str	r7, [r4, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80094c6:	6327      	str	r7, [r4, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80094c8:	9700      	str	r7, [sp, #0]
 80094ca:	4b41      	ldr	r3, [pc, #260]	@ (80095d0 <LoRaMacInitialization+0x388>)
 80094cc:	463a      	mov	r2, r7
 80094ce:	f04f 31ff 	mov.w	r1, #4294967295
 80094d2:	f505 705a 	add.w	r0, r5, #872	@ 0x368
 80094d6:	f007 fc57 	bl	8010d88 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80094da:	9700      	str	r7, [sp, #0]
 80094dc:	4b3d      	ldr	r3, [pc, #244]	@ (80095d4 <LoRaMacInitialization+0x38c>)
 80094de:	463a      	mov	r2, r7
 80094e0:	f04f 31ff 	mov.w	r1, #4294967295
 80094e4:	f505 7060 	add.w	r0, r5, #896	@ 0x380
 80094e8:	f007 fc4e 	bl	8010d88 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80094ec:	9700      	str	r7, [sp, #0]
 80094ee:	4b3a      	ldr	r3, [pc, #232]	@ (80095d8 <LoRaMacInitialization+0x390>)
 80094f0:	463a      	mov	r2, r7
 80094f2:	f04f 31ff 	mov.w	r1, #4294967295
 80094f6:	f505 7066 	add.w	r0, r5, #920	@ 0x398
 80094fa:	f007 fc45 	bl	8010d88 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80094fe:	9700      	str	r7, [sp, #0]
 8009500:	4b36      	ldr	r3, [pc, #216]	@ (80095dc <LoRaMacInitialization+0x394>)
 8009502:	463a      	mov	r2, r7
 8009504:	f04f 31ff 	mov.w	r1, #4294967295
 8009508:	f505 707e 	add.w	r0, r5, #1016	@ 0x3f8
 800950c:	f007 fc3c 	bl	8010d88 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8009510:	af02      	add	r7, sp, #8
 8009512:	4638      	mov	r0, r7
 8009514:	f007 fbca 	bl	8010cac <SysTimeGetMcuTime>
 8009518:	f504 7382 	add.w	r3, r4, #260	@ 0x104
 800951c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009520:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8009524:	4b2e      	ldr	r3, [pc, #184]	@ (80095e0 <LoRaMacInitialization+0x398>)
 8009526:	f8c5 334c 	str.w	r3, [r5, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800952a:	4b2e      	ldr	r3, [pc, #184]	@ (80095e4 <LoRaMacInitialization+0x39c>)
 800952c:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8009530:	4b2d      	ldr	r3, [pc, #180]	@ (80095e8 <LoRaMacInitialization+0x3a0>)
 8009532:	f8c5 335c 	str.w	r3, [r5, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009536:	4b2d      	ldr	r3, [pc, #180]	@ (80095ec <LoRaMacInitialization+0x3a4>)
 8009538:	f8c5 3350 	str.w	r3, [r5, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800953c:	4b2c      	ldr	r3, [pc, #176]	@ (80095f0 <LoRaMacInitialization+0x3a8>)
 800953e:	f8c5 3358 	str.w	r3, [r5, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8009542:	4b2c      	ldr	r3, [pc, #176]	@ (80095f4 <LoRaMacInitialization+0x3ac>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f505 7053 	add.w	r0, r5, #844	@ 0x34c
 800954a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800954c:	68b1      	ldr	r1, [r6, #8]
 800954e:	f504 708c 	add.w	r0, r4, #280	@ 0x118
 8009552:	f004 fdab 	bl	800e0ac <SecureElementInit>
 8009556:	bb70      	cbnz	r0, 80095b6 <LoRaMacInitialization+0x36e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8009558:	4620      	mov	r0, r4
 800955a:	f001 fae9 	bl	800ab30 <LoRaMacCryptoInit>
 800955e:	bb60      	cbnz	r0, 80095ba <LoRaMacInitialization+0x372>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8009560:	f000 ff22 	bl	800a3a8 <LoRaMacCommandsInit>
 8009564:	bb58      	cbnz	r0, 80095be <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8009566:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800956a:	f001 fb47 	bl	800abfc <LoRaMacCryptoSetMulticastReference>
 800956e:	4604      	mov	r4, r0
 8009570:	2800      	cmp	r0, #0
 8009572:	d141      	bne.n	80095f8 <LoRaMacInitialization+0x3b0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8009574:	4d1f      	ldr	r5, [pc, #124]	@ (80095f4 <LoRaMacInitialization+0x3ac>)
 8009576:	696b      	ldr	r3, [r5, #20]
 8009578:	4798      	blx	r3
 800957a:	f004 ff73 	bl	800e464 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800957e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8009580:	4a10      	ldr	r2, [pc, #64]	@ (80095c4 <LoRaMacInitialization+0x37c>)
 8009582:	f892 00fd 	ldrb.w	r0, [r2, #253]	@ 0xfd
 8009586:	4798      	blx	r3
    Radio.Sleep( );
 8009588:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800958a:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800958c:	4650      	mov	r0, sl
 800958e:	f7fd fcc9 	bl	8006f24 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8009592:	e00c      	b.n	80095ae <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009594:	2403      	movs	r4, #3
 8009596:	e00a      	b.n	80095ae <LoRaMacInitialization+0x366>
 8009598:	2403      	movs	r4, #3
 800959a:	e008      	b.n	80095ae <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800959c:	2403      	movs	r4, #3
 800959e:	e006      	b.n	80095ae <LoRaMacInitialization+0x366>
 80095a0:	2403      	movs	r4, #3
 80095a2:	e004      	b.n	80095ae <LoRaMacInitialization+0x366>
 80095a4:	2403      	movs	r4, #3
 80095a6:	e002      	b.n	80095ae <LoRaMacInitialization+0x366>
 80095a8:	2403      	movs	r4, #3
 80095aa:	e000      	b.n	80095ae <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80095ac:	2409      	movs	r4, #9
}
 80095ae:	4620      	mov	r0, r4
 80095b0:	b00b      	add	sp, #44	@ 0x2c
 80095b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80095b6:	2411      	movs	r4, #17
 80095b8:	e7f9      	b.n	80095ae <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80095ba:	2411      	movs	r4, #17
 80095bc:	e7f7      	b.n	80095ae <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80095be:	2413      	movs	r4, #19
 80095c0:	e7f5      	b.n	80095ae <LoRaMacInitialization+0x366>
 80095c2:	bf00      	nop
 80095c4:	20000780 	.word	0x20000780
 80095c8:	20000d90 	.word	0x20000d90
 80095cc:	01000300 	.word	0x01000300
 80095d0:	0800863d 	.word	0x0800863d
 80095d4:	08008abd 	.word	0x08008abd
 80095d8:	08008a6d 	.word	0x08008a6d
 80095dc:	08007351 	.word	0x08007351
 80095e0:	08008bc5 	.word	0x08008bc5
 80095e4:	08008b6d 	.word	0x08008b6d
 80095e8:	08006ed9 	.word	0x08006ed9
 80095ec:	08008b39 	.word	0x08008b39
 80095f0:	08008b05 	.word	0x08008b05
 80095f4:	08014918 	.word	0x08014918
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80095f8:	2411      	movs	r4, #17
 80095fa:	e7d8      	b.n	80095ae <LoRaMacInitialization+0x366>

080095fc <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 80095fc:	2000      	movs	r0, #0
 80095fe:	4b02      	ldr	r3, [pc, #8]	@ (8009608 <LoRaMacStart+0xc>)
 8009600:	f8c3 0340 	str.w	r0, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
}
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	20000d90 	.word	0x20000d90

0800960c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800960c:	b530      	push	{r4, r5, lr}
 800960e:	b089      	sub	sp, #36	@ 0x24
 8009610:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009612:	4b2f      	ldr	r3, [pc, #188]	@ (80096d0 <LoRaMacQueryTxPossible+0xc4>)
 8009614:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009616:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009618:	f993 00c5 	ldrsb.w	r0, [r3, #197]	@ 0xc5
 800961c:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009620:	f993 30c4 	ldrsb.w	r3, [r3, #196]	@ 0xc4
 8009624:	f88d 3006 	strb.w	r3, [sp, #6]
    size_t macCmdsSize = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800962c:	2900      	cmp	r1, #0
 800962e:	d048      	beq.n	80096c2 <LoRaMacQueryTxPossible+0xb6>
 8009630:	460d      	mov	r5, r1
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8009632:	4b27      	ldr	r3, [pc, #156]	@ (80096d0 <LoRaMacQueryTxPossible+0xc4>)
 8009634:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8009638:	9103      	str	r1, [sp, #12]
    adrNext.UpdateChanMask = false;
 800963a:	2100      	movs	r1, #0
 800963c:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009640:	f893 10fe 	ldrb.w	r1, [r3, #254]	@ 0xfe
 8009644:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009648:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800964a:	4a22      	ldr	r2, [pc, #136]	@ (80096d4 <LoRaMacQueryTxPossible+0xc8>)
 800964c:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	@ 0x3f4
 8009650:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8009654:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	@ 0x3f6
 8009658:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800965c:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8009660:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009664:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8009668:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800966c:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 8009670:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009674:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009678:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800967c:	ab02      	add	r3, sp, #8
 800967e:	f10d 0206 	add.w	r2, sp, #6
 8009682:	f10d 0107 	add.w	r1, sp, #7
 8009686:	a803      	add	r0, sp, #12
 8009688:	f000 fddc 	bl	800a244 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800968c:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 8009690:	f7fd fdb2 	bl	80071f8 <GetMaxAppPayloadWithoutFOptsLength>
 8009694:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009696:	4668      	mov	r0, sp
 8009698:	f000 ff08 	bl	800a4ac <LoRaMacCommandsGetSizeSerializedCmds>
 800969c:	b998      	cbnz	r0, 80096c6 <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800969e:	9b00      	ldr	r3, [sp, #0]
 80096a0:	2b0f      	cmp	r3, #15
 80096a2:	d80a      	bhi.n	80096ba <LoRaMacQueryTxPossible+0xae>
 80096a4:	786a      	ldrb	r2, [r5, #1]
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d807      	bhi.n	80096ba <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80096ae:	9b00      	ldr	r3, [sp, #0]
 80096b0:	441c      	add	r4, r3
 80096b2:	42a2      	cmp	r2, r4
 80096b4:	d309      	bcc.n	80096ca <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 80096b6:	b009      	add	sp, #36	@ 0x24
 80096b8:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80096be:	2008      	movs	r0, #8
 80096c0:	e7f9      	b.n	80096b6 <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80096c2:	2003      	movs	r0, #3
 80096c4:	e7f7      	b.n	80096b6 <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80096c6:	2013      	movs	r0, #19
 80096c8:	e7f5      	b.n	80096b6 <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 80096ca:	2008      	movs	r0, #8
 80096cc:	e7f3      	b.n	80096b6 <LoRaMacQueryTxPossible+0xaa>
 80096ce:	bf00      	nop
 80096d0:	20000780 	.word	0x20000780
 80096d4:	20000d90 	.word	0x20000d90

080096d8 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80096d8:	2800      	cmp	r0, #0
 80096da:	f000 810c 	beq.w	80098f6 <LoRaMacMibGetRequestConfirm+0x21e>
{
 80096de:	b510      	push	{r4, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 80096e4:	7800      	ldrb	r0, [r0, #0]
 80096e6:	2828      	cmp	r0, #40	@ 0x28
 80096e8:	f200 8101 	bhi.w	80098ee <LoRaMacMibGetRequestConfirm+0x216>
 80096ec:	e8df f010 	tbh	[pc, r0, lsl #1]
 80096f0:	002f0029 	.word	0x002f0029
 80096f4:	003a0035 	.word	0x003a0035
 80096f8:	0045003f 	.word	0x0045003f
 80096fc:	00ff004b 	.word	0x00ff004b
 8009700:	00ff00ff 	.word	0x00ff00ff
 8009704:	00ff00ff 	.word	0x00ff00ff
 8009708:	00ff00ff 	.word	0x00ff00ff
 800970c:	005100ff 	.word	0x005100ff
 8009710:	005d0057 	.word	0x005d0057
 8009714:	0072006a 	.word	0x0072006a
 8009718:	0082007a 	.word	0x0082007a
 800971c:	008a0097 	.word	0x008a0097
 8009720:	00aa00a4 	.word	0x00aa00a4
 8009724:	00b400af 	.word	0x00b400af
 8009728:	00be00b9 	.word	0x00be00b9
 800972c:	00c900c3 	.word	0x00c900c3
 8009730:	00cf00d5 	.word	0x00cf00d5
 8009734:	00e000db 	.word	0x00e000db
 8009738:	00f000e6 	.word	0x00f000e6
 800973c:	00ff00eb 	.word	0x00ff00eb
 8009740:	00f6      	.short	0x00f6
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8009742:	4b6e      	ldr	r3, [pc, #440]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009744:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8009748:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800974a:	b004      	add	sp, #16
 800974c:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800974e:	4b6b      	ldr	r3, [pc, #428]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009750:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8009754:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009756:	2000      	movs	r0, #0
            break;
 8009758:	e7f7      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800975a:	f004 fe4f 	bl	800e3fc <SecureElementGetDevEui>
 800975e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009760:	2000      	movs	r0, #0
            break;
 8009762:	e7f2      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8009764:	f004 fe60 	bl	800e428 <SecureElementGetJoinEui>
 8009768:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800976a:	2000      	movs	r0, #0
            break;
 800976c:	e7ed      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800976e:	4b63      	ldr	r3, [pc, #396]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009770:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8009774:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009776:	2000      	movs	r0, #0
            break;
 8009778:	e7e7      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800977a:	4b60      	ldr	r3, [pc, #384]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 800977c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009780:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009782:	2000      	movs	r0, #0
            break;
 8009784:	e7e1      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8009786:	4b5d      	ldr	r3, [pc, #372]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009788:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800978c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800978e:	2000      	movs	r0, #0
            break;
 8009790:	e7db      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8009792:	4b5a      	ldr	r3, [pc, #360]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009794:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 8009798:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800979a:	2000      	movs	r0, #0
            break;
 800979c:	e7d5      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800979e:	4b57      	ldr	r3, [pc, #348]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 80097a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80097a4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097a6:	2000      	movs	r0, #0
            break;
 80097a8:	e7cf      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS;
 80097aa:	231d      	movs	r3, #29
 80097ac:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80097b0:	a902      	add	r1, sp, #8
 80097b2:	4b52      	ldr	r3, [pc, #328]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 80097b4:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80097b8:	f001 fd2d 	bl	800b216 <RegionGetPhyParam>
 80097bc:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 80097be:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097c0:	2000      	movs	r0, #0
            break;
 80097c2:	e7c2      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80097c4:	3404      	adds	r4, #4
 80097c6:	4b4e      	ldr	r3, [pc, #312]	@ (8009900 <LoRaMacMibGetRequestConfirm+0x228>)
 80097c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097cc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097d0:	2000      	movs	r0, #0
            break;
 80097d2:	e7ba      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80097d4:	3404      	adds	r4, #4
 80097d6:	4b4b      	ldr	r3, [pc, #300]	@ (8009904 <LoRaMacMibGetRequestConfirm+0x22c>)
 80097d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097dc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097e0:	2000      	movs	r0, #0
            break;
 80097e2:	e7b2      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80097e4:	3404      	adds	r4, #4
 80097e6:	4b48      	ldr	r3, [pc, #288]	@ (8009908 <LoRaMacMibGetRequestConfirm+0x230>)
 80097e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097ec:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80097f0:	2000      	movs	r0, #0
            break;
 80097f2:	e7aa      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80097f4:	3404      	adds	r4, #4
 80097f6:	4b45      	ldr	r3, [pc, #276]	@ (800990c <LoRaMacMibGetRequestConfirm+0x234>)
 80097f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097fc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009800:	2000      	movs	r0, #0
            break;
 8009802:	e7a2      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8009804:	231b      	movs	r3, #27
 8009806:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800980a:	a902      	add	r1, sp, #8
 800980c:	4b3b      	ldr	r3, [pc, #236]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 800980e:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009812:	f001 fd00 	bl	800b216 <RegionGetPhyParam>
 8009816:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8009818:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800981a:	2000      	movs	r0, #0
            break;
 800981c:	e795      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800981e:	231a      	movs	r3, #26
 8009820:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009824:	a902      	add	r1, sp, #8
 8009826:	4b35      	ldr	r3, [pc, #212]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009828:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800982c:	f001 fcf3 	bl	800b216 <RegionGetPhyParam>
 8009830:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8009832:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009834:	2000      	movs	r0, #0
            break;
 8009836:	e788      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009838:	4b30      	ldr	r3, [pc, #192]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 800983a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800983e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009840:	2000      	movs	r0, #0
            break;
 8009842:	e782      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8009844:	4b2d      	ldr	r3, [pc, #180]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009848:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800984a:	2000      	movs	r0, #0
            break;
 800984c:	e77d      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800984e:	4b2b      	ldr	r3, [pc, #172]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009852:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009854:	2000      	movs	r0, #0
            break;
 8009856:	e778      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8009858:	4b28      	ldr	r3, [pc, #160]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 800985a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800985c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800985e:	2000      	movs	r0, #0
            break;
 8009860:	e773      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8009862:	4b26      	ldr	r3, [pc, #152]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009866:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009868:	2000      	movs	r0, #0
            break;
 800986a:	e76e      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800986c:	4b23      	ldr	r3, [pc, #140]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 800986e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009870:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009872:	2000      	movs	r0, #0
            break;
 8009874:	e769      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009876:	4b21      	ldr	r3, [pc, #132]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009878:	f993 30c5 	ldrsb.w	r3, [r3, #197]	@ 0xc5
 800987c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800987e:	2000      	movs	r0, #0
            break;
 8009880:	e763      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009882:	4b1e      	ldr	r3, [pc, #120]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009884:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8009888:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800988a:	2000      	movs	r0, #0
            break;
 800988c:	e75d      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800988e:	4b1b      	ldr	r3, [pc, #108]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 8009890:	f993 30c4 	ldrsb.w	r3, [r3, #196]	@ 0xc4
 8009894:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009896:	2000      	movs	r0, #0
            break;
 8009898:	e757      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800989a:	4b18      	ldr	r3, [pc, #96]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 800989c:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80098a0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80098a2:	2000      	movs	r0, #0
            break;
 80098a4:	e751      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80098a6:	4b15      	ldr	r3, [pc, #84]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 80098a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098aa:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80098ac:	2000      	movs	r0, #0
            break;
 80098ae:	e74c      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80098b0:	4b12      	ldr	r3, [pc, #72]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 80098b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80098b6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80098b8:	2000      	movs	r0, #0
            break;
 80098ba:	e746      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80098bc:	4b0f      	ldr	r3, [pc, #60]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 80098be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098c0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80098c2:	2000      	movs	r0, #0
            break;
 80098c4:	e741      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Contexts = GetNvmData( );
 80098c6:	f7fd fbc1 	bl	800704c <GetNvmData>
 80098ca:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80098cc:	2000      	movs	r0, #0
            break;
 80098ce:	e73c      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80098d0:	4b0a      	ldr	r3, [pc, #40]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 80098d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80098d6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80098d8:	2000      	movs	r0, #0
            break;
 80098da:	e736      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80098dc:	4b07      	ldr	r3, [pc, #28]	@ (80098fc <LoRaMacMibGetRequestConfirm+0x224>)
 80098de:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80098e2:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80098e4:	f001 fdce 	bl	800b484 <RegionGetVersion>
 80098e8:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80098ea:	2000      	movs	r0, #0
            break;
 80098ec:	e72d      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80098ee:	4620      	mov	r0, r4
 80098f0:	f000 fcc8 	bl	800a284 <LoRaMacClassBMibGetRequestConfirm>
            break;
 80098f4:	e729      	b.n	800974a <LoRaMacMibGetRequestConfirm+0x72>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80098f6:	2003      	movs	r0, #3
}
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	20000780 	.word	0x20000780
 8009900:	200007e4 	.word	0x200007e4
 8009904:	20000824 	.word	0x20000824
 8009908:	200007ec 	.word	0x200007ec
 800990c:	2000082c 	.word	0x2000082c

08009910 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8009910:	b530      	push	{r4, r5, lr}
 8009912:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8009914:	2800      	cmp	r0, #0
 8009916:	f000 8244 	beq.w	8009da2 <LoRaMacMibSetRequestConfirm+0x492>
 800991a:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800991c:	4bb3      	ldr	r3, [pc, #716]	@ (8009bec <LoRaMacMibSetRequestConfirm+0x2dc>)
 800991e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8009922:	f013 0f02 	tst.w	r3, #2
 8009926:	f040 823e 	bne.w	8009da6 <LoRaMacMibSetRequestConfirm+0x496>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800992a:	7804      	ldrb	r4, [r0, #0]
 800992c:	2c27      	cmp	r4, #39	@ 0x27
 800992e:	f200 8234 	bhi.w	8009d9a <LoRaMacMibSetRequestConfirm+0x48a>
 8009932:	e8df f014 	tbh	[pc, r4, lsl #1]
 8009936:	0028      	.short	0x0028
 8009938:	0036002d 	.word	0x0036002d
 800993c:	0047003f 	.word	0x0047003f
 8009940:	0053004d 	.word	0x0053004d
 8009944:	00660059 	.word	0x00660059
 8009948:	00800073 	.word	0x00800073
 800994c:	009a008d 	.word	0x009a008d
 8009950:	00b400a7 	.word	0x00b400a7
 8009954:	00cc00c1 	.word	0x00cc00c1
 8009958:	00d20232 	.word	0x00d20232
 800995c:	011200f8 	.word	0x011200f8
 8009960:	01770140 	.word	0x01770140
 8009964:	01870167 	.word	0x01870167
 8009968:	01970192 	.word	0x01970192
 800996c:	01a1019c 	.word	0x01a1019c
 8009970:	01ab01a6 	.word	0x01ab01a6
 8009974:	01ed01c0 	.word	0x01ed01c0
 8009978:	020101d9 	.word	0x020101d9
 800997c:	02100208 	.word	0x02100208
 8009980:	021b0215 	.word	0x021b0215
 8009984:	0222      	.short	0x0222
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8009986:	7900      	ldrb	r0, [r0, #4]
 8009988:	f7ff f9e8 	bl	8008d5c <SwitchClass>
 800998c:	4604      	mov	r4, r0
            break;
 800998e:	e20b      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8009990:	7903      	ldrb	r3, [r0, #4]
 8009992:	2b02      	cmp	r3, #2
 8009994:	f000 820b 	beq.w	8009dae <LoRaMacMibSetRequestConfirm+0x49e>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8009998:	4a95      	ldr	r2, [pc, #596]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800999a:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800999e:	2400      	movs	r4, #0
 80099a0:	e202      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80099a2:	6840      	ldr	r0, [r0, #4]
 80099a4:	f004 fd1c 	bl	800e3e0 <SecureElementSetDevEui>
 80099a8:	4604      	mov	r4, r0
 80099aa:	2800      	cmp	r0, #0
 80099ac:	f000 81fc 	beq.w	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80099b0:	2403      	movs	r4, #3
 80099b2:	e1f9      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80099b4:	6840      	ldr	r0, [r0, #4]
 80099b6:	f004 fd27 	bl	800e408 <SecureElementSetJoinEui>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	f040 81f4 	bne.w	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80099c0:	4604      	mov	r4, r0
 80099c2:	e1f1      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80099c4:	7902      	ldrb	r2, [r0, #4]
 80099c6:	4b8a      	ldr	r3, [pc, #552]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 80099c8:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80099cc:	2400      	movs	r4, #0
            break;
 80099ce:	e1eb      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80099d0:	6842      	ldr	r2, [r0, #4]
 80099d2:	4b87      	ldr	r3, [pc, #540]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 80099d4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80099d8:	2400      	movs	r4, #0
            break;
 80099da:	e1e5      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80099dc:	6842      	ldr	r2, [r0, #4]
 80099de:	4b84      	ldr	r3, [pc, #528]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 80099e0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80099e4:	2400      	movs	r4, #0
            break;
 80099e6:	e1df      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80099e8:	6841      	ldr	r1, [r0, #4]
 80099ea:	2900      	cmp	r1, #0
 80099ec:	f000 81e1 	beq.w	8009db2 <LoRaMacMibSetRequestConfirm+0x4a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80099f0:	2000      	movs	r0, #0
 80099f2:	f001 fa1b 	bl	800ae2c <LoRaMacCryptoSetKey>
 80099f6:	4604      	mov	r4, r0
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f000 81d5 	beq.w	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80099fe:	2411      	movs	r4, #17
 8009a00:	e1d2      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8009a02:	6841      	ldr	r1, [r0, #4]
 8009a04:	2900      	cmp	r1, #0
 8009a06:	f000 81d6 	beq.w	8009db6 <LoRaMacMibSetRequestConfirm+0x4a6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8009a0a:	2001      	movs	r0, #1
 8009a0c:	f001 fa0e 	bl	800ae2c <LoRaMacCryptoSetKey>
 8009a10:	4604      	mov	r4, r0
 8009a12:	2800      	cmp	r0, #0
 8009a14:	f000 81c8 	beq.w	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a18:	2411      	movs	r4, #17
 8009a1a:	e1c5      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8009a1c:	6841      	ldr	r1, [r0, #4]
 8009a1e:	2900      	cmp	r1, #0
 8009a20:	f000 81cb 	beq.w	8009dba <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8009a24:	2002      	movs	r0, #2
 8009a26:	f001 fa01 	bl	800ae2c <LoRaMacCryptoSetKey>
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	f000 81bb 	beq.w	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a32:	2411      	movs	r4, #17
 8009a34:	e1b8      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8009a36:	6841      	ldr	r1, [r0, #4]
 8009a38:	2900      	cmp	r1, #0
 8009a3a:	f000 81c0 	beq.w	8009dbe <LoRaMacMibSetRequestConfirm+0x4ae>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8009a3e:	2003      	movs	r0, #3
 8009a40:	f001 f9f4 	bl	800ae2c <LoRaMacCryptoSetKey>
 8009a44:	4604      	mov	r4, r0
 8009a46:	2800      	cmp	r0, #0
 8009a48:	f000 81ae 	beq.w	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a4c:	2411      	movs	r4, #17
 8009a4e:	e1ab      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8009a50:	6841      	ldr	r1, [r0, #4]
 8009a52:	2900      	cmp	r1, #0
 8009a54:	f000 81b5 	beq.w	8009dc2 <LoRaMacMibSetRequestConfirm+0x4b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8009a58:	207f      	movs	r0, #127	@ 0x7f
 8009a5a:	f001 f9e7 	bl	800ae2c <LoRaMacCryptoSetKey>
 8009a5e:	4604      	mov	r4, r0
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f000 81a1 	beq.w	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a66:	2411      	movs	r4, #17
 8009a68:	e19e      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8009a6a:	6841      	ldr	r1, [r0, #4]
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	f000 81aa 	beq.w	8009dc6 <LoRaMacMibSetRequestConfirm+0x4b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8009a72:	2080      	movs	r0, #128	@ 0x80
 8009a74:	f001 f9da 	bl	800ae2c <LoRaMacCryptoSetKey>
 8009a78:	4604      	mov	r4, r0
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	f000 8194 	beq.w	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a80:	2411      	movs	r4, #17
 8009a82:	e191      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8009a84:	6841      	ldr	r1, [r0, #4]
 8009a86:	2900      	cmp	r1, #0
 8009a88:	f000 819f 	beq.w	8009dca <LoRaMacMibSetRequestConfirm+0x4ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8009a8c:	2081      	movs	r0, #129	@ 0x81
 8009a8e:	f001 f9cd 	bl	800ae2c <LoRaMacCryptoSetKey>
 8009a92:	4604      	mov	r4, r0
 8009a94:	2800      	cmp	r0, #0
 8009a96:	f000 8187 	beq.w	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a9a:	2411      	movs	r4, #17
 8009a9c:	e184      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009a9e:	6841      	ldr	r1, [r0, #4]
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	f000 8194 	beq.w	8009dce <LoRaMacMibSetRequestConfirm+0x4be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8009aa6:	2082      	movs	r0, #130	@ 0x82
 8009aa8:	f001 f9c0 	bl	800ae2c <LoRaMacCryptoSetKey>
 8009aac:	4604      	mov	r4, r0
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f000 817a 	beq.w	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009ab4:	2411      	movs	r4, #17
 8009ab6:	e177      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009ab8:	7900      	ldrb	r0, [r0, #4]
 8009aba:	4b4d      	ldr	r3, [pc, #308]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009abc:	f883 00fd 	strb.w	r0, [r3, #253]	@ 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009ac0:	4c4c      	ldr	r4, [pc, #304]	@ (8009bf4 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009ac2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ac4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8009ac6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ac8:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009aca:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 8009acc:	e16c      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009ace:	7902      	ldrb	r2, [r0, #4]
 8009ad0:	4b47      	ldr	r3, [pc, #284]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009ad2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ad6:	2400      	movs	r4, #0
            break;
 8009ad8:	e166      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009ada:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009ade:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ae2:	4b43      	ldr	r3, [pc, #268]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009ae4:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8009ae8:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009aec:	2207      	movs	r2, #7
 8009aee:	a901      	add	r1, sp, #4
 8009af0:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009af4:	f001 fbc3 	bl	800b27e <RegionVerify>
 8009af8:	b908      	cbnz	r0, 8009afe <LoRaMacMibSetRequestConfirm+0x1ee>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009afa:	2403      	movs	r4, #3
 8009afc:	e154      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8009afe:	686b      	ldr	r3, [r5, #4]
 8009b00:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8009b02:	2200      	movs	r2, #0
 8009b04:	a901      	add	r1, sp, #4
 8009b06:	4b3a      	ldr	r3, [pc, #232]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009b08:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009b0c:	f001 fbb7 	bl	800b27e <RegionVerify>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	f000 815e 	beq.w	8009dd2 <LoRaMacMibSetRequestConfirm+0x4c2>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8009b16:	4b38      	ldr	r3, [pc, #224]	@ (8009bf8 <LoRaMacMibSetRequestConfirm+0x2e8>)
 8009b18:	3504      	adds	r5, #4
 8009b1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009b1e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b22:	2400      	movs	r4, #0
 8009b24:	e140      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009b26:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009b2a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b2e:	4b30      	ldr	r3, [pc, #192]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009b30:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8009b34:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b38:	2207      	movs	r2, #7
 8009b3a:	a901      	add	r1, sp, #4
 8009b3c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009b40:	f001 fb9d 	bl	800b27e <RegionVerify>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	f000 8146 	beq.w	8009dd6 <LoRaMacMibSetRequestConfirm+0x4c6>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8009bfc <LoRaMacMibSetRequestConfirm+0x2ec>)
 8009b4c:	3504      	adds	r5, #4
 8009b4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009b52:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b56:	2400      	movs	r4, #0
 8009b58:	e126      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009b5a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009b5e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b62:	4b23      	ldr	r3, [pc, #140]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009b64:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8009b68:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b6c:	2207      	movs	r2, #7
 8009b6e:	a901      	add	r1, sp, #4
 8009b70:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009b74:	f001 fb83 	bl	800b27e <RegionVerify>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	f000 812e 	beq.w	8009dda <LoRaMacMibSetRequestConfirm+0x4ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8009b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009b80:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8009b84:	3504      	adds	r5, #4
 8009b86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009b8a:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8009b8e:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d001      	beq.n	8009b9a <LoRaMacMibSetRequestConfirm+0x28a>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009b96:	2400      	movs	r4, #0
 8009b98:	e106      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8009b9a:	f1a2 036c 	sub.w	r3, r2, #108	@ 0x6c
 8009b9e:	f893 4110 	ldrb.w	r4, [r3, #272]	@ 0x110
 8009ba2:	2c00      	cmp	r4, #0
 8009ba4:	f000 8100 	beq.w	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8009ba8:	4b12      	ldr	r3, [pc, #72]	@ (8009bf4 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8009baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bac:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8009bae:	f7fe ff0f 	bl	80089d0 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009bb2:	2400      	movs	r4, #0
 8009bb4:	e0f8      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009bb6:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009bba:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8009bf0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8009bc0:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8009bc4:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009bc8:	2207      	movs	r2, #7
 8009bca:	a901      	add	r1, sp, #4
 8009bcc:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009bd0:	f001 fb55 	bl	800b27e <RegionVerify>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	f000 8102 	beq.w	8009dde <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009bda:	4b09      	ldr	r3, [pc, #36]	@ (8009c00 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8009bdc:	3504      	adds	r5, #4
 8009bde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009be2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009be6:	2400      	movs	r4, #0
 8009be8:	e0de      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
 8009bea:	bf00      	nop
 8009bec:	20000d90 	.word	0x20000d90
 8009bf0:	20000780 	.word	0x20000780
 8009bf4:	08014918 	.word	0x08014918
 8009bf8:	200007e4 	.word	0x200007e4
 8009bfc:	20000824 	.word	0x20000824
 8009c00:	2000082c 	.word	0x2000082c
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8009c04:	6843      	ldr	r3, [r0, #4]
 8009c06:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009c0e:	a902      	add	r1, sp, #8
 8009c10:	4b7c      	ldr	r3, [pc, #496]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009c12:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009c16:	f001 fb50 	bl	800b2ba <RegionChanMaskSet>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	f000 80e1 	beq.w	8009de2 <LoRaMacMibSetRequestConfirm+0x4d2>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c20:	2400      	movs	r4, #0
 8009c22:	e0c1      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009c24:	6843      	ldr	r3, [r0, #4]
 8009c26:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009c2e:	a902      	add	r1, sp, #8
 8009c30:	4b74      	ldr	r3, [pc, #464]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009c32:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009c36:	f001 fb40 	bl	800b2ba <RegionChanMaskSet>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	f000 80d3 	beq.w	8009de6 <LoRaMacMibSetRequestConfirm+0x4d6>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c40:	2400      	movs	r4, #0
 8009c42:	e0b1      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8009c44:	7902      	ldrb	r2, [r0, #4]
 8009c46:	1e53      	subs	r3, r2, #1
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b0e      	cmp	r3, #14
 8009c4c:	f200 80cd 	bhi.w	8009dea <LoRaMacMibSetRequestConfirm+0x4da>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8009c50:	4b6c      	ldr	r3, [pc, #432]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009c52:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c56:	2400      	movs	r4, #0
 8009c58:	e0a6      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8009c5a:	6842      	ldr	r2, [r0, #4]
 8009c5c:	4b69      	ldr	r3, [pc, #420]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009c5e:	64da      	str	r2, [r3, #76]	@ 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c60:	2400      	movs	r4, #0
            break;
 8009c62:	e0a1      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009c64:	6842      	ldr	r2, [r0, #4]
 8009c66:	4b67      	ldr	r3, [pc, #412]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009c68:	651a      	str	r2, [r3, #80]	@ 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c6a:	2400      	movs	r4, #0
            break;
 8009c6c:	e09c      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8009c6e:	6842      	ldr	r2, [r0, #4]
 8009c70:	4b64      	ldr	r3, [pc, #400]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009c72:	655a      	str	r2, [r3, #84]	@ 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c74:	2400      	movs	r4, #0
            break;
 8009c76:	e097      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009c78:	6842      	ldr	r2, [r0, #4]
 8009c7a:	4b62      	ldr	r3, [pc, #392]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009c7c:	659a      	str	r2, [r3, #88]	@ 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c7e:	2400      	movs	r4, #0
            break;
 8009c80:	e092      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8009c82:	6842      	ldr	r2, [r0, #4]
 8009c84:	4b5f      	ldr	r3, [pc, #380]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009c86:	65da      	str	r2, [r3, #92]	@ 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c88:	2400      	movs	r4, #0
            break;
 8009c8a:	e08d      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009c8c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009c90:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009c94:	2206      	movs	r2, #6
 8009c96:	a901      	add	r1, sp, #4
 8009c98:	4b5a      	ldr	r3, [pc, #360]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009c9a:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009c9e:	f001 faee 	bl	800b27e <RegionVerify>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	f000 80a3 	beq.w	8009dee <LoRaMacMibSetRequestConfirm+0x4de>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8009ca8:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009cac:	4b55      	ldr	r3, [pc, #340]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009cae:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009cb2:	2400      	movs	r4, #0
 8009cb4:	e078      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009cb6:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009cba:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009cbe:	4b51      	ldr	r3, [pc, #324]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009cc0:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 8009cc4:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009cc8:	2205      	movs	r2, #5
 8009cca:	a901      	add	r1, sp, #4
 8009ccc:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009cd0:	f001 fad5 	bl	800b27e <RegionVerify>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	f000 808c 	beq.w	8009df2 <LoRaMacMibSetRequestConfirm+0x4e2>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009cda:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009cde:	4b49      	ldr	r3, [pc, #292]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009ce0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009ce4:	2400      	movs	r4, #0
 8009ce6:	e05f      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009ce8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009cec:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009cf0:	220a      	movs	r2, #10
 8009cf2:	a901      	add	r1, sp, #4
 8009cf4:	4b43      	ldr	r3, [pc, #268]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009cf6:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009cfa:	f001 fac0 	bl	800b27e <RegionVerify>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d079      	beq.n	8009df6 <LoRaMacMibSetRequestConfirm+0x4e6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8009d02:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009d06:	4b3f      	ldr	r3, [pc, #252]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009d08:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009d0c:	2400      	movs	r4, #0
 8009d0e:	e04b      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009d10:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009d14:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009d18:	2209      	movs	r2, #9
 8009d1a:	a901      	add	r1, sp, #4
 8009d1c:	4b39      	ldr	r3, [pc, #228]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009d1e:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8009d22:	f001 faac 	bl	800b27e <RegionVerify>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d067      	beq.n	8009dfa <LoRaMacMibSetRequestConfirm+0x4ea>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8009d2a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8009d2e:	4b35      	ldr	r3, [pc, #212]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009d30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009d34:	2400      	movs	r4, #0
 8009d36:	e037      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009d38:	6842      	ldr	r2, [r0, #4]
 8009d3a:	4b32      	ldr	r3, [pc, #200]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009d3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8009d40:	645a      	str	r2, [r3, #68]	@ 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009d42:	2400      	movs	r4, #0
            break;
 8009d44:	e030      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009d46:	7902      	ldrb	r2, [r0, #4]
 8009d48:	4b2e      	ldr	r3, [pc, #184]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009d4a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
 8009d4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009d52:	2400      	movs	r4, #0
            break;
 8009d54:	e028      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8009d56:	6842      	ldr	r2, [r0, #4]
 8009d58:	4b2a      	ldr	r3, [pc, #168]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009d5a:	67da      	str	r2, [r3, #124]	@ 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009d5c:	2400      	movs	r4, #0
            break;
 8009d5e:	e023      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8009d60:	6842      	ldr	r2, [r0, #4]
 8009d62:	4b28      	ldr	r3, [pc, #160]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009d64:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009d68:	2400      	movs	r4, #0
            break;
 8009d6a:	e01d      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8009d6c:	6840      	ldr	r0, [r0, #4]
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d045      	beq.n	8009dfe <LoRaMacMibSetRequestConfirm+0x4ee>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8009d72:	f7fe fda1 	bl	80088b8 <RestoreNvmData>
 8009d76:	4604      	mov	r4, r0
 8009d78:	e016      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8009d7a:	7983      	ldrb	r3, [r0, #6]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d901      	bls.n	8009d84 <LoRaMacMibSetRequestConfirm+0x474>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d80:	2403      	movs	r4, #3
 8009d82:	e011      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009d84:	6842      	ldr	r2, [r0, #4]
 8009d86:	4b1f      	ldr	r3, [pc, #124]	@ (8009e04 <LoRaMacMibSetRequestConfirm+0x4f4>)
 8009d88:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009d8c:	6840      	ldr	r0, [r0, #4]
 8009d8e:	f000 fee7 	bl	800ab60 <LoRaMacCryptoSetLrWanVersion>
 8009d92:	4604      	mov	r4, r0
 8009d94:	b140      	cbz	r0, 8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009d96:	2411      	movs	r4, #17
 8009d98:	e006      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8009d9a:	f000 fa75 	bl	800a288 <LoRaMacMibClassBSetRequestConfirm>
 8009d9e:	4604      	mov	r4, r0
            break;
 8009da0:	e002      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009da2:	2403      	movs	r4, #3
 8009da4:	e000      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
        return LORAMAC_STATUS_BUSY;
 8009da6:	2401      	movs	r4, #1
        }
    }
    return status;
}
 8009da8:	4620      	mov	r0, r4
 8009daa:	b005      	add	sp, #20
 8009dac:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dae:	2403      	movs	r4, #3
 8009db0:	e7fa      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009db2:	2403      	movs	r4, #3
 8009db4:	e7f8      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009db6:	2403      	movs	r4, #3
 8009db8:	e7f6      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dba:	2403      	movs	r4, #3
 8009dbc:	e7f4      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dbe:	2403      	movs	r4, #3
 8009dc0:	e7f2      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dc2:	2403      	movs	r4, #3
 8009dc4:	e7f0      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dc6:	2403      	movs	r4, #3
 8009dc8:	e7ee      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dca:	2403      	movs	r4, #3
 8009dcc:	e7ec      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dce:	2403      	movs	r4, #3
 8009dd0:	e7ea      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dd2:	2403      	movs	r4, #3
 8009dd4:	e7e8      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dd6:	2403      	movs	r4, #3
 8009dd8:	e7e6      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dda:	2403      	movs	r4, #3
 8009ddc:	e7e4      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dde:	2403      	movs	r4, #3
 8009de0:	e7e2      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009de2:	2403      	movs	r4, #3
 8009de4:	e7e0      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009de6:	2403      	movs	r4, #3
 8009de8:	e7de      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dea:	2403      	movs	r4, #3
 8009dec:	e7dc      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dee:	2403      	movs	r4, #3
 8009df0:	e7da      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009df2:	2403      	movs	r4, #3
 8009df4:	e7d8      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009df6:	2403      	movs	r4, #3
 8009df8:	e7d6      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dfa:	2403      	movs	r4, #3
 8009dfc:	e7d4      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009dfe:	2403      	movs	r4, #3
 8009e00:	e7d2      	b.n	8009da8 <LoRaMacMibSetRequestConfirm+0x498>
 8009e02:	bf00      	nop
 8009e04:	20000780 	.word	0x20000780

08009e08 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8009e08:	b570      	push	{r4, r5, r6, lr}
 8009e0a:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f000 80c5 	beq.w	8009fa2 <LoRaMacMlmeRequest+0x19a>
 8009e18:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8009e1a:	f7ff f9cf 	bl	80091bc <LoRaMacIsBusy>
 8009e1e:	b118      	cbz	r0, 8009e28 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 8009e20:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 8009e22:	4620      	mov	r0, r4
 8009e24:	b002      	add	sp, #8
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8009e28:	f000 fcd4 	bl	800a7d4 <LoRaMacConfirmQueueIsFull>
 8009e2c:	b108      	cbz	r0, 8009e32 <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 8009e2e:	2401      	movs	r4, #1
 8009e30:	e7f7      	b.n	8009e22 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009e32:	f000 fcc9 	bl	800a7c8 <LoRaMacConfirmQueueGetCnt>
 8009e36:	b1f8      	cbz	r0, 8009e78 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e38:	4b5b      	ldr	r3, [pc, #364]	@ (8009fa8 <LoRaMacMlmeRequest+0x1a0>)
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	f883 144d 	strb.w	r1, [r3, #1101]	@ 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009e40:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 8009e44:	f042 0204 	orr.w	r2, r2, #4
 8009e48:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    queueElement.Request = mlmeRequest->Type;
 8009e4c:	782b      	ldrb	r3, [r5, #0]
 8009e4e:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e52:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 8009e56:	2200      	movs	r2, #0
 8009e58:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 8009e5c:	461c      	mov	r4, r3
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	2b0d      	cmp	r3, #13
 8009e62:	f200 8084 	bhi.w	8009f6e <LoRaMacMlmeRequest+0x166>
 8009e66:	e8df f003 	tbb	[pc, r3]
 8009e6a:	820d      	.short	0x820d
 8009e6c:	423d3382 	.word	0x423d3382
 8009e70:	4b828282 	.word	0x4b828282
 8009e74:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8009e78:	2214      	movs	r2, #20
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	484b      	ldr	r0, [pc, #300]	@ (8009fac <LoRaMacMlmeRequest+0x1a4>)
 8009e7e:	f004 fb1c 	bl	800e4ba <memset1>
 8009e82:	e7d9      	b.n	8009e38 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8009e84:	4b48      	ldr	r3, [pc, #288]	@ (8009fa8 <LoRaMacMlmeRequest+0x1a0>)
 8009e86:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8009e8a:	f013 0f20 	tst.w	r3, #32
 8009e8e:	d1c8      	bne.n	8009e22 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 8009e90:	f7fe fec4 	bl	8008c1c <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009e94:	4c46      	ldr	r4, [pc, #280]	@ (8009fb0 <LoRaMacMlmeRequest+0x1a8>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	f995 1004 	ldrsb.w	r1, [r5, #4]
 8009e9c:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8009ea0:	f001 faa9 	bl	800b3f6 <RegionAlternateDr>
 8009ea4:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009ea8:	2307      	movs	r3, #7
 8009eaa:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 8009eae:	20ff      	movs	r0, #255	@ 0xff
 8009eb0:	f7fe ffd8 	bl	8008e64 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d05a      	beq.n	8009f70 <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8009eba:	4e3d      	ldr	r6, [pc, #244]	@ (8009fb0 <LoRaMacMlmeRequest+0x1a8>)
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f995 1004 	ldrsb.w	r1, [r5, #4]
 8009ec2:	f896 0040 	ldrb.w	r0, [r6, #64]	@ 0x40
 8009ec6:	f001 fa96 	bl	800b3f6 <RegionAlternateDr>
 8009eca:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
 8009ece:	e04f      	b.n	8009f70 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	4669      	mov	r1, sp
 8009ed4:	2002      	movs	r0, #2
 8009ed6:	f000 fa75 	bl	800a3c4 <LoRaMacCommandsAddCmd>
 8009eda:	4604      	mov	r4, r0
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d047      	beq.n	8009f70 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009ee0:	2413      	movs	r4, #19
 8009ee2:	e045      	b.n	8009f70 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009ee4:	88a8      	ldrh	r0, [r5, #4]
 8009ee6:	f7fe ffe7 	bl	8008eb8 <SetTxContinuousWave>
 8009eea:	4604      	mov	r4, r0
            break;
 8009eec:	e040      	b.n	8009f70 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8009eee:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8009ef2:	b2d2      	uxtb	r2, r2
 8009ef4:	68a9      	ldr	r1, [r5, #8]
 8009ef6:	88a8      	ldrh	r0, [r5, #4]
 8009ef8:	f7fd f892 	bl	8007020 <SetTxContinuousWave1>
 8009efc:	4604      	mov	r4, r0
            break;
 8009efe:	e037      	b.n	8009f70 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009f00:	2200      	movs	r2, #0
 8009f02:	4669      	mov	r1, sp
 8009f04:	200d      	movs	r0, #13
 8009f06:	f000 fa5d 	bl	800a3c4 <LoRaMacCommandsAddCmd>
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	b380      	cbz	r0, 8009f70 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f0e:	2413      	movs	r4, #19
 8009f10:	e02e      	b.n	8009f70 <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009f12:	4b27      	ldr	r3, [pc, #156]	@ (8009fb0 <LoRaMacMlmeRequest+0x1a8>)
 8009f14:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8009f18:	b10b      	cbz	r3, 8009f1e <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009f1a:	2402      	movs	r4, #2
 8009f1c:	e028      	b.n	8009f70 <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8009f1e:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8009f20:	f004 0007 	and.w	r0, r4, #7
 8009f24:	f000 f9a9 	bl	800a27a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8009f28:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	4669      	mov	r1, sp
 8009f30:	2010      	movs	r0, #16
 8009f32:	f000 fa47 	bl	800a3c4 <LoRaMacCommandsAddCmd>
 8009f36:	4604      	mov	r4, r0
 8009f38:	b1d0      	cbz	r0, 8009f70 <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f3a:	2413      	movs	r4, #19
 8009f3c:	e018      	b.n	8009f70 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009f3e:	2200      	movs	r2, #0
 8009f40:	4669      	mov	r1, sp
 8009f42:	2012      	movs	r0, #18
 8009f44:	f000 fa3e 	bl	800a3c4 <LoRaMacCommandsAddCmd>
 8009f48:	4604      	mov	r4, r0
 8009f4a:	b188      	cbz	r0, 8009f70 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f4c:	2413      	movs	r4, #19
 8009f4e:	e00f      	b.n	8009f70 <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 8009f50:	2301      	movs	r3, #1
 8009f52:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009f56:	f000 f981 	bl	800a25c <LoRaMacClassBIsAcquisitionInProgress>
 8009f5a:	b108      	cbz	r0, 8009f60 <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 8009f5c:	2401      	movs	r4, #1
 8009f5e:	e007      	b.n	8009f70 <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8009f60:	f000 f979 	bl	800a256 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8009f64:	2000      	movs	r0, #0
 8009f66:	f000 f97b 	bl	800a260 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8009f6a:	2400      	movs	r4, #0
 8009f6c:	e000      	b.n	8009f70 <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 8009f6e:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009f70:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa8 <LoRaMacMlmeRequest+0x1a0>)
 8009f72:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8009f76:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8009f78:	b17c      	cbz	r4, 8009f9a <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009f7a:	f000 fc25 	bl	800a7c8 <LoRaMacConfirmQueueGetCnt>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f47f af4f 	bne.w	8009e22 <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 8009f84:	4b08      	ldr	r3, [pc, #32]	@ (8009fa8 <LoRaMacMlmeRequest+0x1a0>)
 8009f86:	2100      	movs	r1, #0
 8009f88:	f883 1414 	strb.w	r1, [r3, #1044]	@ 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009f8c:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 8009f90:	f361 0282 	bfi	r2, r1, #2, #1
 8009f94:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
 8009f98:	e743      	b.n	8009e22 <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 8009f9a:	a801      	add	r0, sp, #4
 8009f9c:	f000 fb50 	bl	800a640 <LoRaMacConfirmQueueAdd>
 8009fa0:	e73f      	b.n	8009e22 <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009fa2:	2403      	movs	r4, #3
 8009fa4:	e73d      	b.n	8009e22 <LoRaMacMlmeRequest+0x1a>
 8009fa6:	bf00      	nop
 8009fa8:	20000d90 	.word	0x20000d90
 8009fac:	200011dc 	.word	0x200011dc
 8009fb0:	20000780 	.word	0x20000780

08009fb4 <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	f000 80b0 	beq.w	800a11a <LoRaMacMcpsRequest+0x166>
{
 8009fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	460d      	mov	r5, r1
 8009fc2:	f04f 0800 	mov.w	r8, #0
 8009fc6:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 8009fc8:	f7ff f8f8 	bl	80091bc <LoRaMacIsBusy>
 8009fcc:	4606      	mov	r6, r0
 8009fce:	b118      	cbz	r0, 8009fd8 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8009fd0:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8009fd2:	b008      	add	sp, #32
 8009fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 8009fd8:	4641      	mov	r1, r8
 8009fda:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009fde:	4f51      	ldr	r7, [pc, #324]	@ (800a124 <LoRaMacMcpsRequest+0x170>)
 8009fe0:	2214      	movs	r2, #20
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	f004 fa69 	bl	800e4ba <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	707b      	strb	r3, [r7, #1]
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009fec:	f807 3c26 	strb.w	r3, [r7, #-38]
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009ff0:	f5a7 6787 	sub.w	r7, r7, #1080	@ 0x438
    switch( mcpsRequest->Type )
 8009ff4:	7823      	ldrb	r3, [r4, #0]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d059      	beq.n	800a0ae <LoRaMacMcpsRequest+0xfa>
 8009ffa:	2b03      	cmp	r3, #3
 8009ffc:	d06f      	beq.n	800a0de <LoRaMacMcpsRequest+0x12a>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d042      	beq.n	800a088 <LoRaMacMcpsRequest+0xd4>
 800a002:	2700      	movs	r7, #0
 800a004:	46ba      	mov	sl, r7
 800a006:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a008:	2302      	movs	r3, #2
 800a00a:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a00e:	4b46      	ldr	r3, [pc, #280]	@ (800a128 <LoRaMacMcpsRequest+0x174>)
 800a010:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 800a014:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a018:	a906      	add	r1, sp, #24
 800a01a:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800a01e:	f001 f8fa 	bl	800b216 <RegionGetPhyParam>
 800a022:	9005      	str	r0, [sp, #20]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a024:	b240      	sxtb	r0, r0
 800a026:	42b8      	cmp	r0, r7
 800a028:	bfb8      	it	lt
 800a02a:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800a02c:	2e00      	cmp	r6, #0
 800a02e:	d06e      	beq.n	800a10e <LoRaMacMcpsRequest+0x15a>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800a030:	4b3d      	ldr	r3, [pc, #244]	@ (800a128 <LoRaMacMcpsRequest+0x174>)
 800a032:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 800a036:	b99b      	cbnz	r3, 800a060 <LoRaMacMcpsRequest+0xac>
            verify.DatarateParams.Datarate = datarate;
 800a038:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a03c:	4b3a      	ldr	r3, [pc, #232]	@ (800a128 <LoRaMacMcpsRequest+0x174>)
 800a03e:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 800a042:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a046:	2205      	movs	r2, #5
 800a048:	a903      	add	r1, sp, #12
 800a04a:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800a04e:	f001 f916 	bl	800b27e <RegionVerify>
 800a052:	2800      	cmp	r0, #0
 800a054:	d063      	beq.n	800a11e <LoRaMacMcpsRequest+0x16a>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a056:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800a05a:	4b33      	ldr	r3, [pc, #204]	@ (800a128 <LoRaMacMcpsRequest+0x174>)
 800a05c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800a060:	9500      	str	r5, [sp, #0]
 800a062:	4643      	mov	r3, r8
 800a064:	4652      	mov	r2, sl
 800a066:	4649      	mov	r1, r9
 800a068:	a804      	add	r0, sp, #16
 800a06a:	f7ff f817 	bl	800909c <Send>
        if( status == LORAMAC_STATUS_OK )
 800a06e:	2800      	cmp	r0, #0
 800a070:	d148      	bne.n	800a104 <LoRaMacMcpsRequest+0x150>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800a072:	7822      	ldrb	r2, [r4, #0]
 800a074:	4b2d      	ldr	r3, [pc, #180]	@ (800a12c <LoRaMacMcpsRequest+0x178>)
 800a076:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800a07a:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 800a07e:	f042 0201 	orr.w	r2, r2, #1
 800a082:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
 800a086:	e043      	b.n	800a110 <LoRaMacMcpsRequest+0x15c>
            MacCtx.AckTimeoutRetries = 1;
 800a088:	2601      	movs	r6, #1
 800a08a:	f887 6411 	strb.w	r6, [r7, #1041]	@ 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a08e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a092:	2202      	movs	r2, #2
 800a094:	f362 1347 	bfi	r3, r2, #5, #3
 800a098:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800a09c:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800a0a0:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800a0a4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800a0a8:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800a0ac:	e7ac      	b.n	800a008 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800a0ae:	7be3      	ldrb	r3, [r4, #15]
 800a0b0:	2b08      	cmp	r3, #8
 800a0b2:	bf28      	it	cs
 800a0b4:	2308      	movcs	r3, #8
 800a0b6:	4a1d      	ldr	r2, [pc, #116]	@ (800a12c <LoRaMacMcpsRequest+0x178>)
 800a0b8:	f882 3411 	strb.w	r3, [r2, #1041]	@ 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a0bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a0c0:	2204      	movs	r2, #4
 800a0c2:	f362 1347 	bfi	r3, r2, #5, #3
 800a0c6:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800a0ca:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800a0ce:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800a0d2:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800a0d6:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800a0da:	2601      	movs	r6, #1
            break;
 800a0dc:	e794      	b.n	800a008 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800a0de:	2601      	movs	r6, #1
 800a0e0:	4b12      	ldr	r3, [pc, #72]	@ (800a12c <LoRaMacMcpsRequest+0x178>)
 800a0e2:	f883 6411 	strb.w	r6, [r3, #1041]	@ 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800a0e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a0ea:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800a0ee:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800a0f2:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800a0f6:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800a0fa:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800a0fe:	f04f 0900 	mov.w	r9, #0
            break;
 800a102:	e781      	b.n	800a008 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800a104:	4b09      	ldr	r3, [pc, #36]	@ (800a12c <LoRaMacMcpsRequest+0x178>)
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800a10c:	e000      	b.n	800a110 <LoRaMacMcpsRequest+0x15c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a10e:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800a110:	4b06      	ldr	r3, [pc, #24]	@ (800a12c <LoRaMacMcpsRequest+0x178>)
 800a112:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800a116:	6123      	str	r3, [r4, #16]
    return status;
 800a118:	e75b      	b.n	8009fd2 <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a11a:	2003      	movs	r0, #3
}
 800a11c:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800a11e:	2003      	movs	r0, #3
 800a120:	e757      	b.n	8009fd2 <LoRaMacMcpsRequest+0x1e>
 800a122:	bf00      	nop
 800a124:	200011c8 	.word	0x200011c8
 800a128:	20000780 	.word	0x20000780
 800a12c:	20000d90 	.word	0x20000d90

0800a130 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800a130:	b510      	push	{r4, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800a136:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a13a:	220f      	movs	r2, #15
 800a13c:	a901      	add	r1, sp, #4
 800a13e:	4b05      	ldr	r3, [pc, #20]	@ (800a154 <LoRaMacTestSetDutyCycleOn+0x24>)
 800a140:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800a144:	f001 f89b 	bl	800b27e <RegionVerify>
 800a148:	b110      	cbz	r0, 800a150 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800a14a:	4b02      	ldr	r3, [pc, #8]	@ (800a154 <LoRaMacTestSetDutyCycleOn+0x24>)
 800a14c:	f883 4100 	strb.w	r4, [r3, #256]	@ 0x100
    }
}
 800a150:	b002      	add	sp, #8
 800a152:	bd10      	pop	{r4, pc}
 800a154:	20000780 	.word	0x20000780

0800a158 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	b089      	sub	sp, #36	@ 0x24
 800a15e:	460f      	mov	r7, r1
 800a160:	4616      	mov	r6, r2
 800a162:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800a164:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800a168:	f990 b011 	ldrsb.w	fp, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800a16c:	6883      	ldr	r3, [r0, #8]
 800a16e:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800a170:	f890 8005 	ldrb.w	r8, [r0, #5]
 800a174:	f1b8 0f00 	cmp.w	r8, #0
 800a178:	d107      	bne.n	800a18a <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800a17a:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800a17e:	f886 b000 	strb.w	fp, [r6]
    return adrAckReq;
}
 800a182:	4640      	mov	r0, r8
 800a184:	b009      	add	sp, #36	@ 0x24
 800a186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18a:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800a18c:	2302      	movs	r3, #2
 800a18e:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a192:	7c83      	ldrb	r3, [r0, #18]
 800a194:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a198:	a906      	add	r1, sp, #24
 800a19a:	7cc0      	ldrb	r0, [r0, #19]
 800a19c:	f001 f83b 	bl	800b216 <RegionGetPhyParam>
 800a1a0:	9005      	str	r0, [sp, #20]
        minTxDatarate = phyParam.Value;
 800a1a2:	fa4f fa80 	sxtb.w	sl, r0
        datarate = MAX( datarate, minTxDatarate );
 800a1a6:	464a      	mov	r2, r9
 800a1a8:	45d1      	cmp	r9, sl
 800a1aa:	bfb8      	it	lt
 800a1ac:	4652      	movlt	r2, sl
 800a1ae:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800a1b0:	45d1      	cmp	r9, sl
 800a1b2:	dc04      	bgt.n	800a1be <CalcNextV10X+0x66>
            *adrAckCounter = 0;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800a1b8:	4691      	mov	r9, r2
            adrAckReq = false;
 800a1ba:	4698      	mov	r8, r3
 800a1bc:	e7dd      	b.n	800a17a <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a1be:	68a2      	ldr	r2, [r4, #8]
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d201      	bcs.n	800a1ca <CalcNextV10X+0x72>
                adrAckReq = false;
 800a1c6:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a1ca:	89e1      	ldrh	r1, [r4, #14]
 800a1cc:	440b      	add	r3, r1
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d202      	bcs.n	800a1d8 <CalcNextV10X+0x80>
        datarate = MAX( datarate, minTxDatarate );
 800a1d2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a1d6:	e7d0      	b.n	800a17a <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800a1d8:	2308      	movs	r3, #8
 800a1da:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a1de:	a906      	add	r1, sp, #24
 800a1e0:	7ce0      	ldrb	r0, [r4, #19]
 800a1e2:	f001 f818 	bl	800b216 <RegionGetPhyParam>
 800a1e6:	9005      	str	r0, [sp, #20]
                txPower = phyParam.Value;
 800a1e8:	fa4f fb80 	sxtb.w	fp, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a1ec:	68a3      	ldr	r3, [r4, #8]
 800a1ee:	89e2      	ldrh	r2, [r4, #14]
 800a1f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1f4:	fb02 3311 	mls	r3, r2, r1, r3
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d002      	beq.n	800a202 <CalcNextV10X+0xaa>
        datarate = MAX( datarate, minTxDatarate );
 800a1fc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a200:	e7bb      	b.n	800a17a <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a202:	2322      	movs	r3, #34	@ 0x22
 800a204:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800a208:	9b01      	ldr	r3, [sp, #4]
 800a20a:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a20e:	7ca3      	ldrb	r3, [r4, #18]
 800a210:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a214:	a906      	add	r1, sp, #24
 800a216:	7ce0      	ldrb	r0, [r4, #19]
 800a218:	f000 fffd 	bl	800b216 <RegionGetPhyParam>
 800a21c:	9005      	str	r0, [sp, #20]
                    datarate = phyParam.Value;
 800a21e:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800a222:	45ca      	cmp	sl, r9
 800a224:	d1a9      	bne.n	800a17a <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800a226:	f894 8004 	ldrb.w	r8, [r4, #4]
 800a22a:	f1b8 0f00 	cmp.w	r8, #0
 800a22e:	d0a4      	beq.n	800a17a <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a230:	2302      	movs	r3, #2
 800a232:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800a236:	a902      	add	r1, sp, #8
 800a238:	7ce0      	ldrb	r0, [r4, #19]
 800a23a:	f001 f812 	bl	800b262 <RegionInitDefaults>
                        adrAckReq = false;
 800a23e:	f04f 0800 	mov.w	r8, #0
 800a242:	e79a      	b.n	800a17a <CalcNextV10X+0x22>

0800a244 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800a244:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800a246:	7884      	ldrb	r4, [r0, #2]
 800a248:	b10c      	cbz	r4, 800a24e <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800a24a:	2000      	movs	r0, #0
}
 800a24c:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800a24e:	f7ff ff83 	bl	800a158 <CalcNextV10X>
 800a252:	e7fb      	b.n	800a24c <LoRaMacAdrCalcNext+0x8>

0800a254 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a254:	4770      	bx	lr

0800a256 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a256:	4770      	bx	lr

0800a258 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a258:	4770      	bx	lr

0800a25a <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a25a:	4770      	bx	lr

0800a25c <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a25c:	2000      	movs	r0, #0
 800a25e:	4770      	bx	lr

0800a260 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a260:	4770      	bx	lr

0800a262 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a262:	4770      	bx	lr

0800a264 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a264:	4770      	bx	lr

0800a266 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a266:	2000      	movs	r0, #0
 800a268:	4770      	bx	lr

0800a26a <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a26a:	2000      	movs	r0, #0
 800a26c:	4770      	bx	lr

0800a26e <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a26e:	2000      	movs	r0, #0
 800a270:	4770      	bx	lr

0800a272 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a272:	2000      	movs	r0, #0
 800a274:	4770      	bx	lr

0800a276 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a276:	2000      	movs	r0, #0
 800a278:	4770      	bx	lr

0800a27a <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a27a:	4770      	bx	lr

0800a27c <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a27c:	4770      	bx	lr

0800a27e <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a27e:	4770      	bx	lr

0800a280 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a280:	2002      	movs	r0, #2
 800a282:	4770      	bx	lr

0800a284 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a284:	2002      	movs	r0, #2
 800a286:	4770      	bx	lr

0800a288 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a288:	2002      	movs	r0, #2
 800a28a:	4770      	bx	lr

0800a28c <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a28c:	4770      	bx	lr

0800a28e <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a28e:	2000      	movs	r0, #0
 800a290:	4770      	bx	lr

0800a292 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a292:	4770      	bx	lr

0800a294 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a294:	4770      	bx	lr

0800a296 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a296:	2000      	movs	r0, #0
 800a298:	4770      	bx	lr

0800a29a <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a29a:	2000      	movs	r0, #0
 800a29c:	4770      	bx	lr

0800a29e <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a29e:	4770      	bx	lr

0800a2a0 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a2a0:	4770      	bx	lr

0800a2a2 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	2b0f      	cmp	r3, #15
 800a2a6:	d804      	bhi.n	800a2b2 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800a2a8:	5cc2      	ldrb	r2, [r0, r3]
 800a2aa:	b922      	cbnz	r2, 800a2b6 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	e7f8      	b.n	800a2a4 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	4770      	bx	lr
            return false;
 800a2b6:	2000      	movs	r0, #0
}
 800a2b8:	4770      	bx	lr
	...

0800a2bc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800a2bc:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800a2be:	2500      	movs	r5, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800a2c0:	012c      	lsls	r4, r5, #4
 800a2c2:	3408      	adds	r4, #8
 800a2c4:	4b06      	ldr	r3, [pc, #24]	@ (800a2e0 <MallocNewMacCommandSlot+0x24>)
 800a2c6:	441c      	add	r4, r3
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f7ff ffea 	bl	800a2a2 <IsSlotFree>
 800a2ce:	b920      	cbnz	r0, 800a2da <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800a2d0:	3501      	adds	r5, #1
 800a2d2:	b2ed      	uxtb	r5, r5
        if( itr == NUM_OF_MAC_COMMANDS )
 800a2d4:	2d0f      	cmp	r5, #15
 800a2d6:	d1f3      	bne.n	800a2c0 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800a2d8:	2400      	movs	r4, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800a2da:	4620      	mov	r0, r4
 800a2dc:	bd38      	pop	{r3, r4, r5, pc}
 800a2de:	bf00      	nop
 800a2e0:	20001298 	.word	0x20001298

0800a2e4 <LinkedListInit>:
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800a2e4:	b120      	cbz	r0, 800a2f0 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800a2ea:	6042      	str	r2, [r0, #4]

    return true;
 800a2ec:	2001      	movs	r0, #1
 800a2ee:	4770      	bx	lr
        return false;
 800a2f0:	2000      	movs	r0, #0
}
 800a2f2:	4770      	bx	lr

0800a2f4 <LinkedListAdd>:
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	b160      	cbz	r0, 800a312 <LinkedListAdd+0x1e>
 800a2f8:	b169      	cbz	r1, 800a316 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800a2fa:	6802      	ldr	r2, [r0, #0]
 800a2fc:	b13a      	cbz	r2, 800a30e <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	b102      	cbz	r2, 800a304 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800a302:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800a304:	2200      	movs	r2, #0
 800a306:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800a308:	6059      	str	r1, [r3, #4]

    return true;
 800a30a:	2001      	movs	r0, #1
 800a30c:	4770      	bx	lr
        list->First = element;
 800a30e:	6001      	str	r1, [r0, #0]
 800a310:	e7f5      	b.n	800a2fe <LinkedListAdd+0xa>
        return false;
 800a312:	2000      	movs	r0, #0
 800a314:	4770      	bx	lr
 800a316:	2000      	movs	r0, #0
}
 800a318:	4770      	bx	lr

0800a31a <LinkedListGetPrevious>:
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a31a:	b160      	cbz	r0, 800a336 <LinkedListGetPrevious+0x1c>
 800a31c:	b161      	cbz	r1, 800a338 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800a31e:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800a320:	4281      	cmp	r1, r0
 800a322:	d102      	bne.n	800a32a <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800a324:	2000      	movs	r0, #0
    }

    return curElement;
}
 800a326:	4770      	bx	lr
            curElement = curElement->Next;
 800a328:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d0fb      	beq.n	800a326 <LinkedListGetPrevious+0xc>
 800a32e:	6803      	ldr	r3, [r0, #0]
 800a330:	428b      	cmp	r3, r1
 800a332:	d1f9      	bne.n	800a328 <LinkedListGetPrevious+0xe>
 800a334:	4770      	bx	lr
 800a336:	4770      	bx	lr
        return NULL;
 800a338:	4608      	mov	r0, r1
 800a33a:	4770      	bx	lr

0800a33c <LinkedListRemove>:
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800a33c:	b1b8      	cbz	r0, 800a36e <LinkedListRemove+0x32>
{
 800a33e:	b538      	push	{r3, r4, r5, lr}
 800a340:	460c      	mov	r4, r1
 800a342:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800a344:	b1a9      	cbz	r1, 800a372 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800a346:	f7ff ffe8 	bl	800a31a <LinkedListGetPrevious>

    if( list->First == element )
 800a34a:	682b      	ldr	r3, [r5, #0]
 800a34c:	42a3      	cmp	r3, r4
 800a34e:	d009      	beq.n	800a364 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800a350:	686b      	ldr	r3, [r5, #4]
 800a352:	42a3      	cmp	r3, r4
 800a354:	d009      	beq.n	800a36a <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800a356:	b108      	cbz	r0, 800a35c <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800a35c:	2300      	movs	r3, #0
 800a35e:	6023      	str	r3, [r4, #0]

    return true;
 800a360:	2001      	movs	r0, #1
}
 800a362:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	602b      	str	r3, [r5, #0]
 800a368:	e7f2      	b.n	800a350 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800a36a:	6068      	str	r0, [r5, #4]
 800a36c:	e7f3      	b.n	800a356 <LinkedListRemove+0x1a>
        return false;
 800a36e:	2000      	movs	r0, #0
}
 800a370:	4770      	bx	lr
        return false;
 800a372:	2000      	movs	r0, #0
 800a374:	e7f5      	b.n	800a362 <LinkedListRemove+0x26>

0800a376 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800a376:	2805      	cmp	r0, #5
 800a378:	d006      	beq.n	800a388 <IsSticky+0x12>
 800a37a:	d307      	bcc.n	800a38c <IsSticky+0x16>
 800a37c:	3808      	subs	r0, #8
 800a37e:	b2c0      	uxtb	r0, r0
 800a380:	2802      	cmp	r0, #2
 800a382:	d905      	bls.n	800a390 <IsSticky+0x1a>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
        default:
            return false;
 800a384:	2000      	movs	r0, #0
 800a386:	4770      	bx	lr
    switch( cid )
 800a388:	2001      	movs	r0, #1
 800a38a:	4770      	bx	lr
            return false;
 800a38c:	2000      	movs	r0, #0
 800a38e:	4770      	bx	lr
    switch( cid )
 800a390:	2001      	movs	r0, #1
    }
}
 800a392:	4770      	bx	lr

0800a394 <FreeMacCommandSlot>:
    if( slot == NULL )
 800a394:	b130      	cbz	r0, 800a3a4 <FreeMacCommandSlot+0x10>
{
 800a396:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a398:	2210      	movs	r2, #16
 800a39a:	2100      	movs	r1, #0
 800a39c:	f004 f88d 	bl	800e4ba <memset1>
    return true;
 800a3a0:	2001      	movs	r0, #1
}
 800a3a2:	bd08      	pop	{r3, pc}
        return false;
 800a3a4:	2000      	movs	r0, #0
}
 800a3a6:	4770      	bx	lr

0800a3a8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800a3a8:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800a3aa:	4c05      	ldr	r4, [pc, #20]	@ (800a3c0 <LoRaMacCommandsInit+0x18>)
 800a3ac:	22fc      	movs	r2, #252	@ 0xfc
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f004 f882 	bl	800e4ba <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f7ff ff94 	bl	800a2e4 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a3bc:	2000      	movs	r0, #0
 800a3be:	bd10      	pop	{r4, pc}
 800a3c0:	20001298 	.word	0x20001298

0800a3c4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800a3c4:	b301      	cbz	r1, 800a408 <LoRaMacCommandsAddCmd+0x44>
{
 800a3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	4614      	mov	r4, r2
 800a3cc:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800a3ce:	f7ff ff75 	bl	800a2bc <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	b1d0      	cbz	r0, 800a40c <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800a3d6:	4601      	mov	r1, r0
 800a3d8:	480e      	ldr	r0, [pc, #56]	@ (800a414 <LoRaMacCommandsAddCmd+0x50>)
 800a3da:	f7ff ff8b 	bl	800a2f4 <LinkedListAdd>
 800a3de:	b1b8      	cbz	r0, 800a410 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800a3e0:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800a3e2:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a3e4:	b2a2      	uxth	r2, r4
 800a3e6:	4639      	mov	r1, r7
 800a3e8:	1d70      	adds	r0, r6, #5
 800a3ea:	f004 f84e 	bl	800e48a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f7ff ffc1 	bl	800a376 <IsSticky>
 800a3f4:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a3f6:	4a07      	ldr	r2, [pc, #28]	@ (800a414 <LoRaMacCommandsAddCmd+0x50>)
 800a3f8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
 800a3fc:	4423      	add	r3, r4
 800a3fe:	3301      	adds	r3, #1
 800a400:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800a404:	2000      	movs	r0, #0
}
 800a406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a408:	2001      	movs	r0, #1
}
 800a40a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a40c:	2002      	movs	r0, #2
 800a40e:	e7fa      	b.n	800a406 <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800a410:	2005      	movs	r0, #5
 800a412:	e7f8      	b.n	800a406 <LoRaMacCommandsAddCmd+0x42>
 800a414:	20001298 	.word	0x20001298

0800a418 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800a418:	b1a0      	cbz	r0, 800a444 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800a41a:	b510      	push	{r4, lr}
 800a41c:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800a41e:	4601      	mov	r1, r0
 800a420:	480b      	ldr	r0, [pc, #44]	@ (800a450 <LoRaMacCommandsRemoveCmd+0x38>)
 800a422:	f7ff ff8b 	bl	800a33c <LinkedListRemove>
 800a426:	b178      	cbz	r0, 800a448 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a428:	4a09      	ldr	r2, [pc, #36]	@ (800a450 <LoRaMacCommandsRemoveCmd+0x38>)
 800a42a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
 800a42e:	68a1      	ldr	r1, [r4, #8]
 800a430:	1a5b      	subs	r3, r3, r1
 800a432:	3b01      	subs	r3, #1
 800a434:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800a438:	4620      	mov	r0, r4
 800a43a:	f7ff ffab 	bl	800a394 <FreeMacCommandSlot>
 800a43e:	b128      	cbz	r0, 800a44c <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800a440:	2000      	movs	r0, #0
}
 800a442:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a444:	2001      	movs	r0, #1
}
 800a446:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800a448:	2003      	movs	r0, #3
 800a44a:	e7fa      	b.n	800a442 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800a44c:	2005      	movs	r0, #5
 800a44e:	e7f8      	b.n	800a442 <LoRaMacCommandsRemoveCmd+0x2a>
 800a450:	20001298 	.word	0x20001298

0800a454 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a454:	4b0a      	ldr	r3, [pc, #40]	@ (800a480 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800a456:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a458:	b120      	cbz	r0, 800a464 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800a45a:	7b03      	ldrb	r3, [r0, #12]
 800a45c:	b11b      	cbz	r3, 800a466 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800a45e:	6800      	ldr	r0, [r0, #0]
 800a460:	e7fa      	b.n	800a458 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a462:	bd10      	pop	{r4, pc}
 800a464:	4770      	bx	lr
{
 800a466:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800a468:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800a46a:	f7ff ffd5 	bl	800a418 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800a46e:	4620      	mov	r0, r4
    while( curElement != NULL )
 800a470:	2800      	cmp	r0, #0
 800a472:	d0f6      	beq.n	800a462 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800a474:	7b03      	ldrb	r3, [r0, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d0f6      	beq.n	800a468 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800a47a:	6800      	ldr	r0, [r0, #0]
 800a47c:	e7f8      	b.n	800a470 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800a47e:	bf00      	nop
 800a480:	20001298 	.word	0x20001298

0800a484 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800a484:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a486:	4b08      	ldr	r3, [pc, #32]	@ (800a4a8 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800a488:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a48a:	e000      	b.n	800a48e <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800a48c:	462c      	mov	r4, r5
    while( curElement != NULL )
 800a48e:	b14c      	cbz	r4, 800a4a4 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800a490:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800a492:	7920      	ldrb	r0, [r4, #4]
 800a494:	f7ff ff6f 	bl	800a376 <IsSticky>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d0f7      	beq.n	800a48c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800a49c:	4620      	mov	r0, r4
 800a49e:	f7ff ffbb 	bl	800a418 <LoRaMacCommandsRemoveCmd>
 800a4a2:	e7f3      	b.n	800a48c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	20001298 	.word	0x20001298

0800a4ac <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800a4ac:	b128      	cbz	r0, 800a4ba <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800a4ae:	4a04      	ldr	r2, [pc, #16]	@ (800a4c0 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a4b0:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 800a4b4:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a4ba:	2001      	movs	r0, #1
}
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	20001298 	.word	0x20001298

0800a4c4 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800a4c8:	4b16      	ldr	r3, [pc, #88]	@ (800a524 <LoRaMacCommandsSerializeCmds+0x60>)
 800a4ca:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a4cc:	b32a      	cbz	r2, 800a51a <LoRaMacCommandsSerializeCmds+0x56>
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	4688      	mov	r8, r1
 800a4d2:	4616      	mov	r6, r2
 800a4d4:	b319      	cbz	r1, 800a51e <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800a4d6:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800a4d8:	b194      	cbz	r4, 800a500 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a4da:	1a7a      	subs	r2, r7, r1
 800a4dc:	68a3      	ldr	r3, [r4, #8]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d30d      	bcc.n	800a500 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800a4e4:	1c4d      	adds	r5, r1, #1
 800a4e6:	b2ed      	uxtb	r5, r5
 800a4e8:	7923      	ldrb	r3, [r4, #4]
 800a4ea:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a4ec:	8922      	ldrh	r2, [r4, #8]
 800a4ee:	1d61      	adds	r1, r4, #5
 800a4f0:	1970      	adds	r0, r6, r5
 800a4f2:	f003 ffca 	bl	800e48a <memcpy1>
            itr += curElement->PayloadSize;
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	441d      	add	r5, r3
 800a4fa:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800a4fc:	6824      	ldr	r4, [r4, #0]
 800a4fe:	e7eb      	b.n	800a4d8 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800a500:	b12c      	cbz	r4, 800a50e <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800a502:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800a504:	4620      	mov	r0, r4
 800a506:	f7ff ff87 	bl	800a418 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800a50a:	462c      	mov	r4, r5
 800a50c:	e7f8      	b.n	800a500 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800a50e:	4640      	mov	r0, r8
 800a510:	f7ff ffcc 	bl	800a4ac <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800a514:	2000      	movs	r0, #0
}
 800a516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a51a:	2001      	movs	r0, #1
 800a51c:	e7fb      	b.n	800a516 <LoRaMacCommandsSerializeCmds+0x52>
 800a51e:	2001      	movs	r0, #1
 800a520:	e7f9      	b.n	800a516 <LoRaMacCommandsSerializeCmds+0x52>
 800a522:	bf00      	nop
 800a524:	20001298 	.word	0x20001298

0800a528 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800a528:	4601      	mov	r1, r0
 800a52a:	b170      	cbz	r0, 800a54a <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800a52c:	4b08      	ldr	r3, [pc, #32]	@ (800a550 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800a52e:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800a530:	2200      	movs	r2, #0
 800a532:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a534:	b13b      	cbz	r3, 800a546 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800a536:	7b1a      	ldrb	r2, [r3, #12]
 800a538:	b90a      	cbnz	r2, 800a53e <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	e7fa      	b.n	800a534 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800a53e:	2301      	movs	r3, #1
 800a540:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800a542:	2000      	movs	r0, #0
 800a544:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800a546:	2000      	movs	r0, #0
 800a548:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a54a:	2001      	movs	r0, #1
}
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20001298 	.word	0x20001298

0800a554 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800a554:	1e83      	subs	r3, r0, #2
 800a556:	2b11      	cmp	r3, #17
 800a558:	d80a      	bhi.n	800a570 <LoRaMacCommandsGetCmdSize+0x1c>
 800a55a:	e8df f003 	tbb	[pc, r3]
 800a55e:	0b23      	.short	0x0b23
 800a560:	110f240d 	.word	0x110f240d
 800a564:	09171513 	.word	0x09171513
 800a568:	09091909 	.word	0x09091909
 800a56c:	211f1d1b 	.word	0x211f1d1b
 800a570:	2000      	movs	r0, #0
 800a572:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800a574:	2005      	movs	r0, #5
            break;
 800a576:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800a578:	2002      	movs	r0, #2
            break;
 800a57a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800a57c:	2001      	movs	r0, #1
            break;
 800a57e:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800a580:	2006      	movs	r0, #6
            break;
 800a582:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800a584:	2002      	movs	r0, #2
            break;
 800a586:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800a588:	2002      	movs	r0, #2
            break;
 800a58a:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800a58c:	2005      	movs	r0, #5
            break;
 800a58e:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800a590:	2006      	movs	r0, #6
            break;
 800a592:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800a594:	2001      	movs	r0, #1
            break;
 800a596:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800a598:	2005      	movs	r0, #5
            break;
 800a59a:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800a59c:	2004      	movs	r0, #4
            break;
 800a59e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800a5a0:	2004      	movs	r0, #4
            break;
 800a5a2:	4770      	bx	lr
            cidSize = 3;
 800a5a4:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800a5a6:	4770      	bx	lr

0800a5a8 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a5a8:	4b03      	ldr	r3, [pc, #12]	@ (800a5b8 <IncreaseBufferPointer+0x10>)
 800a5aa:	4298      	cmp	r0, r3
 800a5ac:	d001      	beq.n	800a5b2 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800a5ae:	3004      	adds	r0, #4
 800a5b0:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a5b2:	4802      	ldr	r0, [pc, #8]	@ (800a5bc <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	200013b0 	.word	0x200013b0
 800a5bc:	200013a0 	.word	0x200013a0

0800a5c0 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800a5c0:	b108      	cbz	r0, 800a5c6 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	4770      	bx	lr
        return true;
 800a5c6:	2001      	movs	r0, #1
}
 800a5c8:	4770      	bx	lr

0800a5ca <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a5ca:	2804      	cmp	r0, #4
 800a5cc:	d801      	bhi.n	800a5d2 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	4770      	bx	lr
        return true;
 800a5d2:	2001      	movs	r0, #1
}
 800a5d4:	4770      	bx	lr
	...

0800a5d8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5da:	4606      	mov	r6, r0
 800a5dc:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a5de:	4b0d      	ldr	r3, [pc, #52]	@ (800a614 <GetElement+0x3c>)
 800a5e0:	f893 7020 	ldrb.w	r7, [r3, #32]
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f7ff ffeb 	bl	800a5c0 <IsListEmpty>
 800a5ea:	b970      	cbnz	r0, 800a60a <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a5ec:	2500      	movs	r5, #0
 800a5ee:	42af      	cmp	r7, r5
 800a5f0:	d909      	bls.n	800a606 <GetElement+0x2e>
    {
        if( element->Request == request )
 800a5f2:	7823      	ldrb	r3, [r4, #0]
 800a5f4:	42b3      	cmp	r3, r6
 800a5f6:	d00a      	beq.n	800a60e <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f7ff ffd5 	bl	800a5a8 <IncreaseBufferPointer>
 800a5fe:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a600:	3501      	adds	r5, #1
 800a602:	b2ed      	uxtb	r5, r5
 800a604:	e7f3      	b.n	800a5ee <GetElement+0x16>
    }

    return NULL;
 800a606:	2000      	movs	r0, #0
}
 800a608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800a60a:	2000      	movs	r0, #0
 800a60c:	e7fc      	b.n	800a608 <GetElement+0x30>
            return element;
 800a60e:	4620      	mov	r0, r4
 800a610:	e7fa      	b.n	800a608 <GetElement+0x30>
 800a612:	bf00      	nop
 800a614:	20001394 	.word	0x20001394

0800a618 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800a618:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a61a:	4c08      	ldr	r4, [pc, #32]	@ (800a63c <LoRaMacConfirmQueueInit+0x24>)
 800a61c:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a61e:	2300      	movs	r3, #0
 800a620:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a624:	f104 000c 	add.w	r0, r4, #12
 800a628:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a62a:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a62c:	2214      	movs	r2, #20
 800a62e:	21ff      	movs	r1, #255	@ 0xff
 800a630:	f003 ff43 	bl	800e4ba <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 800a63a:	bd10      	pop	{r4, pc}
 800a63c:	20001394 	.word	0x20001394

0800a640 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a644:	4b0f      	ldr	r3, [pc, #60]	@ (800a684 <LoRaMacConfirmQueueAdd+0x44>)
 800a646:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a64a:	f7ff ffbe 	bl	800a5ca <IsListFull>
 800a64e:	b9b8      	cbnz	r0, 800a680 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a650:	4c0c      	ldr	r4, [pc, #48]	@ (800a684 <LoRaMacConfirmQueueAdd+0x44>)
 800a652:	68a3      	ldr	r3, [r4, #8]
 800a654:	782a      	ldrb	r2, [r5, #0]
 800a656:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a658:	68a3      	ldr	r3, [r4, #8]
 800a65a:	786a      	ldrb	r2, [r5, #1]
 800a65c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a65e:	68a3      	ldr	r3, [r4, #8]
 800a660:	78ea      	ldrb	r2, [r5, #3]
 800a662:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800a664:	68a3      	ldr	r3, [r4, #8]
 800a666:	2200      	movs	r2, #0
 800a668:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a66a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800a66e:	3301      	adds	r3, #1
 800a670:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a674:	68a0      	ldr	r0, [r4, #8]
 800a676:	f7ff ff97 	bl	800a5a8 <IncreaseBufferPointer>
 800a67a:	60a0      	str	r0, [r4, #8]

    return true;
 800a67c:	2001      	movs	r0, #1
}
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800a680:	2000      	movs	r0, #0
 800a682:	e7fc      	b.n	800a67e <LoRaMacConfirmQueueAdd+0x3e>
 800a684:	20001394 	.word	0x20001394

0800a688 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800a688:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a68a:	4b09      	ldr	r3, [pc, #36]	@ (800a6b0 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a68c:	f893 4020 	ldrb.w	r4, [r3, #32]
 800a690:	4620      	mov	r0, r4
 800a692:	f7ff ff95 	bl	800a5c0 <IsListEmpty>
 800a696:	b948      	cbnz	r0, 800a6ac <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a698:	4d05      	ldr	r5, [pc, #20]	@ (800a6b0 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a69a:	3c01      	subs	r4, #1
 800a69c:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a6a0:	6868      	ldr	r0, [r5, #4]
 800a6a2:	f7ff ff81 	bl	800a5a8 <IncreaseBufferPointer>
 800a6a6:	6068      	str	r0, [r5, #4]

    return true;
 800a6a8:	2001      	movs	r0, #1
}
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	e7fc      	b.n	800a6aa <LoRaMacConfirmQueueRemoveFirst+0x22>
 800a6b0:	20001394 	.word	0x20001394

0800a6b4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4605      	mov	r5, r0
 800a6b8:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a6ba:	4b08      	ldr	r3, [pc, #32]	@ (800a6dc <LoRaMacConfirmQueueSetStatus+0x28>)
 800a6bc:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a6c0:	f7ff ff7e 	bl	800a5c0 <IsListEmpty>
 800a6c4:	b948      	cbnz	r0, 800a6da <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a6c6:	4b05      	ldr	r3, [pc, #20]	@ (800a6dc <LoRaMacConfirmQueueSetStatus+0x28>)
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	6859      	ldr	r1, [r3, #4]
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f7ff ff83 	bl	800a5d8 <GetElement>
        if( element != NULL )
 800a6d2:	b110      	cbz	r0, 800a6da <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800a6d4:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	20001394 	.word	0x20001394

0800a6e0 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a6e0:	b510      	push	{r4, lr}
 800a6e2:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a6e4:	4b09      	ldr	r3, [pc, #36]	@ (800a70c <LoRaMacConfirmQueueGetStatus+0x2c>)
 800a6e6:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a6ea:	f7ff ff69 	bl	800a5c0 <IsListEmpty>
 800a6ee:	b940      	cbnz	r0, 800a702 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a6f0:	4b06      	ldr	r3, [pc, #24]	@ (800a70c <LoRaMacConfirmQueueGetStatus+0x2c>)
 800a6f2:	689a      	ldr	r2, [r3, #8]
 800a6f4:	6859      	ldr	r1, [r3, #4]
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f7ff ff6e 	bl	800a5d8 <GetElement>
        if( element != NULL )
 800a6fc:	b118      	cbz	r0, 800a706 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800a6fe:	7840      	ldrb	r0, [r0, #1]
 800a700:	e000      	b.n	800a704 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a702:	2001      	movs	r0, #1
}
 800a704:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a706:	2001      	movs	r0, #1
 800a708:	e7fc      	b.n	800a704 <LoRaMacConfirmQueueGetStatus+0x24>
 800a70a:	bf00      	nop
 800a70c:	20001394 	.word	0x20001394

0800a710 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a714:	4b0c      	ldr	r3, [pc, #48]	@ (800a748 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800a716:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800a718:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a71c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a720:	f7ff ff4e 	bl	800a5c0 <IsListEmpty>
 800a724:	b150      	cbz	r0, 800a73c <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800a726:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800a728:	2301      	movs	r3, #1
 800a72a:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7ff ff3b 	bl	800a5a8 <IncreaseBufferPointer>
 800a732:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a734:	4b04      	ldr	r3, [pc, #16]	@ (800a748 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	4283      	cmp	r3, r0
 800a73a:	d0f4      	beq.n	800a726 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800a73c:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a73e:	78e3      	ldrb	r3, [r4, #3]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1f3      	bne.n	800a72c <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800a744:	e7f0      	b.n	800a728 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800a746:	bf00      	nop
 800a748:	20001394 	.word	0x20001394

0800a74c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800a74c:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a74e:	4b04      	ldr	r3, [pc, #16]	@ (800a760 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800a750:	689a      	ldr	r2, [r3, #8]
 800a752:	6859      	ldr	r1, [r3, #4]
 800a754:	f7ff ff40 	bl	800a5d8 <GetElement>
 800a758:	b100      	cbz	r0, 800a75c <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800a75a:	2001      	movs	r0, #1
    }
    return false;
}
 800a75c:	bd08      	pop	{r3, pc}
 800a75e:	bf00      	nop
 800a760:	20001394 	.word	0x20001394

0800a764 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a766:	b083      	sub	sp, #12
 800a768:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a76a:	4b16      	ldr	r3, [pc, #88]	@ (800a7c4 <LoRaMacConfirmQueueHandleCb+0x60>)
 800a76c:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a770:	2400      	movs	r4, #0
 800a772:	e00d      	b.n	800a790 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a774:	781a      	ldrb	r2, [r3, #0]
 800a776:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a77a:	785a      	ldrb	r2, [r3, #1]
 800a77c:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a780:	78db      	ldrb	r3, [r3, #3]
 800a782:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800a786:	f7ff ff7f 	bl	800a688 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800a78a:	b1a5      	cbz	r5, 800a7b6 <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a78c:	3401      	adds	r4, #1
 800a78e:	b2e4      	uxtb	r4, r4
 800a790:	42bc      	cmp	r4, r7
 800a792:	d214      	bcs.n	800a7be <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a794:	4b0b      	ldr	r3, [pc, #44]	@ (800a7c4 <LoRaMacConfirmQueueHandleCb+0x60>)
 800a796:	685a      	ldr	r2, [r3, #4]
 800a798:	7812      	ldrb	r2, [r2, #0]
 800a79a:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a79c:	685a      	ldr	r2, [r3, #4]
 800a79e:	7852      	ldrb	r2, [r2, #1]
 800a7a0:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800a7a6:	2d00      	cmp	r5, #0
 800a7a8:	d0e4      	beq.n	800a774 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a7aa:	4b06      	ldr	r3, [pc, #24]	@ (800a7c4 <LoRaMacConfirmQueueHandleCb+0x60>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	4798      	blx	r3
 800a7b4:	e7e7      	b.n	800a786 <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a7b6:	a801      	add	r0, sp, #4
 800a7b8:	f7ff ff42 	bl	800a640 <LoRaMacConfirmQueueAdd>
 800a7bc:	e7e6      	b.n	800a78c <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800a7be:	b003      	add	sp, #12
 800a7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20001394 	.word	0x20001394

0800a7c8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800a7c8:	4b01      	ldr	r3, [pc, #4]	@ (800a7d0 <LoRaMacConfirmQueueGetCnt+0x8>)
 800a7ca:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a7ce:	4770      	bx	lr
 800a7d0:	20001394 	.word	0x20001394

0800a7d4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800a7d4:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a7d6:	4b03      	ldr	r3, [pc, #12]	@ (800a7e4 <LoRaMacConfirmQueueIsFull+0x10>)
 800a7d8:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a7dc:	f7ff fef5 	bl	800a5ca <IsListFull>
    }
    else
    {
        return false;
    }
}
 800a7e0:	bd08      	pop	{r3, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20001394 	.word	0x20001394

0800a7e8 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800a7e8:	b410      	push	{r4}
 800a7ea:	9c01      	ldr	r4, [sp, #4]
 800a7ec:	9902      	ldr	r1, [sp, #8]
 800a7ee:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800a7f0:	b1da      	cbz	r2, 800a82a <PrepareB0+0x42>
 800a7f2:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800a7f4:	2049      	movs	r0, #73	@ 0x49
 800a7f6:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800a7fc:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800a7fe:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800a800:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800a802:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800a804:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a806:	0a23      	lsrs	r3, r4, #8
 800a808:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a80a:	0c23      	lsrs	r3, r4, #16
 800a80c:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a80e:	0e24      	lsrs	r4, r4, #24
 800a810:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800a812:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a814:	0a0b      	lsrs	r3, r1, #8
 800a816:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a818:	0c0b      	lsrs	r3, r1, #16
 800a81a:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a81c:	0e09      	lsrs	r1, r1, #24
 800a81e:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800a820:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800a822:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a826:	bc10      	pop	{r4}
 800a828:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a82a:	200a      	movs	r0, #10
 800a82c:	e7fb      	b.n	800a826 <PrepareB0+0x3e>
	...

0800a830 <GetKeyAddrItem>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800a830:	2300      	movs	r3, #0
 800a832:	2b01      	cmp	r3, #1
 800a834:	d80d      	bhi.n	800a852 <GetKeyAddrItem+0x22>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800a836:	4a08      	ldr	r2, [pc, #32]	@ (800a858 <GetKeyAddrItem+0x28>)
 800a838:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800a83c:	4282      	cmp	r2, r0
 800a83e:	d002      	beq.n	800a846 <GetKeyAddrItem+0x16>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800a840:	3301      	adds	r3, #1
 800a842:	b2db      	uxtb	r3, r3
 800a844:	e7f5      	b.n	800a832 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800a846:	4a04      	ldr	r2, [pc, #16]	@ (800a858 <GetKeyAddrItem+0x28>)
 800a848:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a84c:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800a84e:	2000      	movs	r0, #0
 800a850:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800a852:	200c      	movs	r0, #12
}
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	200000c4 	.word	0x200000c4

0800a85c <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800a85c:	460b      	mov	r3, r1
 800a85e:	b309      	cbz	r1, 800a8a4 <GetLastFcntDown+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800a860:	3801      	subs	r0, #1
 800a862:	2803      	cmp	r0, #3
 800a864:	d820      	bhi.n	800a8a8 <GetLastFcntDown+0x4c>
 800a866:	e8df f000 	tbb	[pc, r0]
 800a86a:	0902      	.short	0x0902
 800a86c:	1710      	.short	0x1710
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800a86e:	4a0f      	ldr	r2, [pc, #60]	@ (800a8ac <GetLastFcntDown+0x50>)
 800a870:	6812      	ldr	r2, [r2, #0]
 800a872:	6911      	ldr	r1, [r2, #16]
 800a874:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800a876:	6211      	str	r1, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800a878:	2000      	movs	r0, #0
            break;
 800a87a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800a87c:	4a0b      	ldr	r2, [pc, #44]	@ (800a8ac <GetLastFcntDown+0x50>)
 800a87e:	6812      	ldr	r2, [r2, #0]
 800a880:	6951      	ldr	r1, [r2, #20]
 800a882:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800a884:	6211      	str	r1, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a886:	2000      	movs	r0, #0
            break;
 800a888:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a88a:	4a08      	ldr	r2, [pc, #32]	@ (800a8ac <GetLastFcntDown+0x50>)
 800a88c:	6812      	ldr	r2, [r2, #0]
 800a88e:	6991      	ldr	r1, [r2, #24]
 800a890:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a892:	6211      	str	r1, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a894:	2000      	movs	r0, #0
            break;
 800a896:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a898:	4a04      	ldr	r2, [pc, #16]	@ (800a8ac <GetLastFcntDown+0x50>)
 800a89a:	6812      	ldr	r2, [r2, #0]
 800a89c:	69d2      	ldr	r2, [r2, #28]
 800a89e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800a8a0:	2000      	movs	r0, #0
            break;
 800a8a2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a8a4:	200a      	movs	r0, #10
 800a8a6:	4770      	bx	lr
    switch( fCntID )
 800a8a8:	2005      	movs	r0, #5
}
 800a8aa:	4770      	bx	lr
 800a8ac:	200013b8 	.word	0x200013b8

0800a8b0 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800a8b0:	b510      	push	{r4, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800a8ba:	a901      	add	r1, sp, #4
 800a8bc:	f7ff ffce 	bl	800a85c <GetLastFcntDown>
 800a8c0:	b948      	cbnz	r0, 800a8d6 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800a8c2:	9b01      	ldr	r3, [sp, #4]
 800a8c4:	42a3      	cmp	r3, r4
 800a8c6:	d309      	bcc.n	800a8dc <CheckFCntDown+0x2c>
 800a8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8cc:	d001      	beq.n	800a8d2 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	e002      	b.n	800a8d8 <CheckFCntDown+0x28>
        return true;
 800a8d2:	2001      	movs	r0, #1
 800a8d4:	e000      	b.n	800a8d8 <CheckFCntDown+0x28>
        return false;
 800a8d6:	2000      	movs	r0, #0
    }
}
 800a8d8:	b002      	add	sp, #8
 800a8da:	bd10      	pop	{r4, pc}
        return true;
 800a8dc:	2001      	movs	r0, #1
 800a8de:	e7fb      	b.n	800a8d8 <CheckFCntDown+0x28>

0800a8e0 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800a8e0:	3801      	subs	r0, #1
 800a8e2:	2803      	cmp	r0, #3
 800a8e4:	d812      	bhi.n	800a90c <UpdateFCntDown+0x2c>
 800a8e6:	e8df f000 	tbb	[pc, r0]
 800a8ea:	0602      	.short	0x0602
 800a8ec:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800a8ee:	4b08      	ldr	r3, [pc, #32]	@ (800a910 <UpdateFCntDown+0x30>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6119      	str	r1, [r3, #16]
            break;
 800a8f4:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800a8f6:	4b06      	ldr	r3, [pc, #24]	@ (800a910 <UpdateFCntDown+0x30>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	6159      	str	r1, [r3, #20]
            break;
 800a8fc:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800a8fe:	4b04      	ldr	r3, [pc, #16]	@ (800a910 <UpdateFCntDown+0x30>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6199      	str	r1, [r3, #24]
            break;
 800a904:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800a906:	4b02      	ldr	r3, [pc, #8]	@ (800a910 <UpdateFCntDown+0x30>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	200013b8 	.word	0x200013b8

0800a914 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800a914:	4b0a      	ldr	r3, [pc, #40]	@ (800a940 <ResetFCnts+0x2c>)
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	2300      	movs	r3, #0
 800a91a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a91c:	f04f 31ff 	mov.w	r1, #4294967295
 800a920:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a922:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800a924:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a926:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dd00      	ble.n	800a92e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800a92c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800a92e:	1d99      	adds	r1, r3, #6
 800a930:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a934:	f04f 30ff 	mov.w	r0, #4294967295
 800a938:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a93a:	3301      	adds	r3, #1
 800a93c:	e7f4      	b.n	800a928 <ResetFCnts+0x14>
 800a93e:	bf00      	nop
 800a940:	200013b8 	.word	0x200013b8

0800a944 <ComputeCmacB0>:
{
 800a944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a948:	b088      	sub	sp, #32
 800a94a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800a94c:	b1f0      	cbz	r0, 800a98c <ComputeCmacB0+0x48>
 800a94e:	460c      	mov	r4, r1
 800a950:	4615      	mov	r5, r2
 800a952:	461a      	mov	r2, r3
 800a954:	4680      	mov	r8, r0
 800a956:	b1de      	cbz	r6, 800a990 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a958:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800a95c:	d81a      	bhi.n	800a994 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800a95e:	af04      	add	r7, sp, #16
 800a960:	9702      	str	r7, [sp, #8]
 800a962:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800a96e:	4629      	mov	r1, r5
 800a970:	4620      	mov	r0, r4
 800a972:	f7ff ff39 	bl	800a7e8 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800a976:	9600      	str	r6, [sp, #0]
 800a978:	462b      	mov	r3, r5
 800a97a:	4622      	mov	r2, r4
 800a97c:	4641      	mov	r1, r8
 800a97e:	4638      	mov	r0, r7
 800a980:	f003 fc20 	bl	800e1c4 <SecureElementComputeAesCmac>
 800a984:	b940      	cbnz	r0, 800a998 <ComputeCmacB0+0x54>
}
 800a986:	b008      	add	sp, #32
 800a988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a98c:	200a      	movs	r0, #10
 800a98e:	e7fa      	b.n	800a986 <ComputeCmacB0+0x42>
 800a990:	200a      	movs	r0, #10
 800a992:	e7f8      	b.n	800a986 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a994:	200e      	movs	r0, #14
 800a996:	e7f6      	b.n	800a986 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a998:	200f      	movs	r0, #15
 800a99a:	e7f4      	b.n	800a986 <ComputeCmacB0+0x42>

0800a99c <DeriveSessionKey10x>:
{
 800a99c:	b510      	push	{r4, lr}
 800a99e:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800a9a0:	2400      	movs	r4, #0
 800a9a2:	9400      	str	r4, [sp, #0]
 800a9a4:	9401      	str	r4, [sp, #4]
 800a9a6:	9402      	str	r4, [sp, #8]
 800a9a8:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800a9aa:	2802      	cmp	r0, #2
 800a9ac:	d003      	beq.n	800a9b6 <DeriveSessionKey10x+0x1a>
 800a9ae:	2803      	cmp	r0, #3
 800a9b0:	d025      	beq.n	800a9fe <DeriveSessionKey10x+0x62>
 800a9b2:	200b      	movs	r0, #11
 800a9b4:	e021      	b.n	800a9fa <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800a9b6:	2401      	movs	r4, #1
 800a9b8:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800a9bc:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a9c0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a9c4:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a9c8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800a9cc:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800a9d0:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800a9d4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a9d8:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a9dc:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800a9e0:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800a9e4:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a9e8:	0a1b      	lsrs	r3, r3, #8
 800a9ea:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	4668      	mov	r0, sp
 800a9f4:	f003 fc86 	bl	800e304 <SecureElementDeriveAndStoreKey>
 800a9f8:	b928      	cbnz	r0, 800aa06 <DeriveSessionKey10x+0x6a>
}
 800a9fa:	b004      	add	sp, #16
 800a9fc:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800a9fe:	2402      	movs	r4, #2
 800aa00:	f88d 4000 	strb.w	r4, [sp]
            break;
 800aa04:	e7da      	b.n	800a9bc <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aa06:	200f      	movs	r0, #15
 800aa08:	e7f7      	b.n	800a9fa <DeriveSessionKey10x+0x5e>

0800aa0a <PayloadEncrypt>:
{
 800aa0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0e:	b088      	sub	sp, #32
 800aa10:	4690      	mov	r8, r2
 800aa12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    if( buffer == 0 )
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d052      	beq.n	800aabe <PayloadEncrypt+0xb4>
 800aa18:	460d      	mov	r5, r1
 800aa1a:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800aa1c:	2600      	movs	r6, #0
 800aa1e:	9604      	str	r6, [sp, #16]
 800aa20:	9605      	str	r6, [sp, #20]
 800aa22:	9606      	str	r6, [sp, #24]
 800aa24:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800aa26:	9600      	str	r6, [sp, #0]
 800aa28:	9601      	str	r6, [sp, #4]
 800aa2a:	9602      	str	r6, [sp, #8]
 800aa2c:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800aa2e:	2701      	movs	r7, #1
 800aa30:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800aa34:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800aa38:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800aa3c:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800aa40:	0a19      	lsrs	r1, r3, #8
 800aa42:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800aa46:	0c19      	lsrs	r1, r3, #16
 800aa48:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800aa4c:	0e1b      	lsrs	r3, r3, #24
 800aa4e:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800aa52:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800aa56:	0a13      	lsrs	r3, r2, #8
 800aa58:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800aa5c:	0c13      	lsrs	r3, r2, #16
 800aa5e:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800aa62:	0e12      	lsrs	r2, r2, #24
 800aa64:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800aa68:	e014      	b.n	800aa94 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800aa6a:	18f2      	adds	r2, r6, r3
 800aa6c:	5ca0      	ldrb	r0, [r4, r2]
 800aa6e:	f103 0120 	add.w	r1, r3, #32
 800aa72:	4469      	add	r1, sp
 800aa74:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800aa78:	4048      	eors	r0, r1
 800aa7a:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	462a      	mov	r2, r5
 800aa82:	2d10      	cmp	r5, #16
 800aa84:	bfa8      	it	ge
 800aa86:	2210      	movge	r2, #16
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	dbee      	blt.n	800aa6a <PayloadEncrypt+0x60>
        size -= 16;
 800aa8c:	3d10      	subs	r5, #16
 800aa8e:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800aa90:	3610      	adds	r6, #16
 800aa92:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800aa94:	2d00      	cmp	r5, #0
 800aa96:	dd0e      	ble.n	800aab6 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800aa98:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800aa9c:	3701      	adds	r7, #1
 800aa9e:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800aaa0:	ab04      	add	r3, sp, #16
 800aaa2:	4642      	mov	r2, r8
 800aaa4:	2110      	movs	r1, #16
 800aaa6:	4668      	mov	r0, sp
 800aaa8:	f003 fbb1 	bl	800e20e <SecureElementAesEncrypt>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d0e6      	beq.n	800aa80 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aab2:	200f      	movs	r0, #15
 800aab4:	e000      	b.n	800aab8 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800aab6:	2000      	movs	r0, #0
}
 800aab8:	b008      	add	sp, #32
 800aaba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aabe:	200a      	movs	r0, #10
 800aac0:	e7fa      	b.n	800aab8 <PayloadEncrypt+0xae>

0800aac2 <VerifyCmacB0>:
    if( msg == 0 )
 800aac2:	b370      	cbz	r0, 800ab22 <VerifyCmacB0+0x60>
{
 800aac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac8:	b0c8      	sub	sp, #288	@ 0x120
 800aaca:	460c      	mov	r4, r1
 800aacc:	4615      	mov	r5, r2
 800aace:	461e      	mov	r6, r3
 800aad0:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800aad2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800aad6:	d826      	bhi.n	800ab26 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800aad8:	af04      	add	r7, sp, #16
 800aada:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800aade:	2100      	movs	r1, #0
 800aae0:	4638      	mov	r0, r7
 800aae2:	f003 fcea 	bl	800e4ba <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800aae6:	9702      	str	r7, [sp, #8]
 800aae8:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800aaea:	9301      	str	r3, [sp, #4]
 800aaec:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	f89d 3138 	ldrb.w	r3, [sp, #312]	@ 0x138
 800aaf4:	4632      	mov	r2, r6
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f7ff fe75 	bl	800a7e8 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800aafe:	4622      	mov	r2, r4
 800ab00:	4641      	mov	r1, r8
 800ab02:	a808      	add	r0, sp, #32
 800ab04:	f003 fcc1 	bl	800e48a <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800ab08:	f104 0110 	add.w	r1, r4, #16
 800ab0c:	462b      	mov	r3, r5
 800ab0e:	9a51      	ldr	r2, [sp, #324]	@ 0x144
 800ab10:	b289      	uxth	r1, r1
 800ab12:	4638      	mov	r0, r7
 800ab14:	f003 fb65 	bl	800e1e2 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800ab18:	b130      	cbz	r0, 800ab28 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800ab1a:	2801      	cmp	r0, #1
 800ab1c:	d004      	beq.n	800ab28 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ab1e:	200f      	movs	r0, #15
 800ab20:	e002      	b.n	800ab28 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab22:	200a      	movs	r0, #10
}
 800ab24:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ab26:	200e      	movs	r0, #14
}
 800ab28:	b048      	add	sp, #288	@ 0x120
 800ab2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ab30 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800ab30:	b188      	cbz	r0, 800ab56 <LoRaMacCryptoInit+0x26>
{
 800ab32:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800ab34:	4c09      	ldr	r4, [pc, #36]	@ (800ab5c <LoRaMacCryptoInit+0x2c>)
 800ab36:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800ab38:	2228      	movs	r2, #40	@ 0x28
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	f003 fcbd 	bl	800e4ba <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	2201      	movs	r2, #1
 800ab44:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800ab46:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800ab48:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800ab4a:	2400      	movs	r4, #0
 800ab4c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800ab4e:	f7ff fee1 	bl	800a914 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800ab52:	4620      	mov	r0, r4
}
 800ab54:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800ab56:	2009      	movs	r0, #9
}
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	200013b8 	.word	0x200013b8

0800ab60 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800ab60:	4b02      	ldr	r3, [pc, #8]	@ (800ab6c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800ab66:	2000      	movs	r0, #0
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	200013b8 	.word	0x200013b8

0800ab70 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800ab70:	b130      	cbz	r0, 800ab80 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800ab72:	4b04      	ldr	r3, [pc, #16]	@ (800ab84 <LoRaMacCryptoGetFCntUp+0x14>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab80:	200a      	movs	r0, #10
}
 800ab82:	4770      	bx	lr
 800ab84:	200013b8 	.word	0x200013b8

0800ab88 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800ab8e:	2200      	movs	r2, #0
 800ab90:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800ab92:	b363      	cbz	r3, 800abee <LoRaMacCryptoGetFCntDown+0x66>
 800ab94:	460d      	mov	r5, r1
 800ab96:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800ab98:	a901      	add	r1, sp, #4
 800ab9a:	f7ff fe5f 	bl	800a85c <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ab9e:	b9b8      	cbnz	r0, 800abd0 <LoRaMacCryptoGetFCntDown+0x48>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800aba0:	9b01      	ldr	r3, [sp, #4]
 800aba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba6:	d015      	beq.n	800abd4 <LoRaMacCryptoGetFCntDown+0x4c>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800abac:	2a00      	cmp	r2, #0
 800abae:	dd13      	ble.n	800abd8 <LoRaMacCryptoGetFCntDown+0x50>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800abb0:	4413      	add	r3, r2
 800abb2:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800abb4:	4b10      	ldr	r3, [pc, #64]	@ (800abf8 <LoRaMacCryptoGetFCntDown+0x70>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	789a      	ldrb	r2, [r3, #2]
 800abba:	b94a      	cbnz	r2, 800abd0 <LoRaMacCryptoGetFCntDown+0x48>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800abbc:	6833      	ldr	r3, [r6, #0]
 800abbe:	9901      	ldr	r1, [sp, #4]
 800abc0:	1a5b      	subs	r3, r3, r1
 800abc2:	eb61 0101 	sbc.w	r1, r1, r1
 800abc6:	42ab      	cmp	r3, r5
 800abc8:	f171 0100 	sbcs.w	r1, r1, #0
 800abcc:	da11      	bge.n	800abf2 <LoRaMacCryptoGetFCntDown+0x6a>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800abce:	4610      	mov	r0, r2
}
 800abd0:	b002      	add	sp, #8
 800abd2:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800abd4:	6034      	str	r4, [r6, #0]
 800abd6:	e7ed      	b.n	800abb4 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800abd8:	b132      	cbz	r2, 800abe8 <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800abda:	0c1b      	lsrs	r3, r3, #16
 800abdc:	041b      	lsls	r3, r3, #16
 800abde:	4423      	add	r3, r4
 800abe0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800abe4:	6033      	str	r3, [r6, #0]
 800abe6:	e7e5      	b.n	800abb4 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800abe8:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800abea:	2007      	movs	r0, #7
 800abec:	e7f0      	b.n	800abd0 <LoRaMacCryptoGetFCntDown+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800abee:	200a      	movs	r0, #10
 800abf0:	e7ee      	b.n	800abd0 <LoRaMacCryptoGetFCntDown+0x48>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800abf2:	2008      	movs	r0, #8
 800abf4:	e7ec      	b.n	800abd0 <LoRaMacCryptoGetFCntDown+0x48>
 800abf6:	bf00      	nop
 800abf8:	200013b8 	.word	0x200013b8

0800abfc <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800abfc:	4601      	mov	r1, r0
 800abfe:	b908      	cbnz	r0, 800ac04 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ac00:	200a      	movs	r0, #10
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ac02:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ac04:	2300      	movs	r3, #0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	dd01      	ble.n	800ac0e <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800ac0e:	4a06      	ldr	r2, [pc, #24]	@ (800ac28 <LoRaMacCryptoSetMulticastReference+0x2c>)
 800ac10:	6812      	ldr	r2, [r2, #0]
 800ac12:	202c      	movs	r0, #44	@ 0x2c
 800ac14:	fb00 1003 	mla	r0, r0, r3, r1
 800ac18:	f103 0c06 	add.w	ip, r3, #6
 800ac1c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800ac20:	3204      	adds	r2, #4
 800ac22:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ac24:	3301      	adds	r3, #1
 800ac26:	e7ee      	b.n	800ac06 <LoRaMacCryptoSetMulticastReference+0xa>
 800ac28:	200013b8 	.word	0x200013b8

0800ac2c <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800ac2c:	b300      	cbz	r0, 800ac70 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800ac2e:	b510      	push	{r4, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800ac38:	a803      	add	r0, sp, #12
 800ac3a:	f003 fbc3 	bl	800e3c4 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800ac3e:	4b10      	ldr	r3, [pc, #64]	@ (800ac80 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ac46:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800ac48:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 fa2f 	bl	800b0ae <LoRaMacSerializerJoinRequest>
 800ac50:	b980      	cbnz	r0, 800ac74 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800ac52:	4623      	mov	r3, r4
 800ac54:	f853 1b18 	ldr.w	r1, [r3], #24
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	2213      	movs	r2, #19
 800ac5e:	f003 fab1 	bl	800e1c4 <SecureElementComputeAesCmac>
 800ac62:	b950      	cbnz	r0, 800ac7a <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ac64:	4620      	mov	r0, r4
 800ac66:	f000 fa22 	bl	800b0ae <LoRaMacSerializerJoinRequest>
 800ac6a:	b120      	cbz	r0, 800ac76 <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ac6c:	2011      	movs	r0, #17
 800ac6e:	e002      	b.n	800ac76 <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ac70:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ac72:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ac74:	2011      	movs	r0, #17
}
 800ac76:	b004      	add	sp, #16
 800ac78:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ac7a:	200f      	movs	r0, #15
 800ac7c:	e7fb      	b.n	800ac76 <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800ac7e:	bf00      	nop
 800ac80:	200013b8 	.word	0x200013b8

0800ac84 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d036      	beq.n	800acf6 <LoRaMacCryptoSecureMessage+0x72>
{
 800ac88:	b530      	push	{r4, r5, lr}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800ac90:	4b1d      	ldr	r3, [pc, #116]	@ (800ad08 <LoRaMacCryptoSecureMessage+0x84>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	4283      	cmp	r3, r0
 800ac98:	d82f      	bhi.n	800acfa <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800ac9a:	f895 2020 	ldrb.w	r2, [r5, #32]
 800ac9e:	b342      	cbz	r2, 800acf2 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800aca0:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800aca2:	42a3      	cmp	r3, r4
 800aca4:	d209      	bcs.n	800acba <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800aca6:	9401      	str	r4, [sp, #4]
 800aca8:	2300      	movs	r3, #0
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	68ab      	ldr	r3, [r5, #8]
 800acae:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 800acb2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800acb4:	f7ff fea9 	bl	800aa0a <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800acb8:	bb10      	cbnz	r0, 800ad00 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800acba:	4628      	mov	r0, r5
 800acbc:	f000 fa2d 	bl	800b11a <LoRaMacSerializerData>
 800acc0:	b9e8      	cbnz	r0, 800acfe <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800acc2:	7929      	ldrb	r1, [r5, #4]
 800acc4:	3904      	subs	r1, #4
 800acc6:	462b      	mov	r3, r5
 800acc8:	f853 0b2c 	ldr.w	r0, [r3], #44
 800accc:	9303      	str	r3, [sp, #12]
 800acce:	9402      	str	r4, [sp, #8]
 800acd0:	68ab      	ldr	r3, [r5, #8]
 800acd2:	9301      	str	r3, [sp, #4]
 800acd4:	2300      	movs	r3, #0
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	2202      	movs	r2, #2
 800acda:	b289      	uxth	r1, r1
 800acdc:	f7ff fe32 	bl	800a944 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ace0:	b970      	cbnz	r0, 800ad00 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ace2:	4628      	mov	r0, r5
 800ace4:	f000 fa19 	bl	800b11a <LoRaMacSerializerData>
 800ace8:	b960      	cbnz	r0, 800ad04 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800acea:	4b07      	ldr	r3, [pc, #28]	@ (800ad08 <LoRaMacCryptoSecureMessage+0x84>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800acf0:	e006      	b.n	800ad00 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800acf2:	2202      	movs	r2, #2
 800acf4:	e7d5      	b.n	800aca2 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800acf6:	200a      	movs	r0, #10
}
 800acf8:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800acfa:	2006      	movs	r0, #6
 800acfc:	e000      	b.n	800ad00 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800acfe:	2011      	movs	r0, #17
}
 800ad00:	b005      	add	sp, #20
 800ad02:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ad04:	2011      	movs	r0, #17
 800ad06:	e7fb      	b.n	800ad00 <LoRaMacCryptoSecureMessage+0x7c>
 800ad08:	200013b8 	.word	0x200013b8

0800ad0c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800ad0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad10:	b087      	sub	sp, #28
 800ad12:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
    if( macMsg == 0 )
 800ad14:	2e00      	cmp	r6, #0
 800ad16:	d049      	beq.n	800adac <LoRaMacCryptoUnsecureMessage+0xa0>
 800ad18:	4605      	mov	r5, r0
 800ad1a:	4688      	mov	r8, r1
 800ad1c:	4617      	mov	r7, r2
 800ad1e:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800ad20:	4619      	mov	r1, r3
 800ad22:	4610      	mov	r0, r2
 800ad24:	f7ff fdc4 	bl	800a8b0 <CheckFCntDown>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d041      	beq.n	800adb0 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	f000 f95f 	bl	800aff0 <LoRaMacParserData>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d141      	bne.n	800adba <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800ad36:	a905      	add	r1, sp, #20
 800ad38:	4628      	mov	r0, r5
 800ad3a:	f7ff fd79 	bl	800a830 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad3e:	4605      	mov	r5, r0
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d136      	bne.n	800adb2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800ad44:	9b05      	ldr	r3, [sp, #20]
 800ad46:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800ad4a:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800ad4c:	68b3      	ldr	r3, [r6, #8]
 800ad4e:	4543      	cmp	r3, r8
 800ad50:	d135      	bne.n	800adbe <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800ad52:	7b33      	ldrb	r3, [r6, #12]
 800ad54:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ad58:	491a      	ldr	r1, [pc, #104]	@ (800adc4 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800ad5a:	6809      	ldr	r1, [r1, #0]
 800ad5c:	7889      	ldrb	r1, [r1, #2]
 800ad5e:	b901      	cbnz	r1, 800ad62 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800ad60:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ad62:	7931      	ldrb	r1, [r6, #4]
 800ad64:	3904      	subs	r1, #4
 800ad66:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 800ad68:	9003      	str	r0, [sp, #12]
 800ad6a:	9402      	str	r4, [sp, #8]
 800ad6c:	f8cd 8004 	str.w	r8, [sp, #4]
 800ad70:	2001      	movs	r0, #1
 800ad72:	9000      	str	r0, [sp, #0]
 800ad74:	b289      	uxth	r1, r1
 800ad76:	6830      	ldr	r0, [r6, #0]
 800ad78:	f7ff fea3 	bl	800aac2 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	b9c0      	cbnz	r0, 800adb2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800ad80:	f896 3020 	ldrb.w	r3, [r6, #32]
 800ad84:	b90b      	cbnz	r3, 800ad8a <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800ad86:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800ad8a:	9401      	str	r4, [sp, #4]
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	4643      	mov	r3, r8
 800ad92:	464a      	mov	r2, r9
 800ad94:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 800ad98:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800ad9a:	f7ff fe36 	bl	800aa0a <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad9e:	4605      	mov	r5, r0
 800ada0:	b938      	cbnz	r0, 800adb2 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800ada2:	4621      	mov	r1, r4
 800ada4:	4638      	mov	r0, r7
 800ada6:	f7ff fd9b 	bl	800a8e0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800adaa:	e002      	b.n	800adb2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800adac:	250a      	movs	r5, #10
 800adae:	e000      	b.n	800adb2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800adb0:	2506      	movs	r5, #6
}
 800adb2:	4628      	mov	r0, r5
 800adb4:	b007      	add	sp, #28
 800adb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800adba:	2510      	movs	r5, #16
 800adbc:	e7f9      	b.n	800adb2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800adbe:	2502      	movs	r5, #2
 800adc0:	e7f7      	b.n	800adb2 <LoRaMacCryptoUnsecureMessage+0xa6>
 800adc2:	bf00      	nop
 800adc4:	200013b8 	.word	0x200013b8

0800adc8 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800adc8:	b9b1      	cbnz	r1, 800adf8 <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800adca:	b500      	push	{lr}
 800adcc:	b085      	sub	sp, #20
 800adce:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800add0:	2300      	movs	r3, #0
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	9301      	str	r3, [sp, #4]
 800add6:	9302      	str	r3, [sp, #8]
 800add8:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800adda:	2801      	cmp	r0, #1
 800addc:	d008      	beq.n	800adf0 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800adde:	2204      	movs	r2, #4
 800ade0:	4661      	mov	r1, ip
 800ade2:	4668      	mov	r0, sp
 800ade4:	f003 fa8e 	bl	800e304 <SecureElementDeriveAndStoreKey>
 800ade8:	b940      	cbnz	r0, 800adfc <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800adea:	b005      	add	sp, #20
 800adec:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800adf0:	2320      	movs	r3, #32
 800adf2:	f88d 3000 	strb.w	r3, [sp]
 800adf6:	e7f2      	b.n	800adde <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800adf8:	200b      	movs	r0, #11
}
 800adfa:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800adfc:	200f      	movs	r0, #15
 800adfe:	e7f4      	b.n	800adea <LoRaMacCryptoDeriveMcRootKey+0x22>

0800ae00 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800ae00:	2804      	cmp	r0, #4
 800ae02:	d001      	beq.n	800ae08 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ae04:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ae06:	4770      	bx	lr
{
 800ae08:	b500      	push	{lr}
 800ae0a:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	9302      	str	r3, [sp, #8]
 800ae14:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ae16:	227f      	movs	r2, #127	@ 0x7f
 800ae18:	4601      	mov	r1, r0
 800ae1a:	4668      	mov	r0, sp
 800ae1c:	f003 fa72 	bl	800e304 <SecureElementDeriveAndStoreKey>
 800ae20:	b910      	cbnz	r0, 800ae28 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800ae22:	b005      	add	sp, #20
 800ae24:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ae28:	200f      	movs	r0, #15
 800ae2a:	e7fa      	b.n	800ae22 <LoRaMacCryptoDeriveMcKEKey+0x22>

0800ae2c <LoRaMacCryptoSetKey>:
{
 800ae2c:	b510      	push	{r4, lr}
 800ae2e:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800ae30:	f003 fa26 	bl	800e280 <SecureElementSetKey>
 800ae34:	b978      	cbnz	r0, 800ae56 <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800ae36:	b104      	cbz	r4, 800ae3a <LoRaMacCryptoSetKey+0xe>
}
 800ae38:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800ae3a:	4b09      	ldr	r3, [pc, #36]	@ (800ae60 <LoRaMacCryptoSetKey+0x34>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4621      	mov	r1, r4
 800ae40:	7898      	ldrb	r0, [r3, #2]
 800ae42:	f7ff ffc1 	bl	800adc8 <LoRaMacCryptoDeriveMcRootKey>
 800ae46:	b940      	cbnz	r0, 800ae5a <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800ae48:	2004      	movs	r0, #4
 800ae4a:	f7ff ffd9 	bl	800ae00 <LoRaMacCryptoDeriveMcKEKey>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d0f2      	beq.n	800ae38 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ae52:	200f      	movs	r0, #15
 800ae54:	e7f0      	b.n	800ae38 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ae56:	200f      	movs	r0, #15
 800ae58:	e7ee      	b.n	800ae38 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ae5a:	200f      	movs	r0, #15
 800ae5c:	e7ec      	b.n	800ae38 <LoRaMacCryptoSetKey+0xc>
 800ae5e:	bf00      	nop
 800ae60:	200013b8 	.word	0x200013b8

0800ae64 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800ae64:	2a00      	cmp	r2, #0
 800ae66:	d064      	beq.n	800af32 <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800ae68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae6a:	b08f      	sub	sp, #60	@ 0x3c
 800ae6c:	4607      	mov	r7, r0
 800ae6e:	460d      	mov	r5, r1
 800ae70:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800ae72:	2900      	cmp	r1, #0
 800ae74:	d05f      	beq.n	800af36 <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800ae76:	2600      	movs	r6, #0
 800ae78:	9605      	str	r6, [sp, #20]
 800ae7a:	221d      	movs	r2, #29
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	a806      	add	r0, sp, #24
 800ae80:	f006 ff9f 	bl	8011dc2 <memset>
    uint8_t versionMinor         = 0;
 800ae84:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800ae88:	4b2f      	ldr	r3, [pc, #188]	@ (800af48 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800ae8e:	f10d 0313 	add.w	r3, sp, #19
 800ae92:	9302      	str	r3, [sp, #8]
 800ae94:	ab05      	add	r3, sp, #20
 800ae96:	9301      	str	r3, [sp, #4]
 800ae98:	7923      	ldrb	r3, [r4, #4]
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	4632      	mov	r2, r6
 800aea0:	4629      	mov	r1, r5
 800aea2:	4638      	mov	r0, r7
 800aea4:	f003 fa4e 	bl	800e344 <SecureElementProcessJoinAccept>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d146      	bne.n	800af3a <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800aeac:	7922      	ldrb	r2, [r4, #4]
 800aeae:	a905      	add	r1, sp, #20
 800aeb0:	6820      	ldr	r0, [r4, #0]
 800aeb2:	f003 faea 	bl	800e48a <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f000 f848 	bl	800af4c <LoRaMacParserJoinAccept>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d13f      	bne.n	800af40 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800aec0:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800aec2:	79e3      	ldrb	r3, [r4, #7]
 800aec4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800aec8:	7a23      	ldrb	r3, [r4, #8]
 800aeca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800aece:	4b1e      	ldr	r3, [pc, #120]	@ (800af48 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	689a      	ldr	r2, [r3, #8]
 800aed4:	42aa      	cmp	r2, r5
 800aed6:	d035      	beq.n	800af44 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800aed8:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800aeda:	2100      	movs	r1, #0
 800aedc:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800aee0:	f7ff ff72 	bl	800adc8 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aee4:	bb50      	cbnz	r0, 800af3c <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800aee6:	2004      	movs	r0, #4
 800aee8:	f7ff ff8a 	bl	800ae00 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aeec:	bb30      	cbnz	r0, 800af3c <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800aeee:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800aef0:	7aa2      	ldrb	r2, [r4, #10]
 800aef2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800aef6:	7ae2      	ldrb	r2, [r4, #11]
 800aef8:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800aefc:	4633      	mov	r3, r6
 800aefe:	4622      	mov	r2, r4
 800af00:	4629      	mov	r1, r5
 800af02:	2003      	movs	r0, #3
 800af04:	f7ff fd4a 	bl	800a99c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800af08:	b9c0      	cbnz	r0, 800af3c <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800af0a:	4633      	mov	r3, r6
 800af0c:	4622      	mov	r2, r4
 800af0e:	4629      	mov	r1, r5
 800af10:	2002      	movs	r0, #2
 800af12:	f7ff fd43 	bl	800a99c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800af16:	b988      	cbnz	r0, 800af3c <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800af18:	4b0b      	ldr	r3, [pc, #44]	@ (800af48 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800af20:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800af22:	2200      	movs	r2, #0
 800af24:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800af26:	f04f 32ff 	mov.w	r2, #4294967295
 800af2a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800af2c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800af2e:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800af30:	e004      	b.n	800af3c <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800af32:	200a      	movs	r0, #10
}
 800af34:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800af36:	200a      	movs	r0, #10
 800af38:	e000      	b.n	800af3c <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800af3a:	200f      	movs	r0, #15
}
 800af3c:	b00f      	add	sp, #60	@ 0x3c
 800af3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800af40:	2010      	movs	r0, #16
 800af42:	e7fb      	b.n	800af3c <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800af44:	2003      	movs	r0, #3
 800af46:	e7f9      	b.n	800af3c <LoRaMacCryptoHandleJoinAccept+0xd8>
 800af48:	200013b8 	.word	0x200013b8

0800af4c <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d049      	beq.n	800afe4 <LoRaMacParserJoinAccept+0x98>
{
 800af50:	b510      	push	{r4, lr}
 800af52:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af54:	6801      	ldr	r1, [r0, #0]
 800af56:	2900      	cmp	r1, #0
 800af58:	d046      	beq.n	800afe8 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800af5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af5e:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800af60:	2203      	movs	r2, #3
 800af62:	3006      	adds	r0, #6
 800af64:	f003 fa91 	bl	800e48a <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800af68:	4620      	mov	r0, r4
 800af6a:	f850 1b09 	ldr.w	r1, [r0], #9
 800af6e:	2203      	movs	r2, #3
 800af70:	3104      	adds	r1, #4
 800af72:	f003 fa8a 	bl	800e48a <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800af76:	6821      	ldr	r1, [r4, #0]
 800af78:	79cb      	ldrb	r3, [r1, #7]
 800af7a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800af7c:	7a0a      	ldrb	r2, [r1, #8]
 800af7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800af82:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800af84:	7a4a      	ldrb	r2, [r1, #9]
 800af86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af8a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800af8c:	7a8a      	ldrb	r2, [r1, #10]
 800af8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800af92:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800af94:	7acb      	ldrb	r3, [r1, #11]
 800af96:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800af98:	7b0b      	ldrb	r3, [r1, #12]
 800af9a:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800af9c:	7923      	ldrb	r3, [r4, #4]
 800af9e:	2b21      	cmp	r3, #33	@ 0x21
 800afa0:	d018      	beq.n	800afd4 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800afa2:	2b11      	cmp	r3, #17
 800afa4:	dc22      	bgt.n	800afec <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800afa6:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800afa8:	6821      	ldr	r1, [r4, #0]
 800afaa:	f102 0c01 	add.w	ip, r2, #1
 800afae:	5c8b      	ldrb	r3, [r1, r2]
 800afb0:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800afb2:	1c90      	adds	r0, r2, #2
 800afb4:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800afb8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800afbc:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800afbe:	3203      	adds	r2, #3
 800afc0:	5c08      	ldrb	r0, [r1, r0]
 800afc2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800afc6:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800afc8:	5c8a      	ldrb	r2, [r1, r2]
 800afca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800afce:	6263      	str	r3, [r4, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 800afd0:	2000      	movs	r0, #0
}
 800afd2:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800afd4:	2210      	movs	r2, #16
 800afd6:	310d      	adds	r1, #13
 800afd8:	f104 0012 	add.w	r0, r4, #18
 800afdc:	f003 fa55 	bl	800e48a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800afe0:	221d      	movs	r2, #29
 800afe2:	e7e1      	b.n	800afa8 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800afe4:	2002      	movs	r0, #2
}
 800afe6:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800afe8:	2002      	movs	r0, #2
 800afea:	e7f2      	b.n	800afd2 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800afec:	2001      	movs	r0, #1
 800afee:	e7f0      	b.n	800afd2 <LoRaMacParserJoinAccept+0x86>

0800aff0 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d058      	beq.n	800b0a6 <LoRaMacParserData+0xb6>
{
 800aff4:	b510      	push	{r4, lr}
 800aff6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800aff8:	6801      	ldr	r1, [r0, #0]
 800affa:	2900      	cmp	r1, #0
 800affc:	d055      	beq.n	800b0aa <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800affe:	780b      	ldrb	r3, [r1, #0]
 800b000:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800b002:	784b      	ldrb	r3, [r1, #1]
 800b004:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800b006:	788a      	ldrb	r2, [r1, #2]
 800b008:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b00c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800b00e:	78ca      	ldrb	r2, [r1, #3]
 800b010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b014:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800b016:	790a      	ldrb	r2, [r1, #4]
 800b018:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b01c:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800b01e:	794b      	ldrb	r3, [r1, #5]
 800b020:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800b022:	798b      	ldrb	r3, [r1, #6]
 800b024:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800b026:	79ca      	ldrb	r2, [r1, #7]
 800b028:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b02c:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b02e:	7b02      	ldrb	r2, [r0, #12]
 800b030:	f002 020f 	and.w	r2, r2, #15
 800b034:	3108      	adds	r1, #8
 800b036:	3010      	adds	r0, #16
 800b038:	f003 fa27 	bl	800e48a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b03c:	7b23      	ldrb	r3, [r4, #12]
 800b03e:	f003 030f 	and.w	r3, r3, #15
 800b042:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800b046:	2200      	movs	r2, #0
 800b048:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800b04c:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800b050:	7922      	ldrb	r2, [r4, #4]
 800b052:	1a11      	subs	r1, r2, r0
 800b054:	2904      	cmp	r1, #4
 800b056:	dc16      	bgt.n	800b086 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800b058:	6822      	ldr	r2, [r4, #0]
 800b05a:	7923      	ldrb	r3, [r4, #4]
 800b05c:	441a      	add	r2, r3
 800b05e:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800b062:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800b064:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800b068:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b06c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800b06e:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800b072:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b076:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800b078:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800b07c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b080:	62e3      	str	r3, [r4, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800b082:	2000      	movs	r0, #0
}
 800b084:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800b086:	6821      	ldr	r1, [r4, #0]
 800b088:	3309      	adds	r3, #9
 800b08a:	5c08      	ldrb	r0, [r1, r0]
 800b08c:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800b090:	1ad2      	subs	r2, r2, r3
 800b092:	b2d2      	uxtb	r2, r2
 800b094:	3a04      	subs	r2, #4
 800b096:	b2d2      	uxtb	r2, r2
 800b098:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800b09c:	4419      	add	r1, r3
 800b09e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b0a0:	f003 f9f3 	bl	800e48a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800b0a4:	e7d8      	b.n	800b058 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800b0a6:	2002      	movs	r0, #2
}
 800b0a8:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800b0aa:	2002      	movs	r0, #2
 800b0ac:	e7ea      	b.n	800b084 <LoRaMacParserData+0x94>

0800b0ae <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b0ae:	b370      	cbz	r0, 800b10e <LoRaMacSerializerJoinRequest+0x60>
{
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b0b4:	6803      	ldr	r3, [r0, #0]
 800b0b6:	b363      	cbz	r3, 800b112 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800b0b8:	7902      	ldrb	r2, [r0, #4]
 800b0ba:	2a16      	cmp	r2, #22
 800b0bc:	d92b      	bls.n	800b116 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b0be:	7942      	ldrb	r2, [r0, #5]
 800b0c0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b0c2:	4601      	mov	r1, r0
 800b0c4:	f851 0b06 	ldr.w	r0, [r1], #6
 800b0c8:	2208      	movs	r2, #8
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	f003 f9e8 	bl	800e4a0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	f851 0b0e 	ldr.w	r0, [r1], #14
 800b0d6:	2208      	movs	r2, #8
 800b0d8:	3009      	adds	r0, #9
 800b0da:	f003 f9e1 	bl	800e4a0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800b0de:	8ae2      	ldrh	r2, [r4, #22]
 800b0e0:	6823      	ldr	r3, [r4, #0]
 800b0e2:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800b0e4:	8ae3      	ldrh	r3, [r4, #22]
 800b0e6:	6822      	ldr	r2, [r4, #0]
 800b0e8:	0a1b      	lsrs	r3, r3, #8
 800b0ea:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b0ec:	69a2      	ldr	r2, [r4, #24]
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b0f2:	69a3      	ldr	r3, [r4, #24]
 800b0f4:	0a1b      	lsrs	r3, r3, #8
 800b0f6:	6822      	ldr	r2, [r4, #0]
 800b0f8:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b0fa:	8b62      	ldrh	r2, [r4, #26]
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b100:	7ee2      	ldrb	r2, [r4, #27]
 800b102:	6823      	ldr	r3, [r4, #0]
 800b104:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800b106:	2317      	movs	r3, #23
 800b108:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800b10a:	2000      	movs	r0, #0
}
 800b10c:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b10e:	2001      	movs	r0, #1
}
 800b110:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b112:	2001      	movs	r0, #1
 800b114:	e7fa      	b.n	800b10c <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b116:	2002      	movs	r0, #2
 800b118:	e7f8      	b.n	800b10c <LoRaMacSerializerJoinRequest+0x5e>

0800b11a <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d066      	beq.n	800b1ec <LoRaMacSerializerData+0xd2>
{
 800b11e:	b538      	push	{r3, r4, r5, lr}
 800b120:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b122:	6801      	ldr	r1, [r0, #0]
 800b124:	2900      	cmp	r1, #0
 800b126:	d063      	beq.n	800b1f0 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b128:	7b02      	ldrb	r2, [r0, #12]
 800b12a:	f002 020f 	and.w	r2, r2, #15
 800b12e:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800b132:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800b136:	b10b      	cbz	r3, 800b13c <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800b138:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800b13c:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800b13e:	3304      	adds	r3, #4
 800b140:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800b142:	7922      	ldrb	r2, [r4, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d355      	bcc.n	800b1f4 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b148:	7963      	ldrb	r3, [r4, #5]
 800b14a:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800b14c:	68a2      	ldr	r2, [r4, #8]
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800b152:	68a3      	ldr	r3, [r4, #8]
 800b154:	0a1b      	lsrs	r3, r3, #8
 800b156:	6822      	ldr	r2, [r4, #0]
 800b158:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800b15a:	8962      	ldrh	r2, [r4, #10]
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800b160:	7ae2      	ldrb	r2, [r4, #11]
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	7b22      	ldrb	r2, [r4, #12]
 800b16a:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800b16c:	89e2      	ldrh	r2, [r4, #14]
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800b172:	89e3      	ldrh	r3, [r4, #14]
 800b174:	6822      	ldr	r2, [r4, #0]
 800b176:	0a1b      	lsrs	r3, r3, #8
 800b178:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b17a:	4621      	mov	r1, r4
 800b17c:	f851 0b10 	ldr.w	r0, [r1], #16
 800b180:	7b22      	ldrb	r2, [r4, #12]
 800b182:	f002 020f 	and.w	r2, r2, #15
 800b186:	3008      	adds	r0, #8
 800b188:	f003 f97f 	bl	800e48a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b18c:	7b23      	ldrb	r3, [r4, #12]
 800b18e:	f003 030f 	and.w	r3, r3, #15
 800b192:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800b196:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800b19a:	b12a      	cbz	r2, 800b1a8 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800b19c:	6822      	ldr	r2, [r4, #0]
 800b19e:	f894 1020 	ldrb.w	r1, [r4, #32]
 800b1a2:	5551      	strb	r1, [r2, r5]
 800b1a4:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800b1a8:	6820      	ldr	r0, [r4, #0]
 800b1aa:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800b1ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b1b0:	4428      	add	r0, r5
 800b1b2:	f003 f96a 	bl	800e48a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800b1b6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800b1ba:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b1bc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800b1be:	6821      	ldr	r1, [r4, #0]
 800b1c0:	1c5a      	adds	r2, r3, #1
 800b1c2:	b292      	uxth	r2, r2
 800b1c4:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b1c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b1c8:	0a08      	lsrs	r0, r1, #8
 800b1ca:	6825      	ldr	r5, [r4, #0]
 800b1cc:	1c99      	adds	r1, r3, #2
 800b1ce:	b289      	uxth	r1, r1
 800b1d0:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b1d2:	8de5      	ldrh	r5, [r4, #46]	@ 0x2e
 800b1d4:	6820      	ldr	r0, [r4, #0]
 800b1d6:	1cda      	adds	r2, r3, #3
 800b1d8:	b292      	uxth	r2, r2
 800b1da:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b1dc:	f894 002f 	ldrb.w	r0, [r4, #47]	@ 0x2f
 800b1e0:	6821      	ldr	r1, [r4, #0]
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800b1e6:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800b1e8:	2000      	movs	r0, #0
}
 800b1ea:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b1ec:	2001      	movs	r0, #1
}
 800b1ee:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b1f0:	2001      	movs	r0, #1
 800b1f2:	e7fa      	b.n	800b1ea <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b1f4:	2002      	movs	r0, #2
 800b1f6:	e7f8      	b.n	800b1ea <LoRaMacSerializerData+0xd0>

0800b1f8 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800b1f8:	4770      	bx	lr

0800b1fa <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	4770      	bx	lr

0800b1fe <NvmDataMgmtRestore>:
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 800b1fe:	2000      	movs	r0, #0
 800b200:	4770      	bx	lr

0800b202 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800b202:	2805      	cmp	r0, #5
 800b204:	d005      	beq.n	800b212 <RegionIsActive+0x10>
 800b206:	2808      	cmp	r0, #8
 800b208:	d001      	beq.n	800b20e <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800b20a:	2000      	movs	r0, #0
        }
    }
}
 800b20c:	4770      	bx	lr
    switch( region )
 800b20e:	2001      	movs	r0, #1
 800b210:	4770      	bx	lr
 800b212:	2001      	movs	r0, #1
 800b214:	4770      	bx	lr

0800b216 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800b216:	b500      	push	{lr}
 800b218:	b083      	sub	sp, #12
 800b21a:	4603      	mov	r3, r0
 800b21c:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800b21e:	2200      	movs	r2, #0
 800b220:	9200      	str	r2, [sp, #0]
    switch( region )
 800b222:	2b05      	cmp	r3, #5
 800b224:	d004      	beq.n	800b230 <RegionGetPhyParam+0x1a>
 800b226:	2b08      	cmp	r3, #8
 800b228:	d009      	beq.n	800b23e <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800b22a:	9b00      	ldr	r3, [sp, #0]
 800b22c:	9301      	str	r3, [sp, #4]
 800b22e:	e002      	b.n	800b236 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800b230:	f000 fe02 	bl	800be38 <RegionEU868GetPhyParam>
 800b234:	9001      	str	r0, [sp, #4]
        }
    }
}
 800b236:	9801      	ldr	r0, [sp, #4]
 800b238:	b003      	add	sp, #12
 800b23a:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800b23e:	f001 fc1f 	bl	800ca80 <RegionUS915GetPhyParam>
 800b242:	9001      	str	r0, [sp, #4]
 800b244:	e7f7      	b.n	800b236 <RegionGetPhyParam+0x20>

0800b246 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800b246:	b508      	push	{r3, lr}
 800b248:	4603      	mov	r3, r0
 800b24a:	4608      	mov	r0, r1
    switch( region )
 800b24c:	2b05      	cmp	r3, #5
 800b24e:	d002      	beq.n	800b256 <RegionSetBandTxDone+0x10>
 800b250:	2b08      	cmp	r3, #8
 800b252:	d003      	beq.n	800b25c <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800b254:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800b256:	f000 feb1 	bl	800bfbc <RegionEU868SetBandTxDone>
 800b25a:	e7fb      	b.n	800b254 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800b25c:	f001 fcec 	bl	800cc38 <RegionUS915SetBandTxDone>
 800b260:	e7f8      	b.n	800b254 <RegionSetBandTxDone+0xe>

0800b262 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800b262:	b508      	push	{r3, lr}
 800b264:	4603      	mov	r3, r0
 800b266:	4608      	mov	r0, r1
    switch( region )
 800b268:	2b05      	cmp	r3, #5
 800b26a:	d002      	beq.n	800b272 <RegionInitDefaults+0x10>
 800b26c:	2b08      	cmp	r3, #8
 800b26e:	d003      	beq.n	800b278 <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800b270:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800b272:	f000 fec1 	bl	800bff8 <RegionEU868InitDefaults>
 800b276:	e7fb      	b.n	800b270 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800b278:	f001 fcfc 	bl	800cc74 <RegionUS915InitDefaults>
}
 800b27c:	e7f8      	b.n	800b270 <RegionInitDefaults+0xe>

0800b27e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b27e:	b508      	push	{r3, lr}
 800b280:	4603      	mov	r3, r0
 800b282:	4608      	mov	r0, r1
 800b284:	4611      	mov	r1, r2
    switch( region )
 800b286:	2b05      	cmp	r3, #5
 800b288:	d003      	beq.n	800b292 <RegionVerify+0x14>
 800b28a:	2b08      	cmp	r3, #8
 800b28c:	d004      	beq.n	800b298 <RegionVerify+0x1a>
 800b28e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b290:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800b292:	f000 ff1d 	bl	800c0d0 <RegionEU868Verify>
 800b296:	e7fb      	b.n	800b290 <RegionVerify+0x12>
        US915_VERIFY( );
 800b298:	f001 fd92 	bl	800cdc0 <RegionUS915Verify>
 800b29c:	e7f8      	b.n	800b290 <RegionVerify+0x12>

0800b29e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800b29e:	b508      	push	{r3, lr}
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	4608      	mov	r0, r1
    switch( region )
 800b2a4:	2b05      	cmp	r3, #5
 800b2a6:	d002      	beq.n	800b2ae <RegionApplyCFList+0x10>
 800b2a8:	2b08      	cmp	r3, #8
 800b2aa:	d003      	beq.n	800b2b4 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800b2ac:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800b2ae:	f001 fadb 	bl	800c868 <RegionEU868ApplyCFList>
 800b2b2:	e7fb      	b.n	800b2ac <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800b2b4:	f001 fdb4 	bl	800ce20 <RegionUS915ApplyCFList>
}
 800b2b8:	e7f8      	b.n	800b2ac <RegionApplyCFList+0xe>

0800b2ba <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800b2ba:	b508      	push	{r3, lr}
 800b2bc:	4603      	mov	r3, r0
 800b2be:	4608      	mov	r0, r1
    switch( region )
 800b2c0:	2b05      	cmp	r3, #5
 800b2c2:	d003      	beq.n	800b2cc <RegionChanMaskSet+0x12>
 800b2c4:	2b08      	cmp	r3, #8
 800b2c6:	d004      	beq.n	800b2d2 <RegionChanMaskSet+0x18>
 800b2c8:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b2ca:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800b2cc:	f000 ff46 	bl	800c15c <RegionEU868ChanMaskSet>
 800b2d0:	e7fb      	b.n	800b2ca <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800b2d2:	f001 fde5 	bl	800cea0 <RegionUS915ChanMaskSet>
 800b2d6:	e7f8      	b.n	800b2ca <RegionChanMaskSet+0x10>

0800b2d8 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b2d8:	b508      	push	{r3, lr}
 800b2da:	4684      	mov	ip, r0
 800b2dc:	4608      	mov	r0, r1
 800b2de:	4611      	mov	r1, r2
 800b2e0:	461a      	mov	r2, r3
    switch( region )
 800b2e2:	f1bc 0f05 	cmp.w	ip, #5
 800b2e6:	d003      	beq.n	800b2f0 <RegionComputeRxWindowParameters+0x18>
 800b2e8:	f1bc 0f08 	cmp.w	ip, #8
 800b2ec:	d004      	beq.n	800b2f8 <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800b2ee:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b2f0:	9b02      	ldr	r3, [sp, #8]
 800b2f2:	f000 ff51 	bl	800c198 <RegionEU868ComputeRxWindowParameters>
 800b2f6:	e7fa      	b.n	800b2ee <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b2f8:	9b02      	ldr	r3, [sp, #8]
 800b2fa:	f001 fe15 	bl	800cf28 <RegionUS915ComputeRxWindowParameters>
}
 800b2fe:	e7f6      	b.n	800b2ee <RegionComputeRxWindowParameters+0x16>

0800b300 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b300:	b508      	push	{r3, lr}
 800b302:	4603      	mov	r3, r0
 800b304:	4608      	mov	r0, r1
 800b306:	4611      	mov	r1, r2
    switch( region )
 800b308:	2b05      	cmp	r3, #5
 800b30a:	d003      	beq.n	800b314 <RegionRxConfig+0x14>
 800b30c:	2b08      	cmp	r3, #8
 800b30e:	d004      	beq.n	800b31a <RegionRxConfig+0x1a>
 800b310:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b312:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800b314:	f000 ff76 	bl	800c204 <RegionEU868RxConfig>
 800b318:	e7fb      	b.n	800b312 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800b31a:	f001 fe33 	bl	800cf84 <RegionUS915RxConfig>
 800b31e:	e7f8      	b.n	800b312 <RegionRxConfig+0x12>

0800b320 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b320:	b508      	push	{r3, lr}
 800b322:	4684      	mov	ip, r0
 800b324:	4608      	mov	r0, r1
 800b326:	4611      	mov	r1, r2
 800b328:	461a      	mov	r2, r3
    switch( region )
 800b32a:	f1bc 0f05 	cmp.w	ip, #5
 800b32e:	d004      	beq.n	800b33a <RegionTxConfig+0x1a>
 800b330:	f1bc 0f08 	cmp.w	ip, #8
 800b334:	d004      	beq.n	800b340 <RegionTxConfig+0x20>
 800b336:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800b338:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800b33a:	f000 ffe7 	bl	800c30c <RegionEU868TxConfig>
 800b33e:	e7fb      	b.n	800b338 <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800b340:	f001 fe7a 	bl	800d038 <RegionUS915TxConfig>
 800b344:	e7f8      	b.n	800b338 <RegionTxConfig+0x18>

0800b346 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b346:	b500      	push	{lr}
 800b348:	b083      	sub	sp, #12
 800b34a:	4684      	mov	ip, r0
 800b34c:	4608      	mov	r0, r1
 800b34e:	4611      	mov	r1, r2
 800b350:	461a      	mov	r2, r3
    switch( region )
 800b352:	f1bc 0f05 	cmp.w	ip, #5
 800b356:	d006      	beq.n	800b366 <RegionLinkAdrReq+0x20>
 800b358:	f1bc 0f08 	cmp.w	ip, #8
 800b35c:	d009      	beq.n	800b372 <RegionLinkAdrReq+0x2c>
 800b35e:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b360:	b003      	add	sp, #12
 800b362:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800b366:	9b05      	ldr	r3, [sp, #20]
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	9b04      	ldr	r3, [sp, #16]
 800b36c:	f001 f866 	bl	800c43c <RegionEU868LinkAdrReq>
 800b370:	e7f6      	b.n	800b360 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800b372:	9b05      	ldr	r3, [sp, #20]
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	9b04      	ldr	r3, [sp, #16]
 800b378:	f001 fed8 	bl	800d12c <RegionUS915LinkAdrReq>
 800b37c:	e7f0      	b.n	800b360 <RegionLinkAdrReq+0x1a>

0800b37e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800b37e:	b508      	push	{r3, lr}
 800b380:	4603      	mov	r3, r0
 800b382:	4608      	mov	r0, r1
    switch( region )
 800b384:	2b05      	cmp	r3, #5
 800b386:	d003      	beq.n	800b390 <RegionRxParamSetupReq+0x12>
 800b388:	2b08      	cmp	r3, #8
 800b38a:	d004      	beq.n	800b396 <RegionRxParamSetupReq+0x18>
 800b38c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b38e:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800b390:	f001 f91a 	bl	800c5c8 <RegionEU868RxParamSetupReq>
 800b394:	e7fb      	b.n	800b38e <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800b396:	f002 f817 	bl	800d3c8 <RegionUS915RxParamSetupReq>
 800b39a:	e7f8      	b.n	800b38e <RegionRxParamSetupReq+0x10>

0800b39c <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800b39c:	b508      	push	{r3, lr}
 800b39e:	4603      	mov	r3, r0
 800b3a0:	4608      	mov	r0, r1
    switch( region )
 800b3a2:	2b05      	cmp	r3, #5
 800b3a4:	d003      	beq.n	800b3ae <RegionNewChannelReq+0x12>
 800b3a6:	2b08      	cmp	r3, #8
 800b3a8:	d004      	beq.n	800b3b4 <RegionNewChannelReq+0x18>
 800b3aa:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b3ac:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800b3ae:	f001 fa9c 	bl	800c8ea <RegionEU868NewChannelReq>
 800b3b2:	e7fb      	b.n	800b3ac <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800b3b4:	f002 f833 	bl	800d41e <RegionUS915NewChannelReq>
 800b3b8:	e7f8      	b.n	800b3ac <RegionNewChannelReq+0x10>

0800b3ba <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800b3ba:	b508      	push	{r3, lr}
 800b3bc:	4603      	mov	r3, r0
 800b3be:	4608      	mov	r0, r1
    switch( region )
 800b3c0:	2b05      	cmp	r3, #5
 800b3c2:	d003      	beq.n	800b3cc <RegionTxParamSetupReq+0x12>
 800b3c4:	2b08      	cmp	r3, #8
 800b3c6:	d004      	beq.n	800b3d2 <RegionTxParamSetupReq+0x18>
 800b3c8:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b3ca:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800b3cc:	f001 f920 	bl	800c610 <RegionEU868TxParamSetupReq>
 800b3d0:	e7fb      	b.n	800b3ca <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800b3d2:	f002 f827 	bl	800d424 <RegionUS915TxParamSetupReq>
 800b3d6:	e7f8      	b.n	800b3ca <RegionTxParamSetupReq+0x10>

0800b3d8 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800b3d8:	b508      	push	{r3, lr}
 800b3da:	4603      	mov	r3, r0
 800b3dc:	4608      	mov	r0, r1
    switch( region )
 800b3de:	2b05      	cmp	r3, #5
 800b3e0:	d003      	beq.n	800b3ea <RegionDlChannelReq+0x12>
 800b3e2:	2b08      	cmp	r3, #8
 800b3e4:	d004      	beq.n	800b3f0 <RegionDlChannelReq+0x18>
 800b3e6:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b3e8:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800b3ea:	f001 f915 	bl	800c618 <RegionEU868DlChannelReq>
 800b3ee:	e7fb      	b.n	800b3e8 <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800b3f0:	f002 f81b 	bl	800d42a <RegionUS915DlChannelReq>
 800b3f4:	e7f8      	b.n	800b3e8 <RegionDlChannelReq+0x10>

0800b3f6 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800b3f6:	b508      	push	{r3, lr}
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	4608      	mov	r0, r1
 800b3fc:	4611      	mov	r1, r2
    switch( region )
 800b3fe:	2b05      	cmp	r3, #5
 800b400:	d003      	beq.n	800b40a <RegionAlternateDr+0x14>
 800b402:	2b08      	cmp	r3, #8
 800b404:	d004      	beq.n	800b410 <RegionAlternateDr+0x1a>
 800b406:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800b408:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800b40a:	f001 f92d 	bl	800c668 <RegionEU868AlternateDr>
 800b40e:	e7fb      	b.n	800b408 <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800b410:	f002 f80e 	bl	800d430 <RegionUS915AlternateDr>
 800b414:	e7f8      	b.n	800b408 <RegionAlternateDr+0x12>

0800b416 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b416:	b508      	push	{r3, lr}
 800b418:	4684      	mov	ip, r0
 800b41a:	4608      	mov	r0, r1
 800b41c:	4611      	mov	r1, r2
 800b41e:	461a      	mov	r2, r3
    switch( region )
 800b420:	f1bc 0f05 	cmp.w	ip, #5
 800b424:	d004      	beq.n	800b430 <RegionNextChannel+0x1a>
 800b426:	f1bc 0f08 	cmp.w	ip, #8
 800b42a:	d005      	beq.n	800b438 <RegionNextChannel+0x22>
 800b42c:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800b42e:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800b430:	9b02      	ldr	r3, [sp, #8]
 800b432:	f001 f91b 	bl	800c66c <RegionEU868NextChannel>
 800b436:	e7fa      	b.n	800b42e <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800b438:	9b02      	ldr	r3, [sp, #8]
 800b43a:	f002 f81f 	bl	800d47c <RegionUS915NextChannel>
 800b43e:	e7f6      	b.n	800b42e <RegionNextChannel+0x18>

0800b440 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800b440:	b508      	push	{r3, lr}
 800b442:	4603      	mov	r3, r0
 800b444:	4608      	mov	r0, r1
    switch( region )
 800b446:	2b05      	cmp	r3, #5
 800b448:	d002      	beq.n	800b450 <RegionSetContinuousWave+0x10>
 800b44a:	2b08      	cmp	r3, #8
 800b44c:	d003      	beq.n	800b456 <RegionSetContinuousWave+0x16>
        default:
        {
            break;
        }
    }
}
 800b44e:	bd08      	pop	{r3, pc}
        EU868_SET_CONTINUOUS_WAVE( );
 800b450:	f001 fa76 	bl	800c940 <RegionEU868SetContinuousWave>
 800b454:	e7fb      	b.n	800b44e <RegionSetContinuousWave+0xe>
        US915_SET_CONTINUOUS_WAVE( );
 800b456:	f002 f8c5 	bl	800d5e4 <RegionUS915SetContinuousWave>
}
 800b45a:	e7f8      	b.n	800b44e <RegionSetContinuousWave+0xe>

0800b45c <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800b45c:	b508      	push	{r3, lr}
 800b45e:	4684      	mov	ip, r0
 800b460:	4608      	mov	r0, r1
 800b462:	4611      	mov	r1, r2
 800b464:	461a      	mov	r2, r3
    switch( region )
 800b466:	f1bc 0f05 	cmp.w	ip, #5
 800b46a:	d004      	beq.n	800b476 <RegionApplyDrOffset+0x1a>
 800b46c:	f1bc 0f08 	cmp.w	ip, #8
 800b470:	d004      	beq.n	800b47c <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800b472:	b2c8      	uxtb	r0, r1
 800b474:	e001      	b.n	800b47a <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800b476:	f001 fa91 	bl	800c99c <RegionEU868ApplyDrOffset>
        }
    }
}
 800b47a:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800b47c:	f002 f8e6 	bl	800d64c <RegionUS915ApplyDrOffset>
 800b480:	e7fb      	b.n	800b47a <RegionApplyDrOffset+0x1e>
	...

0800b484 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800b484:	4800      	ldr	r0, [pc, #0]	@ (800b488 <RegionGetVersion+0x4>)
 800b486:	4770      	bx	lr
 800b488:	01000300 	.word	0x01000300

0800b48c <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800b48c:	468c      	mov	ip, r1
 800b48e:	b1a9      	cbz	r1, 800b4bc <FindAvailable125kHzChannels+0x30>
 800b490:	b1b2      	cbz	r2, 800b4c0 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800b492:	2300      	movs	r3, #0
 800b494:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800b496:	e001      	b.n	800b49c <FindAvailable125kHzChannels+0x10>
 800b498:	3301      	adds	r3, #1
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	2b07      	cmp	r3, #7
 800b49e:	d80b      	bhi.n	800b4b8 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800b4a0:	fa40 f103 	asr.w	r1, r0, r3
 800b4a4:	f011 0f01 	tst.w	r1, #1
 800b4a8:	d0f6      	beq.n	800b498 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800b4aa:	7811      	ldrb	r1, [r2, #0]
 800b4ac:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800b4b0:	7811      	ldrb	r1, [r2, #0]
 800b4b2:	3101      	adds	r1, #1
 800b4b4:	7011      	strb	r1, [r2, #0]
 800b4b6:	e7ef      	b.n	800b498 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b4bc:	2003      	movs	r0, #3
 800b4be:	4770      	bx	lr
 800b4c0:	2003      	movs	r0, #3
}
 800b4c2:	4770      	bx	lr

0800b4c4 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800b4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4c6:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	9302      	str	r3, [sp, #8]
 800b4cc:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800b4ce:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d03e      	beq.n	800b554 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800b4d6:	460d      	mov	r5, r1
 800b4d8:	4617      	mov	r7, r2
 800b4da:	4606      	mov	r6, r0
 800b4dc:	2900      	cmp	r1, #0
 800b4de:	d03b      	beq.n	800b558 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800b4e0:	2a00      	cmp	r2, #0
 800b4e2:	d03b      	beq.n	800b55c <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800b4e4:	780c      	ldrb	r4, [r1, #0]
 800b4e6:	e017      	b.n	800b518 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800b4e8:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800b4ec:	0a00      	lsrs	r0, r0, #8
 800b4ee:	e019      	b.n	800b524 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800b4f0:	3901      	subs	r1, #1
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	f002 ffbc 	bl	800e470 <randr>
 800b4f8:	f100 0310 	add.w	r3, r0, #16
 800b4fc:	eb0d 0003 	add.w	r0, sp, r3
 800b500:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800b504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b508:	703b      	strb	r3, [r7, #0]
 800b50a:	e016      	b.n	800b53a <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800b50c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b510:	b9cb      	cbnz	r3, 800b546 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800b512:	782a      	ldrb	r2, [r5, #0]
 800b514:	42a2      	cmp	r2, r4
 800b516:	d016      	beq.n	800b546 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800b518:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800b51a:	f014 0f01 	tst.w	r4, #1
 800b51e:	d1e3      	bne.n	800b4e8 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800b520:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800b524:	f10d 0207 	add.w	r2, sp, #7
 800b528:	a902      	add	r1, sp, #8
 800b52a:	f7ff ffaf 	bl	800b48c <FindAvailable125kHzChannels>
 800b52e:	2803      	cmp	r0, #3
 800b530:	d00b      	beq.n	800b54a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800b532:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b536:	2900      	cmp	r1, #0
 800b538:	d1da      	bne.n	800b4f0 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800b53a:	3401      	adds	r4, #1
 800b53c:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800b53e:	2c07      	cmp	r4, #7
 800b540:	d9e4      	bls.n	800b50c <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800b542:	2400      	movs	r4, #0
 800b544:	e7e2      	b.n	800b50c <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800b546:	b913      	cbnz	r3, 800b54e <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800b548:	2003      	movs	r0, #3
}
 800b54a:	b005      	add	sp, #20
 800b54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800b54e:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800b550:	2000      	movs	r0, #0
 800b552:	e7fa      	b.n	800b54a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b554:	2003      	movs	r0, #3
 800b556:	e7f8      	b.n	800b54a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800b558:	2003      	movs	r0, #3
 800b55a:	e7f6      	b.n	800b54a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800b55c:	2003      	movs	r0, #3
 800b55e:	e7f4      	b.n	800b54a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800b560 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800b560:	fb02 1000 	mla	r0, r2, r0, r1
 800b564:	4770      	bx	lr

0800b566 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800b566:	b082      	sub	sp, #8
 800b568:	f10d 0c08 	add.w	ip, sp, #8
 800b56c:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800b570:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800b572:	b999      	cbnz	r1, 800b59c <GetDutyCycle+0x36>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b574:	4613      	mov	r3, r2
 800b576:	f5b2 6f61 	cmp.w	r2, #3600	@ 0xe10
 800b57a:	d306      	bcc.n	800b58a <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800b57c:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 800b580:	4293      	cmp	r3, r2
 800b582:	d808      	bhi.n	800b596 <GetDutyCycle+0x30>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800b584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b588:	e000      	b.n	800b58c <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800b58a:	2364      	movs	r3, #100	@ 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800b58c:	4298      	cmp	r0, r3
 800b58e:	bf38      	it	cc
 800b590:	4618      	movcc	r0, r3
    {
        dutyCycle = 1;
    }

    return dutyCycle;
}
 800b592:	b002      	add	sp, #8
 800b594:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800b596:	f242 7310 	movw	r3, #10000	@ 0x2710
 800b59a:	e7f7      	b.n	800b58c <GetDutyCycle+0x26>
    if( dutyCycle == 0 )
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d1f8      	bne.n	800b592 <GetDutyCycle+0x2c>
        dutyCycle = 1;
 800b5a0:	2001      	movs	r0, #1
 800b5a2:	e7f6      	b.n	800b592 <GetDutyCycle+0x2c>

0800b5a4 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800b5a4:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800b5a6:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800b5a8:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800b5aa:	e001      	b.n	800b5b0 <CountChannels+0xc>
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	428b      	cmp	r3, r1
 800b5b2:	d207      	bcs.n	800b5c4 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	409a      	lsls	r2, r3
 800b5b8:	ea32 020c 	bics.w	r2, r2, ip
 800b5bc:	d1f6      	bne.n	800b5ac <CountChannels+0x8>
        {
            nbActiveBits++;
 800b5be:	3001      	adds	r0, #1
 800b5c0:	b2c0      	uxtb	r0, r0
 800b5c2:	e7f3      	b.n	800b5ac <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800b5c4:	4770      	bx	lr
	...

0800b5c8 <SetMaxTimeCredits>:
{
 800b5c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5cc:	b089      	sub	sp, #36	@ 0x24
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	460e      	mov	r6, r1
 800b5d2:	ad02      	add	r5, sp, #8
 800b5d4:	e885 000c 	stmia.w	r5, {r2, r3}
 800b5d8:	f89d 8040 	ldrb.w	r8, [sp, #64]	@ 0x40
 800b5dc:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800b5e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b5e4:	f005 fb78 	bl	8010cd8 <SysTimeToMs>
 800b5e8:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	9304      	str	r3, [sp, #16]
 800b5ee:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800b5f0:	e895 000c 	ldmia.w	r5, {r2, r3}
 800b5f4:	4631      	mov	r1, r6
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f7ff ffb5 	bl	800b566 <GetDutyCycle>
 800b5fc:	4605      	mov	r5, r0
    if( joined == false )
 800b5fe:	2e00      	cmp	r6, #0
 800b600:	d14c      	bne.n	800b69c <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b602:	2864      	cmp	r0, #100	@ 0x64
 800b604:	d025      	beq.n	800b652 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b606:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b60a:	d025      	beq.n	800b658 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800b60c:	4e27      	ldr	r6, [pc, #156]	@ (800b6ac <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800b60e:	68a1      	ldr	r1, [r4, #8]
 800b610:	a806      	add	r0, sp, #24
 800b612:	f005 fb81 	bl	8010d18 <SysTimeFromMs>
 800b616:	9b07      	ldr	r3, [sp, #28]
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	9b06      	ldr	r3, [sp, #24]
 800b61c:	aa02      	add	r2, sp, #8
 800b61e:	ca06      	ldmia	r2, {r1, r2}
 800b620:	a804      	add	r0, sp, #16
 800b622:	f005 fae0 	bl	8010be6 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b626:	f1b8 0f00 	cmp.w	r8, #0
 800b62a:	d102      	bne.n	800b632 <SetMaxTimeCredits+0x6a>
 800b62c:	f1b9 0f00 	cmp.w	r9, #0
 800b630:	d002      	beq.n	800b638 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800b632:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b634:	42b3      	cmp	r3, r6
 800b636:	d012      	beq.n	800b65e <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800b638:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b63a:	9b02      	ldr	r3, [sp, #8]
 800b63c:	4a1c      	ldr	r2, [pc, #112]	@ (800b6b0 <SetMaxTimeCredits+0xe8>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d812      	bhi.n	800b668 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800b642:	6863      	ldr	r3, [r4, #4]
 800b644:	b903      	cbnz	r3, 800b648 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800b646:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800b648:	6126      	str	r6, [r4, #16]
}
 800b64a:	4628      	mov	r0, r5
 800b64c:	b009      	add	sp, #36	@ 0x24
 800b64e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800b652:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b654:	4e17      	ldr	r6, [pc, #92]	@ (800b6b4 <SetMaxTimeCredits+0xec>)
 800b656:	e7da      	b.n	800b60e <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800b658:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800b65a:	4e17      	ldr	r6, [pc, #92]	@ (800b6b8 <SetMaxTimeCredits+0xf0>)
 800b65c:	e7d7      	b.n	800b60e <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800b65e:	9a04      	ldr	r2, [sp, #16]
 800b660:	4b16      	ldr	r3, [pc, #88]	@ (800b6bc <SetMaxTimeCredits+0xf4>)
 800b662:	429a      	cmp	r2, r3
 800b664:	d9ed      	bls.n	800b642 <SetMaxTimeCredits+0x7a>
 800b666:	e7e7      	b.n	800b638 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800b668:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 800b66c:	3b30      	subs	r3, #48	@ 0x30
 800b66e:	4a14      	ldr	r2, [pc, #80]	@ (800b6c0 <SetMaxTimeCredits+0xf8>)
 800b670:	fba2 2303 	umull	r2, r3, r2, r3
 800b674:	0c1b      	lsrs	r3, r3, #16
 800b676:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800b678:	4a12      	ldr	r2, [pc, #72]	@ (800b6c4 <SetMaxTimeCredits+0xfc>)
 800b67a:	fb02 f303 	mul.w	r3, r2, r3
 800b67e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b680:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 800b684:	3330      	adds	r3, #48	@ 0x30
 800b686:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800b688:	2300      	movs	r3, #0
 800b68a:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800b68e:	ab04      	add	r3, sp, #16
 800b690:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b694:	f005 fb20 	bl	8010cd8 <SysTimeToMs>
 800b698:	60a0      	str	r0, [r4, #8]
 800b69a:	e7d2      	b.n	800b642 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800b69c:	f1b8 0f00 	cmp.w	r8, #0
 800b6a0:	d102      	bne.n	800b6a8 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800b6a2:	4e04      	ldr	r6, [pc, #16]	@ (800b6b4 <SetMaxTimeCredits+0xec>)
 800b6a4:	60e6      	str	r6, [r4, #12]
 800b6a6:	e7cc      	b.n	800b642 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b6a8:	4e02      	ldr	r6, [pc, #8]	@ (800b6b4 <SetMaxTimeCredits+0xec>)
 800b6aa:	e7ca      	b.n	800b642 <SetMaxTimeCredits+0x7a>
 800b6ac:	02932e00 	.word	0x02932e00
 800b6b0:	0001ec2f 	.word	0x0001ec2f
 800b6b4:	001b7740 	.word	0x001b7740
 800b6b8:	0112a880 	.word	0x0112a880
 800b6bc:	0001517f 	.word	0x0001517f
 800b6c0:	c22e4507 	.word	0xc22e4507
 800b6c4:	00015180 	.word	0x00015180

0800b6c8 <UpdateTimeCredits>:
{
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	9200      	str	r2, [sp, #0]
 800b6d4:	ab06      	add	r3, sp, #24
 800b6d6:	cb0c      	ldmia	r3, {r2, r3}
 800b6d8:	f7ff ff76 	bl	800b5c8 <SetMaxTimeCredits>
 800b6dc:	4605      	mov	r5, r0
    if( joined == true )
 800b6de:	b94e      	cbnz	r6, 800b6f4 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800b6e0:	68e2      	ldr	r2, [r4, #12]
 800b6e2:	6923      	ldr	r3, [r4, #16]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d900      	bls.n	800b6ea <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800b6e8:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800b6ea:	9b08      	ldr	r3, [sp, #32]
 800b6ec:	6063      	str	r3, [r4, #4]
}
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	b002      	add	sp, #8
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800b6f4:	6860      	ldr	r0, [r4, #4]
 800b6f6:	f005 fb6f 	bl	8010dd8 <UTIL_TIMER_GetElapsedTime>
 800b6fa:	68e3      	ldr	r3, [r4, #12]
 800b6fc:	4403      	add	r3, r0
 800b6fe:	60e3      	str	r3, [r4, #12]
 800b700:	e7ee      	b.n	800b6e0 <UpdateTimeCredits+0x18>

0800b702 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800b702:	4288      	cmp	r0, r1
 800b704:	db03      	blt.n	800b70e <RegionCommonValueInRange+0xc>
 800b706:	4290      	cmp	r0, r2
 800b708:	dd03      	ble.n	800b712 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800b70a:	2000      	movs	r0, #0
 800b70c:	4770      	bx	lr
 800b70e:	2000      	movs	r0, #0
 800b710:	4770      	bx	lr
        return 1;
 800b712:	2001      	movs	r0, #1
}
 800b714:	4770      	bx	lr

0800b716 <RegionCommonChanVerifyDr>:
{
 800b716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b71a:	4682      	mov	sl, r0
 800b71c:	460e      	mov	r6, r1
 800b71e:	4690      	mov	r8, r2
 800b720:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800b724:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800b728:	4619      	mov	r1, r3
 800b72a:	4640      	mov	r0, r8
 800b72c:	f7ff ffe9 	bl	800b702 <RegionCommonValueInRange>
 800b730:	b338      	cbz	r0, 800b782 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800b732:	2500      	movs	r5, #0
 800b734:	462f      	mov	r7, r5
 800b736:	e01e      	b.n	800b776 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800b738:	3401      	adds	r4, #1
 800b73a:	b2e4      	uxtb	r4, r4
 800b73c:	2c0f      	cmp	r4, #15
 800b73e:	d816      	bhi.n	800b76e <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800b740:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800b744:	4123      	asrs	r3, r4
 800b746:	f013 0f01 	tst.w	r3, #1
 800b74a:	d0f5      	beq.n	800b738 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800b74c:	193b      	adds	r3, r7, r4
 800b74e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b752:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800b756:	7a19      	ldrb	r1, [r3, #8]
 800b758:	090a      	lsrs	r2, r1, #4
 800b75a:	f001 010f 	and.w	r1, r1, #15
 800b75e:	4640      	mov	r0, r8
 800b760:	f7ff ffcf 	bl	800b702 <RegionCommonValueInRange>
 800b764:	2801      	cmp	r0, #1
 800b766:	d1e7      	bne.n	800b738 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800b768:	2001      	movs	r0, #1
}
 800b76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800b76e:	3710      	adds	r7, #16
 800b770:	b2ff      	uxtb	r7, r7
 800b772:	3501      	adds	r5, #1
 800b774:	b2ed      	uxtb	r5, r5
 800b776:	4557      	cmp	r7, sl
 800b778:	d201      	bcs.n	800b77e <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800b77a:	2400      	movs	r4, #0
 800b77c:	e7de      	b.n	800b73c <RegionCommonChanVerifyDr+0x26>
    return false;
 800b77e:	2000      	movs	r0, #0
 800b780:	e7f3      	b.n	800b76a <RegionCommonChanVerifyDr+0x54>
        return false;
 800b782:	2000      	movs	r0, #0
 800b784:	e7f1      	b.n	800b76a <RegionCommonChanVerifyDr+0x54>

0800b786 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b786:	0913      	lsrs	r3, r2, #4
 800b788:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800b78c:	d313      	bcc.n	800b7b6 <RegionCommonChanDisable+0x30>
{
 800b78e:	b500      	push	{lr}
 800b790:	4684      	mov	ip, r0
 800b792:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b796:	4291      	cmp	r1, r2
 800b798:	d20f      	bcs.n	800b7ba <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800b79a:	f830 301e 	ldrh.w	r3, [r0, lr, lsl #1]
 800b79e:	f001 010f 	and.w	r1, r1, #15
 800b7a2:	2001      	movs	r0, #1
 800b7a4:	fa00 f101 	lsl.w	r1, r0, r1
 800b7a8:	43c9      	mvns	r1, r1
 800b7aa:	b209      	sxth	r1, r1
 800b7ac:	400b      	ands	r3, r1
 800b7ae:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 800b7b2:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800b7b6:	2000      	movs	r0, #0
}
 800b7b8:	4770      	bx	lr
        return false;
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	e7f9      	b.n	800b7b2 <RegionCommonChanDisable+0x2c>

0800b7be <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800b7be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800b7c0:	b188      	cbz	r0, 800b7e6 <RegionCommonCountChannels+0x28>
 800b7c2:	460c      	mov	r4, r1
 800b7c4:	4616      	mov	r6, r2
 800b7c6:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800b7c8:	2500      	movs	r5, #0
 800b7ca:	e008      	b.n	800b7de <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b7cc:	2110      	movs	r1, #16
 800b7ce:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800b7d2:	f7ff fee7 	bl	800b5a4 <CountChannels>
 800b7d6:	4405      	add	r5, r0
 800b7d8:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800b7da:	3401      	adds	r4, #1
 800b7dc:	b2e4      	uxtb	r4, r4
 800b7de:	42b4      	cmp	r4, r6
 800b7e0:	d3f4      	bcc.n	800b7cc <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800b7e6:	2500      	movs	r5, #0
 800b7e8:	e7fb      	b.n	800b7e2 <RegionCommonCountChannels+0x24>

0800b7ea <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800b7ea:	4684      	mov	ip, r0
 800b7ec:	b158      	cbz	r0, 800b806 <RegionCommonChanMaskCopy+0x1c>
 800b7ee:	b109      	cbz	r1, 800b7f4 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	e006      	b.n	800b802 <RegionCommonChanMaskCopy+0x18>
 800b7f4:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800b7f6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b7fa:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800b7fe:	3301      	adds	r3, #1
 800b800:	b2db      	uxtb	r3, r3
 800b802:	4293      	cmp	r3, r2
 800b804:	d3f7      	bcc.n	800b7f6 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800b806:	4770      	bx	lr

0800b808 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800b808:	b082      	sub	sp, #8
 800b80a:	b538      	push	{r3, r4, r5, lr}
 800b80c:	4604      	mov	r4, r0
 800b80e:	460d      	mov	r5, r1
 800b810:	4611      	mov	r1, r2
 800b812:	aa04      	add	r2, sp, #16
 800b814:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800b818:	ca0c      	ldmia	r2, {r2, r3}
 800b81a:	f7ff fea4 	bl	800b566 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800b81e:	68e3      	ldr	r3, [r4, #12]
 800b820:	fb05 f100 	mul.w	r1, r5, r0
 800b824:	428b      	cmp	r3, r1
 800b826:	d905      	bls.n	800b834 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800b828:	1a5b      	subs	r3, r3, r1
 800b82a:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800b82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b830:	b002      	add	sp, #8
 800b832:	4770      	bx	lr
        band->TimeCredits = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	60e3      	str	r3, [r4, #12]
}
 800b838:	e7f8      	b.n	800b82c <RegionCommonSetBandTxDone+0x24>
	...

0800b83c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b840:	b089      	sub	sp, #36	@ 0x24
 800b842:	4607      	mov	r7, r0
 800b844:	468b      	mov	fp, r1
 800b846:	4691      	mov	r9, r2
 800b848:	4698      	mov	r8, r3
 800b84a:	f89d a048 	ldrb.w	sl, [sp, #72]	@ 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800b84e:	f005 fab9 	bl	8010dc4 <UTIL_TIMER_GetCurrentTime>
 800b852:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800b854:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800b856:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800b858:	f04f 33ff 	mov.w	r3, #4294967295
 800b85c:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800b85e:	e005      	b.n	800b86c <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800b860:	2301      	movs	r3, #1
 800b862:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800b864:	441e      	add	r6, r3
 800b866:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800b868:	3401      	adds	r4, #1
 800b86a:	b2e4      	uxtb	r4, r4
 800b86c:	454c      	cmp	r4, r9
 800b86e:	d25d      	bcs.n	800b92c <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800b870:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800b874:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800b878:	9b04      	ldr	r3, [sp, #16]
 800b87a:	9302      	str	r3, [sp, #8]
 800b87c:	ab13      	add	r3, sp, #76	@ 0x4c
 800b87e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b882:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b886:	4653      	mov	r3, sl
 800b888:	4642      	mov	r2, r8
 800b88a:	4639      	mov	r1, r7
 800b88c:	4628      	mov	r0, r5
 800b88e:	f7ff ff1b 	bl	800b6c8 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b892:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b894:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800b898:	68ea      	ldr	r2, [r5, #12]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d8e0      	bhi.n	800b860 <RegionCommonUpdateBandTimeOff+0x24>
 800b89e:	f1b8 0f00 	cmp.w	r8, #0
 800b8a2:	d101      	bne.n	800b8a8 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800b8a4:	2f00      	cmp	r7, #0
 800b8a6:	d1db      	bne.n	800b860 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800b8ac:	6929      	ldr	r1, [r5, #16]
 800b8ae:	4299      	cmp	r1, r3
 800b8b0:	d907      	bls.n	800b8c2 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800b8b2:	1a9b      	subs	r3, r3, r2
 800b8b4:	9a05      	ldr	r2, [sp, #20]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	bf28      	it	cs
 800b8ba:	461a      	movcs	r2, r3
 800b8bc:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800b8be:	3601      	adds	r6, #1
 800b8c0:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800b8c2:	2f00      	cmp	r7, #0
 800b8c4:	d1d0      	bne.n	800b868 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	9306      	str	r3, [sp, #24]
 800b8ca:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b8ce:	2864      	cmp	r0, #100	@ 0x64
 800b8d0:	d024      	beq.n	800b91c <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b8d2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b8d6:	d025      	beq.n	800b924 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b8d8:	4b19      	ldr	r3, [pc, #100]	@ (800b940 <RegionCommonUpdateBandTimeOff+0x104>)
 800b8da:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b8dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b8de:	4a18      	ldr	r2, [pc, #96]	@ (800b940 <RegionCommonUpdateBandTimeOff+0x104>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d90c      	bls.n	800b8fe <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800b8e4:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 800b8e8:	3b30      	subs	r3, #48	@ 0x30
 800b8ea:	4a16      	ldr	r2, [pc, #88]	@ (800b944 <RegionCommonUpdateBandTimeOff+0x108>)
 800b8ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f0:	0c1b      	lsrs	r3, r3, #16
 800b8f2:	4a15      	ldr	r2, [pc, #84]	@ (800b948 <RegionCommonUpdateBandTimeOff+0x10c>)
 800b8f4:	fb03 2202 	mla	r2, r3, r2, r2
 800b8f8:	9b06      	ldr	r3, [sp, #24]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800b8fe:	ad06      	add	r5, sp, #24
 800b900:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b906:	e895 0006 	ldmia.w	r5, {r1, r2}
 800b90a:	4628      	mov	r0, r5
 800b90c:	f005 f96b 	bl	8010be6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800b910:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b914:	f005 f9e0 	bl	8010cd8 <SysTimeToMs>
 800b918:	9005      	str	r0, [sp, #20]
 800b91a:	e7a5      	b.n	800b868 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800b91c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800b920:	9306      	str	r3, [sp, #24]
 800b922:	e7db      	b.n	800b8dc <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800b924:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 800b928:	9306      	str	r3, [sp, #24]
 800b92a:	e7d7      	b.n	800b8dc <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }


    if( validBands == 0 )
 800b92c:	b11e      	cbz	r6, 800b936 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800b92e:	9805      	ldr	r0, [sp, #20]
 800b930:	b009      	add	sp, #36	@ 0x24
 800b932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800b936:	f04f 33ff 	mov.w	r3, #4294967295
 800b93a:	9305      	str	r3, [sp, #20]
 800b93c:	e7f7      	b.n	800b92e <RegionCommonUpdateBandTimeOff+0xf2>
 800b93e:	bf00      	nop
 800b940:	0001ec30 	.word	0x0001ec30
 800b944:	c22e4507 	.word	0xc22e4507
 800b948:	00015180 	.word	0x00015180

0800b94c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800b94c:	7803      	ldrb	r3, [r0, #0]
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d001      	beq.n	800b956 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800b952:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800b954:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800b956:	7843      	ldrb	r3, [r0, #1]
 800b958:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800b95c:	704a      	strb	r2, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800b95e:	f003 020f 	and.w	r2, r3, #15
 800b962:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800b964:	091b      	lsrs	r3, r3, #4
 800b966:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800b968:	7883      	ldrb	r3, [r0, #2]
 800b96a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800b96c:	78c2      	ldrb	r2, [r0, #3]
 800b96e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b972:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800b974:	7903      	ldrb	r3, [r0, #4]
 800b976:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800b978:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800b97c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800b97e:	f003 030f 	and.w	r3, r3, #15
 800b982:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800b984:	2005      	movs	r0, #5
 800b986:	4770      	bx	lr

0800b988 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	b085      	sub	sp, #20
 800b98e:	4604      	mov	r4, r0
 800b990:	460f      	mov	r7, r1
 800b992:	4616      	mov	r6, r2
 800b994:	461d      	mov	r5, r3
    uint8_t status = verifyParams->Status;
 800b996:	f890 8004 	ldrb.w	r8, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800b99a:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800b99e:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800b9a2:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800b9a6:	7943      	ldrb	r3, [r0, #5]
 800b9a8:	b92b      	cbnz	r3, 800b9b6 <RegionCommonLinkAdrReqVerifyParams+0x2e>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800b9aa:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800b9ae:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800b9b2:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800b9b6:	f1b8 0f00 	cmp.w	r8, #0
 800b9ba:	d109      	bne.n	800b9d0 <RegionCommonLinkAdrReqVerifyParams+0x48>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800b9bc:	f887 a000 	strb.w	sl, [r7]
    *txPow = txPower;
 800b9c0:	f886 9000 	strb.w	r9, [r6]
    *nbRep = nbRepetitions;
 800b9c4:	f885 b000 	strb.w	fp, [r5]

    return status;
}
 800b9c8:	4640      	mov	r0, r8
 800b9ca:	b005      	add	sp, #20
 800b9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800b9d0:	69a3      	ldr	r3, [r4, #24]
 800b9d2:	9301      	str	r3, [sp, #4]
 800b9d4:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800b9de:	4652      	mov	r2, sl
 800b9e0:	6921      	ldr	r1, [r4, #16]
 800b9e2:	7b20      	ldrb	r0, [r4, #12]
 800b9e4:	f7ff fe97 	bl	800b716 <RegionCommonChanVerifyDr>
 800b9e8:	b908      	cbnz	r0, 800b9ee <RegionCommonLinkAdrReqVerifyParams+0x66>
            status &= 0xFD; // Datarate KO
 800b9ea:	f008 08fd 	and.w	r8, r8, #253	@ 0xfd
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800b9ee:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800b9f2:	9303      	str	r3, [sp, #12]
 800b9f4:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800b9f8:	461c      	mov	r4, r3
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4648      	mov	r0, r9
 800b9fe:	f7ff fe80 	bl	800b702 <RegionCommonValueInRange>
 800ba02:	b918      	cbnz	r0, 800ba0c <RegionCommonLinkAdrReqVerifyParams+0x84>
            if( verifyParams->MaxTxPower > txPower )
 800ba04:	454c      	cmp	r4, r9
 800ba06:	dc0a      	bgt.n	800ba1e <RegionCommonLinkAdrReqVerifyParams+0x96>
                status &= 0xFB; // TxPower KO
 800ba08:	f008 08fb 	and.w	r8, r8, #251	@ 0xfb
    if( status == 0x07 )
 800ba0c:	f1b8 0f07 	cmp.w	r8, #7
 800ba10:	d1d4      	bne.n	800b9bc <RegionCommonLinkAdrReqVerifyParams+0x34>
        if( nbRepetitions == 0 )
 800ba12:	f1bb 0f00 	cmp.w	fp, #0
 800ba16:	d1d1      	bne.n	800b9bc <RegionCommonLinkAdrReqVerifyParams+0x34>
            nbRepetitions = 1;
 800ba18:	f04f 0b01 	mov.w	fp, #1
 800ba1c:	e7ce      	b.n	800b9bc <RegionCommonLinkAdrReqVerifyParams+0x34>
                txPower = verifyParams->MaxTxPower;
 800ba1e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ba22:	e7f3      	b.n	800ba0c <RegionCommonLinkAdrReqVerifyParams+0x84>

0800ba24 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800ba24:	4b02      	ldr	r3, [pc, #8]	@ (800ba30 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800ba26:	fa03 f000 	lsl.w	r0, r3, r0
}
 800ba2a:	fbb0 f0f1 	udiv	r0, r0, r1
 800ba2e:	4770      	bx	lr
 800ba30:	000f4240 	.word	0x000f4240

0800ba34 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800ba34:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800ba38:	fbb3 f0f0 	udiv	r0, r3, r0
 800ba3c:	4770      	bx	lr
	...

0800ba40 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800ba40:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ba42:	f1a1 0c04 	sub.w	ip, r1, #4
 800ba46:	f44f 7e7a 	mov.w	lr, #1000	@ 0x3e8
 800ba4a:	fb0e f202 	mul.w	r2, lr, r2
 800ba4e:	fb00 220c 	mla	r2, r0, ip, r2
 800ba52:	0052      	lsls	r2, r2, #1
 800ba54:	d021      	beq.n	800ba9a <RegionCommonComputeRxWindowParameters+0x5a>
 800ba56:	4402      	add	r2, r0
 800ba58:	3a01      	subs	r2, #1
 800ba5a:	fbb2 f2f0 	udiv	r2, r2, r0
 800ba5e:	4291      	cmp	r1, r2
 800ba60:	bf38      	it	cc
 800ba62:	4611      	movcc	r1, r2
 800ba64:	9a01      	ldr	r2, [sp, #4]
 800ba66:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ba68:	0082      	lsls	r2, r0, #2
 800ba6a:	fb01 f000 	mul.w	r0, r1, r0
 800ba6e:	b1b8      	cbz	r0, 800baa0 <RegionCommonComputeRxWindowParameters+0x60>
 800ba70:	3001      	adds	r0, #1
 800ba72:	0840      	lsrs	r0, r0, #1
 800ba74:	1a12      	subs	r2, r2, r0
 800ba76:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ba7a:	fb01 2313 	mls	r3, r1, r3, r2
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	dd10      	ble.n	800baa4 <RegionCommonComputeRxWindowParameters+0x64>
 800ba82:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 800ba86:	4a0b      	ldr	r2, [pc, #44]	@ (800bab4 <RegionCommonComputeRxWindowParameters+0x74>)
 800ba88:	fb82 1203 	smull	r1, r2, r2, r3
 800ba8c:	17db      	asrs	r3, r3, #31
 800ba8e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800ba92:	9a02      	ldr	r2, [sp, #8]
 800ba94:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800ba96:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ba9a:	fbb2 f2f0 	udiv	r2, r2, r0
 800ba9e:	e7de      	b.n	800ba5e <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800baa0:	0840      	lsrs	r0, r0, #1
 800baa2:	e7e7      	b.n	800ba74 <RegionCommonComputeRxWindowParameters+0x34>
 800baa4:	4a03      	ldr	r2, [pc, #12]	@ (800bab4 <RegionCommonComputeRxWindowParameters+0x74>)
 800baa6:	fb82 1203 	smull	r1, r2, r2, r3
 800baaa:	17db      	asrs	r3, r3, #31
 800baac:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800bab0:	e7ef      	b.n	800ba92 <RegionCommonComputeRxWindowParameters+0x52>
 800bab2:	bf00      	nop
 800bab4:	10624dd3 	.word	0x10624dd3

0800bab8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	460d      	mov	r5, r1
 800babc:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800babe:	0040      	lsls	r0, r0, #1
 800bac0:	f7f5 f900 	bl	8000cc4 <__aeabi_ui2f>
 800bac4:	4601      	mov	r1, r0
 800bac6:	4628      	mov	r0, r5
 800bac8:	f7f5 f84a 	bl	8000b60 <__aeabi_fsub>
 800bacc:	4621      	mov	r1, r4
 800bace:	f7f5 f847 	bl	8000b60 <__aeabi_fsub>
 800bad2:	f7f4 fd11 	bl	80004f8 <__aeabi_f2d>
 800bad6:	f008 f893 	bl	8013c00 <floor>
 800bada:	f7f5 f815 	bl	8000b08 <__aeabi_d2iz>

    return phyTxPower;
}
 800bade:	b240      	sxtb	r0, r0
 800bae0:	bd38      	pop	{r3, r4, r5, pc}

0800bae2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800bae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae6:	b083      	sub	sp, #12
 800bae8:	4605      	mov	r5, r0
 800baea:	468b      	mov	fp, r1
 800baec:	9300      	str	r3, [sp, #0]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800baee:	2600      	movs	r6, #0
 800baf0:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800baf2:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800baf4:	46b1      	mov	r9, r6
 800baf6:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800baf8:	e049      	b.n	800bb8e <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800bafa:	7a3a      	ldrb	r2, [r7, #8]
 800bafc:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800bb00:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800bb04:	b252      	sxtb	r2, r2
 800bb06:	b249      	sxtb	r1, r1
 800bb08:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800bb0c:	f7ff fdf9 	bl	800b702 <RegionCommonValueInRange>
 800bb10:	b178      	cbz	r0, 800bb32 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800bb12:	68ea      	ldr	r2, [r5, #12]
 800bb14:	7a7b      	ldrb	r3, [r7, #9]
 800bb16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bb1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bb1e:	7d13      	ldrb	r3, [r2, #20]
 800bb20:	b353      	cbz	r3, 800bb78 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800bb22:	f109 0301 	add.w	r3, r9, #1
 800bb26:	eb08 0204 	add.w	r2, r8, r4
 800bb2a:	f80b 2009 	strb.w	r2, [fp, r9]
 800bb2e:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800bb32:	3401      	adds	r4, #1
 800bb34:	b2e4      	uxtb	r4, r4
 800bb36:	2c0f      	cmp	r4, #15
 800bb38:	d823      	bhi.n	800bb82 <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800bb3a:	686b      	ldr	r3, [r5, #4]
 800bb3c:	0072      	lsls	r2, r6, #1
 800bb3e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800bb42:	4123      	asrs	r3, r4
 800bb44:	f013 0f01 	tst.w	r3, #1
 800bb48:	d0f3      	beq.n	800bb32 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800bb4a:	68a8      	ldr	r0, [r5, #8]
 800bb4c:	eb08 0304 	add.w	r3, r8, r4
 800bb50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bb54:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800bb58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d0e8      	beq.n	800bb32 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800bb60:	782b      	ldrb	r3, [r5, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1c9      	bne.n	800bafa <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800bb66:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d0c6      	beq.n	800bafa <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800bb6c:	5a9b      	ldrh	r3, [r3, r2]
 800bb6e:	4123      	asrs	r3, r4
 800bb70:	f013 0f01 	tst.w	r3, #1
 800bb74:	d1c1      	bne.n	800bafa <RegionCommonCountNbOfEnabledChannels+0x18>
 800bb76:	e7dc      	b.n	800bb32 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800bb78:	f10a 0a01 	add.w	sl, sl, #1
 800bb7c:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800bb80:	e7d7      	b.n	800bb32 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800bb82:	f108 0810 	add.w	r8, r8, #16
 800bb86:	fa5f f888 	uxtb.w	r8, r8
 800bb8a:	3601      	adds	r6, #1
 800bb8c:	b2f6      	uxtb	r6, r6
 800bb8e:	8a2b      	ldrh	r3, [r5, #16]
 800bb90:	4598      	cmp	r8, r3
 800bb92:	d201      	bcs.n	800bb98 <RegionCommonCountNbOfEnabledChannels+0xb6>
        for( uint8_t j = 0; j < 16; j++ )
 800bb94:	2400      	movs	r4, #0
 800bb96:	e7ce      	b.n	800bb36 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800bb98:	9f01      	ldr	r7, [sp, #4]
 800bb9a:	f887 9000 	strb.w	r9, [r7]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800bb9e:	9b00      	ldr	r3, [sp, #0]
 800bba0:	f883 a000 	strb.w	sl, [r3]
}
 800bba4:	b003      	add	sp, #12
 800bba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bbaa <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800bbaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	460f      	mov	r7, r1
 800bbb4:	4616      	mov	r6, r2
 800bbb6:	461d      	mov	r5, r3
 800bbb8:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800bbbc:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800bbc0:	6840      	ldr	r0, [r0, #4]
 800bbc2:	f005 f909 	bl	8010dd8 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	1a1b      	subs	r3, r3, r0
 800bbca:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800bbd8:	6863      	ldr	r3, [r4, #4]
 800bbda:	b113      	cbz	r3, 800bbe2 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800bbdc:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800bbde:	4283      	cmp	r3, r0
 800bbe0:	d81e      	bhi.n	800bc20 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800bbe6:	69e3      	ldr	r3, [r4, #28]
 800bbe8:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800bbec:	781f      	ldrb	r7, [r3, #0]
 800bbee:	69a3      	ldr	r3, [r4, #24]
 800bbf0:	9303      	str	r3, [sp, #12]
 800bbf2:	ab01      	add	r3, sp, #4
 800bbf4:	f104 020c 	add.w	r2, r4, #12
 800bbf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbfc:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc00:	7d23      	ldrb	r3, [r4, #20]
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	7a23      	ldrb	r3, [r4, #8]
 800bc06:	7a62      	ldrb	r2, [r4, #9]
 800bc08:	4661      	mov	r1, ip
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f7ff fe16 	bl	800b83c <RegionCommonUpdateBandTimeOff>
 800bc10:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800bc14:	4643      	mov	r3, r8
 800bc16:	462a      	mov	r2, r5
 800bc18:	4631      	mov	r1, r6
 800bc1a:	69e0      	ldr	r0, [r4, #28]
 800bc1c:	f7ff ff61 	bl	800bae2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800bc20:	782b      	ldrb	r3, [r5, #0]
 800bc22:	b923      	cbnz	r3, 800bc2e <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800bc24:	f898 3000 	ldrb.w	r3, [r8]
 800bc28:	b13b      	cbz	r3, 800bc3a <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800bc2a:	200b      	movs	r0, #11
 800bc2c:	e002      	b.n	800bc34 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800bc2e:	2000      	movs	r0, #0
 800bc30:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800bc34:	b005      	add	sp, #20
 800bc36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800bc3a:	200c      	movs	r0, #12
 800bc3c:	e7fa      	b.n	800bc34 <RegionCommonIdentifyChannels+0x8a>

0800bc3e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800bc3e:	b570      	push	{r4, r5, r6, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800bc44:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800bc48:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800bc4c:	42a6      	cmp	r6, r4
 800bc4e:	d011      	beq.n	800bc74 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800bc50:	3c01      	subs	r4, #1
 800bc52:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800bc54:	42a6      	cmp	r6, r4
 800bc56:	d00e      	beq.n	800bc76 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800bc58:	68ab      	ldr	r3, [r5, #8]
 800bc5a:	9301      	str	r3, [sp, #4]
 800bc5c:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800bc60:	9300      	str	r3, [sp, #0]
 800bc62:	4633      	mov	r3, r6
 800bc64:	4622      	mov	r2, r4
 800bc66:	6869      	ldr	r1, [r5, #4]
 800bc68:	78e8      	ldrb	r0, [r5, #3]
 800bc6a:	f7ff fd54 	bl	800b716 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d0ee      	beq.n	800bc50 <RegionCommonGetNextLowerTxDr+0x12>
 800bc72:	e000      	b.n	800bc76 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800bc74:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800bc76:	4620      	mov	r0, r4
 800bc78:	b002      	add	sp, #8
 800bc7a:	bd70      	pop	{r4, r5, r6, pc}

0800bc7c <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800bc7c:	4288      	cmp	r0, r1
 800bc7e:	bfb8      	it	lt
 800bc80:	4608      	movlt	r0, r1
 800bc82:	4770      	bx	lr

0800bc84 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800bc84:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800bc88:	4a05      	ldr	r2, [pc, #20]	@ (800bca0 <RegionCommonGetBandwidth+0x1c>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d004      	beq.n	800bc98 <RegionCommonGetBandwidth+0x14>
 800bc8e:	4a05      	ldr	r2, [pc, #20]	@ (800bca4 <RegionCommonGetBandwidth+0x20>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d103      	bne.n	800bc9c <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800bc94:	2002      	movs	r0, #2
 800bc96:	4770      	bx	lr
            return 1;
 800bc98:	2001      	movs	r0, #1
 800bc9a:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800bc9c:	2000      	movs	r0, #0
    }
}
 800bc9e:	4770      	bx	lr
 800bca0:	0003d090 	.word	0x0003d090
 800bca4:	0007a120 	.word	0x0007a120

0800bca8 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800bca8:	b570      	push	{r4, r5, r6, lr}
 800bcaa:	b08a      	sub	sp, #40	@ 0x28
 800bcac:	4686      	mov	lr, r0
 800bcae:	460d      	mov	r5, r1
 800bcb0:	4616      	mov	r6, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800bcb2:	f10d 0c10 	add.w	ip, sp, #16
 800bcb6:	4c12      	ldr	r4, [pc, #72]	@ (800bd00 <RegionCommonRxConfigPrint+0x58>)
 800bcb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bcba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bcbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bcc2:	e88c 0003 	stmia.w	ip, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 800bcc6:	f1be 0f05 	cmp.w	lr, #5
 800bcca:	d80f      	bhi.n	800bcec <RegionCommonRxConfigPrint+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800bccc:	9602      	str	r6, [sp, #8]
 800bcce:	9501      	str	r5, [sp, #4]
 800bcd0:	ab0a      	add	r3, sp, #40	@ 0x28
 800bcd2:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800bcd6:	f85e 3c18 	ldr.w	r3, [lr, #-24]
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	4b09      	ldr	r3, [pc, #36]	@ (800bd04 <RegionCommonRxConfigPrint+0x5c>)
 800bcde:	2201      	movs	r2, #1
 800bce0:	2100      	movs	r1, #0
 800bce2:	2002      	movs	r0, #2
 800bce4:	f004 fd6a 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800bce8:	b00a      	add	sp, #40	@ 0x28
 800bcea:	bd70      	pop	{r4, r5, r6, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800bcec:	9601      	str	r6, [sp, #4]
 800bcee:	9500      	str	r5, [sp, #0]
 800bcf0:	4b05      	ldr	r3, [pc, #20]	@ (800bd08 <RegionCommonRxConfigPrint+0x60>)
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	2002      	movs	r0, #2
 800bcf8:	f004 fd60 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 800bcfc:	e7f4      	b.n	800bce8 <RegionCommonRxConfigPrint+0x40>
 800bcfe:	bf00      	nop
 800bd00:	08013d34 	.word	0x08013d34
 800bd04:	080142f0 	.word	0x080142f0
 800bd08:	08014310 	.word	0x08014310

0800bd0c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800bd0c:	b500      	push	{lr}
 800bd0e:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800bd10:	9101      	str	r1, [sp, #4]
 800bd12:	9000      	str	r0, [sp, #0]
 800bd14:	4b04      	ldr	r3, [pc, #16]	@ (800bd28 <RegionCommonTxConfigPrint+0x1c>)
 800bd16:	2201      	movs	r2, #1
 800bd18:	2100      	movs	r1, #0
 800bd1a:	2002      	movs	r0, #2
 800bd1c:	f004 fd4e 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 800bd20:	b003      	add	sp, #12
 800bd22:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd26:	bf00      	nop
 800bd28:	0801432c 	.word	0x0801432c

0800bd2c <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4604      	mov	r4, r0
 800bd30:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800bd32:	4b1b      	ldr	r3, [pc, #108]	@ (800bda0 <VerifyRfFreq+0x74>)
 800bd34:	6a1b      	ldr	r3, [r3, #32]
 800bd36:	4798      	blx	r3
 800bd38:	b130      	cbz	r0, 800bd48 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800bd3a:	4b1a      	ldr	r3, [pc, #104]	@ (800bda4 <VerifyRfFreq+0x78>)
 800bd3c:	4423      	add	r3, r4
 800bd3e:	4a1a      	ldr	r2, [pc, #104]	@ (800bda8 <VerifyRfFreq+0x7c>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d802      	bhi.n	800bd4a <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800bd44:	2302      	movs	r3, #2
 800bd46:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800bd48:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800bd4a:	4b18      	ldr	r3, [pc, #96]	@ (800bdac <VerifyRfFreq+0x80>)
 800bd4c:	4423      	add	r3, r4
 800bd4e:	4a18      	ldr	r2, [pc, #96]	@ (800bdb0 <VerifyRfFreq+0x84>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d802      	bhi.n	800bd5a <VerifyRfFreq+0x2e>
        *band = 0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	702b      	strb	r3, [r5, #0]
 800bd58:	e7f6      	b.n	800bd48 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800bd5a:	4b16      	ldr	r3, [pc, #88]	@ (800bdb4 <VerifyRfFreq+0x88>)
 800bd5c:	4423      	add	r3, r4
 800bd5e:	4a16      	ldr	r2, [pc, #88]	@ (800bdb8 <VerifyRfFreq+0x8c>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d802      	bhi.n	800bd6a <VerifyRfFreq+0x3e>
        *band = 1;
 800bd64:	2301      	movs	r3, #1
 800bd66:	702b      	strb	r3, [r5, #0]
 800bd68:	e7ee      	b.n	800bd48 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800bd6a:	4b14      	ldr	r3, [pc, #80]	@ (800bdbc <VerifyRfFreq+0x90>)
 800bd6c:	4423      	add	r3, r4
 800bd6e:	4a14      	ldr	r2, [pc, #80]	@ (800bdc0 <VerifyRfFreq+0x94>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d802      	bhi.n	800bd7a <VerifyRfFreq+0x4e>
        *band = 5;
 800bd74:	2305      	movs	r3, #5
 800bd76:	702b      	strb	r3, [r5, #0]
 800bd78:	e7e6      	b.n	800bd48 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800bd7a:	4b12      	ldr	r3, [pc, #72]	@ (800bdc4 <VerifyRfFreq+0x98>)
 800bd7c:	4423      	add	r3, r4
 800bd7e:	4a12      	ldr	r2, [pc, #72]	@ (800bdc8 <VerifyRfFreq+0x9c>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d802      	bhi.n	800bd8a <VerifyRfFreq+0x5e>
        *band = 3;
 800bd84:	2303      	movs	r3, #3
 800bd86:	702b      	strb	r3, [r5, #0]
 800bd88:	e7de      	b.n	800bd48 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800bd8a:	4b10      	ldr	r3, [pc, #64]	@ (800bdcc <VerifyRfFreq+0xa0>)
 800bd8c:	4423      	add	r3, r4
 800bd8e:	4a10      	ldr	r2, [pc, #64]	@ (800bdd0 <VerifyRfFreq+0xa4>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d802      	bhi.n	800bd9a <VerifyRfFreq+0x6e>
        *band = 4;
 800bd94:	2304      	movs	r3, #4
 800bd96:	702b      	strb	r3, [r5, #0]
 800bd98:	e7d6      	b.n	800bd48 <VerifyRfFreq+0x1c>
        return false;
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	e7d4      	b.n	800bd48 <VerifyRfFreq+0x1c>
 800bd9e:	bf00      	nop
 800bda0:	08014918 	.word	0x08014918
 800bda4:	cc8faa40 	.word	0xcc8faa40
 800bda8:	001e847f 	.word	0x001e847f
 800bdac:	cc7125c0 	.word	0xcc7125c0
 800bdb0:	002dc6c0 	.word	0x002dc6c0
 800bdb4:	cc435eff 	.word	0xcc435eff
 800bdb8:	000927bf 	.word	0x000927bf
 800bdbc:	cc38b0a0 	.word	0xcc38b0a0
 800bdc0:	0007a120 	.word	0x0007a120
 800bdc4:	cc2e0240 	.word	0xcc2e0240
 800bdc8:	0003d090 	.word	0x0003d090
 800bdcc:	cc296e60 	.word	0xcc296e60
 800bdd0:	000493e0 	.word	0x000493e0

0800bdd4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	4605      	mov	r5, r0
 800bdda:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800bddc:	4b13      	ldr	r3, [pc, #76]	@ (800be2c <GetTimeOnAir+0x58>)
 800bdde:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800bde0:	4913      	ldr	r1, [pc, #76]	@ (800be30 <GetTimeOnAir+0x5c>)
 800bde2:	f7ff ff4f 	bl	800bc84 <RegionCommonGetBandwidth>
 800bde6:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800bde8:	2d07      	cmp	r5, #7
 800bdea:	d00e      	beq.n	800be0a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800bdec:	4b11      	ldr	r3, [pc, #68]	@ (800be34 <GetTimeOnAir+0x60>)
 800bdee:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800bdf0:	2001      	movs	r0, #1
 800bdf2:	9003      	str	r0, [sp, #12]
 800bdf4:	b2e4      	uxtb	r4, r4
 800bdf6:	9402      	str	r4, [sp, #8]
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	9301      	str	r3, [sp, #4]
 800bdfc:	2308      	movs	r3, #8
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	4603      	mov	r3, r0
 800be02:	4632      	mov	r2, r6
 800be04:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800be06:	b004      	add	sp, #16
 800be08:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800be0a:	4b0a      	ldr	r3, [pc, #40]	@ (800be34 <GetTimeOnAir+0x60>)
 800be0c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800be0e:	2301      	movs	r3, #1
 800be10:	9303      	str	r3, [sp, #12]
 800be12:	b2e4      	uxtb	r4, r4
 800be14:	9402      	str	r4, [sp, #8]
 800be16:	2000      	movs	r0, #0
 800be18:	9001      	str	r0, [sp, #4]
 800be1a:	2305      	movs	r3, #5
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	4603      	mov	r3, r0
 800be20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800be24:	fb06 f202 	mul.w	r2, r6, r2
 800be28:	47a8      	blx	r5
 800be2a:	e7ec      	b.n	800be06 <GetTimeOnAir+0x32>
 800be2c:	0801438c 	.word	0x0801438c
 800be30:	0801436c 	.word	0x0801436c
 800be34:	08014918 	.word	0x08014918

0800be38 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800be38:	b500      	push	{lr}
 800be3a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800be3c:	2300      	movs	r3, #0
 800be3e:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800be40:	7803      	ldrb	r3, [r0, #0]
 800be42:	3b0b      	subs	r3, #11
 800be44:	2b2e      	cmp	r3, #46	@ 0x2e
 800be46:	d830      	bhi.n	800beaa <RegionEU868GetPhyParam+0x72>
 800be48:	e8df f003 	tbb	[pc, r3]
 800be4c:	403a3734 	.word	0x403a3734
 800be50:	514d4946 	.word	0x514d4946
 800be54:	615d5955 	.word	0x615d5955
 800be58:	6d2f6a2f 	.word	0x6d2f6a2f
 800be5c:	2f7c7973 	.word	0x2f7c7973
 800be60:	1884802f 	.word	0x1884802f
 800be64:	2f2f2f2f 	.word	0x2f2f2f2f
 800be68:	2f2f2f2f 	.word	0x2f2f2f2f
 800be6c:	2f2f2f2f 	.word	0x2f2f2f2f
 800be70:	918a872f 	.word	0x918a872f
 800be74:	97942f2f 	.word	0x97942f2f
 800be78:	9a2f      	.short	0x9a2f
 800be7a:	a0          	.byte	0xa0
 800be7b:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800be7c:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800be80:	f88d 3004 	strb.w	r3, [sp, #4]
 800be84:	2307      	movs	r3, #7
 800be86:	f88d 3005 	strb.w	r3, [sp, #5]
 800be8a:	2300      	movs	r3, #0
 800be8c:	f88d 3006 	strb.w	r3, [sp, #6]
 800be90:	2310      	movs	r3, #16
 800be92:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800be96:	4b41      	ldr	r3, [pc, #260]	@ (800bf9c <RegionEU868GetPhyParam+0x164>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f503 7258 	add.w	r2, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800be9e:	9202      	str	r2, [sp, #8]
 800bea0:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800bea2:	a801      	add	r0, sp, #4
 800bea4:	f7ff fecb 	bl	800bc3e <RegionCommonGetNextLowerTxDr>
 800bea8:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800beaa:	9804      	ldr	r0, [sp, #16]
 800beac:	9005      	str	r0, [sp, #20]
}
 800beae:	b007      	add	sp, #28
 800beb0:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800beb4:	2340      	movs	r3, #64	@ 0x40
 800beb6:	9304      	str	r3, [sp, #16]
            break;
 800beb8:	e7f7      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800beba:	2320      	movs	r3, #32
 800bebc:	9304      	str	r3, [sp, #16]
            break;
 800bebe:	e7f4      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800bec0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bec4:	4a36      	ldr	r2, [pc, #216]	@ (800bfa0 <RegionEU868GetPhyParam+0x168>)
 800bec6:	5cd3      	ldrb	r3, [r2, r3]
 800bec8:	9304      	str	r3, [sp, #16]
            break;
 800beca:	e7ee      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800becc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bed0:	4a34      	ldr	r2, [pc, #208]	@ (800bfa4 <RegionEU868GetPhyParam+0x16c>)
 800bed2:	5cd3      	ldrb	r3, [r2, r3]
 800bed4:	9304      	str	r3, [sp, #16]
            break;
 800bed6:	e7e8      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800bed8:	2301      	movs	r3, #1
 800beda:	9304      	str	r3, [sp, #16]
            break;
 800bedc:	e7e5      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800bede:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800bee2:	9304      	str	r3, [sp, #16]
            break;
 800bee4:	e7e1      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800bee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800beea:	9304      	str	r3, [sp, #16]
            break;
 800beec:	e7dd      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800beee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800bef2:	9304      	str	r3, [sp, #16]
            break;
 800bef4:	e7d9      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800bef6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800befa:	9304      	str	r3, [sp, #16]
            break;
 800befc:	e7d5      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800befe:	f241 7370 	movw	r3, #6000	@ 0x1770
 800bf02:	9304      	str	r3, [sp, #16]
            break;
 800bf04:	e7d1      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800bf06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bf0a:	9304      	str	r3, [sp, #16]
            break;
 800bf0c:	e7cd      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800bf0e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800bf12:	4825      	ldr	r0, [pc, #148]	@ (800bfa8 <RegionEU868GetPhyParam+0x170>)
 800bf14:	f002 faac 	bl	800e470 <randr>
 800bf18:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800bf1c:	9004      	str	r0, [sp, #16]
            break;
 800bf1e:	e7c4      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800bf20:	4b22      	ldr	r3, [pc, #136]	@ (800bfac <RegionEU868GetPhyParam+0x174>)
 800bf22:	9304      	str	r3, [sp, #16]
            break;
 800bf24:	e7c1      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bf26:	4b1d      	ldr	r3, [pc, #116]	@ (800bf9c <RegionEU868GetPhyParam+0x164>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800bf2e:	9304      	str	r3, [sp, #16]
            break;
 800bf30:	e7bb      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800bf32:	4b1a      	ldr	r3, [pc, #104]	@ (800bf9c <RegionEU868GetPhyParam+0x164>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 800bf3a:	9304      	str	r3, [sp, #16]
            break;
 800bf3c:	e7b5      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800bf3e:	2310      	movs	r3, #16
 800bf40:	9304      	str	r3, [sp, #16]
            break;
 800bf42:	e7b2      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800bf44:	4b15      	ldr	r3, [pc, #84]	@ (800bf9c <RegionEU868GetPhyParam+0x164>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	9304      	str	r3, [sp, #16]
            break;
 800bf4a:	e7ae      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800bf4c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800bf50:	9304      	str	r3, [sp, #16]
            break;
 800bf52:	e7aa      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800bf54:	4b16      	ldr	r3, [pc, #88]	@ (800bfb0 <RegionEU868GetPhyParam+0x178>)
 800bf56:	9304      	str	r3, [sp, #16]
            break;
 800bf58:	e7a7      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800bf5a:	4b14      	ldr	r3, [pc, #80]	@ (800bfac <RegionEU868GetPhyParam+0x174>)
 800bf5c:	9304      	str	r3, [sp, #16]
            break;
 800bf5e:	e7a4      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800bf60:	2311      	movs	r3, #17
 800bf62:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800bf66:	2302      	movs	r3, #2
 800bf68:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800bf6c:	e79d      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	9304      	str	r3, [sp, #16]
            break;
 800bf72:	e79a      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800bf74:	4b0d      	ldr	r3, [pc, #52]	@ (800bfac <RegionEU868GetPhyParam+0x174>)
 800bf76:	9304      	str	r3, [sp, #16]
            break;
 800bf78:	e797      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	9304      	str	r3, [sp, #16]
            break;
 800bf7e:	e794      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800bf80:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bf84:	4a0b      	ldr	r2, [pc, #44]	@ (800bfb4 <RegionEU868GetPhyParam+0x17c>)
 800bf86:	5cd3      	ldrb	r3, [r2, r3]
 800bf88:	9304      	str	r3, [sp, #16]
            break;
 800bf8a:	e78e      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800bf8c:	490a      	ldr	r1, [pc, #40]	@ (800bfb8 <RegionEU868GetPhyParam+0x180>)
 800bf8e:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800bf92:	f7ff fe77 	bl	800bc84 <RegionCommonGetBandwidth>
 800bf96:	9004      	str	r0, [sp, #16]
            break;
 800bf98:	e787      	b.n	800beaa <RegionEU868GetPhyParam+0x72>
 800bf9a:	bf00      	nop
 800bf9c:	200013bc 	.word	0x200013bc
 800bfa0:	08014364 	.word	0x08014364
 800bfa4:	0801435c 	.word	0x0801435c
 800bfa8:	fffffc18 	.word	0xfffffc18
 800bfac:	33d3e608 	.word	0x33d3e608
 800bfb0:	4009999a 	.word	0x4009999a
 800bfb4:	0801438c 	.word	0x0801438c
 800bfb8:	0801436c 	.word	0x0801436c

0800bfbc <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800bfbc:	b510      	push	{r4, lr}
 800bfbe:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800bfc0:	4b0b      	ldr	r3, [pc, #44]	@ (800bff0 <RegionEU868SetBandTxDone+0x34>)
 800bfc2:	681c      	ldr	r4, [r3, #0]
 800bfc4:	4b0b      	ldr	r3, [pc, #44]	@ (800bff4 <RegionEU868SetBandTxDone+0x38>)
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	7803      	ldrb	r3, [r0, #0]
 800bfca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bfce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfd2:	7a5b      	ldrb	r3, [r3, #9]
 800bfd4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800bfd8:	6903      	ldr	r3, [r0, #16]
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	68c3      	ldr	r3, [r0, #12]
 800bfde:	7842      	ldrb	r2, [r0, #1]
 800bfe0:	6881      	ldr	r1, [r0, #8]
 800bfe2:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800bfe6:	f7ff fc0f 	bl	800b808 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 800bfea:	b002      	add	sp, #8
 800bfec:	bd10      	pop	{r4, pc}
 800bfee:	bf00      	nop
 800bff0:	200013c0 	.word	0x200013c0
 800bff4:	200013bc 	.word	0x200013bc

0800bff8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800bff8:	b510      	push	{r4, lr}
 800bffa:	b0a4      	sub	sp, #144	@ 0x90
 800bffc:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800bffe:	2290      	movs	r2, #144	@ 0x90
 800c000:	2100      	movs	r1, #0
 800c002:	4668      	mov	r0, sp
 800c004:	f005 fedd 	bl	8011dc2 <memset>
 800c008:	2364      	movs	r3, #100	@ 0x64
 800c00a:	f8ad 3000 	strh.w	r3, [sp]
 800c00e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c012:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c016:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800c01a:	210a      	movs	r1, #10
 800c01c:	f8ad 1048 	strh.w	r1, [sp, #72]	@ 0x48
 800c020:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 800c024:	f8ad 2078 	strh.w	r2, [sp, #120]	@ 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800c028:	7a23      	ldrb	r3, [r4, #8]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d031      	beq.n	800c092 <RegionEU868InitDefaults+0x9a>
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d03d      	beq.n	800c0ae <RegionEU868InitDefaults+0xb6>
 800c032:	b10b      	cbz	r3, 800c038 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800c034:	b024      	add	sp, #144	@ 0x90
 800c036:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800c038:	6820      	ldr	r0, [r4, #0]
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d0fa      	beq.n	800c034 <RegionEU868InitDefaults+0x3c>
 800c03e:	6863      	ldr	r3, [r4, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d0f7      	beq.n	800c034 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800c044:	4a1f      	ldr	r2, [pc, #124]	@ (800c0c4 <RegionEU868InitDefaults+0xcc>)
 800c046:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800c048:	4c1f      	ldr	r4, [pc, #124]	@ (800c0c8 <RegionEU868InitDefaults+0xd0>)
 800c04a:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800c04c:	2290      	movs	r2, #144	@ 0x90
 800c04e:	4669      	mov	r1, sp
 800c050:	f002 fa1b 	bl	800e48a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800c054:	6824      	ldr	r4, [r4, #0]
 800c056:	4b1d      	ldr	r3, [pc, #116]	@ (800c0cc <RegionEU868InitDefaults+0xd4>)
 800c058:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c05c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800c060:	f104 0c0c 	add.w	ip, r4, #12
 800c064:	f103 020c 	add.w	r2, r3, #12
 800c068:	ca07      	ldmia	r2, {r0, r1, r2}
 800c06a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800c06e:	f104 0c18 	add.w	ip, r4, #24
 800c072:	3318      	adds	r3, #24
 800c074:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c078:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800c07c:	2307      	movs	r3, #7
 800c07e:	f8a4 336c 	strh.w	r3, [r4, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c082:	2201      	movs	r2, #1
 800c084:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
 800c088:	f504 7058 	add.w	r0, r4, #864	@ 0x360
 800c08c:	f7ff fbad 	bl	800b7ea <RegionCommonChanMaskCopy>
            break;
 800c090:	e7d0      	b.n	800c034 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800c092:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c8 <RegionEU868InitDefaults+0xd0>)
 800c094:	6818      	ldr	r0, [r3, #0]
 800c096:	2300      	movs	r3, #0
 800c098:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800c09a:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800c09c:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800c0a4:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800c0a8:	f7ff fb9f 	bl	800b7ea <RegionCommonChanMaskCopy>
            break;
 800c0ac:	e7c2      	b.n	800c034 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800c0ae:	4b06      	ldr	r3, [pc, #24]	@ (800c0c8 <RegionEU868InitDefaults+0xd0>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800c0b6:	f8b3 136c 	ldrh.w	r1, [r3, #876]	@ 0x36c
 800c0ba:	430a      	orrs	r2, r1
 800c0bc:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 800c0c0:	e7b8      	b.n	800c034 <RegionEU868InitDefaults+0x3c>
 800c0c2:	bf00      	nop
 800c0c4:	200013c0 	.word	0x200013c0
 800c0c8:	200013bc 	.word	0x200013bc
 800c0cc:	08013d4c 	.word	0x08013d4c

0800c0d0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c0d0:	b500      	push	{lr}
 800c0d2:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800c0d4:	290f      	cmp	r1, #15
 800c0d6:	d83c      	bhi.n	800c152 <RegionEU868Verify+0x82>
 800c0d8:	e8df f001 	tbb	[pc, r1]
 800c0dc:	3b3b3b0a 	.word	0x3b3b3b0a
 800c0e0:	271d133b 	.word	0x271d133b
 800c0e4:	3b31313b 	.word	0x3b31313b
 800c0e8:	083b3b3b 	.word	0x083b3b3b
 800c0ec:	2001      	movs	r0, #1
 800c0ee:	e031      	b.n	800c154 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800c0f6:	f10d 0107 	add.w	r1, sp, #7
 800c0fa:	6800      	ldr	r0, [r0, #0]
 800c0fc:	f7ff fe16 	bl	800bd2c <VerifyRfFreq>
 800c100:	e028      	b.n	800c154 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800c102:	2207      	movs	r2, #7
 800c104:	2100      	movs	r1, #0
 800c106:	f990 0000 	ldrsb.w	r0, [r0]
 800c10a:	f7ff fafa 	bl	800b702 <RegionCommonValueInRange>
 800c10e:	3800      	subs	r0, #0
 800c110:	bf18      	it	ne
 800c112:	2001      	movne	r0, #1
 800c114:	e01e      	b.n	800c154 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800c116:	2205      	movs	r2, #5
 800c118:	2100      	movs	r1, #0
 800c11a:	f990 0000 	ldrsb.w	r0, [r0]
 800c11e:	f7ff faf0 	bl	800b702 <RegionCommonValueInRange>
 800c122:	3800      	subs	r0, #0
 800c124:	bf18      	it	ne
 800c126:	2001      	movne	r0, #1
 800c128:	e014      	b.n	800c154 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800c12a:	2207      	movs	r2, #7
 800c12c:	2100      	movs	r1, #0
 800c12e:	f990 0000 	ldrsb.w	r0, [r0]
 800c132:	f7ff fae6 	bl	800b702 <RegionCommonValueInRange>
 800c136:	3800      	subs	r0, #0
 800c138:	bf18      	it	ne
 800c13a:	2001      	movne	r0, #1
 800c13c:	e00a      	b.n	800c154 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800c13e:	2207      	movs	r2, #7
 800c140:	2100      	movs	r1, #0
 800c142:	f990 0000 	ldrsb.w	r0, [r0]
 800c146:	f7ff fadc 	bl	800b702 <RegionCommonValueInRange>
 800c14a:	3800      	subs	r0, #0
 800c14c:	bf18      	it	ne
 800c14e:	2001      	movne	r0, #1
 800c150:	e000      	b.n	800c154 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800c152:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800c154:	b003      	add	sp, #12
 800c156:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c15c <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800c15c:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800c15e:	7903      	ldrb	r3, [r0, #4]
 800c160:	b11b      	cbz	r3, 800c16a <RegionEU868ChanMaskSet+0xe>
 800c162:	2b01      	cmp	r3, #1
 800c164:	d00b      	beq.n	800c17e <RegionEU868ChanMaskSet+0x22>
 800c166:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800c168:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800c16a:	4b0a      	ldr	r3, [pc, #40]	@ (800c194 <RegionEU868ChanMaskSet+0x38>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2201      	movs	r2, #1
 800c170:	6801      	ldr	r1, [r0, #0]
 800c172:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 800c176:	f7ff fb38 	bl	800b7ea <RegionCommonChanMaskCopy>
    return true;
 800c17a:	2001      	movs	r0, #1
            break;
 800c17c:	e7f4      	b.n	800c168 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800c17e:	4b05      	ldr	r3, [pc, #20]	@ (800c194 <RegionEU868ChanMaskSet+0x38>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2201      	movs	r2, #1
 800c184:	6801      	ldr	r1, [r0, #0]
 800c186:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800c18a:	f7ff fb2e 	bl	800b7ea <RegionCommonChanMaskCopy>
    return true;
 800c18e:	2001      	movs	r0, #1
            break;
 800c190:	e7ea      	b.n	800c168 <RegionEU868ChanMaskSet+0xc>
 800c192:	bf00      	nop
 800c194:	200013bc 	.word	0x200013bc

0800c198 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c19a:	b083      	sub	sp, #12
 800c19c:	460e      	mov	r6, r1
 800c19e:	4617      	mov	r7, r2
 800c1a0:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800c1a2:	2807      	cmp	r0, #7
 800c1a4:	bfa8      	it	ge
 800c1a6:	2007      	movge	r0, #7
 800c1a8:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800c1aa:	4913      	ldr	r1, [pc, #76]	@ (800c1f8 <RegionEU868ComputeRxWindowParameters+0x60>)
 800c1ac:	f7ff fd6a 	bl	800bc84 <RegionCommonGetBandwidth>
 800c1b0:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800c1b2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c1b6:	2b07      	cmp	r3, #7
 800c1b8:	d017      	beq.n	800c1ea <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800c1ba:	4a0f      	ldr	r2, [pc, #60]	@ (800c1f8 <RegionEU868ComputeRxWindowParameters+0x60>)
 800c1bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c1c0:	4a0e      	ldr	r2, [pc, #56]	@ (800c1fc <RegionEU868ComputeRxWindowParameters+0x64>)
 800c1c2:	5cd0      	ldrb	r0, [r2, r3]
 800c1c4:	f7ff fc2e 	bl	800ba24 <RegionCommonComputeSymbolTimeLoRa>
 800c1c8:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c200 <RegionEU868ComputeRxWindowParameters+0x68>)
 800c1cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1ce:	4798      	blx	r3
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	f104 020c 	add.w	r2, r4, #12
 800c1d6:	9201      	str	r2, [sp, #4]
 800c1d8:	3408      	adds	r4, #8
 800c1da:	9400      	str	r4, [sp, #0]
 800c1dc:	463a      	mov	r2, r7
 800c1de:	4631      	mov	r1, r6
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f7ff fc2d 	bl	800ba40 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800c1e6:	b003      	add	sp, #12
 800c1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800c1ea:	4a04      	ldr	r2, [pc, #16]	@ (800c1fc <RegionEU868ComputeRxWindowParameters+0x64>)
 800c1ec:	5cd0      	ldrb	r0, [r2, r3]
 800c1ee:	f7ff fc21 	bl	800ba34 <RegionCommonComputeSymbolTimeFsk>
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	e7e9      	b.n	800c1ca <RegionEU868ComputeRxWindowParameters+0x32>
 800c1f6:	bf00      	nop
 800c1f8:	0801436c 	.word	0x0801436c
 800c1fc:	0801438c 	.word	0x0801438c
 800c200:	08014918 	.word	0x08014918

0800c204 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c208:	b08a      	sub	sp, #40	@ 0x28
 800c20a:	4604      	mov	r4, r0
 800c20c:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800c20e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800c212:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800c216:	4b37      	ldr	r3, [pc, #220]	@ (800c2f4 <RegionEU868RxConfig+0xf0>)
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	4798      	blx	r3
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d167      	bne.n	800c2f0 <RegionEU868RxConfig+0xec>
 800c220:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800c222:	7ce3      	ldrb	r3, [r4, #19]
 800c224:	b983      	cbnz	r3, 800c248 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c226:	4b34      	ldr	r3, [pc, #208]	@ (800c2f8 <RegionEU868RxConfig+0xf4>)
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	7823      	ldrb	r3, [r4, #0]
 800c22c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c230:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800c234:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c238:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c23c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800c240:	f1b8 0f00 	cmp.w	r8, #0
 800c244:	d100      	bne.n	800c248 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c246:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800c248:	4b2c      	ldr	r3, [pc, #176]	@ (800c2fc <RegionEU868RxConfig+0xf8>)
 800c24a:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800c24e:	4b29      	ldr	r3, [pc, #164]	@ (800c2f4 <RegionEU868RxConfig+0xf0>)
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	4640      	mov	r0, r8
 800c254:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800c256:	2d07      	cmp	r5, #7
 800c258:	d02b      	beq.n	800c2b2 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800c25a:	4b26      	ldr	r3, [pc, #152]	@ (800c2f4 <RegionEU868RxConfig+0xf0>)
 800c25c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c260:	7ca3      	ldrb	r3, [r4, #18]
 800c262:	9309      	str	r3, [sp, #36]	@ 0x24
 800c264:	2601      	movs	r6, #1
 800c266:	9608      	str	r6, [sp, #32]
 800c268:	2300      	movs	r3, #0
 800c26a:	9307      	str	r3, [sp, #28]
 800c26c:	9306      	str	r3, [sp, #24]
 800c26e:	9305      	str	r3, [sp, #20]
 800c270:	9304      	str	r3, [sp, #16]
 800c272:	9303      	str	r3, [sp, #12]
 800c274:	8922      	ldrh	r2, [r4, #8]
 800c276:	9202      	str	r2, [sp, #8]
 800c278:	2208      	movs	r2, #8
 800c27a:	9201      	str	r2, [sp, #4]
 800c27c:	9300      	str	r3, [sp, #0]
 800c27e:	4633      	mov	r3, r6
 800c280:	464a      	mov	r2, r9
 800c282:	78a1      	ldrb	r1, [r4, #2]
 800c284:	4630      	mov	r0, r6
 800c286:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800c288:	7c63      	ldrb	r3, [r4, #17]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d02d      	beq.n	800c2ea <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800c28e:	4b1c      	ldr	r3, [pc, #112]	@ (800c300 <RegionEU868RxConfig+0xfc>)
 800c290:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800c292:	4b18      	ldr	r3, [pc, #96]	@ (800c2f4 <RegionEU868RxConfig+0xf0>)
 800c294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c296:	310d      	adds	r1, #13
 800c298:	b2c9      	uxtb	r1, r1
 800c29a:	4630      	mov	r0, r6
 800c29c:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800c29e:	462a      	mov	r2, r5
 800c2a0:	4641      	mov	r1, r8
 800c2a2:	7ce0      	ldrb	r0, [r4, #19]
 800c2a4:	f7ff fd00 	bl	800bca8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800c2a8:	703d      	strb	r5, [r7, #0]
    return true;
 800c2aa:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800c2ac:	b00a      	add	sp, #40	@ 0x28
 800c2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800c2b2:	4b10      	ldr	r3, [pc, #64]	@ (800c2f4 <RegionEU868RxConfig+0xf0>)
 800c2b4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c2b8:	7ca3      	ldrb	r3, [r4, #18]
 800c2ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2bc:	2000      	movs	r0, #0
 800c2be:	9008      	str	r0, [sp, #32]
 800c2c0:	9007      	str	r0, [sp, #28]
 800c2c2:	9006      	str	r0, [sp, #24]
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	9305      	str	r3, [sp, #20]
 800c2c8:	9004      	str	r0, [sp, #16]
 800c2ca:	9003      	str	r0, [sp, #12]
 800c2cc:	8923      	ldrh	r3, [r4, #8]
 800c2ce:	9302      	str	r3, [sp, #8]
 800c2d0:	2305      	movs	r3, #5
 800c2d2:	9301      	str	r3, [sp, #4]
 800c2d4:	4b0b      	ldr	r3, [pc, #44]	@ (800c304 <RegionEU868RxConfig+0x100>)
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	4603      	mov	r3, r0
 800c2da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c2de:	fb02 f209 	mul.w	r2, r2, r9
 800c2e2:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c2e6:	47d0      	blx	sl
 800c2e8:	e7ce      	b.n	800c288 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800c2ea:	4b07      	ldr	r3, [pc, #28]	@ (800c308 <RegionEU868RxConfig+0x104>)
 800c2ec:	5d59      	ldrb	r1, [r3, r5]
 800c2ee:	e7d0      	b.n	800c292 <RegionEU868RxConfig+0x8e>
        return false;
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	e7db      	b.n	800c2ac <RegionEU868RxConfig+0xa8>
 800c2f4:	08014918 	.word	0x08014918
 800c2f8:	200013bc 	.word	0x200013bc
 800c2fc:	0801438c 	.word	0x0801438c
 800c300:	0801435c 	.word	0x0801435c
 800c304:	00014585 	.word	0x00014585
 800c308:	08014364 	.word	0x08014364

0800c30c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	b08d      	sub	sp, #52	@ 0x34
 800c312:	4604      	mov	r4, r0
 800c314:	460f      	mov	r7, r1
 800c316:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800c318:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c31c:	4a42      	ldr	r2, [pc, #264]	@ (800c428 <RegionEU868TxConfig+0x11c>)
 800c31e:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800c322:	4b42      	ldr	r3, [pc, #264]	@ (800c42c <RegionEU868TxConfig+0x120>)
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	4d42      	ldr	r5, [pc, #264]	@ (800c430 <RegionEU868TxConfig+0x124>)
 800c328:	6829      	ldr	r1, [r5, #0]
 800c32a:	7803      	ldrb	r3, [r0, #0]
 800c32c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c330:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800c334:	7a4b      	ldrb	r3, [r1, #9]
 800c336:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c33a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c33e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800c342:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c346:	f7ff fc99 	bl	800bc7c <RegionCommonLimitTxPower>
 800c34a:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800c34c:	4939      	ldr	r1, [pc, #228]	@ (800c434 <RegionEU868TxConfig+0x128>)
 800c34e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c352:	f7ff fc97 	bl	800bc84 <RegionCommonGetBandwidth>
 800c356:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c358:	68a2      	ldr	r2, [r4, #8]
 800c35a:	6861      	ldr	r1, [r4, #4]
 800c35c:	4630      	mov	r0, r6
 800c35e:	f7ff fbab 	bl	800bab8 <RegionCommonComputeTxPower>
 800c362:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800c364:	4b34      	ldr	r3, [pc, #208]	@ (800c438 <RegionEU868TxConfig+0x12c>)
 800c366:	68da      	ldr	r2, [r3, #12]
 800c368:	6829      	ldr	r1, [r5, #0]
 800c36a:	7823      	ldrb	r3, [r4, #0]
 800c36c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c370:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800c374:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800c376:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c37a:	2b07      	cmp	r3, #7
 800c37c:	d031      	beq.n	800c3e2 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800c37e:	4b2e      	ldr	r3, [pc, #184]	@ (800c438 <RegionEU868TxConfig+0x12c>)
 800c380:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800c384:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800c388:	9308      	str	r3, [sp, #32]
 800c38a:	2200      	movs	r2, #0
 800c38c:	9207      	str	r2, [sp, #28]
 800c38e:	9206      	str	r2, [sp, #24]
 800c390:	9205      	str	r2, [sp, #20]
 800c392:	2501      	movs	r5, #1
 800c394:	9504      	str	r5, [sp, #16]
 800c396:	9203      	str	r2, [sp, #12]
 800c398:	2308      	movs	r3, #8
 800c39a:	9302      	str	r3, [sp, #8]
 800c39c:	9501      	str	r5, [sp, #4]
 800c39e:	f8cd a000 	str.w	sl, [sp]
 800c3a2:	464b      	mov	r3, r9
 800c3a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800c3aa:	4b21      	ldr	r3, [pc, #132]	@ (800c430 <RegionEU868TxConfig+0x124>)
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	7823      	ldrb	r3, [r4, #0]
 800c3b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c3b4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800c3b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c3bc:	f7ff fca6 	bl	800bd0c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800c3c0:	89a1      	ldrh	r1, [r4, #12]
 800c3c2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c3c6:	f7ff fd05 	bl	800bdd4 <GetTimeOnAir>
 800c3ca:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800c3ce:	4b1a      	ldr	r3, [pc, #104]	@ (800c438 <RegionEU868TxConfig+0x12c>)
 800c3d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3d2:	7b21      	ldrb	r1, [r4, #12]
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	4798      	blx	r3

    *txPower = txPowerLimited;
 800c3d8:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800c3da:	2001      	movs	r0, #1
 800c3dc:	b00d      	add	sp, #52	@ 0x34
 800c3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800c3e2:	4b15      	ldr	r3, [pc, #84]	@ (800c438 <RegionEU868TxConfig+0x12c>)
 800c3e4:	69dd      	ldr	r5, [r3, #28]
 800c3e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c3ea:	fb03 f30a 	mul.w	r3, r3, sl
 800c3ee:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800c3f2:	9208      	str	r2, [sp, #32]
 800c3f4:	f04f 0a00 	mov.w	sl, #0
 800c3f8:	f8cd a01c 	str.w	sl, [sp, #28]
 800c3fc:	f8cd a018 	str.w	sl, [sp, #24]
 800c400:	f8cd a014 	str.w	sl, [sp, #20]
 800c404:	2201      	movs	r2, #1
 800c406:	9204      	str	r2, [sp, #16]
 800c408:	f8cd a00c 	str.w	sl, [sp, #12]
 800c40c:	2205      	movs	r2, #5
 800c40e:	9202      	str	r2, [sp, #8]
 800c410:	f8cd a004 	str.w	sl, [sp, #4]
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	464b      	mov	r3, r9
 800c418:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800c41c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c41e:	4650      	mov	r0, sl
 800c420:	47a8      	blx	r5
        modem = MODEM_FSK;
 800c422:	4655      	mov	r5, sl
 800c424:	e7c1      	b.n	800c3aa <RegionEU868TxConfig+0x9e>
 800c426:	bf00      	nop
 800c428:	0801438c 	.word	0x0801438c
 800c42c:	200013c0 	.word	0x200013c0
 800c430:	200013bc 	.word	0x200013bc
 800c434:	0801436c 	.word	0x0801436c
 800c438:	08014918 	.word	0x08014918

0800c43c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c43c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c440:	b08f      	sub	sp, #60	@ 0x3c
 800c442:	4605      	mov	r5, r0
 800c444:	4689      	mov	r9, r1
 800c446:	4690      	mov	r8, r2
 800c448:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800c44a:	2400      	movs	r4, #0
 800c44c:	940c      	str	r4, [sp, #48]	@ 0x30
 800c44e:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800c452:	f8ad 402e 	strh.w	r4, [sp, #46]	@ 0x2e
    uint8_t status = 0x07;
 800c456:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800c458:	e030      	b.n	800c4bc <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800c45a:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800c45e:	2607      	movs	r6, #7
 800c460:	e012      	b.n	800c488 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800c462:	4a58      	ldr	r2, [pc, #352]	@ (800c5c4 <RegionEU868LinkAdrReq+0x188>)
 800c464:	6812      	ldr	r2, [r2, #0]
 800c466:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800c46a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c46e:	b13a      	cbz	r2, 800c480 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800c470:	2201      	movs	r2, #1
 800c472:	fa02 f20c 	lsl.w	r2, r2, ip
 800c476:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800c47a:	430a      	orrs	r2, r1
 800c47c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800c480:	f10c 0c01 	add.w	ip, ip, #1
 800c484:	fa5f fc8c 	uxtb.w	ip, ip
 800c488:	f1bc 0f0f 	cmp.w	ip, #15
 800c48c:	d816      	bhi.n	800c4bc <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800c48e:	2b06      	cmp	r3, #6
 800c490:	d0e7      	beq.n	800c462 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800c492:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 800c496:	fa4e fe0c 	asr.w	lr, lr, ip
 800c49a:	f01e 0f01 	tst.w	lr, #1
 800c49e:	d0ef      	beq.n	800c480 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800c4a0:	4a48      	ldr	r2, [pc, #288]	@ (800c5c4 <RegionEU868LinkAdrReq+0x188>)
 800c4a2:	6812      	ldr	r2, [r2, #0]
 800c4a4:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800c4a8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800c4ac:	2a00      	cmp	r2, #0
 800c4ae:	d1e7      	bne.n	800c480 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800c4b0:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800c4b4:	e7e4      	b.n	800c480 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800c4b6:	2606      	movs	r6, #6
 800c4b8:	e000      	b.n	800c4bc <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800c4ba:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800c4bc:	7a2b      	ldrb	r3, [r5, #8]
 800c4be:	42a3      	cmp	r3, r4
 800c4c0:	d919      	bls.n	800c4f6 <RegionEU868LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800c4c2:	6868      	ldr	r0, [r5, #4]
 800c4c4:	a90c      	add	r1, sp, #48	@ 0x30
 800c4c6:	4420      	add	r0, r4
 800c4c8:	f7ff fa40 	bl	800b94c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	b190      	cbz	r0, 800c4f6 <RegionEU868LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800c4d0:	4423      	add	r3, r4
 800c4d2:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800c4d4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800c4d8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800c4dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800c4e0:	b90b      	cbnz	r3, 800c4e6 <RegionEU868LinkAdrReq+0xaa>
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	d0e7      	beq.n	800c4b6 <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800c4e6:	1e5a      	subs	r2, r3, #1
 800c4e8:	b2d2      	uxtb	r2, r2
 800c4ea:	2a04      	cmp	r2, #4
 800c4ec:	d9e5      	bls.n	800c4ba <RegionEU868LinkAdrReq+0x7e>
 800c4ee:	2b06      	cmp	r3, #6
 800c4f0:	d9b3      	bls.n	800c45a <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800c4f2:	2606      	movs	r6, #6
 800c4f4:	e7e2      	b.n	800c4bc <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800c4f6:	2302      	movs	r3, #2
 800c4f8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800c4fc:	7a6b      	ldrb	r3, [r5, #9]
 800c4fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800c502:	a80a      	add	r0, sp, #40	@ 0x28
 800c504:	f7ff fc98 	bl	800be38 <RegionEU868GetPhyParam>
 800c508:	9009      	str	r0, [sp, #36]	@ 0x24

    linkAdrVerifyParams.Status = status;
 800c50a:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800c50e:	7aab      	ldrb	r3, [r5, #10]
 800c510:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800c514:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800c518:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800c51c:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800c520:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800c524:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800c528:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800c52c:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800c530:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800c534:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800c538:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800c53c:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800c540:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800c544:	2310      	movs	r3, #16
 800c546:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800c54a:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 800c54e:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800c550:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800c554:	2307      	movs	r3, #7
 800c556:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800c55a:	4a1a      	ldr	r2, [pc, #104]	@ (800c5c4 <RegionEU868LinkAdrReq+0x188>)
 800c55c:	6812      	ldr	r2, [r2, #0]
 800c55e:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800c560:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800c564:	2300      	movs	r3, #0
 800c566:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800c56a:	682b      	ldr	r3, [r5, #0]
 800c56c:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800c56e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c570:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800c574:	f10d 0131 	add.w	r1, sp, #49	@ 0x31
 800c578:	a801      	add	r0, sp, #4
 800c57a:	f7ff fa05 	bl	800b988 <RegionCommonLinkAdrReqVerifyParams>
 800c57e:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800c580:	2807      	cmp	r0, #7
 800c582:	d010      	beq.n	800c5a6 <RegionEU868LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800c584:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800c588:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800c58c:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800c590:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800c594:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800c598:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800c59a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c59c:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800c59e:	4628      	mov	r0, r5
 800c5a0:	b00f      	add	sp, #60	@ 0x3c
 800c5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800c5a6:	4e07      	ldr	r6, [pc, #28]	@ (800c5c4 <RegionEU868LinkAdrReq+0x188>)
 800c5a8:	6830      	ldr	r0, [r6, #0]
 800c5aa:	220c      	movs	r2, #12
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800c5b2:	f001 ff82 	bl	800e4ba <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800c5b6:	6833      	ldr	r3, [r6, #0]
 800c5b8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800c5bc:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
 800c5c0:	e7e0      	b.n	800c584 <RegionEU868LinkAdrReq+0x148>
 800c5c2:	bf00      	nop
 800c5c4:	200013bc 	.word	0x200013bc

0800c5c8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c5c8:	b530      	push	{r4, r5, lr}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800c5d4:	f10d 0107 	add.w	r1, sp, #7
 800c5d8:	6840      	ldr	r0, [r0, #4]
 800c5da:	f7ff fba7 	bl	800bd2c <VerifyRfFreq>
 800c5de:	b1a8      	cbz	r0, 800c60c <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800c5e0:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800c5e2:	2207      	movs	r2, #7
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	f994 0000 	ldrsb.w	r0, [r4]
 800c5ea:	f7ff f88a 	bl	800b702 <RegionCommonValueInRange>
 800c5ee:	b908      	cbnz	r0, 800c5f4 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800c5f0:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800c5f4:	2205      	movs	r2, #5
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800c5fc:	f7ff f881 	bl	800b702 <RegionCommonValueInRange>
 800c600:	b908      	cbnz	r0, 800c606 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800c602:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800c606:	4628      	mov	r0, r5
 800c608:	b003      	add	sp, #12
 800c60a:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800c60c:	2506      	movs	r5, #6
 800c60e:	e7e8      	b.n	800c5e2 <RegionEU868RxParamSetupReq+0x1a>

0800c610 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800c610:	f04f 30ff 	mov.w	r0, #4294967295
 800c614:	4770      	bx	lr
	...

0800c618 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800c618:	b510      	push	{r4, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c61e:	2300      	movs	r3, #0
 800c620:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800c624:	f10d 0107 	add.w	r1, sp, #7
 800c628:	6840      	ldr	r0, [r0, #4]
 800c62a:	f7ff fb7f 	bl	800bd2c <VerifyRfFreq>
 800c62e:	b168      	cbz	r0, 800c64c <RegionEU868DlChannelReq+0x34>
    uint8_t status = 0x03;
 800c630:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800c632:	4b0c      	ldr	r3, [pc, #48]	@ (800c664 <RegionEU868DlChannelReq+0x4c>)
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	7823      	ldrb	r3, [r4, #0]
 800c638:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c63c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800c640:	b931      	cbnz	r1, 800c650 <RegionEU868DlChannelReq+0x38>
    {
        status &= 0xFD;
 800c642:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800c646:	b240      	sxtb	r0, r0
 800c648:	b002      	add	sp, #8
 800c64a:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800c64c:	2002      	movs	r0, #2
 800c64e:	e7f0      	b.n	800c632 <RegionEU868DlChannelReq+0x1a>
    if( status == 0x03 )
 800c650:	2803      	cmp	r0, #3
 800c652:	d1f8      	bne.n	800c646 <RegionEU868DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800c654:	6861      	ldr	r1, [r4, #4]
 800c656:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c65a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c65e:	6051      	str	r1, [r2, #4]
 800c660:	e7f1      	b.n	800c646 <RegionEU868DlChannelReq+0x2e>
 800c662:	bf00      	nop
 800c664:	200013bc 	.word	0x200013bc

0800c668 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800c668:	4770      	bx	lr
	...

0800c66c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c66e:	b097      	sub	sp, #92	@ 0x5c
 800c670:	4604      	mov	r4, r0
 800c672:	460f      	mov	r7, r1
 800c674:	4616      	mov	r6, r2
 800c676:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800c678:	2100      	movs	r1, #0
 800c67a:	f88d 1057 	strb.w	r1, [sp, #87]	@ 0x57
    uint8_t nbRestrictedChannels = 0;
 800c67e:	f88d 1056 	strb.w	r1, [sp, #86]	@ 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800c682:	9111      	str	r1, [sp, #68]	@ 0x44
 800c684:	9112      	str	r1, [sp, #72]	@ 0x48
 800c686:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c688:	9114      	str	r1, [sp, #80]	@ 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800c68a:	2307      	movs	r3, #7
 800c68c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800c690:	4b34      	ldr	r3, [pc, #208]	@ (800c764 <RegionEU868NextChannel+0xf8>)
 800c692:	6818      	ldr	r0, [r3, #0]
 800c694:	2201      	movs	r2, #1
 800c696:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800c69a:	f7ff f890 	bl	800b7be <RegionCommonCountChannels>
 800c69e:	b938      	cbnz	r0, 800c6b0 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c6a0:	4b30      	ldr	r3, [pc, #192]	@ (800c764 <RegionEU868NextChannel+0xf8>)
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800c6a8:	f043 0307 	orr.w	r3, r3, #7
 800c6ac:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800c6b0:	7a63      	ldrb	r3, [r4, #9]
 800c6b2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800c6b6:	7a23      	ldrb	r3, [r4, #8]
 800c6b8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c6bc:	4b29      	ldr	r3, [pc, #164]	@ (800c764 <RegionEU868NextChannel+0xf8>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 800c6c4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800c6c6:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800c6c8:	4b27      	ldr	r3, [pc, #156]	@ (800c768 <RegionEU868NextChannel+0xfc>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800c6ce:	2310      	movs	r3, #16
 800c6d0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800c6d4:	f10d 030a 	add.w	r3, sp, #10
 800c6d8:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800c6de:	6863      	ldr	r3, [r4, #4]
 800c6e0:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800c6e2:	7aa3      	ldrb	r3, [r4, #10]
 800c6e4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800c6e8:	2306      	movs	r3, #6
 800c6ea:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800c6ee:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6f0:	f104 020c 	add.w	r2, r4, #12
 800c6f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6f8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800c6fc:	7d23      	ldrb	r3, [r4, #20]
 800c6fe:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800c702:	8ae1      	ldrh	r1, [r4, #22]
 800c704:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800c708:	f7ff fb64 	bl	800bdd4 <GetTimeOnAir>
 800c70c:	900f      	str	r0, [sp, #60]	@ 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800c70e:	ab03      	add	r3, sp, #12
 800c710:	9310      	str	r3, [sp, #64]	@ 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c712:	9601      	str	r6, [sp, #4]
 800c714:	f10d 0356 	add.w	r3, sp, #86	@ 0x56
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	f10d 0357 	add.w	r3, sp, #87	@ 0x57
 800c71e:	aa11      	add	r2, sp, #68	@ 0x44
 800c720:	4629      	mov	r1, r5
 800c722:	a809      	add	r0, sp, #36	@ 0x24
 800c724:	f7ff fa41 	bl	800bbaa <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800c728:	4604      	mov	r4, r0
 800c72a:	b120      	cbz	r0, 800c736 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800c72c:	280c      	cmp	r0, #12
 800c72e:	d00f      	beq.n	800c750 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c730:	4620      	mov	r0, r4
 800c732:	b017      	add	sp, #92	@ 0x5c
 800c734:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800c736:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 800c73a:	3901      	subs	r1, #1
 800c73c:	f001 fe98 	bl	800e470 <randr>
 800c740:	f100 0358 	add.w	r3, r0, #88	@ 0x58
 800c744:	eb0d 0003 	add.w	r0, sp, r3
 800c748:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800c74c:	703b      	strb	r3, [r7, #0]
 800c74e:	e7ef      	b.n	800c730 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c750:	4b04      	ldr	r3, [pc, #16]	@ (800c764 <RegionEU868NextChannel+0xf8>)
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800c758:	f043 0307 	orr.w	r3, r3, #7
 800c75c:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
 800c760:	e7e6      	b.n	800c730 <RegionEU868NextChannel+0xc4>
 800c762:	bf00      	nop
 800c764:	200013bc 	.word	0x200013bc
 800c768:	200013c0 	.word	0x200013c0

0800c76c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800c76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c76e:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c770:	2300      	movs	r3, #0
 800c772:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800c776:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c778:	2d02      	cmp	r5, #2
 800c77a:	d94e      	bls.n	800c81a <RegionEU868ChannelAdd+0xae>
 800c77c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800c77e:	2d0f      	cmp	r5, #15
 800c780:	d84d      	bhi.n	800c81e <RegionEU868ChannelAdd+0xb2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c782:	6803      	ldr	r3, [r0, #0]
 800c784:	7a18      	ldrb	r0, [r3, #8]
 800c786:	f340 0003 	sbfx	r0, r0, #0, #4
 800c78a:	2207      	movs	r2, #7
 800c78c:	2100      	movs	r1, #0
 800c78e:	b240      	sxtb	r0, r0
 800c790:	f7fe ffb7 	bl	800b702 <RegionCommonValueInRange>
 800c794:	b308      	cbz	r0, 800c7da <RegionEU868ChannelAdd+0x6e>
    bool drInvalid = false;
 800c796:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c798:	6823      	ldr	r3, [r4, #0]
 800c79a:	7a18      	ldrb	r0, [r3, #8]
 800c79c:	f340 1003 	sbfx	r0, r0, #4, #4
 800c7a0:	2207      	movs	r2, #7
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	b240      	sxtb	r0, r0
 800c7a6:	f7fe ffac 	bl	800b702 <RegionCommonValueInRange>
 800c7aa:	b900      	cbnz	r0, 800c7ae <RegionEU868ChannelAdd+0x42>
    {
        drInvalid = true;
 800c7ac:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800c7ae:	6820      	ldr	r0, [r4, #0]
 800c7b0:	7a03      	ldrb	r3, [r0, #8]
 800c7b2:	f343 0203 	sbfx	r2, r3, #0, #4
 800c7b6:	b252      	sxtb	r2, r2
 800c7b8:	f343 1303 	sbfx	r3, r3, #4, #4
 800c7bc:	b25b      	sxtb	r3, r3
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	dd00      	ble.n	800c7c4 <RegionEU868ChannelAdd+0x58>
    {
        drInvalid = true;
 800c7c2:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800c7c4:	f10d 0107 	add.w	r1, sp, #7
 800c7c8:	6800      	ldr	r0, [r0, #0]
 800c7ca:	f7ff faaf 	bl	800bd2c <VerifyRfFreq>
 800c7ce:	b130      	cbz	r0, 800c7de <RegionEU868ChannelAdd+0x72>
    bool freqInvalid = false;
 800c7d0:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800c7d2:	b136      	cbz	r6, 800c7e2 <RegionEU868ChannelAdd+0x76>
 800c7d4:	b333      	cbz	r3, 800c824 <RegionEU868ChannelAdd+0xb8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800c7d6:	2006      	movs	r0, #6
 800c7d8:	e022      	b.n	800c820 <RegionEU868ChannelAdd+0xb4>
        drInvalid = true;
 800c7da:	2601      	movs	r6, #1
 800c7dc:	e7dc      	b.n	800c798 <RegionEU868ChannelAdd+0x2c>
            freqInvalid = true;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e7f7      	b.n	800c7d2 <RegionEU868ChannelAdd+0x66>
    }
    if( drInvalid == true )
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800c7e2:	bb0b      	cbnz	r3, 800c828 <RegionEU868ChannelAdd+0xbc>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800c7e4:	4f11      	ldr	r7, [pc, #68]	@ (800c82c <RegionEU868ChannelAdd+0xc0>)
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	006e      	lsls	r6, r5, #1
 800c7ea:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800c7ee:	220c      	movs	r2, #12
 800c7f0:	6821      	ldr	r1, [r4, #0]
 800c7f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7f6:	f001 fe48 	bl	800e48a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	442e      	add	r6, r5
 800c7fe:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800c802:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c806:	7272      	strb	r2, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800c808:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800c80c:	2101      	movs	r1, #1
 800c80e:	40a9      	lsls	r1, r5
 800c810:	430a      	orrs	r2, r1
 800c812:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 800c816:	2000      	movs	r0, #0
 800c818:	e002      	b.n	800c820 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800c81a:	2006      	movs	r0, #6
 800c81c:	e000      	b.n	800c820 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c81e:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c820:	b003      	add	sp, #12
 800c822:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_DATARATE_INVALID;
 800c824:	2005      	movs	r0, #5
 800c826:	e7fb      	b.n	800c820 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800c828:	2004      	movs	r0, #4
 800c82a:	e7f9      	b.n	800c820 <RegionEU868ChannelAdd+0xb4>
 800c82c:	200013bc 	.word	0x200013bc

0800c830 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800c830:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c832:	2902      	cmp	r1, #2
 800c834:	d801      	bhi.n	800c83a <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800c836:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800c838:	4770      	bx	lr
{
 800c83a:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800c83c:	4b09      	ldr	r3, [pc, #36]	@ (800c864 <RegionEU868ChannelsRemove+0x34>)
 800c83e:	6818      	ldr	r0, [r3, #0]
 800c840:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800c844:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800c848:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c84c:	2200      	movs	r2, #0
 800c84e:	f840 200c 	str.w	r2, [r0, ip]
 800c852:	605a      	str	r2, [r3, #4]
 800c854:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800c856:	2210      	movs	r2, #16
 800c858:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800c85c:	f7fe ff93 	bl	800b786 <RegionCommonChanDisable>
}
 800c860:	bd08      	pop	{r3, pc}
 800c862:	bf00      	nop
 800c864:	200013bc 	.word	0x200013bc

0800c868 <RegionEU868ApplyCFList>:
{
 800c868:	b570      	push	{r4, r5, r6, lr}
 800c86a:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c86c:	2350      	movs	r3, #80	@ 0x50
 800c86e:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800c872:	7903      	ldrb	r3, [r0, #4]
 800c874:	2b10      	cmp	r3, #16
 800c876:	d136      	bne.n	800c8e6 <RegionEU868ApplyCFList+0x7e>
 800c878:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800c87a:	6803      	ldr	r3, [r0, #0]
 800c87c:	7bdd      	ldrb	r5, [r3, #15]
 800c87e:	2d00      	cmp	r5, #0
 800c880:	d131      	bne.n	800c8e6 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c882:	2403      	movs	r4, #3
 800c884:	e01b      	b.n	800c8be <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800c886:	6832      	ldr	r2, [r6, #0]
 800c888:	5d53      	ldrb	r3, [r2, r5]
 800c88a:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800c88c:	442a      	add	r2, r5
 800c88e:	7851      	ldrb	r1, [r2, #1]
 800c890:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c894:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800c896:	7892      	ldrb	r2, [r2, #2]
 800c898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c89c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800c89e:	2264      	movs	r2, #100	@ 0x64
 800c8a0:	fb02 f303 	mul.w	r3, r2, r3
 800c8a4:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	9304      	str	r3, [sp, #16]
 800c8aa:	e011      	b.n	800c8d0 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800c8ac:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800c8b0:	4668      	mov	r0, sp
 800c8b2:	f7ff ffbd 	bl	800c830 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c8b6:	3503      	adds	r5, #3
 800c8b8:	b2ed      	uxtb	r5, r5
 800c8ba:	3401      	adds	r4, #1
 800c8bc:	b2e4      	uxtb	r4, r4
 800c8be:	2c0f      	cmp	r4, #15
 800c8c0:	d811      	bhi.n	800c8e6 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800c8c2:	2c07      	cmp	r4, #7
 800c8c4:	d9df      	bls.n	800c886 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800c8ca:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800c8ce:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800c8d0:	9b03      	ldr	r3, [sp, #12]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d0ea      	beq.n	800c8ac <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800c8d6:	ab03      	add	r3, sp, #12
 800c8d8:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800c8da:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800c8de:	a801      	add	r0, sp, #4
 800c8e0:	f7ff ff44 	bl	800c76c <RegionEU868ChannelAdd>
 800c8e4:	e7e7      	b.n	800c8b6 <RegionEU868ApplyCFList+0x4e>
}
 800c8e6:	b006      	add	sp, #24
 800c8e8:	bd70      	pop	{r4, r5, r6, pc}

0800c8ea <RegionEU868NewChannelReq>:
{
 800c8ea:	b500      	push	{lr}
 800c8ec:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800c8ee:	6803      	ldr	r3, [r0, #0]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	b952      	cbnz	r2, 800c90a <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800c8f4:	7903      	ldrb	r3, [r0, #4]
 800c8f6:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800c8fa:	a801      	add	r0, sp, #4
 800c8fc:	f7ff ff98 	bl	800c830 <RegionEU868ChannelsRemove>
 800c900:	b1d0      	cbz	r0, 800c938 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800c902:	2003      	movs	r0, #3
}
 800c904:	b005      	add	sp, #20
 800c906:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800c90a:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800c90c:	7903      	ldrb	r3, [r0, #4]
 800c90e:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800c912:	a802      	add	r0, sp, #8
 800c914:	f7ff ff2a 	bl	800c76c <RegionEU868ChannelAdd>
 800c918:	2806      	cmp	r0, #6
 800c91a:	d80b      	bhi.n	800c934 <RegionEU868NewChannelReq+0x4a>
 800c91c:	e8df f000 	tbb	[pc, r0]
 800c920:	0a0a0a04 	.word	0x0a0a0a04
 800c924:	060e      	.short	0x060e
 800c926:	08          	.byte	0x08
 800c927:	00          	.byte	0x00
 800c928:	2003      	movs	r0, #3
 800c92a:	e7eb      	b.n	800c904 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800c92c:	2001      	movs	r0, #1
                break;
 800c92e:	e7e9      	b.n	800c904 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800c930:	2000      	movs	r0, #0
                break;
 800c932:	e7e7      	b.n	800c904 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800c934:	2000      	movs	r0, #0
                break;
 800c936:	e7e5      	b.n	800c904 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800c938:	2000      	movs	r0, #0
 800c93a:	e7e3      	b.n	800c904 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800c93c:	2002      	movs	r0, #2
 800c93e:	e7e1      	b.n	800c904 <RegionEU868NewChannelReq+0x1a>

0800c940 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800c944:	4b12      	ldr	r3, [pc, #72]	@ (800c990 <RegionEU868SetContinuousWave+0x50>)
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	4d12      	ldr	r5, [pc, #72]	@ (800c994 <RegionEU868SetContinuousWave+0x54>)
 800c94a:	6829      	ldr	r1, [r5, #0]
 800c94c:	7803      	ldrb	r3, [r0, #0]
 800c94e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c952:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800c956:	7a4b      	ldrb	r3, [r1, #9]
 800c958:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c95c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c960:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800c964:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c968:	f7ff f988 	bl	800bc7c <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800c96c:	682a      	ldr	r2, [r5, #0]
 800c96e:	7823      	ldrb	r3, [r4, #0]
 800c970:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c974:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c978:	68a2      	ldr	r2, [r4, #8]
 800c97a:	6861      	ldr	r1, [r4, #4]
 800c97c:	f7ff f89c 	bl	800bab8 <RegionCommonComputeTxPower>
 800c980:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800c982:	4b05      	ldr	r3, [pc, #20]	@ (800c998 <RegionEU868SetContinuousWave+0x58>)
 800c984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c986:	89a2      	ldrh	r2, [r4, #12]
 800c988:	4628      	mov	r0, r5
 800c98a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800c98c:	bd38      	pop	{r3, r4, r5, pc}
 800c98e:	bf00      	nop
 800c990:	200013c0 	.word	0x200013c0
 800c994:	200013bc 	.word	0x200013bc
 800c998:	08014918 	.word	0x08014918

0800c99c <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800c99c:	1a88      	subs	r0, r1, r2
 800c99e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	db01      	blt.n	800c9a8 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800c9a4:	b2c0      	uxtb	r0, r0
 800c9a6:	4770      	bx	lr
        datarate = DR_0;
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	e7fb      	b.n	800c9a4 <RegionEU868ApplyDrOffset+0x8>

0800c9ac <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800c9ac:	b510      	push	{r4, lr}
 800c9ae:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800c9b0:	4b10      	ldr	r3, [pc, #64]	@ (800c9f4 <VerifyRfFreq+0x48>)
 800c9b2:	6a1b      	ldr	r3, [r3, #32]
 800c9b4:	4798      	blx	r3
 800c9b6:	b1c8      	cbz	r0, 800c9ec <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800c9b8:	4b0f      	ldr	r3, [pc, #60]	@ (800c9f8 <VerifyRfFreq+0x4c>)
 800c9ba:	4423      	add	r3, r4
 800c9bc:	4a0f      	ldr	r2, [pc, #60]	@ (800c9fc <VerifyRfFreq+0x50>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d813      	bhi.n	800c9ea <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800c9c2:	f102 42df 	add.w	r2, r2, #1870659584	@ 0x6f800000
 800c9c6:	f502 12c8 	add.w	r2, r2, #1638400	@ 0x190000
 800c9ca:	f202 7245 	addw	r2, r2, #1861	@ 0x745
 800c9ce:	fba2 1203 	umull	r1, r2, r2, r3
 800c9d2:	0c92      	lsrs	r2, r2, #18
 800c9d4:	490a      	ldr	r1, [pc, #40]	@ (800ca00 <VerifyRfFreq+0x54>)
 800c9d6:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800c9da:	b942      	cbnz	r2, 800c9ee <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800c9dc:	4b09      	ldr	r3, [pc, #36]	@ (800ca04 <VerifyRfFreq+0x58>)
 800c9de:	4423      	add	r3, r4
 800c9e0:	4a09      	ldr	r2, [pc, #36]	@ (800ca08 <VerifyRfFreq+0x5c>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d902      	bls.n	800c9ec <VerifyRfFreq+0x40>
    {
        return false;
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	e000      	b.n	800c9ec <VerifyRfFreq+0x40>
        return false;
 800c9ea:	2000      	movs	r0, #0
    }
    return true;
}
 800c9ec:	bd10      	pop	{r4, pc}
        return false;
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	e7fc      	b.n	800c9ec <VerifyRfFreq+0x40>
 800c9f2:	bf00      	nop
 800c9f4:	08014918 	.word	0x08014918
 800c9f8:	c8f78f60 	.word	0xc8f78f60
 800c9fc:	00401640 	.word	0x00401640
 800ca00:	000927c0 	.word	0x000927c0
 800ca04:	ca37fea0 	.word	0xca37fea0
 800ca08:	01808580 	.word	0x01808580

0800ca0c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800ca12:	4b0a      	ldr	r3, [pc, #40]	@ (800ca3c <GetTimeOnAir+0x30>)
 800ca14:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800ca16:	490a      	ldr	r1, [pc, #40]	@ (800ca40 <GetTimeOnAir+0x34>)
 800ca18:	f7ff f934 	bl	800bc84 <RegionCommonGetBandwidth>
 800ca1c:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800ca1e:	4b09      	ldr	r3, [pc, #36]	@ (800ca44 <GetTimeOnAir+0x38>)
 800ca20:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800ca22:	2001      	movs	r0, #1
 800ca24:	9003      	str	r0, [sp, #12]
 800ca26:	b2e4      	uxtb	r4, r4
 800ca28:	9402      	str	r4, [sp, #8]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	9201      	str	r2, [sp, #4]
 800ca2e:	2208      	movs	r2, #8
 800ca30:	9200      	str	r2, [sp, #0]
 800ca32:	4603      	mov	r3, r0
 800ca34:	4632      	mov	r2, r6
 800ca36:	47a8      	blx	r5
}
 800ca38:	b004      	add	sp, #16
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
 800ca3c:	08014408 	.word	0x08014408
 800ca40:	080143c8 	.word	0x080143c8
 800ca44:	08014918 	.word	0x08014918

0800ca48 <LimitTxPower>:
{
 800ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	4615      	mov	r5, r2
 800ca4e:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800ca50:	f7ff f914 	bl	800bc7c <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800ca54:	2d04      	cmp	r5, #4
 800ca56:	d105      	bne.n	800ca64 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800ca58:	4634      	mov	r4, r6
 800ca5a:	2e02      	cmp	r6, #2
 800ca5c:	bfb8      	it	lt
 800ca5e:	2402      	movlt	r4, #2
}
 800ca60:	4620      	mov	r0, r4
 800ca62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca64:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800ca66:	2204      	movs	r2, #4
 800ca68:	2100      	movs	r1, #0
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	f7fe fea7 	bl	800b7be <RegionCommonCountChannels>
 800ca70:	2831      	cmp	r0, #49	@ 0x31
 800ca72:	d8f5      	bhi.n	800ca60 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800ca74:	4634      	mov	r4, r6
 800ca76:	2e05      	cmp	r6, #5
 800ca78:	bfb8      	it	lt
 800ca7a:	2405      	movlt	r4, #5
 800ca7c:	e7f0      	b.n	800ca60 <LimitTxPower+0x18>
	...

0800ca80 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800ca80:	b500      	push	{lr}
 800ca82:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800ca84:	2300      	movs	r3, #0
 800ca86:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800ca88:	7803      	ldrb	r3, [r0, #0]
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	2b38      	cmp	r3, #56	@ 0x38
 800ca8e:	d820      	bhi.n	800cad2 <RegionUS915GetPhyParam+0x52>
 800ca90:	e8df f003 	tbb	[pc, r3]
 800ca94:	1f1f1f1d 	.word	0x1f1f1f1d
 800ca98:	1f1f1f1f 	.word	0x1f1f1f1f
 800ca9c:	3f3c1f1f 	.word	0x3f3c1f1f
 800caa0:	4e1f4842 	.word	0x4e1f4842
 800caa4:	5e5a5652 	.word	0x5e5a5652
 800caa8:	6f1f6662 	.word	0x6f1f6662
 800caac:	817b7572 	.word	0x817b7572
 800cab0:	881f1f84 	.word	0x881f1f84
 800cab4:	1f1f248b 	.word	0x1f1f248b
 800cab8:	1f1f1f1f 	.word	0x1f1f1f1f
 800cabc:	1f1f1f1f 	.word	0x1f1f1f1f
 800cac0:	8e1f1f1f 	.word	0x8e1f1f1f
 800cac4:	1fa29f95 	.word	0x1fa29f95
 800cac8:	b2afaca5 	.word	0xb2afaca5
 800cacc:	b8          	.byte	0xb8
 800cacd:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800cace:	2308      	movs	r3, #8
 800cad0:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800cad2:	9804      	ldr	r0, [sp, #16]
 800cad4:	9005      	str	r0, [sp, #20]
}
 800cad6:	b007      	add	sp, #28
 800cad8:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800cadc:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cae0:	f88d 3004 	strb.w	r3, [sp, #4]
 800cae4:	2304      	movs	r3, #4
 800cae6:	f88d 3005 	strb.w	r3, [sp, #5]
 800caea:	2300      	movs	r3, #0
 800caec:	f88d 3006 	strb.w	r3, [sp, #6]
 800caf0:	2348      	movs	r3, #72	@ 0x48
 800caf2:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800caf6:	4b47      	ldr	r3, [pc, #284]	@ (800cc14 <RegionUS915GetPhyParam+0x194>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f503 7258 	add.w	r2, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cafe:	9202      	str	r2, [sp, #8]
 800cb00:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800cb02:	a801      	add	r0, sp, #4
 800cb04:	f7ff f89b 	bl	800bc3e <RegionCommonGetNextLowerTxDr>
 800cb08:	9004      	str	r0, [sp, #16]
            break;
 800cb0a:	e7e2      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800cb0c:	2340      	movs	r3, #64	@ 0x40
 800cb0e:	9304      	str	r3, [sp, #16]
            break;
 800cb10:	e7df      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800cb12:	2320      	movs	r3, #32
 800cb14:	9304      	str	r3, [sp, #16]
            break;
 800cb16:	e7dc      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800cb18:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cb1c:	4a3e      	ldr	r2, [pc, #248]	@ (800cc18 <RegionUS915GetPhyParam+0x198>)
 800cb1e:	5cd3      	ldrb	r3, [r2, r3]
 800cb20:	9304      	str	r3, [sp, #16]
            break;
 800cb22:	e7d6      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800cb24:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cb28:	4a3c      	ldr	r2, [pc, #240]	@ (800cc1c <RegionUS915GetPhyParam+0x19c>)
 800cb2a:	5cd3      	ldrb	r3, [r2, r3]
 800cb2c:	9304      	str	r3, [sp, #16]
            break;
 800cb2e:	e7d0      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800cb30:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800cb34:	9304      	str	r3, [sp, #16]
            break;
 800cb36:	e7cc      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800cb38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cb3c:	9304      	str	r3, [sp, #16]
            break;
 800cb3e:	e7c8      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800cb40:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800cb44:	9304      	str	r3, [sp, #16]
            break;
 800cb46:	e7c4      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800cb48:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cb4c:	9304      	str	r3, [sp, #16]
            break;
 800cb4e:	e7c0      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800cb50:	f241 7370 	movw	r3, #6000	@ 0x1770
 800cb54:	9304      	str	r3, [sp, #16]
            break;
 800cb56:	e7bc      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800cb58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cb5c:	9304      	str	r3, [sp, #16]
            break;
 800cb5e:	e7b8      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800cb60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800cb64:	482e      	ldr	r0, [pc, #184]	@ (800cc20 <RegionUS915GetPhyParam+0x1a0>)
 800cb66:	f001 fc83 	bl	800e470 <randr>
 800cb6a:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800cb6e:	9004      	str	r0, [sp, #16]
            break;
 800cb70:	e7af      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800cb72:	4b2c      	ldr	r3, [pc, #176]	@ (800cc24 <RegionUS915GetPhyParam+0x1a4>)
 800cb74:	9304      	str	r3, [sp, #16]
            break;
 800cb76:	e7ac      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 800cb78:	2308      	movs	r3, #8
 800cb7a:	9304      	str	r3, [sp, #16]
            break;
 800cb7c:	e7a9      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800cb7e:	4b25      	ldr	r3, [pc, #148]	@ (800cc14 <RegionUS915GetPhyParam+0x194>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800cb86:	9304      	str	r3, [sp, #16]
            break;
 800cb88:	e7a3      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800cb8a:	4b22      	ldr	r3, [pc, #136]	@ (800cc14 <RegionUS915GetPhyParam+0x194>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 800cb92:	9304      	str	r3, [sp, #16]
            break;
 800cb94:	e79d      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800cb96:	2348      	movs	r3, #72	@ 0x48
 800cb98:	9304      	str	r3, [sp, #16]
            break;
 800cb9a:	e79a      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800cb9c:	4b1d      	ldr	r3, [pc, #116]	@ (800cc14 <RegionUS915GetPhyParam+0x194>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	9304      	str	r3, [sp, #16]
            break;
 800cba2:	e796      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800cba4:	4b20      	ldr	r3, [pc, #128]	@ (800cc28 <RegionUS915GetPhyParam+0x1a8>)
 800cba6:	9304      	str	r3, [sp, #16]
            break;
 800cba8:	e793      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	9304      	str	r3, [sp, #16]
            break;
 800cbae:	e790      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800cbb0:	4a1e      	ldr	r2, [pc, #120]	@ (800cc2c <RegionUS915GetPhyParam+0x1ac>)
 800cbb2:	491c      	ldr	r1, [pc, #112]	@ (800cc24 <RegionUS915GetPhyParam+0x1a4>)
 800cbb4:	7900      	ldrb	r0, [r0, #4]
 800cbb6:	f7fe fcd3 	bl	800b560 <RegionBaseUSCalcDownlinkFrequency>
 800cbba:	9004      	str	r0, [sp, #16]
            break;
 800cbbc:	e789      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800cbbe:	2317      	movs	r3, #23
 800cbc0:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800cbc4:	2305      	movs	r3, #5
 800cbc6:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800cbd0:	e77f      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800cbd2:	2308      	movs	r3, #8
 800cbd4:	9304      	str	r3, [sp, #16]
            break;
 800cbd6:	e77c      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800cbd8:	2308      	movs	r3, #8
 800cbda:	9304      	str	r3, [sp, #16]
            break;
 800cbdc:	e779      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800cbde:	4a13      	ldr	r2, [pc, #76]	@ (800cc2c <RegionUS915GetPhyParam+0x1ac>)
 800cbe0:	4910      	ldr	r1, [pc, #64]	@ (800cc24 <RegionUS915GetPhyParam+0x1a4>)
 800cbe2:	7900      	ldrb	r0, [r0, #4]
 800cbe4:	f7fe fcbc 	bl	800b560 <RegionBaseUSCalcDownlinkFrequency>
 800cbe8:	9004      	str	r0, [sp, #16]
            break;
 800cbea:	e772      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800cbec:	2308      	movs	r3, #8
 800cbee:	9304      	str	r3, [sp, #16]
            break;
 800cbf0:	e76f      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800cbf2:	2308      	movs	r3, #8
 800cbf4:	9304      	str	r3, [sp, #16]
            break;
 800cbf6:	e76c      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800cbf8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cbfc:	4a0c      	ldr	r2, [pc, #48]	@ (800cc30 <RegionUS915GetPhyParam+0x1b0>)
 800cbfe:	5cd3      	ldrb	r3, [r2, r3]
 800cc00:	9304      	str	r3, [sp, #16]
            break;
 800cc02:	e766      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800cc04:	490b      	ldr	r1, [pc, #44]	@ (800cc34 <RegionUS915GetPhyParam+0x1b4>)
 800cc06:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800cc0a:	f7ff f83b 	bl	800bc84 <RegionCommonGetBandwidth>
 800cc0e:	9004      	str	r0, [sp, #16]
            break;
 800cc10:	e75f      	b.n	800cad2 <RegionUS915GetPhyParam+0x52>
 800cc12:	bf00      	nop
 800cc14:	200013c4 	.word	0x200013c4
 800cc18:	080143a4 	.word	0x080143a4
 800cc1c:	08014394 	.word	0x08014394
 800cc20:	fffffc18 	.word	0xfffffc18
 800cc24:	370870a0 	.word	0x370870a0
 800cc28:	4200999a 	.word	0x4200999a
 800cc2c:	000927c0 	.word	0x000927c0
 800cc30:	08014408 	.word	0x08014408
 800cc34:	080143c8 	.word	0x080143c8

0800cc38 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800cc38:	b510      	push	{r4, lr}
 800cc3a:	b082      	sub	sp, #8
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800cc3c:	4b0b      	ldr	r3, [pc, #44]	@ (800cc6c <RegionUS915SetBandTxDone+0x34>)
 800cc3e:	681c      	ldr	r4, [r3, #0]
 800cc40:	4b0b      	ldr	r3, [pc, #44]	@ (800cc70 <RegionUS915SetBandTxDone+0x38>)
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	7803      	ldrb	r3, [r0, #0]
 800cc46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cc4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc4e:	7a5b      	ldrb	r3, [r3, #9]
 800cc50:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800cc54:	6903      	ldr	r3, [r0, #16]
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	68c3      	ldr	r3, [r0, #12]
 800cc5a:	7842      	ldrb	r2, [r0, #1]
 800cc5c:	6881      	ldr	r1, [r0, #8]
 800cc5e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800cc62:	f7fe fdd1 	bl	800b808 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 800cc66:	b002      	add	sp, #8
 800cc68:	bd10      	pop	{r4, pc}
 800cc6a:	bf00      	nop
 800cc6c:	200013c8 	.word	0x200013c8
 800cc70:	200013c4 	.word	0x200013c4

0800cc74 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800cc74:	b510      	push	{r4, lr}
 800cc76:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800cc78:	2301      	movs	r3, #1
 800cc7a:	f8ad 3000 	strh.w	r3, [sp]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	f88d 3002 	strb.w	r3, [sp, #2]
 800cc84:	9301      	str	r3, [sp, #4]
 800cc86:	9302      	str	r3, [sp, #8]
 800cc88:	9303      	str	r3, [sp, #12]
 800cc8a:	9304      	str	r3, [sp, #16]
 800cc8c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800cc90:	7a04      	ldrb	r4, [r0, #8]
 800cc92:	b17c      	cbz	r4, 800ccb4 <RegionUS915InitDefaults+0x40>
 800cc94:	3c01      	subs	r4, #1
 800cc96:	b2e4      	uxtb	r4, r4
 800cc98:	2c01      	cmp	r4, #1
 800cc9a:	f200 8082 	bhi.w	800cda2 <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cc9e:	4b42      	ldr	r3, [pc, #264]	@ (800cda8 <RegionUS915InitDefaults+0x134>)
 800cca0:	6818      	ldr	r0, [r3, #0]
 800cca2:	2206      	movs	r2, #6
 800cca4:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800cca8:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800ccac:	f7fe fd9d 	bl	800b7ea <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	e074      	b.n	800cd9e <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800ccb4:	6803      	ldr	r3, [r0, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d073      	beq.n	800cda2 <RegionUS915InitDefaults+0x12e>
 800ccba:	6842      	ldr	r2, [r0, #4]
 800ccbc:	2a00      	cmp	r2, #0
 800ccbe:	d070      	beq.n	800cda2 <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800ccc0:	493a      	ldr	r1, [pc, #232]	@ (800cdac <RegionUS915InitDefaults+0x138>)
 800ccc2:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800ccc4:	4938      	ldr	r1, [pc, #224]	@ (800cda8 <RegionUS915InitDefaults+0x134>)
 800ccc6:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800ccce:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800ccd2:	2218      	movs	r2, #24
 800ccd4:	4669      	mov	r1, sp
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f001 fbd7 	bl	800e48a <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800ccdc:	e011      	b.n	800cd02 <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800ccde:	4b32      	ldr	r3, [pc, #200]	@ (800cda8 <RegionUS915InitDefaults+0x134>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4933      	ldr	r1, [pc, #204]	@ (800cdb0 <RegionUS915InitDefaults+0x13c>)
 800cce4:	4a33      	ldr	r2, [pc, #204]	@ (800cdb4 <RegionUS915InitDefaults+0x140>)
 800cce6:	fb01 2204 	mla	r2, r1, r4, r2
 800ccea:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800ccee:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800ccf2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800ccf6:	2230      	movs	r2, #48	@ 0x30
 800ccf8:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800ccfe:	3401      	adds	r4, #1
 800cd00:	b2e4      	uxtb	r4, r4
 800cd02:	2c3f      	cmp	r4, #63	@ 0x3f
 800cd04:	d9eb      	bls.n	800ccde <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800cd06:	2340      	movs	r3, #64	@ 0x40
 800cd08:	2b47      	cmp	r3, #71	@ 0x47
 800cd0a:	d814      	bhi.n	800cd36 <RegionUS915InitDefaults+0xc2>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800cd0c:	f1a3 0040 	sub.w	r0, r3, #64	@ 0x40
 800cd10:	4a25      	ldr	r2, [pc, #148]	@ (800cda8 <RegionUS915InitDefaults+0x134>)
 800cd12:	6812      	ldr	r2, [r2, #0]
 800cd14:	4c28      	ldr	r4, [pc, #160]	@ (800cdb8 <RegionUS915InitDefaults+0x144>)
 800cd16:	4929      	ldr	r1, [pc, #164]	@ (800cdbc <RegionUS915InitDefaults+0x148>)
 800cd18:	fb04 1100 	mla	r1, r4, r0, r1
 800cd1c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800cd20:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800cd24:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800cd28:	2144      	movs	r1, #68	@ 0x44
 800cd2a:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800cd30:	3301      	adds	r3, #1
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	e7e8      	b.n	800cd08 <RegionUS915InitDefaults+0x94>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800cd36:	4c1c      	ldr	r4, [pc, #112]	@ (800cda8 <RegionUS915InitDefaults+0x134>)
 800cd38:	6820      	ldr	r0, [r4, #0]
 800cd3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cd3e:	f8a0 336c 	strh.w	r3, [r0, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800cd42:	f8a0 336e 	strh.w	r3, [r0, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800cd46:	f8a0 3370 	strh.w	r3, [r0, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800cd4a:	f8a0 3372 	strh.w	r3, [r0, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800cd4e:	23ff      	movs	r3, #255	@ 0xff
 800cd50:	f8a0 3374 	strh.w	r3, [r0, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800cd54:	2300      	movs	r3, #0
 800cd56:	f8a0 3376 	strh.w	r3, [r0, #886]	@ 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cd5a:	2206      	movs	r2, #6
 800cd5c:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800cd60:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800cd64:	f7fe fd41 	bl	800b7ea <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800cd68:	4b10      	ldr	r3, [pc, #64]	@ (800cdac <RegionUS915InitDefaults+0x138>)
 800cd6a:	6818      	ldr	r0, [r3, #0]
 800cd6c:	6821      	ldr	r1, [r4, #0]
 800cd6e:	2206      	movs	r2, #6
 800cd70:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 800cd74:	3090      	adds	r0, #144	@ 0x90
 800cd76:	f7fe fd38 	bl	800b7ea <RegionCommonChanMaskCopy>
            break;
 800cd7a:	e012      	b.n	800cda2 <RegionUS915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800cd7c:	4a0b      	ldr	r2, [pc, #44]	@ (800cdac <RegionUS915InitDefaults+0x138>)
 800cd7e:	6811      	ldr	r1, [r2, #0]
 800cd80:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800cd84:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
 800cd88:	4c07      	ldr	r4, [pc, #28]	@ (800cda8 <RegionUS915InitDefaults+0x134>)
 800cd8a:	6824      	ldr	r4, [r4, #0]
 800cd8c:	f503 7cd8 	add.w	ip, r3, #432	@ 0x1b0
 800cd90:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 800cd94:	4022      	ands	r2, r4
 800cd96:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	2b05      	cmp	r3, #5
 800cda0:	d9ec      	bls.n	800cd7c <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800cda2:	b006      	add	sp, #24
 800cda4:	bd10      	pop	{r4, pc}
 800cda6:	bf00      	nop
 800cda8:	200013c4 	.word	0x200013c4
 800cdac:	200013c8 	.word	0x200013c8
 800cdb0:	00030d40 	.word	0x00030d40
 800cdb4:	35c80160 	.word	0x35c80160
 800cdb8:	00186a00 	.word	0x00186a00
 800cdbc:	35d2afc0 	.word	0x35d2afc0

0800cdc0 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800cdc0:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800cdc2:	290a      	cmp	r1, #10
 800cdc4:	d829      	bhi.n	800ce1a <RegionUS915Verify+0x5a>
 800cdc6:	e8df f001 	tbb	[pc, r1]
 800cdca:	2806      	.short	0x2806
 800cdcc:	0a282828 	.word	0x0a282828
 800cdd0:	1e28140a 	.word	0x1e28140a
 800cdd4:	1e          	.byte	0x1e
 800cdd5:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800cdd6:	6800      	ldr	r0, [r0, #0]
 800cdd8:	f7ff fde8 	bl	800c9ac <VerifyRfFreq>
 800cddc:	e01e      	b.n	800ce1c <RegionUS915Verify+0x5c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800cdde:	2204      	movs	r2, #4
 800cde0:	2100      	movs	r1, #0
 800cde2:	f990 0000 	ldrsb.w	r0, [r0]
 800cde6:	f7fe fc8c 	bl	800b702 <RegionCommonValueInRange>
 800cdea:	3800      	subs	r0, #0
 800cdec:	bf18      	it	ne
 800cdee:	2001      	movne	r0, #1
 800cdf0:	e014      	b.n	800ce1c <RegionUS915Verify+0x5c>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800cdf2:	220d      	movs	r2, #13
 800cdf4:	2108      	movs	r1, #8
 800cdf6:	f990 0000 	ldrsb.w	r0, [r0]
 800cdfa:	f7fe fc82 	bl	800b702 <RegionCommonValueInRange>
 800cdfe:	3800      	subs	r0, #0
 800ce00:	bf18      	it	ne
 800ce02:	2001      	movne	r0, #1
 800ce04:	e00a      	b.n	800ce1c <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800ce06:	220e      	movs	r2, #14
 800ce08:	2100      	movs	r1, #0
 800ce0a:	f990 0000 	ldrsb.w	r0, [r0]
 800ce0e:	f7fe fc78 	bl	800b702 <RegionCommonValueInRange>
 800ce12:	3800      	subs	r0, #0
 800ce14:	bf18      	it	ne
 800ce16:	2001      	movne	r0, #1
 800ce18:	e000      	b.n	800ce1c <RegionUS915Verify+0x5c>
    switch( phyAttribute )
 800ce1a:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800ce1c:	bd08      	pop	{r3, pc}
	...

0800ce20 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800ce20:	7903      	ldrb	r3, [r0, #4]
 800ce22:	2b10      	cmp	r3, #16
 800ce24:	d136      	bne.n	800ce94 <RegionUS915ApplyCFList+0x74>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800ce26:	6803      	ldr	r3, [r0, #0]
 800ce28:	7bdb      	ldrb	r3, [r3, #15]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d132      	bne.n	800ce94 <RegionUS915ApplyCFList+0x74>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800ce2e:	2200      	movs	r2, #0
 800ce30:	4613      	mov	r3, r2
 800ce32:	2a04      	cmp	r2, #4
 800ce34:	d82d      	bhi.n	800ce92 <RegionUS915ApplyCFList+0x72>
{
 800ce36:	b530      	push	{r4, r5, lr}
 800ce38:	e012      	b.n	800ce60 <RegionUS915ApplyCFList+0x40>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800ce3a:	4917      	ldr	r1, [pc, #92]	@ (800ce98 <RegionUS915ApplyCFList+0x78>)
 800ce3c:	680d      	ldr	r5, [r1, #0]
 800ce3e:	f10c 0e48 	add.w	lr, ip, #72	@ 0x48
 800ce42:	f835 101e 	ldrh.w	r1, [r5, lr, lsl #1]
 800ce46:	f50c 7cd8 	add.w	ip, ip, #432	@ 0x1b0
 800ce4a:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 800ce4e:	4021      	ands	r1, r4
 800ce50:	f825 101e 	strh.w	r1, [r5, lr, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800ce54:	3301      	adds	r3, #1
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	3202      	adds	r2, #2
 800ce5a:	b2d2      	uxtb	r2, r2
 800ce5c:	2b04      	cmp	r3, #4
 800ce5e:	d817      	bhi.n	800ce90 <RegionUS915ApplyCFList+0x70>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800ce60:	6801      	ldr	r1, [r0, #0]
 800ce62:	5c89      	ldrb	r1, [r1, r2]
 800ce64:	4c0d      	ldr	r4, [pc, #52]	@ (800ce9c <RegionUS915ApplyCFList+0x7c>)
 800ce66:	6824      	ldr	r4, [r4, #0]
 800ce68:	469c      	mov	ip, r3
 800ce6a:	f503 75d8 	add.w	r5, r3, #432	@ 0x1b0
 800ce6e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800ce72:	f8d0 e000 	ldr.w	lr, [r0]
 800ce76:	4496      	add	lr, r2
 800ce78:	f89e e001 	ldrb.w	lr, [lr, #1]
 800ce7c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800ce80:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800ce84:	2b04      	cmp	r3, #4
 800ce86:	d1d8      	bne.n	800ce3a <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800ce88:	b2c9      	uxtb	r1, r1
 800ce8a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800ce8e:	e7d4      	b.n	800ce3a <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800ce90:	bd30      	pop	{r4, r5, pc}
 800ce92:	4770      	bx	lr
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	200013c8 	.word	0x200013c8
 800ce9c:	200013c4 	.word	0x200013c4

0800cea0 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800cea0:	b570      	push	{r4, r5, r6, lr}
 800cea2:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800cea4:	2204      	movs	r2, #4
 800cea6:	2100      	movs	r1, #0
 800cea8:	6800      	ldr	r0, [r0, #0]
 800ceaa:	f7fe fc88 	bl	800b7be <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800ceae:	2801      	cmp	r0, #1
 800ceb0:	d033      	beq.n	800cf1a <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800ceb2:	792c      	ldrb	r4, [r5, #4]
 800ceb4:	b11c      	cbz	r4, 800cebe <RegionUS915ChanMaskSet+0x1e>
 800ceb6:	2c01      	cmp	r4, #1
 800ceb8:	d025      	beq.n	800cf06 <RegionUS915ChanMaskSet+0x66>
 800ceba:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800cebc:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800cebe:	4e18      	ldr	r6, [pc, #96]	@ (800cf20 <RegionUS915ChanMaskSet+0x80>)
 800cec0:	6830      	ldr	r0, [r6, #0]
 800cec2:	2206      	movs	r2, #6
 800cec4:	6829      	ldr	r1, [r5, #0]
 800cec6:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800ceca:	f7fe fc8e 	bl	800b7ea <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800cece:	6835      	ldr	r5, [r6, #0]
 800ced0:	f895 3374 	ldrb.w	r3, [r5, #884]	@ 0x374
 800ced4:	f8a5 3374 	strh.w	r3, [r5, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800ced8:	2300      	movs	r3, #0
 800ceda:	f8a5 3376 	strh.w	r3, [r5, #886]	@ 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cede:	e00e      	b.n	800cefe <RegionUS915ChanMaskSet+0x5e>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800cee0:	4b10      	ldr	r3, [pc, #64]	@ (800cf24 <RegionUS915ChanMaskSet+0x84>)
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 800cee8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 800ceec:	f504 70d8 	add.w	r0, r4, #432	@ 0x1b0
 800cef0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 800cef4:	4003      	ands	r3, r0
 800cef6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cefa:	3401      	adds	r4, #1
 800cefc:	b2e4      	uxtb	r4, r4
 800cefe:	2c05      	cmp	r4, #5
 800cf00:	d9ee      	bls.n	800cee0 <RegionUS915ChanMaskSet+0x40>
    return true;
 800cf02:	2001      	movs	r0, #1
 800cf04:	e7da      	b.n	800cebc <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800cf06:	4b06      	ldr	r3, [pc, #24]	@ (800cf20 <RegionUS915ChanMaskSet+0x80>)
 800cf08:	6818      	ldr	r0, [r3, #0]
 800cf0a:	2206      	movs	r2, #6
 800cf0c:	6829      	ldr	r1, [r5, #0]
 800cf0e:	f500 705b 	add.w	r0, r0, #876	@ 0x36c
 800cf12:	f7fe fc6a 	bl	800b7ea <RegionCommonChanMaskCopy>
    return true;
 800cf16:	2001      	movs	r0, #1
            break;
 800cf18:	e7d0      	b.n	800cebc <RegionUS915ChanMaskSet+0x1c>
        return false;
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	e7ce      	b.n	800cebc <RegionUS915ChanMaskSet+0x1c>
 800cf1e:	bf00      	nop
 800cf20:	200013c4 	.word	0x200013c4
 800cf24:	200013c8 	.word	0x200013c8

0800cf28 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800cf28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	460e      	mov	r6, r1
 800cf2e:	4617      	mov	r7, r2
 800cf30:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800cf32:	280d      	cmp	r0, #13
 800cf34:	bfa8      	it	ge
 800cf36:	200d      	movge	r0, #13
 800cf38:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800cf3a:	4d0f      	ldr	r5, [pc, #60]	@ (800cf78 <RegionUS915ComputeRxWindowParameters+0x50>)
 800cf3c:	4629      	mov	r1, r5
 800cf3e:	f7fe fea1 	bl	800bc84 <RegionCommonGetBandwidth>
 800cf42:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800cf44:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800cf48:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800cf4c:	4a0b      	ldr	r2, [pc, #44]	@ (800cf7c <RegionUS915ComputeRxWindowParameters+0x54>)
 800cf4e:	5cd0      	ldrb	r0, [r2, r3]
 800cf50:	f7fe fd68 	bl	800ba24 <RegionCommonComputeSymbolTimeLoRa>
 800cf54:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800cf56:	4b0a      	ldr	r3, [pc, #40]	@ (800cf80 <RegionUS915ComputeRxWindowParameters+0x58>)
 800cf58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf5a:	4798      	blx	r3
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	f104 020c 	add.w	r2, r4, #12
 800cf62:	9201      	str	r2, [sp, #4]
 800cf64:	3408      	adds	r4, #8
 800cf66:	9400      	str	r4, [sp, #0]
 800cf68:	463a      	mov	r2, r7
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	f7fe fd67 	bl	800ba40 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800cf72:	b003      	add	sp, #12
 800cf74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf76:	bf00      	nop
 800cf78:	080143c8 	.word	0x080143c8
 800cf7c:	08014408 	.word	0x08014408
 800cf80:	08014918 	.word	0x08014918

0800cf84 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800cf84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf88:	b08b      	sub	sp, #44	@ 0x2c
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800cf8e:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800cf92:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800cf94:	4b22      	ldr	r3, [pc, #136]	@ (800d020 <RegionUS915RxConfig+0x9c>)
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	4798      	blx	r3
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d13d      	bne.n	800d01a <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800cf9e:	7ce3      	ldrb	r3, [r4, #19]
 800cfa0:	b933      	cbnz	r3, 800cfb0 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800cfa2:	7823      	ldrb	r3, [r4, #0]
 800cfa4:	f003 0307 	and.w	r3, r3, #7
 800cfa8:	4a1e      	ldr	r2, [pc, #120]	@ (800d024 <RegionUS915RxConfig+0xa0>)
 800cfaa:	4f1f      	ldr	r7, [pc, #124]	@ (800d028 <RegionUS915RxConfig+0xa4>)
 800cfac:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800cfb0:	4b1e      	ldr	r3, [pc, #120]	@ (800d02c <RegionUS915RxConfig+0xa8>)
 800cfb2:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800cfb6:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 800d020 <RegionUS915RxConfig+0x9c>
 800cfba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cfbe:	4638      	mov	r0, r7
 800cfc0:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800cfc2:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800cfc6:	7ca3      	ldrb	r3, [r4, #18]
 800cfc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfca:	2001      	movs	r0, #1
 800cfcc:	9008      	str	r0, [sp, #32]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	9207      	str	r2, [sp, #28]
 800cfd2:	9206      	str	r2, [sp, #24]
 800cfd4:	9205      	str	r2, [sp, #20]
 800cfd6:	9204      	str	r2, [sp, #16]
 800cfd8:	9203      	str	r2, [sp, #12]
 800cfda:	8923      	ldrh	r3, [r4, #8]
 800cfdc:	9302      	str	r3, [sp, #8]
 800cfde:	2308      	movs	r3, #8
 800cfe0:	9301      	str	r3, [sp, #4]
 800cfe2:	9200      	str	r2, [sp, #0]
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	464a      	mov	r2, r9
 800cfe8:	78a1      	ldrb	r1, [r4, #2]
 800cfea:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800cfec:	7c63      	ldrb	r3, [r4, #17]
 800cfee:	b18b      	cbz	r3, 800d014 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800cff0:	4b0f      	ldr	r3, [pc, #60]	@ (800d030 <RegionUS915RxConfig+0xac>)
 800cff2:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800cff4:	4b0a      	ldr	r3, [pc, #40]	@ (800d020 <RegionUS915RxConfig+0x9c>)
 800cff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cff8:	310d      	adds	r1, #13
 800cffa:	b2c9      	uxtb	r1, r1
 800cffc:	2001      	movs	r0, #1
 800cffe:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d000:	4632      	mov	r2, r6
 800d002:	4639      	mov	r1, r7
 800d004:	7ce0      	ldrb	r0, [r4, #19]
 800d006:	f7fe fe4f 	bl	800bca8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800d00a:	702e      	strb	r6, [r5, #0]
    return true;
 800d00c:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800d00e:	b00b      	add	sp, #44	@ 0x2c
 800d010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800d014:	4b07      	ldr	r3, [pc, #28]	@ (800d034 <RegionUS915RxConfig+0xb0>)
 800d016:	5d99      	ldrb	r1, [r3, r6]
 800d018:	e7ec      	b.n	800cff4 <RegionUS915RxConfig+0x70>
        return false;
 800d01a:	2000      	movs	r0, #0
 800d01c:	e7f7      	b.n	800d00e <RegionUS915RxConfig+0x8a>
 800d01e:	bf00      	nop
 800d020:	08014918 	.word	0x08014918
 800d024:	000927c0 	.word	0x000927c0
 800d028:	370870a0 	.word	0x370870a0
 800d02c:	08014408 	.word	0x08014408
 800d030:	08014394 	.word	0x08014394
 800d034:	080143a4 	.word	0x080143a4

0800d038 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03c:	b08d      	sub	sp, #52	@ 0x34
 800d03e:	4604      	mov	r4, r0
 800d040:	468b      	mov	fp, r1
 800d042:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800d044:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800d048:	4b32      	ldr	r3, [pc, #200]	@ (800d114 <RegionUS915TxConfig+0xdc>)
 800d04a:	f913 a002 	ldrsb.w	sl, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800d04e:	4b32      	ldr	r3, [pc, #200]	@ (800d118 <RegionUS915TxConfig+0xe0>)
 800d050:	6818      	ldr	r0, [r3, #0]
 800d052:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 800d11c <RegionUS915TxConfig+0xe4>
 800d056:	f8d9 3000 	ldr.w	r3, [r9]
 800d05a:	7821      	ldrb	r1, [r4, #0]
 800d05c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d060:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d064:	7a49      	ldrb	r1, [r1, #9]
 800d066:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d06a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d06e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800d072:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800d076:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800d07a:	f7ff fce5 	bl	800ca48 <LimitTxPower>
 800d07e:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800d080:	4927      	ldr	r1, [pc, #156]	@ (800d120 <RegionUS915TxConfig+0xe8>)
 800d082:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d086:	f7fe fdfd 	bl	800bc84 <RegionCommonGetBandwidth>
 800d08a:	900a      	str	r0, [sp, #40]	@ 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800d08c:	2200      	movs	r2, #0
 800d08e:	4925      	ldr	r1, [pc, #148]	@ (800d124 <RegionUS915TxConfig+0xec>)
 800d090:	4630      	mov	r0, r6
 800d092:	f7fe fd11 	bl	800bab8 <RegionCommonComputeTxPower>
 800d096:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d098:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 800d128 <RegionUS915TxConfig+0xf0>
 800d09c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800d0a0:	f8d9 1000 	ldr.w	r1, [r9]
 800d0a4:	7823      	ldrb	r3, [r4, #0]
 800d0a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d0aa:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d0ae:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d0b0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800d0b4:	9308      	str	r3, [sp, #32]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	9207      	str	r2, [sp, #28]
 800d0ba:	9206      	str	r2, [sp, #24]
 800d0bc:	9205      	str	r2, [sp, #20]
 800d0be:	2501      	movs	r5, #1
 800d0c0:	9504      	str	r5, [sp, #16]
 800d0c2:	9203      	str	r2, [sp, #12]
 800d0c4:	2308      	movs	r3, #8
 800d0c6:	9302      	str	r3, [sp, #8]
 800d0c8:	9501      	str	r5, [sp, #4]
 800d0ca:	f8cd a000 	str.w	sl, [sp]
 800d0ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800d0d8:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d0da:	f8d9 2000 	ldr.w	r2, [r9]
 800d0de:	7823      	ldrb	r3, [r4, #0]
 800d0e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d0e4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800d0e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d0ec:	f7fe fe0e 	bl	800bd0c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800d0f0:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 800d0f4:	7b21      	ldrb	r1, [r4, #12]
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d0fa:	89a1      	ldrh	r1, [r4, #12]
 800d0fc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d100:	f7ff fc84 	bl	800ca0c <GetTimeOnAir>
 800d104:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800d106:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800d10a:	4628      	mov	r0, r5
 800d10c:	b00d      	add	sp, #52	@ 0x34
 800d10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d112:	bf00      	nop
 800d114:	08014408 	.word	0x08014408
 800d118:	200013c8 	.word	0x200013c8
 800d11c:	200013c4 	.word	0x200013c4
 800d120:	080143c8 	.word	0x080143c8
 800d124:	41f00000 	.word	0x41f00000
 800d128:	08014918 	.word	0x08014918

0800d12c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d12c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d130:	b091      	sub	sp, #68	@ 0x44
 800d132:	4605      	mov	r5, r0
 800d134:	4688      	mov	r8, r1
 800d136:	4617      	mov	r7, r2
 800d138:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d13a:	2400      	movs	r4, #0
 800d13c:	940e      	str	r4, [sp, #56]	@ 0x38
 800d13e:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 800d142:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d144:	940c      	str	r4, [sp, #48]	@ 0x30
 800d146:	940d      	str	r4, [sp, #52]	@ 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800d148:	4b9d      	ldr	r3, [pc, #628]	@ (800d3c0 <RegionUS915LinkAdrReq+0x294>)
 800d14a:	6819      	ldr	r1, [r3, #0]
 800d14c:	2206      	movs	r2, #6
 800d14e:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 800d152:	a80b      	add	r0, sp, #44	@ 0x2c
 800d154:	f7fe fb49 	bl	800b7ea <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d158:	e00d      	b.n	800d176 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800d15a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d15e:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0xFFFF;
 800d162:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0xFFFF;
 800d166:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0xFFFF;
 800d16a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800d16e:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 800d172:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d176:	7a2b      	ldrb	r3, [r5, #8]
 800d178:	42a3      	cmp	r3, r4
 800d17a:	f240 8084 	bls.w	800d286 <RegionUS915LinkAdrReq+0x15a>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d17e:	6868      	ldr	r0, [r5, #4]
 800d180:	a90e      	add	r1, sp, #56	@ 0x38
 800d182:	4420      	add	r0, r4
 800d184:	f7fe fbe2 	bl	800b94c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d188:	4603      	mov	r3, r0
 800d18a:	2800      	cmp	r0, #0
 800d18c:	d07b      	beq.n	800d286 <RegionUS915LinkAdrReq+0x15a>
        bytesProcessed += nextIndex;
 800d18e:	4423      	add	r3, r4
 800d190:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 800d192:	f89d c03b 	ldrb.w	ip, [sp, #59]	@ 0x3b
 800d196:	f1bc 0f06 	cmp.w	ip, #6
 800d19a:	d0de      	beq.n	800d15a <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800d19c:	f1bc 0f07 	cmp.w	ip, #7
 800d1a0:	d00a      	beq.n	800d1b8 <RegionUS915LinkAdrReq+0x8c>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800d1a2:	f1bc 0f05 	cmp.w	ip, #5
 800d1a6:	d06a      	beq.n	800d27e <RegionUS915LinkAdrReq+0x152>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800d1a8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800d1ac:	aa10      	add	r2, sp, #64	@ 0x40
 800d1ae:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800d1b2:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800d1b6:	e7de      	b.n	800d176 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0x0000;
 800d1be:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0x0000;
 800d1c2:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0x0000;
 800d1c6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800d1ca:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 800d1ce:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800d1d2:	e7d0      	b.n	800d176 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800d1d4:	aa10      	add	r2, sp, #64	@ 0x40
 800d1d6:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d1da:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d1de:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 800d1e2:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800d1e6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 800d1f0:	3101      	adds	r1, #1
 800d1f2:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800d1f4:	f10c 0c01 	add.w	ip, ip, #1
 800d1f8:	fa5f fc8c 	uxtb.w	ip, ip
 800d1fc:	f1bc 0f07 	cmp.w	ip, #7
 800d200:	d8b9      	bhi.n	800d176 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800d202:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 800d206:	2301      	movs	r3, #1
 800d208:	fa03 f30c 	lsl.w	r3, r3, ip
 800d20c:	421a      	tst	r2, r3
 800d20e:	d011      	beq.n	800d234 <RegionUS915LinkAdrReq+0x108>
                    if( ( i % 2 ) == 0 )
 800d210:	f01c 0f01 	tst.w	ip, #1
 800d214:	d1de      	bne.n	800d1d4 <RegionUS915LinkAdrReq+0xa8>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800d216:	aa10      	add	r2, sp, #64	@ 0x40
 800d218:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d21c:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d220:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 800d224:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800d228:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800d22c:	4313      	orrs	r3, r2
 800d22e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800d232:	e7df      	b.n	800d1f4 <RegionUS915LinkAdrReq+0xc8>
                    if( ( i % 2 ) == 0 )
 800d234:	f01c 0f01 	tst.w	ip, #1
 800d238:	d110      	bne.n	800d25c <RegionUS915LinkAdrReq+0x130>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800d23a:	aa10      	add	r2, sp, #64	@ 0x40
 800d23c:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d240:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d244:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800d248:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d24c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800d250:	43db      	mvns	r3, r3
 800d252:	b21b      	sxth	r3, r3
 800d254:	4013      	ands	r3, r2
 800d256:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800d25a:	e7cb      	b.n	800d1f4 <RegionUS915LinkAdrReq+0xc8>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800d25c:	aa10      	add	r2, sp, #64	@ 0x40
 800d25e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800d262:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800d266:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d26a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800d26e:	43db      	mvns	r3, r3
 800d270:	b21b      	sxth	r3, r3
 800d272:	4013      	ands	r3, r2
 800d274:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 800d278:	3101      	adds	r1, #1
 800d27a:	b2c9      	uxtb	r1, r1
 800d27c:	e7ba      	b.n	800d1f4 <RegionUS915LinkAdrReq+0xc8>
            for( uint8_t i = 0; i <= 7; i++ )
 800d27e:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800d282:	4661      	mov	r1, ip
 800d284:	e7ba      	b.n	800d1fc <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800d286:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 800d28a:	2b03      	cmp	r3, #3
 800d28c:	dd58      	ble.n	800d340 <RegionUS915LinkAdrReq+0x214>
 800d28e:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d292:	2302      	movs	r3, #2
 800d294:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800d298:	7a6b      	ldrb	r3, [r5, #9]
 800d29a:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800d29e:	a809      	add	r0, sp, #36	@ 0x24
 800d2a0:	f7ff fbee 	bl	800ca80 <RegionUS915GetPhyParam>
 800d2a4:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800d2a6:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d2aa:	7aab      	ldrb	r3, [r5, #10]
 800d2ac:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d2b0:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 800d2b4:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d2b8:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 800d2bc:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d2c0:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800d2c4:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d2c8:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800d2cc:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d2d0:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800d2d4:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d2d8:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800d2dc:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800d2e0:	2348      	movs	r3, #72	@ 0x48
 800d2e2:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800d2e6:	ab0b      	add	r3, sp, #44	@ 0x2c
 800d2e8:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d2ea:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800d2ee:	2304      	movs	r3, #4
 800d2f0:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d2f4:	4b32      	ldr	r3, [pc, #200]	@ (800d3c0 <RegionUS915LinkAdrReq+0x294>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800d2fa:	230e      	movs	r3, #14
 800d2fc:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800d300:	2300      	movs	r3, #0
 800d302:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d306:	682b      	ldr	r3, [r5, #0]
 800d308:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d30a:	ab0e      	add	r3, sp, #56	@ 0x38
 800d30c:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 800d310:	f10d 0139 	add.w	r1, sp, #57	@ 0x39
 800d314:	4668      	mov	r0, sp
 800d316:	f7fe fb37 	bl	800b988 <RegionCommonLinkAdrReqVerifyParams>
 800d31a:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d31c:	2807      	cmp	r0, #7
 800d31e:	d01c      	beq.n	800d35a <RegionUS915LinkAdrReq+0x22e>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d320:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 800d324:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800d328:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 800d32c:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800d32e:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800d332:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800d334:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800d336:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800d338:	4628      	mov	r0, r5
 800d33a:	b011      	add	sp, #68	@ 0x44
 800d33c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800d340:	2204      	movs	r2, #4
 800d342:	2100      	movs	r1, #0
 800d344:	a80b      	add	r0, sp, #44	@ 0x2c
 800d346:	f7fe fa3a 	bl	800b7be <RegionCommonCountChannels>
 800d34a:	2801      	cmp	r0, #1
 800d34c:	d902      	bls.n	800d354 <RegionUS915LinkAdrReq+0x228>
 800d34e:	f04f 0907 	mov.w	r9, #7
 800d352:	e79e      	b.n	800d292 <RegionUS915LinkAdrReq+0x166>
        status &= 0xFE; // Channel mask KO
 800d354:	f04f 0906 	mov.w	r9, #6
 800d358:	e79b      	b.n	800d292 <RegionUS915LinkAdrReq+0x166>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800d35a:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800d3c0 <RegionUS915LinkAdrReq+0x294>
 800d35e:	f8d9 0000 	ldr.w	r0, [r9]
 800d362:	2206      	movs	r2, #6
 800d364:	a90b      	add	r1, sp, #44	@ 0x2c
 800d366:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800d36a:	f7fe fa3e 	bl	800b7ea <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800d36e:	4b15      	ldr	r3, [pc, #84]	@ (800d3c4 <RegionUS915LinkAdrReq+0x298>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f8b3 1090 	ldrh.w	r1, [r3, #144]	@ 0x90
 800d376:	f8d9 2000 	ldr.w	r2, [r9]
 800d37a:	f8b2 0360 	ldrh.w	r0, [r2, #864]	@ 0x360
 800d37e:	4001      	ands	r1, r0
 800d380:	f8a3 1090 	strh.w	r1, [r3, #144]	@ 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800d384:	f8b3 1092 	ldrh.w	r1, [r3, #146]	@ 0x92
 800d388:	f8b2 0362 	ldrh.w	r0, [r2, #866]	@ 0x362
 800d38c:	4001      	ands	r1, r0
 800d38e:	f8a3 1092 	strh.w	r1, [r3, #146]	@ 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800d392:	f8b3 1094 	ldrh.w	r1, [r3, #148]	@ 0x94
 800d396:	f8b2 0364 	ldrh.w	r0, [r2, #868]	@ 0x364
 800d39a:	4001      	ands	r1, r0
 800d39c:	f8a3 1094 	strh.w	r1, [r3, #148]	@ 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800d3a0:	f8b3 1096 	ldrh.w	r1, [r3, #150]	@ 0x96
 800d3a4:	f8b2 0366 	ldrh.w	r0, [r2, #870]	@ 0x366
 800d3a8:	4001      	ands	r1, r0
 800d3aa:	f8a3 1096 	strh.w	r1, [r3, #150]	@ 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800d3ae:	f8b2 1368 	ldrh.w	r1, [r2, #872]	@ 0x368
 800d3b2:	f8a3 1098 	strh.w	r1, [r3, #152]	@ 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800d3b6:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 800d3ba:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 800d3be:	e7af      	b.n	800d320 <RegionUS915LinkAdrReq+0x1f4>
 800d3c0:	200013c4 	.word	0x200013c4
 800d3c4:	200013c8 	.word	0x200013c8

0800d3c8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d3c8:	b538      	push	{r3, r4, r5, lr}
 800d3ca:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800d3cc:	6840      	ldr	r0, [r0, #4]
 800d3ce:	f7ff faed 	bl	800c9ac <VerifyRfFreq>
 800d3d2:	b310      	cbz	r0, 800d41a <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800d3d4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800d3d6:	220d      	movs	r2, #13
 800d3d8:	2108      	movs	r1, #8
 800d3da:	f994 0000 	ldrsb.w	r0, [r4]
 800d3de:	f7fe f990 	bl	800b702 <RegionCommonValueInRange>
 800d3e2:	b908      	cbnz	r0, 800d3e8 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800d3e4:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800d3e8:	2207      	movs	r2, #7
 800d3ea:	2105      	movs	r1, #5
 800d3ec:	f994 0000 	ldrsb.w	r0, [r4]
 800d3f0:	f7fe f987 	bl	800b702 <RegionCommonValueInRange>
 800d3f4:	2801      	cmp	r0, #1
 800d3f6:	d003      	beq.n	800d400 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800d3f8:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800d3fc:	2b0d      	cmp	r3, #13
 800d3fe:	dd01      	ble.n	800d404 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800d400:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800d404:	2203      	movs	r2, #3
 800d406:	2100      	movs	r1, #0
 800d408:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d40c:	f7fe f979 	bl	800b702 <RegionCommonValueInRange>
 800d410:	b908      	cbnz	r0, 800d416 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d412:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800d416:	4628      	mov	r0, r5
 800d418:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800d41a:	2506      	movs	r5, #6
 800d41c:	e7db      	b.n	800d3d6 <RegionUS915RxParamSetupReq+0xe>

0800d41e <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800d41e:	f04f 30ff 	mov.w	r0, #4294967295
 800d422:	4770      	bx	lr

0800d424 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800d424:	f04f 30ff 	mov.w	r0, #4294967295
 800d428:	4770      	bx	lr

0800d42a <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800d42a:	f04f 30ff 	mov.w	r0, #4294967295
 800d42e:	4770      	bx	lr

0800d430 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800d430:	b9b1      	cbnz	r1, 800d460 <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800d432:	4b10      	ldr	r3, [pc, #64]	@ (800d474 <RegionUS915AlternateDr+0x44>)
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	f892 309d 	ldrb.w	r3, [r2, #157]	@ 0x9d
 800d43a:	3301      	adds	r3, #1
 800d43c:	f882 309d 	strb.w	r3, [r2, #157]	@ 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800d440:	4b0c      	ldr	r3, [pc, #48]	@ (800d474 <RegionUS915AlternateDr+0x44>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 800d448:	4b0b      	ldr	r3, [pc, #44]	@ (800d478 <RegionUS915AlternateDr+0x48>)
 800d44a:	fba3 1302 	umull	r1, r3, r3, r2
 800d44e:	085b      	lsrs	r3, r3, #1
 800d450:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800d454:	1ad2      	subs	r2, r2, r3
 800d456:	f012 0fff 	tst.w	r2, #255	@ 0xff
 800d45a:	d009      	beq.n	800d470 <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800d45c:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800d45e:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800d460:	4b04      	ldr	r3, [pc, #16]	@ (800d474 <RegionUS915AlternateDr+0x44>)
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	f892 309d 	ldrb.w	r3, [r2, #157]	@ 0x9d
 800d468:	3b01      	subs	r3, #1
 800d46a:	f882 309d 	strb.w	r3, [r2, #157]	@ 0x9d
 800d46e:	e7e7      	b.n	800d440 <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 800d470:	2004      	movs	r0, #4
 800d472:	4770      	bx	lr
 800d474:	200013c8 	.word	0x200013c8
 800d478:	38e38e39 	.word	0x38e38e39

0800d47c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d480:	b0a4      	sub	sp, #144	@ 0x90
 800d482:	4604      	mov	r4, r0
 800d484:	460e      	mov	r6, r1
 800d486:	4690      	mov	r8, r2
 800d488:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800d48a:	2500      	movs	r5, #0
 800d48c:	f88d 508f 	strb.w	r5, [sp, #143]	@ 0x8f
    uint8_t nbRestrictedChannels = 0;
 800d490:	f88d 508e 	strb.w	r5, [sp, #142]	@ 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800d494:	9511      	str	r5, [sp, #68]	@ 0x44
 800d496:	2244      	movs	r2, #68	@ 0x44
 800d498:	4629      	mov	r1, r5
 800d49a:	a812      	add	r0, sp, #72	@ 0x48
 800d49c:	f004 fc91 	bl	8011dc2 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800d4a0:	4b4e      	ldr	r3, [pc, #312]	@ (800d5dc <RegionUS915NextChannel+0x160>)
 800d4a2:	6818      	ldr	r0, [r3, #0]
 800d4a4:	2204      	movs	r2, #4
 800d4a6:	4629      	mov	r1, r5
 800d4a8:	3090      	adds	r0, #144	@ 0x90
 800d4aa:	f7fe f988 	bl	800b7be <RegionCommonCountChannels>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d054      	beq.n	800d55c <RegionUS915NextChannel+0xe0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800d4b2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d4b6:	2b03      	cmp	r3, #3
 800d4b8:	dd0a      	ble.n	800d4d0 <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800d4ba:	4b48      	ldr	r3, [pc, #288]	@ (800d5dc <RegionUS915NextChannel+0x160>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800d4c2:	b92a      	cbnz	r2, 800d4d0 <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800d4c4:	4a46      	ldr	r2, [pc, #280]	@ (800d5e0 <RegionUS915NextChannel+0x164>)
 800d4c6:	6812      	ldr	r2, [r2, #0]
 800d4c8:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 800d4cc:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d4d0:	7a63      	ldrb	r3, [r4, #9]
 800d4d2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d4d6:	7a23      	ldrb	r3, [r4, #8]
 800d4d8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800d4dc:	4b3f      	ldr	r3, [pc, #252]	@ (800d5dc <RegionUS915NextChannel+0x160>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800d4e4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d4e6:	4a3e      	ldr	r2, [pc, #248]	@ (800d5e0 <RegionUS915NextChannel+0x164>)
 800d4e8:	6812      	ldr	r2, [r2, #0]
 800d4ea:	9205      	str	r2, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800d4ec:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800d4ee:	2348      	movs	r3, #72	@ 0x48
 800d4f0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d4f8:	6823      	ldr	r3, [r4, #0]
 800d4fa:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d4fc:	6863      	ldr	r3, [r4, #4]
 800d4fe:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d500:	7aa3      	ldrb	r3, [r4, #10]
 800d502:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800d506:	2301      	movs	r3, #1
 800d508:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d50c:	ab0c      	add	r3, sp, #48	@ 0x30
 800d50e:	f104 020c 	add.w	r2, r4, #12
 800d512:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d516:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d51a:	7d23      	ldrb	r3, [r4, #20]
 800d51c:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d520:	8ae1      	ldrh	r1, [r4, #22]
 800d522:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800d526:	f7ff fa71 	bl	800ca0c <GetTimeOnAir>
 800d52a:	900f      	str	r0, [sp, #60]	@ 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d52c:	ab03      	add	r3, sp, #12
 800d52e:	9310      	str	r3, [sp, #64]	@ 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d530:	f8cd 8004 	str.w	r8, [sp, #4]
 800d534:	f10d 038e 	add.w	r3, sp, #142	@ 0x8e
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	f10d 038f 	add.w	r3, sp, #143	@ 0x8f
 800d53e:	aa11      	add	r2, sp, #68	@ 0x44
 800d540:	4639      	mov	r1, r7
 800d542:	a809      	add	r0, sp, #36	@ 0x24
 800d544:	f7fe fb31 	bl	800bbaa <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d548:	4605      	mov	r5, r0
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d141      	bne.n	800d5d2 <RegionUS915NextChannel+0x156>
    {
        if( nextChanParams->Joined == true )
 800d54e:	7a63      	ldrb	r3, [r4, #9]
 800d550:	b99b      	cbnz	r3, 800d57a <RegionUS915NextChannel+0xfe>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800d552:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d556:	b1eb      	cbz	r3, 800d594 <RegionUS915NextChannel+0x118>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800d558:	4603      	mov	r3, r0
 800d55a:	e029      	b.n	800d5b0 <RegionUS915NextChannel+0x134>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800d55c:	4d1f      	ldr	r5, [pc, #124]	@ (800d5dc <RegionUS915NextChannel+0x160>)
 800d55e:	6828      	ldr	r0, [r5, #0]
 800d560:	4b1f      	ldr	r3, [pc, #124]	@ (800d5e0 <RegionUS915NextChannel+0x164>)
 800d562:	6819      	ldr	r1, [r3, #0]
 800d564:	2204      	movs	r2, #4
 800d566:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 800d56a:	3090      	adds	r0, #144	@ 0x90
 800d56c:	f7fe f93d 	bl	800b7ea <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800d570:	682b      	ldr	r3, [r5, #0]
 800d572:	2200      	movs	r2, #0
 800d574:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
 800d578:	e79b      	b.n	800d4b2 <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d57a:	f89d 108f 	ldrb.w	r1, [sp, #143]	@ 0x8f
 800d57e:	3901      	subs	r1, #1
 800d580:	f000 ff76 	bl	800e470 <randr>
 800d584:	f100 0390 	add.w	r3, r0, #144	@ 0x90
 800d588:	eb0d 0003 	add.w	r0, sp, r3
 800d58c:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800d590:	7033      	strb	r3, [r6, #0]
 800d592:	e017      	b.n	800d5c4 <RegionUS915NextChannel+0x148>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800d594:	4b11      	ldr	r3, [pc, #68]	@ (800d5dc <RegionUS915NextChannel+0x160>)
 800d596:	6818      	ldr	r0, [r3, #0]
 800d598:	4632      	mov	r2, r6
 800d59a:	f100 019c 	add.w	r1, r0, #156	@ 0x9c
 800d59e:	3090      	adds	r0, #144	@ 0x90
 800d5a0:	f7fd ff90 	bl	800b4c4 <RegionBaseUSComputeNext125kHzJoinChannel>
 800d5a4:	2803      	cmp	r0, #3
 800d5a6:	d10d      	bne.n	800d5c4 <RegionUS915NextChannel+0x148>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800d5a8:	4605      	mov	r5, r0
 800d5aa:	e012      	b.n	800d5d2 <RegionUS915NextChannel+0x156>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800d5b0:	4a0a      	ldr	r2, [pc, #40]	@ (800d5dc <RegionUS915NextChannel+0x160>)
 800d5b2:	6812      	ldr	r2, [r2, #0]
 800d5b4:	f892 0098 	ldrb.w	r0, [r2, #152]	@ 0x98
 800d5b8:	4118      	asrs	r0, r3
 800d5ba:	f010 0f01 	tst.w	r0, #1
 800d5be:	d0f5      	beq.n	800d5ac <RegionUS915NextChannel+0x130>
                }
                *channel = 64 + i;
 800d5c0:	3340      	adds	r3, #64	@ 0x40
 800d5c2:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800d5c4:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <RegionUS915NextChannel+0x160>)
 800d5c6:	6818      	ldr	r0, [r3, #0]
 800d5c8:	2248      	movs	r2, #72	@ 0x48
 800d5ca:	7831      	ldrb	r1, [r6, #0]
 800d5cc:	3090      	adds	r0, #144	@ 0x90
 800d5ce:	f7fe f8da 	bl	800b786 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	b024      	add	sp, #144	@ 0x90
 800d5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5da:	bf00      	nop
 800d5dc:	200013c8 	.word	0x200013c8
 800d5e0:	200013c4 	.word	0x200013c4

0800d5e4 <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 800d5e8:	4b14      	ldr	r3, [pc, #80]	@ (800d63c <RegionUS915SetContinuousWave+0x58>)
 800d5ea:	6819      	ldr	r1, [r3, #0]
 800d5ec:	4d14      	ldr	r5, [pc, #80]	@ (800d640 <RegionUS915SetContinuousWave+0x5c>)
 800d5ee:	682b      	ldr	r3, [r5, #0]
 800d5f0:	7802      	ldrb	r2, [r0, #0]
 800d5f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d5f6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d5fa:	7a52      	ldrb	r2, [r2, #9]
 800d5fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d600:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d604:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800d608:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800d60c:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800d610:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d614:	f7ff fa18 	bl	800ca48 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800d618:	682a      	ldr	r2, [r5, #0]
 800d61a:	7823      	ldrb	r3, [r4, #0]
 800d61c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d620:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800d624:	2200      	movs	r2, #0
 800d626:	4907      	ldr	r1, [pc, #28]	@ (800d644 <RegionUS915SetContinuousWave+0x60>)
 800d628:	f7fe fa46 	bl	800bab8 <RegionCommonComputeTxPower>
 800d62c:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800d62e:	4b06      	ldr	r3, [pc, #24]	@ (800d648 <RegionUS915SetContinuousWave+0x64>)
 800d630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d632:	89a2      	ldrh	r2, [r4, #12]
 800d634:	4628      	mov	r0, r5
 800d636:	4798      	blx	r3
#endif /* REGION_US915 */
}
 800d638:	bd38      	pop	{r3, r4, r5, pc}
 800d63a:	bf00      	nop
 800d63c:	200013c8 	.word	0x200013c8
 800d640:	200013c4 	.word	0x200013c4
 800d644:	41f00000 	.word	0x41f00000
 800d648:	08014918 	.word	0x08014918

0800d64c <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800d64c:	4b04      	ldr	r3, [pc, #16]	@ (800d660 <RegionUS915ApplyDrOffset+0x14>)
 800d64e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d652:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800d654:	2800      	cmp	r0, #0
 800d656:	db01      	blt.n	800d65c <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800d658:	b2c0      	uxtb	r0, r0
 800d65a:	4770      	bx	lr
        datarate = DR_0;
 800d65c:	2000      	movs	r0, #0
 800d65e:	e7fb      	b.n	800d658 <RegionUS915ApplyDrOffset+0xc>
 800d660:	080143b4 	.word	0x080143b4

0800d664 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d664:	b510      	push	{r4, lr}
 800d666:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800d668:	2210      	movs	r2, #16
 800d66a:	2100      	movs	r1, #0
 800d66c:	30f1      	adds	r0, #241	@ 0xf1
 800d66e:	f000 ff24 	bl	800e4ba <memset1>
    ctx->M_n = 0;
 800d672:	2100      	movs	r1, #0
 800d674:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d678:	22f0      	movs	r2, #240	@ 0xf0
 800d67a:	4620      	mov	r0, r4
 800d67c:	f000 ff1d 	bl	800e4ba <memset1>
}
 800d680:	bd10      	pop	{r4, pc}

0800d682 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d682:	b508      	push	{r3, lr}
 800d684:	4602      	mov	r2, r0
 800d686:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d688:	2110      	movs	r1, #16
 800d68a:	f000 fb3b 	bl	800dd04 <lorawan_aes_set_key>
}
 800d68e:	bd08      	pop	{r3, pc}

0800d690 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d694:	b084      	sub	sp, #16
 800d696:	4604      	mov	r4, r0
 800d698:	460d      	mov	r5, r1
 800d69a:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d69c:	f8d0 3114 	ldr.w	r3, [r0, #276]	@ 0x114
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d054      	beq.n	800d74e <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d6a4:	f1c3 0810 	rsb	r8, r3, #16
 800d6a8:	4647      	mov	r7, r8
 800d6aa:	4590      	cmp	r8, r2
 800d6ac:	bf28      	it	cs
 800d6ae:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d6b0:	f200 1001 	addw	r0, r0, #257	@ 0x101
 800d6b4:	b2ba      	uxth	r2, r7
 800d6b6:	4418      	add	r0, r3
 800d6b8:	f000 fee7 	bl	800e48a <memcpy1>
        ctx->M_n += mlen;
 800d6bc:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 800d6c0:	443b      	add	r3, r7
 800d6c2:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d6c6:	2b0f      	cmp	r3, #15
 800d6c8:	d94d      	bls.n	800d766 <AES_CMAC_Update+0xd6>
 800d6ca:	45b0      	cmp	r8, r6
 800d6cc:	d24b      	bcs.n	800d766 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	e008      	b.n	800d6e4 <AES_CMAC_Update+0x54>
 800d6d2:	18e2      	adds	r2, r4, r3
 800d6d4:	f892 10f1 	ldrb.w	r1, [r2, #241]	@ 0xf1
 800d6d8:	f892 0101 	ldrb.w	r0, [r2, #257]	@ 0x101
 800d6dc:	4041      	eors	r1, r0
 800d6de:	f882 10f1 	strb.w	r1, [r2, #241]	@ 0xf1
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	2b0f      	cmp	r3, #15
 800d6e6:	ddf4      	ble.n	800d6d2 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d6e8:	f104 08f1 	add.w	r8, r4, #241	@ 0xf1
 800d6ec:	2210      	movs	r2, #16
 800d6ee:	4641      	mov	r1, r8
 800d6f0:	4668      	mov	r0, sp
 800d6f2:	f000 feca 	bl	800e48a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d6f6:	4622      	mov	r2, r4
 800d6f8:	4669      	mov	r1, sp
 800d6fa:	4668      	mov	r0, sp
 800d6fc:	f000 fb86 	bl	800de0c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d700:	2210      	movs	r2, #16
 800d702:	4669      	mov	r1, sp
 800d704:	4640      	mov	r0, r8
 800d706:	f000 fec0 	bl	800e48a <memcpy1>

        data += mlen;
 800d70a:	443d      	add	r5, r7
        len -= mlen;
 800d70c:	1bf6      	subs	r6, r6, r7
 800d70e:	e01e      	b.n	800d74e <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800d710:	eb04 0e03 	add.w	lr, r4, r3
 800d714:	f89e c0f1 	ldrb.w	ip, [lr, #241]	@ 0xf1
 800d718:	5cea      	ldrb	r2, [r5, r3]
 800d71a:	ea8c 0c02 	eor.w	ip, ip, r2
 800d71e:	f88e c0f1 	strb.w	ip, [lr, #241]	@ 0xf1
 800d722:	3301      	adds	r3, #1
 800d724:	2b0f      	cmp	r3, #15
 800d726:	ddf3      	ble.n	800d710 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d728:	f104 07f1 	add.w	r7, r4, #241	@ 0xf1
 800d72c:	2210      	movs	r2, #16
 800d72e:	4639      	mov	r1, r7
 800d730:	4668      	mov	r0, sp
 800d732:	f000 feaa 	bl	800e48a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d736:	4622      	mov	r2, r4
 800d738:	4669      	mov	r1, sp
 800d73a:	4668      	mov	r0, sp
 800d73c:	f000 fb66 	bl	800de0c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d740:	2210      	movs	r2, #16
 800d742:	4669      	mov	r1, sp
 800d744:	4638      	mov	r0, r7
 800d746:	f000 fea0 	bl	800e48a <memcpy1>

        data += 16;
 800d74a:	3510      	adds	r5, #16
        len -= 16;
 800d74c:	3e10      	subs	r6, #16
    while( len > 16 )
 800d74e:	2e10      	cmp	r6, #16
 800d750:	d901      	bls.n	800d756 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800d752:	2300      	movs	r3, #0
 800d754:	e7e6      	b.n	800d724 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d756:	b2b2      	uxth	r2, r6
 800d758:	4629      	mov	r1, r5
 800d75a:	f204 1001 	addw	r0, r4, #257	@ 0x101
 800d75e:	f000 fe94 	bl	800e48a <memcpy1>
    ctx->M_n = len;
 800d762:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
}
 800d766:	b004      	add	sp, #16
 800d768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d76c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d76c:	b530      	push	{r4, r5, lr}
 800d76e:	b089      	sub	sp, #36	@ 0x24
 800d770:	4605      	mov	r5, r0
 800d772:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d774:	2210      	movs	r2, #16
 800d776:	2100      	movs	r1, #0
 800d778:	eb0d 0002 	add.w	r0, sp, r2
 800d77c:	f000 fe9d 	bl	800e4ba <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d780:	4622      	mov	r2, r4
 800d782:	a904      	add	r1, sp, #16
 800d784:	4608      	mov	r0, r1
 800d786:	f000 fb41 	bl	800de0c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d78a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	db01      	blt.n	800d796 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800d792:	2300      	movs	r3, #0
 800d794:	e030      	b.n	800d7f8 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800d796:	2300      	movs	r3, #0
 800d798:	2b0e      	cmp	r3, #14
 800d79a:	dc11      	bgt.n	800d7c0 <AES_CMAC_Final+0x54>
 800d79c:	f103 0220 	add.w	r2, r3, #32
 800d7a0:	eb0d 0102 	add.w	r1, sp, r2
 800d7a4:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	f103 0220 	add.w	r2, r3, #32
 800d7ae:	446a      	add	r2, sp
 800d7b0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d7b4:	09d2      	lsrs	r2, r2, #7
 800d7b6:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d7ba:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d7be:	e7eb      	b.n	800d798 <AES_CMAC_Final+0x2c>
 800d7c0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d7c4:	005b      	lsls	r3, r3, #1
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800d7cc:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 800d7d0:	f88d 301f 	strb.w	r3, [sp, #31]
 800d7d4:	e017      	b.n	800d806 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800d7d6:	f103 0220 	add.w	r2, r3, #32
 800d7da:	eb0d 0102 	add.w	r1, sp, r2
 800d7de:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	f103 0220 	add.w	r2, r3, #32
 800d7e8:	446a      	add	r2, sp
 800d7ea:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d7ee:	09d2      	lsrs	r2, r2, #7
 800d7f0:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d7f4:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d7f8:	2b0e      	cmp	r3, #14
 800d7fa:	ddec      	ble.n	800d7d6 <AES_CMAC_Final+0x6a>
 800d7fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d800:	005b      	lsls	r3, r3, #1
 800d802:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800d806:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 800d80a:	2810      	cmp	r0, #16
 800d80c:	d014      	beq.n	800d838 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800d80e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d812:	2b00      	cmp	r3, #0
 800d814:	db30      	blt.n	800d878 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800d816:	2300      	movs	r3, #0
 800d818:	e041      	b.n	800d89e <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800d81a:	18e1      	adds	r1, r4, r3
 800d81c:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 800d820:	f103 0020 	add.w	r0, r3, #32
 800d824:	4468      	add	r0, sp
 800d826:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800d82a:	4042      	eors	r2, r0
 800d82c:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 800d830:	3301      	adds	r3, #1
 800d832:	2b0f      	cmp	r3, #15
 800d834:	ddf1      	ble.n	800d81a <AES_CMAC_Final+0xae>
 800d836:	e059      	b.n	800d8ec <AES_CMAC_Final+0x180>
 800d838:	2300      	movs	r3, #0
 800d83a:	e7fa      	b.n	800d832 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800d83c:	f103 0220 	add.w	r2, r3, #32
 800d840:	eb0d 0102 	add.w	r1, sp, r2
 800d844:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800d848:	3301      	adds	r3, #1
 800d84a:	f103 0220 	add.w	r2, r3, #32
 800d84e:	446a      	add	r2, sp
 800d850:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d854:	09d2      	lsrs	r2, r2, #7
 800d856:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800d85a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d85e:	2b0e      	cmp	r3, #14
 800d860:	ddec      	ble.n	800d83c <AES_CMAC_Final+0xd0>
 800d862:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800d86e:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 800d872:	f88d 301f 	strb.w	r3, [sp, #31]
 800d876:	e019      	b.n	800d8ac <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800d878:	2300      	movs	r3, #0
 800d87a:	e7f0      	b.n	800d85e <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800d87c:	f103 0220 	add.w	r2, r3, #32
 800d880:	eb0d 0102 	add.w	r1, sp, r2
 800d884:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800d888:	3301      	adds	r3, #1
 800d88a:	f103 0220 	add.w	r2, r3, #32
 800d88e:	446a      	add	r2, sp
 800d890:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d894:	09d2      	lsrs	r2, r2, #7
 800d896:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800d89a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d89e:	2b0e      	cmp	r3, #14
 800d8a0:	ddec      	ble.n	800d87c <AES_CMAC_Final+0x110>
 800d8a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d8a6:	005b      	lsls	r3, r3, #1
 800d8a8:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800d8ac:	4420      	add	r0, r4
 800d8ae:	2380      	movs	r3, #128	@ 0x80
 800d8b0:	f880 3101 	strb.w	r3, [r0, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800d8b4:	e003      	b.n	800d8be <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800d8b6:	4423      	add	r3, r4
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800d8be:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 800d8c8:	2b0f      	cmp	r3, #15
 800d8ca:	d9f4      	bls.n	800d8b6 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	e00b      	b.n	800d8e8 <AES_CMAC_Final+0x17c>
 800d8d0:	18e1      	adds	r1, r4, r3
 800d8d2:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 800d8d6:	f103 0020 	add.w	r0, r3, #32
 800d8da:	4468      	add	r0, sp
 800d8dc:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800d8e0:	4042      	eors	r2, r0
 800d8e2:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	2b0f      	cmp	r3, #15
 800d8ea:	ddf1      	ble.n	800d8d0 <AES_CMAC_Final+0x164>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	e009      	b.n	800d904 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800d8f0:	18e2      	adds	r2, r4, r3
 800d8f2:	f892 c0f1 	ldrb.w	ip, [r2, #241]	@ 0xf1
 800d8f6:	f892 1101 	ldrb.w	r1, [r2, #257]	@ 0x101
 800d8fa:	ea8c 0c01 	eor.w	ip, ip, r1
 800d8fe:	f882 c0f1 	strb.w	ip, [r2, #241]	@ 0xf1
 800d902:	3301      	adds	r3, #1
 800d904:	2b0f      	cmp	r3, #15
 800d906:	ddf3      	ble.n	800d8f0 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d908:	2210      	movs	r2, #16
 800d90a:	f104 01f1 	add.w	r1, r4, #241	@ 0xf1
 800d90e:	4668      	mov	r0, sp
 800d910:	f000 fdbb 	bl	800e48a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800d914:	4622      	mov	r2, r4
 800d916:	4629      	mov	r1, r5
 800d918:	4668      	mov	r0, sp
 800d91a:	f000 fa77 	bl	800de0c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800d91e:	2210      	movs	r2, #16
 800d920:	2100      	movs	r1, #0
 800d922:	eb0d 0002 	add.w	r0, sp, r2
 800d926:	f000 fdc8 	bl	800e4ba <memset1>
}
 800d92a:	b009      	add	sp, #36	@ 0x24
 800d92c:	bd30      	pop	{r4, r5, pc}

0800d92e <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800d92e:	780b      	ldrb	r3, [r1, #0]
 800d930:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800d932:	784b      	ldrb	r3, [r1, #1]
 800d934:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800d936:	788b      	ldrb	r3, [r1, #2]
 800d938:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800d93a:	78cb      	ldrb	r3, [r1, #3]
 800d93c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800d93e:	790b      	ldrb	r3, [r1, #4]
 800d940:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800d942:	794b      	ldrb	r3, [r1, #5]
 800d944:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800d946:	798b      	ldrb	r3, [r1, #6]
 800d948:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800d94a:	79cb      	ldrb	r3, [r1, #7]
 800d94c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800d94e:	7a0b      	ldrb	r3, [r1, #8]
 800d950:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800d952:	7a4b      	ldrb	r3, [r1, #9]
 800d954:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800d956:	7a8b      	ldrb	r3, [r1, #10]
 800d958:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800d95a:	7acb      	ldrb	r3, [r1, #11]
 800d95c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800d95e:	7b0b      	ldrb	r3, [r1, #12]
 800d960:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800d962:	7b4b      	ldrb	r3, [r1, #13]
 800d964:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800d966:	7b8b      	ldrb	r3, [r1, #14]
 800d968:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800d96a:	7bcb      	ldrb	r3, [r1, #15]
 800d96c:	73c3      	strb	r3, [r0, #15]
#endif
}
 800d96e:	4770      	bx	lr

0800d970 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800d970:	e004      	b.n	800d97c <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800d972:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d976:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800d97a:	461a      	mov	r2, r3
 800d97c:	1e53      	subs	r3, r2, #1
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	2a00      	cmp	r2, #0
 800d982:	d1f6      	bne.n	800d972 <copy_block_nn+0x2>
}
 800d984:	4770      	bx	lr

0800d986 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800d986:	7803      	ldrb	r3, [r0, #0]
 800d988:	780a      	ldrb	r2, [r1, #0]
 800d98a:	4053      	eors	r3, r2
 800d98c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800d98e:	7843      	ldrb	r3, [r0, #1]
 800d990:	784a      	ldrb	r2, [r1, #1]
 800d992:	4053      	eors	r3, r2
 800d994:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800d996:	7883      	ldrb	r3, [r0, #2]
 800d998:	788a      	ldrb	r2, [r1, #2]
 800d99a:	4053      	eors	r3, r2
 800d99c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800d99e:	78c3      	ldrb	r3, [r0, #3]
 800d9a0:	78ca      	ldrb	r2, [r1, #3]
 800d9a2:	4053      	eors	r3, r2
 800d9a4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800d9a6:	7903      	ldrb	r3, [r0, #4]
 800d9a8:	790a      	ldrb	r2, [r1, #4]
 800d9aa:	4053      	eors	r3, r2
 800d9ac:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800d9ae:	7943      	ldrb	r3, [r0, #5]
 800d9b0:	794a      	ldrb	r2, [r1, #5]
 800d9b2:	4053      	eors	r3, r2
 800d9b4:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800d9b6:	7983      	ldrb	r3, [r0, #6]
 800d9b8:	798a      	ldrb	r2, [r1, #6]
 800d9ba:	4053      	eors	r3, r2
 800d9bc:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800d9be:	79c3      	ldrb	r3, [r0, #7]
 800d9c0:	79ca      	ldrb	r2, [r1, #7]
 800d9c2:	4053      	eors	r3, r2
 800d9c4:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800d9c6:	7a03      	ldrb	r3, [r0, #8]
 800d9c8:	7a0a      	ldrb	r2, [r1, #8]
 800d9ca:	4053      	eors	r3, r2
 800d9cc:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800d9ce:	7a43      	ldrb	r3, [r0, #9]
 800d9d0:	7a4a      	ldrb	r2, [r1, #9]
 800d9d2:	4053      	eors	r3, r2
 800d9d4:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800d9d6:	7a83      	ldrb	r3, [r0, #10]
 800d9d8:	7a8a      	ldrb	r2, [r1, #10]
 800d9da:	4053      	eors	r3, r2
 800d9dc:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800d9de:	7ac3      	ldrb	r3, [r0, #11]
 800d9e0:	7aca      	ldrb	r2, [r1, #11]
 800d9e2:	4053      	eors	r3, r2
 800d9e4:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800d9e6:	7b03      	ldrb	r3, [r0, #12]
 800d9e8:	7b0a      	ldrb	r2, [r1, #12]
 800d9ea:	4053      	eors	r3, r2
 800d9ec:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800d9ee:	7b43      	ldrb	r3, [r0, #13]
 800d9f0:	7b4a      	ldrb	r2, [r1, #13]
 800d9f2:	4053      	eors	r3, r2
 800d9f4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800d9f6:	7b83      	ldrb	r3, [r0, #14]
 800d9f8:	7b8a      	ldrb	r2, [r1, #14]
 800d9fa:	4053      	eors	r3, r2
 800d9fc:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800d9fe:	7bc3      	ldrb	r3, [r0, #15]
 800da00:	7bca      	ldrb	r2, [r1, #15]
 800da02:	4053      	eors	r3, r2
 800da04:	73c3      	strb	r3, [r0, #15]
#endif
}
 800da06:	4770      	bx	lr

0800da08 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800da08:	780b      	ldrb	r3, [r1, #0]
 800da0a:	f892 c000 	ldrb.w	ip, [r2]
 800da0e:	ea83 030c 	eor.w	r3, r3, ip
 800da12:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800da14:	784b      	ldrb	r3, [r1, #1]
 800da16:	f892 c001 	ldrb.w	ip, [r2, #1]
 800da1a:	ea83 030c 	eor.w	r3, r3, ip
 800da1e:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800da20:	788b      	ldrb	r3, [r1, #2]
 800da22:	f892 c002 	ldrb.w	ip, [r2, #2]
 800da26:	ea83 030c 	eor.w	r3, r3, ip
 800da2a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800da2c:	78cb      	ldrb	r3, [r1, #3]
 800da2e:	f892 c003 	ldrb.w	ip, [r2, #3]
 800da32:	ea83 030c 	eor.w	r3, r3, ip
 800da36:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800da38:	790b      	ldrb	r3, [r1, #4]
 800da3a:	f892 c004 	ldrb.w	ip, [r2, #4]
 800da3e:	ea83 030c 	eor.w	r3, r3, ip
 800da42:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800da44:	794b      	ldrb	r3, [r1, #5]
 800da46:	f892 c005 	ldrb.w	ip, [r2, #5]
 800da4a:	ea83 030c 	eor.w	r3, r3, ip
 800da4e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800da50:	798b      	ldrb	r3, [r1, #6]
 800da52:	f892 c006 	ldrb.w	ip, [r2, #6]
 800da56:	ea83 030c 	eor.w	r3, r3, ip
 800da5a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800da5c:	79cb      	ldrb	r3, [r1, #7]
 800da5e:	f892 c007 	ldrb.w	ip, [r2, #7]
 800da62:	ea83 030c 	eor.w	r3, r3, ip
 800da66:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800da68:	7a0b      	ldrb	r3, [r1, #8]
 800da6a:	f892 c008 	ldrb.w	ip, [r2, #8]
 800da6e:	ea83 030c 	eor.w	r3, r3, ip
 800da72:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800da74:	7a4b      	ldrb	r3, [r1, #9]
 800da76:	f892 c009 	ldrb.w	ip, [r2, #9]
 800da7a:	ea83 030c 	eor.w	r3, r3, ip
 800da7e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800da80:	7a8b      	ldrb	r3, [r1, #10]
 800da82:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800da86:	ea83 030c 	eor.w	r3, r3, ip
 800da8a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800da8c:	7acb      	ldrb	r3, [r1, #11]
 800da8e:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800da92:	ea83 030c 	eor.w	r3, r3, ip
 800da96:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800da98:	7b0b      	ldrb	r3, [r1, #12]
 800da9a:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800da9e:	ea83 030c 	eor.w	r3, r3, ip
 800daa2:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800daa4:	7b4b      	ldrb	r3, [r1, #13]
 800daa6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800daaa:	ea83 030c 	eor.w	r3, r3, ip
 800daae:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800dab0:	7b8b      	ldrb	r3, [r1, #14]
 800dab2:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800dab6:	ea83 030c 	eor.w	r3, r3, ip
 800daba:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800dabc:	7bcb      	ldrb	r3, [r1, #15]
 800dabe:	7bd2      	ldrb	r2, [r2, #15]
 800dac0:	4053      	eors	r3, r2
 800dac2:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800dac4:	4770      	bx	lr

0800dac6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800dac6:	b508      	push	{r3, lr}
    xor_block(d, k);
 800dac8:	f7ff ff5d 	bl	800d986 <xor_block>
}
 800dacc:	bd08      	pop	{r3, pc}
	...

0800dad0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800dad0:	7802      	ldrb	r2, [r0, #0]
 800dad2:	4b18      	ldr	r3, [pc, #96]	@ (800db34 <shift_sub_rows+0x64>)
 800dad4:	5c9a      	ldrb	r2, [r3, r2]
 800dad6:	7002      	strb	r2, [r0, #0]
 800dad8:	7902      	ldrb	r2, [r0, #4]
 800dada:	5c9a      	ldrb	r2, [r3, r2]
 800dadc:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800dade:	7a02      	ldrb	r2, [r0, #8]
 800dae0:	5c9a      	ldrb	r2, [r3, r2]
 800dae2:	7202      	strb	r2, [r0, #8]
 800dae4:	7b02      	ldrb	r2, [r0, #12]
 800dae6:	5c9a      	ldrb	r2, [r3, r2]
 800dae8:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800daea:	7842      	ldrb	r2, [r0, #1]
 800daec:	7941      	ldrb	r1, [r0, #5]
 800daee:	5c59      	ldrb	r1, [r3, r1]
 800daf0:	7041      	strb	r1, [r0, #1]
 800daf2:	7a41      	ldrb	r1, [r0, #9]
 800daf4:	5c59      	ldrb	r1, [r3, r1]
 800daf6:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800daf8:	7b41      	ldrb	r1, [r0, #13]
 800dafa:	5c59      	ldrb	r1, [r3, r1]
 800dafc:	7241      	strb	r1, [r0, #9]
 800dafe:	5c9a      	ldrb	r2, [r3, r2]
 800db00:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800db02:	7882      	ldrb	r2, [r0, #2]
 800db04:	7a81      	ldrb	r1, [r0, #10]
 800db06:	5c59      	ldrb	r1, [r3, r1]
 800db08:	7081      	strb	r1, [r0, #2]
 800db0a:	5c9a      	ldrb	r2, [r3, r2]
 800db0c:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800db0e:	7982      	ldrb	r2, [r0, #6]
 800db10:	7b81      	ldrb	r1, [r0, #14]
 800db12:	5c59      	ldrb	r1, [r3, r1]
 800db14:	7181      	strb	r1, [r0, #6]
 800db16:	5c9a      	ldrb	r2, [r3, r2]
 800db18:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800db1a:	7bc2      	ldrb	r2, [r0, #15]
 800db1c:	7ac1      	ldrb	r1, [r0, #11]
 800db1e:	5c59      	ldrb	r1, [r3, r1]
 800db20:	73c1      	strb	r1, [r0, #15]
 800db22:	79c1      	ldrb	r1, [r0, #7]
 800db24:	5c59      	ldrb	r1, [r3, r1]
 800db26:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800db28:	78c1      	ldrb	r1, [r0, #3]
 800db2a:	5c59      	ldrb	r1, [r3, r1]
 800db2c:	71c1      	strb	r1, [r0, #7]
 800db2e:	5c9b      	ldrb	r3, [r3, r2]
 800db30:	70c3      	strb	r3, [r0, #3]
}
 800db32:	4770      	bx	lr
 800db34:	08014618 	.word	0x08014618

0800db38 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800db38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db3c:	b084      	sub	sp, #16
 800db3e:	4604      	mov	r4, r0
    block_copy(st, dt);
 800db40:	4601      	mov	r1, r0
 800db42:	4668      	mov	r0, sp
 800db44:	f7ff fef3 	bl	800d92e <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800db48:	f89d c000 	ldrb.w	ip, [sp]
 800db4c:	4b6a      	ldr	r3, [pc, #424]	@ (800dcf8 <mix_sub_columns+0x1c0>)
 800db4e:	f813 000c 	ldrb.w	r0, [r3, ip]
 800db52:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800db56:	4a69      	ldr	r2, [pc, #420]	@ (800dcfc <mix_sub_columns+0x1c4>)
 800db58:	f812 9008 	ldrb.w	r9, [r2, r8]
 800db5c:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800db60:	4967      	ldr	r1, [pc, #412]	@ (800dd00 <mix_sub_columns+0x1c8>)
 800db62:	f811 500e 	ldrb.w	r5, [r1, lr]
 800db66:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800db6a:	5dce      	ldrb	r6, [r1, r7]
 800db6c:	ea80 0009 	eor.w	r0, r0, r9
 800db70:	4068      	eors	r0, r5
 800db72:	4070      	eors	r0, r6
 800db74:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800db76:	f811 000c 	ldrb.w	r0, [r1, ip]
 800db7a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800db7e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800db82:	ea80 0a0a 	eor.w	sl, r0, sl
 800db86:	ea89 090a 	eor.w	r9, r9, sl
 800db8a:	ea86 0609 	eor.w	r6, r6, r9
 800db8e:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800db90:	f811 8008 	ldrb.w	r8, [r1, r8]
 800db94:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800db98:	5dd6      	ldrb	r6, [r2, r7]
 800db9a:	ea80 0008 	eor.w	r0, r0, r8
 800db9e:	ea8e 0000 	eor.w	r0, lr, r0
 800dba2:	4070      	eors	r0, r6
 800dba4:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800dba6:	f812 600c 	ldrb.w	r6, [r2, ip]
 800dbaa:	5dd8      	ldrb	r0, [r3, r7]
 800dbac:	ea86 0608 	eor.w	r6, r6, r8
 800dbb0:	4075      	eors	r5, r6
 800dbb2:	4068      	eors	r0, r5
 800dbb4:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800dbb6:	f89d c004 	ldrb.w	ip, [sp, #4]
 800dbba:	f813 000c 	ldrb.w	r0, [r3, ip]
 800dbbe:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800dbc2:	f812 9008 	ldrb.w	r9, [r2, r8]
 800dbc6:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800dbca:	f811 500e 	ldrb.w	r5, [r1, lr]
 800dbce:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800dbd2:	5dce      	ldrb	r6, [r1, r7]
 800dbd4:	ea80 0009 	eor.w	r0, r0, r9
 800dbd8:	4068      	eors	r0, r5
 800dbda:	4070      	eors	r0, r6
 800dbdc:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800dbde:	f811 000c 	ldrb.w	r0, [r1, ip]
 800dbe2:	f813 a008 	ldrb.w	sl, [r3, r8]
 800dbe6:	f812 900e 	ldrb.w	r9, [r2, lr]
 800dbea:	ea80 0a0a 	eor.w	sl, r0, sl
 800dbee:	ea89 090a 	eor.w	r9, r9, sl
 800dbf2:	ea86 0609 	eor.w	r6, r6, r9
 800dbf6:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800dbf8:	f811 8008 	ldrb.w	r8, [r1, r8]
 800dbfc:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800dc00:	5dd6      	ldrb	r6, [r2, r7]
 800dc02:	ea80 0008 	eor.w	r0, r0, r8
 800dc06:	ea8e 0000 	eor.w	r0, lr, r0
 800dc0a:	4070      	eors	r0, r6
 800dc0c:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800dc0e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800dc12:	5dd8      	ldrb	r0, [r3, r7]
 800dc14:	ea86 0608 	eor.w	r6, r6, r8
 800dc18:	4075      	eors	r5, r6
 800dc1a:	4068      	eors	r0, r5
 800dc1c:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800dc1e:	f89d c008 	ldrb.w	ip, [sp, #8]
 800dc22:	f813 000c 	ldrb.w	r0, [r3, ip]
 800dc26:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800dc2a:	f812 9008 	ldrb.w	r9, [r2, r8]
 800dc2e:	f89d e002 	ldrb.w	lr, [sp, #2]
 800dc32:	f811 500e 	ldrb.w	r5, [r1, lr]
 800dc36:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800dc3a:	5dce      	ldrb	r6, [r1, r7]
 800dc3c:	ea80 0009 	eor.w	r0, r0, r9
 800dc40:	4068      	eors	r0, r5
 800dc42:	4070      	eors	r0, r6
 800dc44:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800dc46:	f811 000c 	ldrb.w	r0, [r1, ip]
 800dc4a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800dc4e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800dc52:	ea80 0a0a 	eor.w	sl, r0, sl
 800dc56:	ea89 090a 	eor.w	r9, r9, sl
 800dc5a:	ea86 0609 	eor.w	r6, r6, r9
 800dc5e:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800dc60:	f811 8008 	ldrb.w	r8, [r1, r8]
 800dc64:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800dc68:	5dd6      	ldrb	r6, [r2, r7]
 800dc6a:	ea80 0008 	eor.w	r0, r0, r8
 800dc6e:	ea8e 0000 	eor.w	r0, lr, r0
 800dc72:	4070      	eors	r0, r6
 800dc74:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800dc76:	f812 600c 	ldrb.w	r6, [r2, ip]
 800dc7a:	5dd8      	ldrb	r0, [r3, r7]
 800dc7c:	ea86 0608 	eor.w	r6, r6, r8
 800dc80:	4075      	eors	r5, r6
 800dc82:	4068      	eors	r0, r5
 800dc84:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800dc86:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800dc8a:	5d98      	ldrb	r0, [r3, r6]
 800dc8c:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800dc90:	f812 9008 	ldrb.w	r9, [r2, r8]
 800dc94:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800dc98:	f811 c007 	ldrb.w	ip, [r1, r7]
 800dc9c:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800dca0:	f811 e005 	ldrb.w	lr, [r1, r5]
 800dca4:	ea80 0009 	eor.w	r0, r0, r9
 800dca8:	ea8c 0000 	eor.w	r0, ip, r0
 800dcac:	ea8e 0000 	eor.w	r0, lr, r0
 800dcb0:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800dcb2:	5d88      	ldrb	r0, [r1, r6]
 800dcb4:	f813 a008 	ldrb.w	sl, [r3, r8]
 800dcb8:	f812 9007 	ldrb.w	r9, [r2, r7]
 800dcbc:	ea80 0a0a 	eor.w	sl, r0, sl
 800dcc0:	ea89 090a 	eor.w	r9, r9, sl
 800dcc4:	ea8e 0e09 	eor.w	lr, lr, r9
 800dcc8:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800dccc:	f811 1008 	ldrb.w	r1, [r1, r8]
 800dcd0:	f813 e007 	ldrb.w	lr, [r3, r7]
 800dcd4:	5d57      	ldrb	r7, [r2, r5]
 800dcd6:	4048      	eors	r0, r1
 800dcd8:	ea8e 0000 	eor.w	r0, lr, r0
 800dcdc:	4078      	eors	r0, r7
 800dcde:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800dce0:	5d92      	ldrb	r2, [r2, r6]
 800dce2:	5d5b      	ldrb	r3, [r3, r5]
 800dce4:	4051      	eors	r1, r2
 800dce6:	ea8c 0c01 	eor.w	ip, ip, r1
 800dcea:	ea83 030c 	eor.w	r3, r3, ip
 800dcee:	73e3      	strb	r3, [r4, #15]
  }
 800dcf0:	b004      	add	sp, #16
 800dcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcf6:	bf00      	nop
 800dcf8:	08014518 	.word	0x08014518
 800dcfc:	08014418 	.word	0x08014418
 800dd00:	08014618 	.word	0x08014618

0800dd04 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800dd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd08:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800dd0a:	f1a1 0310 	sub.w	r3, r1, #16
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b10      	cmp	r3, #16
 800dd12:	d806      	bhi.n	800dd22 <lorawan_aes_set_key+0x1e>
 800dd14:	460d      	mov	r5, r1
 800dd16:	4a3b      	ldr	r2, [pc, #236]	@ (800de04 <lorawan_aes_set_key+0x100>)
 800dd18:	fa22 f303 	lsr.w	r3, r2, r3
 800dd1c:	f013 0f01 	tst.w	r3, #1
 800dd20:	d105      	bne.n	800dd2e <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
        return ( uint8_t )-1;
 800dd28:	20ff      	movs	r0, #255	@ 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800dd2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800dd2e:	460a      	mov	r2, r1
 800dd30:	4601      	mov	r1, r0
 800dd32:	4620      	mov	r0, r4
 800dd34:	f7ff fe1c 	bl	800d970 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800dd38:	f105 031c 	add.w	r3, r5, #28
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800dd44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800dd4e:	462b      	mov	r3, r5
 800dd50:	f04f 0c01 	mov.w	ip, #1
 800dd54:	e023      	b.n	800dd9e <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 800dd56:	2d18      	cmp	r5, #24
 800dd58:	d901      	bls.n	800dd5e <lorawan_aes_set_key+0x5a>
 800dd5a:	2a10      	cmp	r2, #16
 800dd5c:	d048      	beq.n	800ddf0 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800dd5e:	1b5a      	subs	r2, r3, r5
 800dd60:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800dd62:	f814 9002 	ldrb.w	r9, [r4, r2]
 800dd66:	ea89 0808 	eor.w	r8, r9, r8
 800dd6a:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800dd6e:	f102 0801 	add.w	r8, r2, #1
 800dd72:	f814 8008 	ldrb.w	r8, [r4, r8]
 800dd76:	f100 0901 	add.w	r9, r0, #1
 800dd7a:	ea88 0707 	eor.w	r7, r8, r7
 800dd7e:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800dd82:	1c97      	adds	r7, r2, #2
 800dd84:	5de7      	ldrb	r7, [r4, r7]
 800dd86:	f100 0802 	add.w	r8, r0, #2
 800dd8a:	407e      	eors	r6, r7
 800dd8c:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800dd90:	3203      	adds	r2, #3
 800dd92:	5ca6      	ldrb	r6, [r4, r2]
 800dd94:	1cc2      	adds	r2, r0, #3
 800dd96:	4071      	eors	r1, r6
 800dd98:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800dd9a:	3304      	adds	r3, #4
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	4573      	cmp	r3, lr
 800dda0:	d22d      	bcs.n	800ddfe <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800dda2:	4618      	mov	r0, r3
 800dda4:	1f1a      	subs	r2, r3, #4
 800dda6:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800ddaa:	1eda      	subs	r2, r3, #3
 800ddac:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800ddae:	1e9a      	subs	r2, r3, #2
 800ddb0:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800ddb2:	1e5a      	subs	r2, r3, #1
 800ddb4:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800ddb6:	fbb3 f2f5 	udiv	r2, r3, r5
 800ddba:	fb05 3212 	mls	r2, r5, r2, r3
 800ddbe:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 800ddc2:	d1c8      	bne.n	800dd56 <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 800ddc4:	4a10      	ldr	r2, [pc, #64]	@ (800de08 <lorawan_aes_set_key+0x104>)
 800ddc6:	f812 9007 	ldrb.w	r9, [r2, r7]
 800ddca:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800ddce:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800ddd0:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800ddd2:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800ddd6:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800ddda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ddde:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800dde2:	b2d2      	uxtb	r2, r2
 800dde4:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 800dde8:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 800ddec:	46c8      	mov	r8, r9
 800ddee:	e7b6      	b.n	800dd5e <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 800ddf0:	4a05      	ldr	r2, [pc, #20]	@ (800de08 <lorawan_aes_set_key+0x104>)
 800ddf2:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800ddf6:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800ddf8:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800ddfa:	5c51      	ldrb	r1, [r2, r1]
 800ddfc:	e7af      	b.n	800dd5e <lorawan_aes_set_key+0x5a>
    return 0;
 800ddfe:	2000      	movs	r0, #0
 800de00:	e793      	b.n	800dd2a <lorawan_aes_set_key+0x26>
 800de02:	bf00      	nop
 800de04:	00010101 	.word	0x00010101
 800de08:	08014618 	.word	0x08014618

0800de0c <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800de0c:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800de10:	b31b      	cbz	r3, 800de5a <lorawan_aes_encrypt+0x4e>
{
 800de12:	b570      	push	{r4, r5, r6, lr}
 800de14:	b084      	sub	sp, #16
 800de16:	460e      	mov	r6, r1
 800de18:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800de1a:	4601      	mov	r1, r0
 800de1c:	4668      	mov	r0, sp
 800de1e:	f7ff fdf3 	bl	800da08 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800de22:	2401      	movs	r4, #1
 800de24:	e009      	b.n	800de3a <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800de26:	4668      	mov	r0, sp
 800de28:	f7ff fe86 	bl	800db38 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800de2c:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800de30:	4668      	mov	r0, sp
 800de32:	f7ff fe48 	bl	800dac6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800de36:	3401      	adds	r4, #1
 800de38:	b2e4      	uxtb	r4, r4
 800de3a:	f895 30f0 	ldrb.w	r3, [r5, #240]	@ 0xf0
 800de3e:	42a3      	cmp	r3, r4
 800de40:	d8f1      	bhi.n	800de26 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800de42:	4668      	mov	r0, sp
 800de44:	f7ff fe44 	bl	800dad0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800de48:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800de4c:	4669      	mov	r1, sp
 800de4e:	4630      	mov	r0, r6
 800de50:	f7ff fdda 	bl	800da08 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800de54:	2000      	movs	r0, #0
}
 800de56:	b004      	add	sp, #16
 800de58:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800de5a:	20ff      	movs	r0, #255	@ 0xff
}
 800de5c:	4770      	bx	lr
	...

0800de60 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800de60:	2300      	movs	r3, #0
 800de62:	2b09      	cmp	r3, #9
 800de64:	d816      	bhi.n	800de94 <GetKeyByID+0x34>
{
 800de66:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800de68:	4a0b      	ldr	r2, [pc, #44]	@ (800de98 <GetKeyByID+0x38>)
 800de6a:	6814      	ldr	r4, [r2, #0]
 800de6c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800de70:	4422      	add	r2, r4
 800de72:	7c12      	ldrb	r2, [r2, #16]
 800de74:	4282      	cmp	r2, r0
 800de76:	d006      	beq.n	800de86 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800de78:	3301      	adds	r3, #1
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	2b09      	cmp	r3, #9
 800de7e:	d9f3      	bls.n	800de68 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800de80:	2003      	movs	r0, #3
}
 800de82:	bc10      	pop	{r4}
 800de84:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800de86:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800de8a:	3310      	adds	r3, #16
 800de8c:	441c      	add	r4, r3
 800de8e:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800de90:	2000      	movs	r0, #0
 800de92:	e7f6      	b.n	800de82 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800de94:	2003      	movs	r0, #3
}
 800de96:	4770      	bx	lr
 800de98:	200013cc 	.word	0x200013cc

0800de9c <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800de9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	b0cc      	sub	sp, #304	@ 0x130
 800dea2:	9e52      	ldr	r6, [sp, #328]	@ 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800dea4:	b3a9      	cbz	r1, 800df12 <ComputeCmac+0x76>
 800dea6:	4605      	mov	r5, r0
 800dea8:	4617      	mov	r7, r2
 800deaa:	461c      	mov	r4, r3
 800deac:	4688      	mov	r8, r1
 800deae:	b396      	cbz	r6, 800df16 <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800deb0:	a802      	add	r0, sp, #8
 800deb2:	f7ff fbd7 	bl	800d664 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800deb6:	a901      	add	r1, sp, #4
 800deb8:	4620      	mov	r0, r4
 800deba:	f7ff ffd1 	bl	800de60 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800debe:	4604      	mov	r4, r0
 800dec0:	b118      	cbz	r0, 800deca <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800dec2:	4620      	mov	r0, r4
 800dec4:	b04c      	add	sp, #304	@ 0x130
 800dec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800deca:	9901      	ldr	r1, [sp, #4]
 800decc:	3101      	adds	r1, #1
 800dece:	a802      	add	r0, sp, #8
 800ded0:	f7ff fbd7 	bl	800d682 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800ded4:	b125      	cbz	r5, 800dee0 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800ded6:	2210      	movs	r2, #16
 800ded8:	4629      	mov	r1, r5
 800deda:	a802      	add	r0, sp, #8
 800dedc:	f7ff fbd8 	bl	800d690 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800dee0:	463a      	mov	r2, r7
 800dee2:	4641      	mov	r1, r8
 800dee4:	a802      	add	r0, sp, #8
 800dee6:	f7ff fbd3 	bl	800d690 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800deea:	a902      	add	r1, sp, #8
 800deec:	a848      	add	r0, sp, #288	@ 0x120
 800deee:	f7ff fc3d 	bl	800d76c <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800def2:	f89d 2123 	ldrb.w	r2, [sp, #291]	@ 0x123
 800def6:	f89d 3122 	ldrb.w	r3, [sp, #290]	@ 0x122
 800defa:	041b      	lsls	r3, r3, #16
 800defc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800df00:	f89d 2121 	ldrb.w	r2, [sp, #289]	@ 0x121
 800df04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 800df08:	f89d 2120 	ldrb.w	r2, [sp, #288]	@ 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800df0c:	4313      	orrs	r3, r2
 800df0e:	6033      	str	r3, [r6, #0]
 800df10:	e7d7      	b.n	800dec2 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800df12:	2402      	movs	r4, #2
 800df14:	e7d5      	b.n	800dec2 <ComputeCmac+0x26>
 800df16:	2402      	movs	r4, #2
 800df18:	e7d3      	b.n	800dec2 <ComputeCmac+0x26>
	...

0800df1c <SecureElementGetKeyByID>:
/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800df1c:	2300      	movs	r3, #0
 800df1e:	2b09      	cmp	r3, #9
 800df20:	d816      	bhi.n	800df50 <SecureElementGetKeyByID+0x34>
{
 800df22:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800df24:	4a0b      	ldr	r2, [pc, #44]	@ (800df54 <SecureElementGetKeyByID+0x38>)
 800df26:	6814      	ldr	r4, [r2, #0]
 800df28:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800df2c:	4422      	add	r2, r4
 800df2e:	7c12      	ldrb	r2, [r2, #16]
 800df30:	4282      	cmp	r2, r0
 800df32:	d006      	beq.n	800df42 <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800df34:	3301      	adds	r3, #1
 800df36:	b2db      	uxtb	r3, r3
 800df38:	2b09      	cmp	r3, #9
 800df3a:	d9f3      	bls.n	800df24 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800df3c:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800df3e:	bc10      	pop	{r4}
 800df40:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 800df42:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800df46:	3310      	adds	r3, #16
 800df48:	441c      	add	r4, r3
 800df4a:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800df4c:	2000      	movs	r0, #0
 800df4e:	e7f6      	b.n	800df3e <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800df50:	2003      	movs	r0, #3
}
 800df52:	4770      	bx	lr
 800df54:	200013cc 	.word	0x200013cc

0800df58 <PrintKey>:
{
 800df58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5c:	b095      	sub	sp, #84	@ 0x54
 800df5e:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 800df60:	a913      	add	r1, sp, #76	@ 0x4c
 800df62:	f7ff ffdb 	bl	800df1c <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 800df66:	2800      	cmp	r0, #0
 800df68:	d150      	bne.n	800e00c <PrintKey+0xb4>
        if (key == APP_KEY)
 800df6a:	2c04      	cmp	r4, #4
 800df6c:	d806      	bhi.n	800df7c <PrintKey+0x24>
 800df6e:	2c04      	cmp	r4, #4
 800df70:	d815      	bhi.n	800df9e <PrintKey+0x46>
 800df72:	e8df f004 	tbb	[pc, r4]
 800df76:	4e0e      	.short	0x4e0e
 800df78:	555c      	.short	0x555c
 800df7a:	63          	.byte	0x63
 800df7b:	00          	.byte	0x00
 800df7c:	2c82      	cmp	r4, #130	@ 0x82
 800df7e:	d80e      	bhi.n	800df9e <PrintKey+0x46>
 800df80:	2c7f      	cmp	r4, #127	@ 0x7f
 800df82:	d30c      	bcc.n	800df9e <PrintKey+0x46>
 800df84:	3c7f      	subs	r4, #127	@ 0x7f
 800df86:	2c03      	cmp	r4, #3
 800df88:	d809      	bhi.n	800df9e <PrintKey+0x46>
 800df8a:	e8df f004 	tbb	[pc, r4]
 800df8e:	655e      	.short	0x655e
 800df90:	736c      	.short	0x736c
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800df92:	4b3c      	ldr	r3, [pc, #240]	@ (800e084 <PrintKey+0x12c>)
 800df94:	2200      	movs	r2, #0
 800df96:	4611      	mov	r1, r2
 800df98:	2002      	movs	r0, #2
 800df9a:	f002 fc0f 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800df9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dfa0:	785a      	ldrb	r2, [r3, #1]
 800dfa2:	9210      	str	r2, [sp, #64]	@ 0x40
 800dfa4:	7899      	ldrb	r1, [r3, #2]
 800dfa6:	9111      	str	r1, [sp, #68]	@ 0x44
 800dfa8:	78da      	ldrb	r2, [r3, #3]
 800dfaa:	7919      	ldrb	r1, [r3, #4]
 800dfac:	7958      	ldrb	r0, [r3, #5]
 800dfae:	799c      	ldrb	r4, [r3, #6]
 800dfb0:	79dd      	ldrb	r5, [r3, #7]
 800dfb2:	7a1e      	ldrb	r6, [r3, #8]
 800dfb4:	7a5f      	ldrb	r7, [r3, #9]
 800dfb6:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800dfba:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800dfbe:	f893 800c 	ldrb.w	r8, [r3, #12]
 800dfc2:	f893 900d 	ldrb.w	r9, [r3, #13]
 800dfc6:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800dfca:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800dfce:	7c1b      	ldrb	r3, [r3, #16]
 800dfd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dfd2:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dfd6:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800dfda:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800dfde:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800dfe2:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 800dfe6:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800dfea:	9708      	str	r7, [sp, #32]
 800dfec:	9607      	str	r6, [sp, #28]
 800dfee:	9506      	str	r5, [sp, #24]
 800dff0:	9405      	str	r4, [sp, #20]
 800dff2:	9004      	str	r0, [sp, #16]
 800dff4:	9103      	str	r1, [sp, #12]
 800dff6:	9202      	str	r2, [sp, #8]
 800dff8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800dffa:	9101      	str	r1, [sp, #4]
 800dffc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800dffe:	9200      	str	r2, [sp, #0]
 800e000:	4b21      	ldr	r3, [pc, #132]	@ (800e088 <PrintKey+0x130>)
 800e002:	2200      	movs	r2, #0
 800e004:	4611      	mov	r1, r2
 800e006:	2002      	movs	r0, #2
 800e008:	f002 fbd8 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 800e00c:	b015      	add	sp, #84	@ 0x54
 800e00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800e012:	4b1e      	ldr	r3, [pc, #120]	@ (800e08c <PrintKey+0x134>)
 800e014:	2200      	movs	r2, #0
 800e016:	4611      	mov	r1, r2
 800e018:	2002      	movs	r0, #2
 800e01a:	f002 fbcf 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 800e01e:	e7be      	b.n	800df9e <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800e020:	4b1b      	ldr	r3, [pc, #108]	@ (800e090 <PrintKey+0x138>)
 800e022:	2200      	movs	r2, #0
 800e024:	4611      	mov	r1, r2
 800e026:	2002      	movs	r0, #2
 800e028:	f002 fbc8 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 800e02c:	e7b7      	b.n	800df9e <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800e02e:	4b19      	ldr	r3, [pc, #100]	@ (800e094 <PrintKey+0x13c>)
 800e030:	2200      	movs	r2, #0
 800e032:	4611      	mov	r1, r2
 800e034:	2002      	movs	r0, #2
 800e036:	f002 fbc1 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 800e03a:	e7b0      	b.n	800df9e <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800e03c:	4b16      	ldr	r3, [pc, #88]	@ (800e098 <PrintKey+0x140>)
 800e03e:	2200      	movs	r2, #0
 800e040:	4611      	mov	r1, r2
 800e042:	2002      	movs	r0, #2
 800e044:	f002 fbba 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 800e048:	e7a9      	b.n	800df9e <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800e04a:	4b14      	ldr	r3, [pc, #80]	@ (800e09c <PrintKey+0x144>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	4611      	mov	r1, r2
 800e050:	2002      	movs	r0, #2
 800e052:	f002 fbb3 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 800e056:	e7a2      	b.n	800df9e <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800e058:	4b11      	ldr	r3, [pc, #68]	@ (800e0a0 <PrintKey+0x148>)
 800e05a:	2200      	movs	r2, #0
 800e05c:	4611      	mov	r1, r2
 800e05e:	2002      	movs	r0, #2
 800e060:	f002 fbac 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 800e064:	e79b      	b.n	800df9e <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800e066:	4b0f      	ldr	r3, [pc, #60]	@ (800e0a4 <PrintKey+0x14c>)
 800e068:	2200      	movs	r2, #0
 800e06a:	4611      	mov	r1, r2
 800e06c:	2002      	movs	r0, #2
 800e06e:	f002 fba5 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 800e072:	e794      	b.n	800df9e <PrintKey+0x46>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800e074:	4b0c      	ldr	r3, [pc, #48]	@ (800e0a8 <PrintKey+0x150>)
 800e076:	2200      	movs	r2, #0
 800e078:	4611      	mov	r1, r2
 800e07a:	2002      	movs	r0, #2
 800e07c:	f002 fb9e 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 800e080:	e78d      	b.n	800df9e <PrintKey+0x46>
 800e082:	bf00      	nop
 800e084:	08014718 	.word	0x08014718
 800e088:	080147f0 	.word	0x080147f0
 800e08c:	08014730 	.word	0x08014730
 800e090:	08014748 	.word	0x08014748
 800e094:	08014760 	.word	0x08014760
 800e098:	08014778 	.word	0x08014778
 800e09c:	08014790 	.word	0x08014790
 800e0a0:	080147a8 	.word	0x080147a8
 800e0a4:	080147c0 	.word	0x080147c0
 800e0a8:	080147d8 	.word	0x080147d8

0800e0ac <SecureElementInit>:
{
 800e0ac:	b530      	push	{r4, r5, lr}
 800e0ae:	b0b1      	sub	sp, #196	@ 0xc4
 800e0b0:	4605      	mov	r5, r0
    SecureElementNvmData_t seNvmInit =
 800e0b2:	466c      	mov	r4, sp
 800e0b4:	22c0      	movs	r2, #192	@ 0xc0
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f003 fe82 	bl	8011dc2 <memset>
 800e0be:	4b3a      	ldr	r3, [pc, #232]	@ (800e1a8 <SecureElementInit+0xfc>)
 800e0c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e0c4:	e884 0003 	stmia.w	r4, {r0, r1}
 800e0c8:	4a38      	ldr	r2, [pc, #224]	@ (800e1ac <SecureElementInit+0x100>)
 800e0ca:	ab02      	add	r3, sp, #8
 800e0cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0d0:	e883 0003 	stmia.w	r3, {r0, r1}
 800e0d4:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 800e1b0 <SecureElementInit+0x104>
 800e0d8:	46e6      	mov	lr, ip
 800e0da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e0de:	f8cd 0011 	str.w	r0, [sp, #17]
 800e0e2:	f8cd 1015 	str.w	r1, [sp, #21]
 800e0e6:	f8cd 2019 	str.w	r2, [sp, #25]
 800e0ea:	f8cd 301d 	str.w	r3, [sp, #29]
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 800e0f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e0f8:	f8cd 0022 	str.w	r0, [sp, #34]	@ 0x22
 800e0fc:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 800e100:	f8cd 202a 	str.w	r2, [sp, #42]	@ 0x2a
 800e104:	f8cd 302e 	str.w	r3, [sp, #46]	@ 0x2e
 800e108:	2302      	movs	r3, #2
 800e10a:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
 800e10e:	4c29      	ldr	r4, [pc, #164]	@ (800e1b4 <SecureElementInit+0x108>)
 800e110:	46a4      	mov	ip, r4
 800e112:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e116:	f8cd 0033 	str.w	r0, [sp, #51]	@ 0x33
 800e11a:	f8cd 1037 	str.w	r1, [sp, #55]	@ 0x37
 800e11e:	f8cd 203b 	str.w	r2, [sp, #59]	@ 0x3b
 800e122:	f8cd 303f 	str.w	r3, [sp, #63]	@ 0x3f
 800e126:	2303      	movs	r3, #3
 800e128:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
 800e12c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e130:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e134:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e138:	2304      	movs	r3, #4
 800e13a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e13e:	237f      	movs	r3, #127	@ 0x7f
 800e140:	f88d 3065 	strb.w	r3, [sp, #101]	@ 0x65
 800e144:	2380      	movs	r3, #128	@ 0x80
 800e146:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
 800e14a:	2381      	movs	r3, #129	@ 0x81
 800e14c:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
 800e150:	2382      	movs	r3, #130	@ 0x82
 800e152:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 800e156:	2383      	movs	r3, #131	@ 0x83
 800e158:	f88d 30a9 	strb.w	r3, [sp, #169]	@ 0xa9
    if( nvm == NULL )
 800e15c:	b30d      	cbz	r5, 800e1a2 <SecureElementInit+0xf6>
    SeNvm = nvm;
 800e15e:	4b16      	ldr	r3, [pc, #88]	@ (800e1b8 <SecureElementInit+0x10c>)
 800e160:	601d      	str	r5, [r3, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800e162:	22c0      	movs	r2, #192	@ 0xc0
 800e164:	4669      	mov	r1, sp
 800e166:	4628      	mov	r0, r5
 800e168:	f000 f98f 	bl	800e48a <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800e16c:	4b13      	ldr	r3, [pc, #76]	@ (800e1bc <SecureElementInit+0x110>)
 800e16e:	2200      	movs	r2, #0
 800e170:	4611      	mov	r1, r2
 800e172:	2002      	movs	r0, #2
 800e174:	f002 fb22 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800e178:	2000      	movs	r0, #0
 800e17a:	f7ff feed 	bl	800df58 <PrintKey>
    PrintKey(NWK_KEY);
 800e17e:	2001      	movs	r0, #1
 800e180:	f7ff feea 	bl	800df58 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800e184:	4b0e      	ldr	r3, [pc, #56]	@ (800e1c0 <SecureElementInit+0x114>)
 800e186:	2200      	movs	r2, #0
 800e188:	4611      	mov	r1, r2
 800e18a:	2002      	movs	r0, #2
 800e18c:	f002 fb16 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800e190:	2003      	movs	r0, #3
 800e192:	f7ff fee1 	bl	800df58 <PrintKey>
    PrintKey(NWK_S_KEY);
 800e196:	2002      	movs	r0, #2
 800e198:	f7ff fede 	bl	800df58 <PrintKey>
    return SECURE_ELEMENT_SUCCESS;
 800e19c:	2000      	movs	r0, #0
}
 800e19e:	b031      	add	sp, #196	@ 0xc4
 800e1a0:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e1a2:	2002      	movs	r0, #2
 800e1a4:	e7fb      	b.n	800e19e <SecureElementInit+0xf2>
 800e1a6:	bf00      	nop
 800e1a8:	08014874 	.word	0x08014874
 800e1ac:	08013d70 	.word	0x08013d70
 800e1b0:	08014880 	.word	0x08014880
 800e1b4:	08014894 	.word	0x08014894
 800e1b8:	200013cc 	.word	0x200013cc
 800e1bc:	08014844 	.word	0x08014844
 800e1c0:	0801485c 	.word	0x0801485c

0800e1c4 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800e1c4:	2b7e      	cmp	r3, #126	@ 0x7e
 800e1c6:	d80a      	bhi.n	800e1de <SecureElementComputeAesCmac+0x1a>
{
 800e1c8:	b500      	push	{lr}
 800e1ca:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800e1cc:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e1d0:	f8cd c000 	str.w	ip, [sp]
 800e1d4:	f7ff fe62 	bl	800de9c <ComputeCmac>
}
 800e1d8:	b003      	add	sp, #12
 800e1da:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e1de:	2003      	movs	r0, #3
}
 800e1e0:	4770      	bx	lr

0800e1e2 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800e1e2:	b190      	cbz	r0, 800e20a <SecureElementVerifyAesCmac+0x28>
{
 800e1e4:	b510      	push	{r4, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	468c      	mov	ip, r1
 800e1ea:	4614      	mov	r4, r2
 800e1ec:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800e1f2:	aa03      	add	r2, sp, #12
 800e1f4:	9200      	str	r2, [sp, #0]
 800e1f6:	4662      	mov	r2, ip
 800e1f8:	f7ff fe50 	bl	800de9c <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e1fc:	b918      	cbnz	r0, 800e206 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800e1fe:	9b03      	ldr	r3, [sp, #12]
 800e200:	42a3      	cmp	r3, r4
 800e202:	d000      	beq.n	800e206 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800e204:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800e206:	b004      	add	sp, #16
 800e208:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e20a:	2002      	movs	r0, #2
}
 800e20c:	4770      	bx	lr

0800e20e <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800e20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e212:	b0be      	sub	sp, #248	@ 0xf8
    if( buffer == NULL || encBuffer == NULL )
 800e214:	b350      	cbz	r0, 800e26c <SecureElementAesEncrypt+0x5e>
 800e216:	460c      	mov	r4, r1
 800e218:	4615      	mov	r5, r2
 800e21a:	461e      	mov	r6, r3
 800e21c:	4607      	mov	r7, r0
 800e21e:	b343      	cbz	r3, 800e272 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800e220:	f011 0f0f 	tst.w	r1, #15
 800e224:	d128      	bne.n	800e278 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800e226:	22f0      	movs	r2, #240	@ 0xf0
 800e228:	2100      	movs	r1, #0
 800e22a:	a801      	add	r0, sp, #4
 800e22c:	f000 f945 	bl	800e4ba <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800e230:	4669      	mov	r1, sp
 800e232:	4628      	mov	r0, r5
 800e234:	f7ff fe14 	bl	800de60 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e238:	4680      	mov	r8, r0
 800e23a:	b118      	cbz	r0, 800e244 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800e23c:	4640      	mov	r0, r8
 800e23e:	b03e      	add	sp, #248	@ 0xf8
 800e240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800e244:	aa01      	add	r2, sp, #4
 800e246:	2110      	movs	r1, #16
 800e248:	9800      	ldr	r0, [sp, #0]
 800e24a:	3001      	adds	r0, #1
 800e24c:	f7ff fd5a 	bl	800dd04 <lorawan_aes_set_key>
        uint8_t block = 0;
 800e250:	4645      	mov	r5, r8
        while( size != 0 )
 800e252:	e008      	b.n	800e266 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800e254:	aa01      	add	r2, sp, #4
 800e256:	1971      	adds	r1, r6, r5
 800e258:	1978      	adds	r0, r7, r5
 800e25a:	f7ff fdd7 	bl	800de0c <lorawan_aes_encrypt>
            block = block + 16;
 800e25e:	3510      	adds	r5, #16
 800e260:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 800e262:	3c10      	subs	r4, #16
 800e264:	b2a4      	uxth	r4, r4
        while( size != 0 )
 800e266:	2c00      	cmp	r4, #0
 800e268:	d1f4      	bne.n	800e254 <SecureElementAesEncrypt+0x46>
 800e26a:	e7e7      	b.n	800e23c <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800e26c:	f04f 0802 	mov.w	r8, #2
 800e270:	e7e4      	b.n	800e23c <SecureElementAesEncrypt+0x2e>
 800e272:	f04f 0802 	mov.w	r8, #2
 800e276:	e7e1      	b.n	800e23c <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e278:	f04f 0805 	mov.w	r8, #5
 800e27c:	e7de      	b.n	800e23c <SecureElementAesEncrypt+0x2e>
	...

0800e280 <SecureElementSetKey>:
{
 800e280:	b530      	push	{r4, r5, lr}
 800e282:	b085      	sub	sp, #20
    if( key == NULL )
 800e284:	2900      	cmp	r1, #0
 800e286:	d038      	beq.n	800e2fa <SecureElementSetKey+0x7a>
 800e288:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e28a:	2300      	movs	r3, #0
 800e28c:	2b09      	cmp	r3, #9
 800e28e:	d830      	bhi.n	800e2f2 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e290:	4a1b      	ldr	r2, [pc, #108]	@ (800e300 <SecureElementSetKey+0x80>)
 800e292:	6811      	ldr	r1, [r2, #0]
 800e294:	461c      	mov	r4, r3
 800e296:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e29a:	440a      	add	r2, r1
 800e29c:	7c12      	ldrb	r2, [r2, #16]
 800e29e:	4282      	cmp	r2, r0
 800e2a0:	d002      	beq.n	800e2a8 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	e7f1      	b.n	800e28c <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 800e2a8:	2880      	cmp	r0, #128	@ 0x80
 800e2aa:	d00a      	beq.n	800e2c2 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e2ac:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 800e2b0:	3410      	adds	r4, #16
 800e2b2:	1908      	adds	r0, r1, r4
 800e2b4:	2210      	movs	r2, #16
 800e2b6:	4661      	mov	r1, ip
 800e2b8:	3001      	adds	r0, #1
 800e2ba:	f000 f8e6 	bl	800e48a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e2be:	2500      	movs	r5, #0
 800e2c0:	e018      	b.n	800e2f4 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	9301      	str	r3, [sp, #4]
 800e2c8:	9302      	str	r3, [sp, #8]
 800e2ca:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800e2cc:	466b      	mov	r3, sp
 800e2ce:	227f      	movs	r2, #127	@ 0x7f
 800e2d0:	2110      	movs	r1, #16
 800e2d2:	4660      	mov	r0, ip
 800e2d4:	f7ff ff9b 	bl	800e20e <SecureElementAesEncrypt>
 800e2d8:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e2da:	4b09      	ldr	r3, [pc, #36]	@ (800e300 <SecureElementSetKey+0x80>)
 800e2dc:	6818      	ldr	r0, [r3, #0]
 800e2de:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800e2e2:	3410      	adds	r4, #16
 800e2e4:	4420      	add	r0, r4
 800e2e6:	2210      	movs	r2, #16
 800e2e8:	4669      	mov	r1, sp
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	f000 f8cd 	bl	800e48a <memcpy1>
                return retval;
 800e2f0:	e000      	b.n	800e2f4 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e2f2:	2503      	movs	r5, #3
}
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	b005      	add	sp, #20
 800e2f8:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e2fa:	2502      	movs	r5, #2
 800e2fc:	e7fa      	b.n	800e2f4 <SecureElementSetKey+0x74>
 800e2fe:	bf00      	nop
 800e300:	200013cc 	.word	0x200013cc

0800e304 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800e304:	b1d0      	cbz	r0, 800e33c <SecureElementDeriveAndStoreKey+0x38>
{
 800e306:	b510      	push	{r4, lr}
 800e308:	b084      	sub	sp, #16
 800e30a:	4614      	mov	r4, r2
 800e30c:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800e30e:	2a7f      	cmp	r2, #127	@ 0x7f
 800e310:	d101      	bne.n	800e316 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e312:	2904      	cmp	r1, #4
 800e314:	d114      	bne.n	800e340 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800e316:	2300      	movs	r3, #0
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	9301      	str	r3, [sp, #4]
 800e31c:	9302      	str	r3, [sp, #8]
 800e31e:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800e320:	466b      	mov	r3, sp
 800e322:	460a      	mov	r2, r1
 800e324:	2110      	movs	r1, #16
 800e326:	4660      	mov	r0, ip
 800e328:	f7ff ff71 	bl	800e20e <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e32c:	b108      	cbz	r0, 800e332 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e32e:	b004      	add	sp, #16
 800e330:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800e332:	4669      	mov	r1, sp
 800e334:	4620      	mov	r0, r4
 800e336:	f7ff ffa3 	bl	800e280 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e33a:	e7f8      	b.n	800e32e <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800e33c:	2002      	movs	r0, #2
}
 800e33e:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e340:	2003      	movs	r0, #3
 800e342:	e7f4      	b.n	800e32e <SecureElementDeriveAndStoreKey+0x2a>

0800e344 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800e344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e346:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800e34a:	9c07      	ldr	r4, [sp, #28]
 800e34c:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800e34e:	b36b      	cbz	r3, 800e3ac <SecureElementProcessJoinAccept+0x68>
 800e350:	461f      	mov	r7, r3
 800e352:	b36c      	cbz	r4, 800e3b0 <SecureElementProcessJoinAccept+0x6c>
 800e354:	b376      	cbz	r6, 800e3b4 <SecureElementProcessJoinAccept+0x70>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800e356:	2d21      	cmp	r5, #33	@ 0x21
 800e358:	d82e      	bhi.n	800e3b8 <SecureElementProcessJoinAccept+0x74>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800e35a:	462a      	mov	r2, r5
 800e35c:	4619      	mov	r1, r3
 800e35e:	4620      	mov	r0, r4
 800e360:	f000 f893 	bl	800e48a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800e364:	1e69      	subs	r1, r5, #1
 800e366:	1c63      	adds	r3, r4, #1
 800e368:	2201      	movs	r2, #1
 800e36a:	b289      	uxth	r1, r1
 800e36c:	18b8      	adds	r0, r7, r2
 800e36e:	f7ff ff4e 	bl	800e20e <SecureElementAesEncrypt>
 800e372:	bb18      	cbnz	r0, 800e3bc <SecureElementProcessJoinAccept+0x78>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e374:	7ae3      	ldrb	r3, [r4, #11]
 800e376:	09db      	lsrs	r3, r3, #7
 800e378:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800e37a:	1961      	adds	r1, r4, r5
 800e37c:	f811 2c04 	ldrb.w	r2, [r1, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800e380:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800e384:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800e388:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800e38c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800e390:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800e394:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800e398:	b993      	cbnz	r3, 800e3c0 <SecureElementProcessJoinAccept+0x7c>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e39a:	1f29      	subs	r1, r5, #4
 800e39c:	2301      	movs	r3, #1
 800e39e:	b289      	uxth	r1, r1
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f7ff ff1e 	bl	800e1e2 <SecureElementVerifyAesCmac>
 800e3a6:	b140      	cbz	r0, 800e3ba <SecureElementProcessJoinAccept+0x76>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e3a8:	2001      	movs	r0, #1
 800e3aa:	e006      	b.n	800e3ba <SecureElementProcessJoinAccept+0x76>
        return SECURE_ELEMENT_ERROR_NPE;
 800e3ac:	2002      	movs	r0, #2
 800e3ae:	e004      	b.n	800e3ba <SecureElementProcessJoinAccept+0x76>
 800e3b0:	2002      	movs	r0, #2
 800e3b2:	e002      	b.n	800e3ba <SecureElementProcessJoinAccept+0x76>
 800e3b4:	2002      	movs	r0, #2
 800e3b6:	e000      	b.n	800e3ba <SecureElementProcessJoinAccept+0x76>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e3b8:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800e3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e3bc:	2007      	movs	r0, #7
 800e3be:	e7fc      	b.n	800e3ba <SecureElementProcessJoinAccept+0x76>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e3c0:	2004      	movs	r0, #4
 800e3c2:	e7fa      	b.n	800e3ba <SecureElementProcessJoinAccept+0x76>

0800e3c4 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 800e3c4:	b138      	cbz	r0, 800e3d6 <SecureElementRandomNumber+0x12>
{
 800e3c6:	b510      	push	{r4, lr}
 800e3c8:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 800e3ca:	4b04      	ldr	r3, [pc, #16]	@ (800e3dc <SecureElementRandomNumber+0x18>)
 800e3cc:	695b      	ldr	r3, [r3, #20]
 800e3ce:	4798      	blx	r3
 800e3d0:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 800e3d2:	2000      	movs	r0, #0
}
 800e3d4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e3d6:	2002      	movs	r0, #2
}
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	08014918 	.word	0x08014918

0800e3e0 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 800e3e0:	b140      	cbz	r0, 800e3f4 <SecureElementSetDevEui+0x14>
{
 800e3e2:	b508      	push	{r3, lr}
 800e3e4:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800e3e6:	2208      	movs	r2, #8
 800e3e8:	4b03      	ldr	r3, [pc, #12]	@ (800e3f8 <SecureElementSetDevEui+0x18>)
 800e3ea:	6818      	ldr	r0, [r3, #0]
 800e3ec:	f000 f84d 	bl	800e48a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e3f0:	2000      	movs	r0, #0
}
 800e3f2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e3f4:	2002      	movs	r0, #2
}
 800e3f6:	4770      	bx	lr
 800e3f8:	200013cc 	.word	0x200013cc

0800e3fc <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800e3fc:	4b01      	ldr	r3, [pc, #4]	@ (800e404 <SecureElementGetDevEui+0x8>)
 800e3fe:	6818      	ldr	r0, [r3, #0]
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	200013cc 	.word	0x200013cc

0800e408 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 800e408:	b148      	cbz	r0, 800e41e <SecureElementSetJoinEui+0x16>
{
 800e40a:	b508      	push	{r3, lr}
 800e40c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800e40e:	4b05      	ldr	r3, [pc, #20]	@ (800e424 <SecureElementSetJoinEui+0x1c>)
 800e410:	6818      	ldr	r0, [r3, #0]
 800e412:	2208      	movs	r2, #8
 800e414:	4410      	add	r0, r2
 800e416:	f000 f838 	bl	800e48a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e41a:	2000      	movs	r0, #0
}
 800e41c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e41e:	2002      	movs	r0, #2
}
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	200013cc 	.word	0x200013cc

0800e428 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800e428:	4b01      	ldr	r3, [pc, #4]	@ (800e430 <SecureElementGetJoinEui+0x8>)
 800e42a:	6818      	ldr	r0, [r3, #0]
}
 800e42c:	3008      	adds	r0, #8
 800e42e:	4770      	bx	lr
 800e430:	200013cc 	.word	0x200013cc

0800e434 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e434:	4b09      	ldr	r3, [pc, #36]	@ (800e45c <rand1+0x28>)
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	4909      	ldr	r1, [pc, #36]	@ (800e460 <rand1+0x2c>)
 800e43a:	f243 0039 	movw	r0, #12345	@ 0x3039
 800e43e:	fb01 0002 	mla	r0, r1, r2, r0
 800e442:	6018      	str	r0, [r3, #0]
 800e444:	2303      	movs	r3, #3
 800e446:	fba3 2300 	umull	r2, r3, r3, r0
 800e44a:	1ac2      	subs	r2, r0, r3
 800e44c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e450:	0f9b      	lsrs	r3, r3, #30
 800e452:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800e456:	1ac0      	subs	r0, r0, r3
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	200000cc 	.word	0x200000cc
 800e460:	41c64e6d 	.word	0x41c64e6d

0800e464 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800e464:	4b01      	ldr	r3, [pc, #4]	@ (800e46c <srand1+0x8>)
 800e466:	6018      	str	r0, [r3, #0]
}
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	200000cc 	.word	0x200000cc

0800e470 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800e470:	b538      	push	{r3, r4, r5, lr}
 800e472:	4605      	mov	r5, r0
 800e474:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800e476:	f7ff ffdd 	bl	800e434 <rand1>
 800e47a:	1b61      	subs	r1, r4, r5
 800e47c:	3101      	adds	r1, #1
 800e47e:	fb90 f3f1 	sdiv	r3, r0, r1
 800e482:	fb01 0013 	mls	r0, r1, r3, r0
}
 800e486:	4428      	add	r0, r5
 800e488:	bd38      	pop	{r3, r4, r5, pc}

0800e48a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800e48a:	e004      	b.n	800e496 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800e48c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e490:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800e494:	461a      	mov	r2, r3
 800e496:	1e53      	subs	r3, r2, #1
 800e498:	b29b      	uxth	r3, r3
 800e49a:	2a00      	cmp	r2, #0
 800e49c:	d1f6      	bne.n	800e48c <memcpy1+0x2>
    }
}
 800e49e:	4770      	bx	lr

0800e4a0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800e4a0:	1e53      	subs	r3, r2, #1
 800e4a2:	4418      	add	r0, r3
    while( size-- )
 800e4a4:	e004      	b.n	800e4b0 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800e4a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4aa:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	1e53      	subs	r3, r2, #1
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	2a00      	cmp	r2, #0
 800e4b6:	d1f6      	bne.n	800e4a6 <memcpyr+0x6>
    }
}
 800e4b8:	4770      	bx	lr

0800e4ba <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800e4ba:	e002      	b.n	800e4c2 <memset1+0x8>
    {
        *dst++ = value;
 800e4bc:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	1e53      	subs	r3, r2, #1
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	2a00      	cmp	r2, #0
 800e4c8:	d1f8      	bne.n	800e4bc <memset1+0x2>
    }
}
 800e4ca:	4770      	bx	lr

0800e4cc <Crc32>:
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800e4cc:	b1f0      	cbz	r0, 800e50c <Crc32+0x40>
{
 800e4ce:	b510      	push	{r4, lr}
 800e4d0:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800e4d2:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800e4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4da:	e00e      	b.n	800e4fa <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800e4dc:	f340 0c00 	sbfx	ip, r0, #0, #1
 800e4e0:	4a0b      	ldr	r2, [pc, #44]	@ (800e510 <Crc32+0x44>)
 800e4e2:	ea0c 0202 	and.w	r2, ip, r2
 800e4e6:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	2b07      	cmp	r3, #7
 800e4f0:	d9f4      	bls.n	800e4dc <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800e4f2:	f10e 0e01 	add.w	lr, lr, #1
 800e4f6:	fa1f fe8e 	uxth.w	lr, lr
 800e4fa:	458e      	cmp	lr, r1
 800e4fc:	d204      	bcs.n	800e508 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800e4fe:	f814 300e 	ldrb.w	r3, [r4, lr]
 800e502:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800e504:	2300      	movs	r3, #0
 800e506:	e7f2      	b.n	800e4ee <Crc32+0x22>
        }
    }

    return ~crc;
 800e508:	43c0      	mvns	r0, r0
}
 800e50a:	bd10      	pop	{r4, pc}
        return 0;
 800e50c:	2000      	movs	r0, #0
}
 800e50e:	4770      	bx	lr
 800e510:	edb88320 	.word	0xedb88320

0800e514 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800e514:	2001      	movs	r0, #1
 800e516:	4770      	bx	lr

0800e518 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800e518:	280a      	cmp	r0, #10
 800e51a:	d807      	bhi.n	800e52c <RadioGetLoRaBandwidthInHz+0x14>
 800e51c:	e8df f000 	tbb	[pc, r0]
 800e520:	17110b20 	.word	0x17110b20
 800e524:	061e1c1a 	.word	0x061e1c1a
 800e528:	0e08      	.short	0x0e08
 800e52a:	14          	.byte	0x14
 800e52b:	00          	.byte	0x00
 800e52c:	2000      	movs	r0, #0
 800e52e:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800e530:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 800e534:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800e536:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 800e53a:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800e53c:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 800e540:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800e542:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 800e546:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800e548:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 800e54c:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800e54e:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 800e552:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800e554:	4804      	ldr	r0, [pc, #16]	@ (800e568 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800e556:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800e558:	4804      	ldr	r0, [pc, #16]	@ (800e56c <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800e55a:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800e55c:	4804      	ldr	r0, [pc, #16]	@ (800e570 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800e55e:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800e560:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop
 800e568:	0001e848 	.word	0x0001e848
 800e56c:	0003d090 	.word	0x0003d090
 800e570:	0007a120 	.word	0x0007a120

0800e574 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e574:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800e578:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e57a:	b953      	cbnz	r3, 800e592 <RadioGetGfskTimeOnAirNumerator+0x1e>
 800e57c:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 800e57e:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e580:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e582:	b141      	cbz	r1, 800e596 <RadioGetGfskTimeOnAirNumerator+0x22>
 800e584:	2302      	movs	r3, #2
 800e586:	f89d 0000 	ldrb.w	r0, [sp]
 800e58a:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 800e58c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800e590:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e592:	2300      	movs	r3, #0
 800e594:	e7f3      	b.n	800e57e <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e596:	2300      	movs	r3, #0
 800e598:	e7f5      	b.n	800e586 <RadioGetGfskTimeOnAirNumerator+0x12>

0800e59a <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e59a:	b570      	push	{r4, r5, r6, lr}
 800e59c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800e5a0:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800e5a4:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800e5a6:	f1a1 0c05 	sub.w	ip, r1, #5
 800e5aa:	f1bc 0f01 	cmp.w	ip, #1
 800e5ae:	d931      	bls.n	800e614 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e5b0:	b918      	cbnz	r0, 800e5ba <RadioGetLoRaTimeOnAirNumerator+0x20>
 800e5b2:	f1a1 060b 	sub.w	r6, r1, #11
 800e5b6:	2e01      	cmp	r6, #1
 800e5b8:	d934      	bls.n	800e624 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800e5ba:	2801      	cmp	r0, #1
 800e5bc:	d02e      	beq.n	800e61c <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800e5be:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e5c0:	f89d c014 	ldrb.w	ip, [sp, #20]
 800e5c4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800e5c8:	b385      	cbz	r5, 800e62c <RadioGetLoRaTimeOnAirNumerator+0x92>
 800e5ca:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e5cc:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 800e5ce:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800e5d0:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800e5d4:	b364      	cbz	r4, 800e630 <RadioGetLoRaTimeOnAirNumerator+0x96>
 800e5d6:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 800e5da:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800e5dc:	2906      	cmp	r1, #6
 800e5de:	d904      	bls.n	800e5ea <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800e5e0:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800e5e4:	b10e      	cbz	r6, 800e5ea <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800e5e6:	1e88      	subs	r0, r1, #2
 800e5e8:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800e5ea:	f1bc 0f00 	cmp.w	ip, #0
 800e5ee:	db22      	blt.n	800e636 <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800e5f0:	4484      	add	ip, r0
 800e5f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e5f6:	fb9c fcf0 	sdiv	ip, ip, r0
 800e5fa:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800e5fe:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800e602:	2906      	cmp	r1, #6
 800e604:	d801      	bhi.n	800e60a <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 800e606:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800e60a:	0080      	lsls	r0, r0, #2
 800e60c:	3001      	adds	r0, #1
 800e60e:	3902      	subs	r1, #2
}
 800e610:	4088      	lsls	r0, r1
 800e612:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800e614:	2b0b      	cmp	r3, #11
 800e616:	d8cb      	bhi.n	800e5b0 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800e618:	230c      	movs	r3, #12
 800e61a:	e7c9      	b.n	800e5b0 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e61c:	290c      	cmp	r1, #12
 800e61e:	d003      	beq.n	800e628 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 800e620:	2600      	movs	r6, #0
 800e622:	e7cd      	b.n	800e5c0 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800e624:	2601      	movs	r6, #1
 800e626:	e7cb      	b.n	800e5c0 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800e628:	2601      	movs	r6, #1
 800e62a:	e7c9      	b.n	800e5c0 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800e62c:	2000      	movs	r0, #0
 800e62e:	e7cd      	b.n	800e5cc <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 800e630:	f04f 0e14 	mov.w	lr, #20
 800e634:	e7d1      	b.n	800e5da <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 800e636:	f04f 0c00 	mov.w	ip, #0
 800e63a:	e7d9      	b.n	800e5f0 <RadioGetLoRaTimeOnAirNumerator+0x56>

0800e63c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800e63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e63e:	b085      	sub	sp, #20
 800e640:	460e      	mov	r6, r1
 800e642:	4615      	mov	r5, r2
 800e644:	4619      	mov	r1, r3
 800e646:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 800e64a:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800e64e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 800e652:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800e656:	b148      	cbz	r0, 800e66c <RadioTimeOnAir+0x30>
 800e658:	2801      	cmp	r0, #1
 800e65a:	d012      	beq.n	800e682 <RadioTimeOnAir+0x46>
 800e65c:	2501      	movs	r5, #1
 800e65e:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 800e660:	442c      	add	r4, r5
 800e662:	1e60      	subs	r0, r4, #1
}
 800e664:	fbb0 f0f5 	udiv	r0, r0, r5
 800e668:	b005      	add	sp, #20
 800e66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800e66c:	f8cd c004 	str.w	ip, [sp, #4]
 800e670:	9700      	str	r7, [sp, #0]
 800e672:	4628      	mov	r0, r5
 800e674:	f7ff ff7e 	bl	800e574 <RadioGetGfskTimeOnAirNumerator>
 800e678:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e67c:	fb03 f400 	mul.w	r4, r3, r0
        break;
 800e680:	e7ee      	b.n	800e660 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800e682:	f8cd c008 	str.w	ip, [sp, #8]
 800e686:	9701      	str	r7, [sp, #4]
 800e688:	9300      	str	r3, [sp, #0]
 800e68a:	4613      	mov	r3, r2
 800e68c:	460a      	mov	r2, r1
 800e68e:	4629      	mov	r1, r5
 800e690:	4630      	mov	r0, r6
 800e692:	f7ff ff82 	bl	800e59a <RadioGetLoRaTimeOnAirNumerator>
 800e696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e69a:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800e69e:	4b03      	ldr	r3, [pc, #12]	@ (800e6ac <RadioTimeOnAir+0x70>)
 800e6a0:	5d98      	ldrb	r0, [r3, r6]
 800e6a2:	f7ff ff39 	bl	800e518 <RadioGetLoRaBandwidthInHz>
 800e6a6:	4605      	mov	r5, r0
        break;
 800e6a8:	e7da      	b.n	800e660 <RadioTimeOnAir+0x24>
 800e6aa:	bf00      	nop
 800e6ac:	08014914 	.word	0x08014914

0800e6b0 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800e6b0:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e6b2:	4b03      	ldr	r3, [pc, #12]	@ (800e6c0 <RadioOnTxTimeoutProcess+0x10>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	b113      	cbz	r3, 800e6be <RadioOnTxTimeoutProcess+0xe>
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	b103      	cbz	r3, 800e6be <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 800e6bc:	4798      	blx	r3
    }
}
 800e6be:	bd08      	pop	{r3, pc}
 800e6c0:	20001458 	.word	0x20001458

0800e6c4 <RadioOnTxTimeoutIrq>:
{
 800e6c4:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800e6c6:	f7ff fff3 	bl	800e6b0 <RadioOnTxTimeoutProcess>
}
 800e6ca:	bd08      	pop	{r3, pc}

0800e6cc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800e6cc:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e6ce:	4b03      	ldr	r3, [pc, #12]	@ (800e6dc <RadioOnRxTimeoutProcess+0x10>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	b113      	cbz	r3, 800e6da <RadioOnRxTimeoutProcess+0xe>
 800e6d4:	68db      	ldr	r3, [r3, #12]
 800e6d6:	b103      	cbz	r3, 800e6da <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 800e6d8:	4798      	blx	r3
    }
}
 800e6da:	bd08      	pop	{r3, pc}
 800e6dc:	20001458 	.word	0x20001458

0800e6e0 <RadioOnRxTimeoutIrq>:
{
 800e6e0:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800e6e2:	f7ff fff3 	bl	800e6cc <RadioOnRxTimeoutProcess>
}
 800e6e6:	bd08      	pop	{r3, pc}

0800e6e8 <payload_integration>:
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
    SUBGRF_SetTxContinuousWave( );
}

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800e6e8:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;

    for (i = 0; i < size; i++)
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	e005      	b.n	800e6fa <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800e6ee:	5ccc      	ldrb	r4, [r1, r3]
 800e6f0:	43e4      	mvns	r4, r4
 800e6f2:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 800e6f4:	2400      	movs	r4, #0
 800e6f6:	54c4      	strb	r4, [r0, r3]
    for (i = 0; i < size; i++)
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	dcf7      	bgt.n	800e6ee <payload_integration+0x6>
    }

    for (i = 0; i < (size * 8); i++)
 800e6fe:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 800e700:	461c      	mov	r4, r3
 800e702:	e012      	b.n	800e72a <payload_integration+0x42>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 800e704:	f103 0c07 	add.w	ip, r3, #7
 800e708:	e023      	b.n	800e752 <payload_integration+0x6a>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800e70a:	b2ed      	uxtb	r5, r5
 800e70c:	5d4d      	ldrb	r5, [r1, r5]
 800e70e:	fa45 f50e 	asr.w	r5, r5, lr
 800e712:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 800e716:	406c      	eors	r4, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800e718:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 800e71c:	5d46      	ldrb	r6, [r0, r5]
 800e71e:	fa04 fc0c 	lsl.w	ip, r4, ip
 800e722:	ea46 0c0c 	orr.w	ip, r6, ip
 800e726:	f800 c005 	strb.w	ip, [r0, r5]
    for (i = 0; i < (size * 8); i++)
 800e72a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800e72e:	da26      	bge.n	800e77e <payload_integration+0x96>
        index_bit = 7 - ( i % 8 );
 800e730:	425d      	negs	r5, r3
 800e732:	f003 0c07 	and.w	ip, r3, #7
 800e736:	f005 0507 	and.w	r5, r5, #7
 800e73a:	bf58      	it	pl
 800e73c:	f1c5 0c00 	rsbpl	ip, r5, #0
 800e740:	fa5f fe8c 	uxtb.w	lr, ip
 800e744:	f1ce 0e07 	rsb	lr, lr, #7
 800e748:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 800e74c:	469c      	mov	ip, r3
 800e74e:	2b00      	cmp	r3, #0
 800e750:	dbd8      	blt.n	800e704 <payload_integration+0x1c>
 800e752:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800e756:	3301      	adds	r3, #1
 800e758:	425e      	negs	r6, r3
 800e75a:	f003 0c07 	and.w	ip, r3, #7
 800e75e:	f006 0607 	and.w	r6, r6, #7
 800e762:	bf58      	it	pl
 800e764:	f1c6 0c00 	rsbpl	ip, r6, #0
 800e768:	fa5f fc8c 	uxtb.w	ip, ip
 800e76c:	f1cc 0c07 	rsb	ip, ip, #7
 800e770:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 800e774:	461e      	mov	r6, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	dac7      	bge.n	800e70a <payload_integration+0x22>
 800e77a:	1dde      	adds	r6, r3, #7
 800e77c:	e7c5      	b.n	800e70a <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800e77e:	01a3      	lsls	r3, r4, #6
 800e780:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 800e784:	b25b      	sxtb	r3, r3
 800e786:	b91c      	cbnz	r4, 800e790 <payload_integration+0xa8>
 800e788:	2120      	movs	r1, #32
 800e78a:	430b      	orrs	r3, r1
 800e78c:	5483      	strb	r3, [r0, r2]
}
 800e78e:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800e790:	2100      	movs	r1, #0
 800e792:	e7fa      	b.n	800e78a <payload_integration+0xa2>

0800e794 <RadioSetMaxPayloadLength>:
{
 800e794:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800e796:	2801      	cmp	r0, #1
 800e798:	d004      	beq.n	800e7a4 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800e79a:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c4 <RadioSetMaxPayloadLength+0x30>)
 800e79c:	7d5b      	ldrb	r3, [r3, #21]
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d008      	beq.n	800e7b4 <RadioSetMaxPayloadLength+0x20>
}
 800e7a2:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800e7a4:	4b08      	ldr	r3, [pc, #32]	@ (800e7c8 <RadioSetMaxPayloadLength+0x34>)
 800e7a6:	7019      	strb	r1, [r3, #0]
 800e7a8:	4806      	ldr	r0, [pc, #24]	@ (800e7c4 <RadioSetMaxPayloadLength+0x30>)
 800e7aa:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e7ac:	300e      	adds	r0, #14
 800e7ae:	f001 fd35 	bl	801021c <SUBGRF_SetPacketParams>
 800e7b2:	e7f6      	b.n	800e7a2 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800e7b4:	4b04      	ldr	r3, [pc, #16]	@ (800e7c8 <RadioSetMaxPayloadLength+0x34>)
 800e7b6:	7019      	strb	r1, [r3, #0]
 800e7b8:	4802      	ldr	r0, [pc, #8]	@ (800e7c4 <RadioSetMaxPayloadLength+0x30>)
 800e7ba:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e7bc:	300e      	adds	r0, #14
 800e7be:	f001 fd2d 	bl	801021c <SUBGRF_SetPacketParams>
}
 800e7c2:	e7ee      	b.n	800e7a2 <RadioSetMaxPayloadLength+0xe>
 800e7c4:	20001400 	.word	0x20001400
 800e7c8:	200000d0 	.word	0x200000d0

0800e7cc <RadioRead>:
{
 800e7cc:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister(addr);
 800e7ce:	f001 fbdf 	bl	800ff90 <SUBGRF_ReadRegister>
}
 800e7d2:	bd08      	pop	{r3, pc}

0800e7d4 <RadioWrite>:
{
 800e7d4:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister(addr, data );
 800e7d6:	f001 fae9 	bl	800fdac <SUBGRF_WriteRegister>
}
 800e7da:	bd08      	pop	{r3, pc}

0800e7dc <RadioTxCw>:
{
 800e7dc:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800e7de:	f001 fe33 	bl	8010448 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800e7e2:	2101      	movs	r1, #1
 800e7e4:	f001 fe1c 	bl	8010420 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800e7e8:	f001 f972 	bl	800fad0 <SUBGRF_SetTxContinuousWave>
}
 800e7ec:	bd08      	pop	{r3, pc}
	...

0800e7f0 <RadioTxPrbs>:
{
 800e7f0:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800e7f2:	2101      	movs	r1, #1
 800e7f4:	4b07      	ldr	r3, [pc, #28]	@ (800e814 <RadioTxPrbs+0x24>)
 800e7f6:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800e7fa:	f001 fe11 	bl	8010420 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800e7fe:	212d      	movs	r1, #45	@ 0x2d
 800e800:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800e804:	f7ff ffe6 	bl	800e7d4 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800e808:	f001 f969 	bl	800fade <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800e80c:	4802      	ldr	r0, [pc, #8]	@ (800e818 <RadioTxPrbs+0x28>)
 800e80e:	f001 f8fb 	bl	800fa08 <SUBGRF_SetTx>
}
 800e812:	bd08      	pop	{r3, pc}
 800e814:	20001400 	.word	0x20001400
 800e818:	000fffff 	.word	0x000fffff

0800e81c <RadioSetRxDutyCycle>:
{
 800e81c:	b538      	push	{r3, r4, r5, lr}
 800e81e:	4604      	mov	r4, r0
 800e820:	460d      	mov	r5, r1
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800e822:	2100      	movs	r1, #0
 800e824:	4b04      	ldr	r3, [pc, #16]	@ (800e838 <RadioSetRxDutyCycle+0x1c>)
 800e826:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800e82a:	f001 fdf9 	bl	8010420 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800e82e:	4629      	mov	r1, r5
 800e830:	4620      	mov	r0, r4
 800e832:	f001 f91d 	bl	800fa70 <SUBGRF_SetRxDutyCycle>
}
 800e836:	bd38      	pop	{r3, r4, r5, pc}
 800e838:	20001400 	.word	0x20001400

0800e83c <RadioRxBoosted>:
{
 800e83c:	b538      	push	{r3, r4, r5, lr}
 800e83e:	4604      	mov	r4, r0
    if (1UL==RFW_Is_Init())
 800e840:	f001 fed6 	bl	80105f0 <RFW_Is_Init>
 800e844:	2801      	cmp	r0, #1
 800e846:	d014      	beq.n	800e872 <RadioRxBoosted+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800e848:	2300      	movs	r3, #0
 800e84a:	461a      	mov	r2, r3
 800e84c:	f240 2162 	movw	r1, #610	@ 0x262
 800e850:	4608      	mov	r0, r1
 800e852:	f001 f9e8 	bl	800fc26 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800e856:	b97c      	cbnz	r4, 800e878 <RadioRxBoosted+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800e858:	4c0f      	ldr	r4, [pc, #60]	@ (800e898 <RadioRxBoosted+0x5c>)
 800e85a:	2100      	movs	r1, #0
 800e85c:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800e860:	f001 fdde 	bl	8010420 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800e864:	7863      	ldrb	r3, [r4, #1]
 800e866:	b183      	cbz	r3, 800e88a <RadioRxBoosted+0x4e>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800e868:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800e86c:	f001 faae 	bl	800fdcc <SUBGRF_SetRxBoosted>
}
 800e870:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit();
 800e872:	f001 fec5 	bl	8010600 <RFW_ReceiveInit>
 800e876:	e7ee      	b.n	800e856 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800e878:	4d08      	ldr	r5, [pc, #32]	@ (800e89c <RadioRxBoosted+0x60>)
 800e87a:	4621      	mov	r1, r4
 800e87c:	4628      	mov	r0, r5
 800e87e:	f002 fb81 	bl	8010f84 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800e882:	4628      	mov	r0, r5
 800e884:	f002 fb38 	bl	8010ef8 <UTIL_TIMER_Start>
 800e888:	e7e6      	b.n	800e858 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800e88a:	4b03      	ldr	r3, [pc, #12]	@ (800e898 <RadioRxBoosted+0x5c>)
 800e88c:	6898      	ldr	r0, [r3, #8]
 800e88e:	0180      	lsls	r0, r0, #6
 800e890:	f001 fa9c 	bl	800fdcc <SUBGRF_SetRxBoosted>
}
 800e894:	e7ec      	b.n	800e870 <RadioRxBoosted+0x34>
 800e896:	bf00      	nop
 800e898:	20001400 	.word	0x20001400
 800e89c:	200013d0 	.word	0x200013d0

0800e8a0 <RadioStandby>:
{
 800e8a0:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	f001 f896 	bl	800f9d4 <SUBGRF_SetStandby>
}
 800e8a8:	bd08      	pop	{r3, pc}

0800e8aa <RadioGetStatus>:
{
 800e8aa:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800e8ac:	f001 f88c 	bl	800f9c8 <SUBGRF_GetOperatingMode>
 800e8b0:	2805      	cmp	r0, #5
 800e8b2:	d007      	beq.n	800e8c4 <RadioGetStatus+0x1a>
 800e8b4:	2807      	cmp	r0, #7
 800e8b6:	d007      	beq.n	800e8c8 <RadioGetStatus+0x1e>
 800e8b8:	2804      	cmp	r0, #4
 800e8ba:	d001      	beq.n	800e8c0 <RadioGetStatus+0x16>
            return RF_IDLE;
 800e8bc:	2000      	movs	r0, #0
}
 800e8be:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800e8c0:	2002      	movs	r0, #2
 800e8c2:	e7fc      	b.n	800e8be <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800e8c4:	2001      	movs	r0, #1
 800e8c6:	e7fa      	b.n	800e8be <RadioGetStatus+0x14>
            return RF_CAD;
 800e8c8:	2003      	movs	r0, #3
 800e8ca:	e7f8      	b.n	800e8be <RadioGetStatus+0x14>

0800e8cc <RadioIrqProcess>:
{
 800e8cc:	b530      	push	{r4, r5, lr}
 800e8ce:	b083      	sub	sp, #12
    uint8_t size = 0;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800e8d6:	9300      	str	r3, [sp, #0]
    switch ( SubgRf.RadioIrq )
 800e8d8:	4b9c      	ldr	r3, [pc, #624]	@ (800eb4c <RadioIrqProcess+0x280>)
 800e8da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800e8de:	2b20      	cmp	r3, #32
 800e8e0:	d829      	bhi.n	800e936 <RadioIrqProcess+0x6a>
 800e8e2:	b21a      	sxth	r2, r3
 800e8e4:	2a00      	cmp	r2, #0
 800e8e6:	f000 80eb 	beq.w	800eac0 <RadioIrqProcess+0x1f4>
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	2b1f      	cmp	r3, #31
 800e8ee:	f200 80e7 	bhi.w	800eac0 <RadioIrqProcess+0x1f4>
 800e8f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e8f6:	005f      	.short	0x005f
 800e8f8:	00e50075 	.word	0x00e50075
 800e8fc:	00e500df 	.word	0x00e500df
 800e900:	00e500e5 	.word	0x00e500e5
 800e904:	00e500e7 	.word	0x00e500e7
 800e908:	00e500e5 	.word	0x00e500e5
 800e90c:	00e500e5 	.word	0x00e500e5
 800e910:	00e500e5 	.word	0x00e500e5
 800e914:	00e500f4 	.word	0x00e500f4
 800e918:	00e500e5 	.word	0x00e500e5
 800e91c:	00e500e5 	.word	0x00e500e5
 800e920:	00e500e5 	.word	0x00e500e5
 800e924:	00e500e5 	.word	0x00e500e5
 800e928:	00e500e5 	.word	0x00e500e5
 800e92c:	00e500e5 	.word	0x00e500e5
 800e930:	00e500e5 	.word	0x00e500e5
 800e934:	00fb      	.short	0x00fb
 800e936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e93a:	f000 80a3 	beq.w	800ea84 <RadioIrqProcess+0x1b8>
 800e93e:	d924      	bls.n	800e98a <RadioIrqProcess+0xbe>
 800e940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e944:	f040 80bc 	bne.w	800eac0 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800e948:	4b81      	ldr	r3, [pc, #516]	@ (800eb50 <RadioIrqProcess+0x284>)
 800e94a:	2201      	movs	r2, #1
 800e94c:	2100      	movs	r1, #0
 800e94e:	2002      	movs	r0, #2
 800e950:	f001 ff34 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800e954:	f001 f838 	bl	800f9c8 <SUBGRF_GetOperatingMode>
 800e958:	2804      	cmp	r0, #4
 800e95a:	f000 809e 	beq.w	800ea9a <RadioIrqProcess+0x1ce>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800e95e:	f001 f833 	bl	800f9c8 <SUBGRF_GetOperatingMode>
 800e962:	2805      	cmp	r0, #5
 800e964:	f040 80ac 	bne.w	800eac0 <RadioIrqProcess+0x1f4>
            TimerStop( &RxTimeoutTimer );
 800e968:	487a      	ldr	r0, [pc, #488]	@ (800eb54 <RadioIrqProcess+0x288>)
 800e96a:	f002 fa6b 	bl	8010e44 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800e96e:	2000      	movs	r0, #0
 800e970:	f001 f830 	bl	800f9d4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e974:	4b78      	ldr	r3, [pc, #480]	@ (800eb58 <RadioIrqProcess+0x28c>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f000 80a1 	beq.w	800eac0 <RadioIrqProcess+0x1f4>
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	f000 809d 	beq.w	800eac0 <RadioIrqProcess+0x1f4>
                RadioEvents->RxTimeout( );
 800e986:	4798      	blx	r3
 800e988:	e09a      	b.n	800eac0 <RadioIrqProcess+0x1f4>
    switch ( SubgRf.RadioIrq )
 800e98a:	2b40      	cmp	r3, #64	@ 0x40
 800e98c:	f000 80c7 	beq.w	800eb1e <RadioIrqProcess+0x252>
 800e990:	2b80      	cmp	r3, #128	@ 0x80
 800e992:	f040 8095 	bne.w	800eac0 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 800e996:	2000      	movs	r0, #0
 800e998:	f001 f81c 	bl	800f9d4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800e99c:	4b6e      	ldr	r3, [pc, #440]	@ (800eb58 <RadioIrqProcess+0x28c>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f000 808d 	beq.w	800eac0 <RadioIrqProcess+0x1f4>
 800e9a6:	699b      	ldr	r3, [r3, #24]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f000 8089 	beq.w	800eac0 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( false );
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	4798      	blx	r3
 800e9b2:	e085      	b.n	800eac0 <RadioIrqProcess+0x1f4>
        TimerStop( &TxTimeoutTimer );
 800e9b4:	4869      	ldr	r0, [pc, #420]	@ (800eb5c <RadioIrqProcess+0x290>)
 800e9b6:	f002 fa45 	bl	8010e44 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800e9ba:	2000      	movs	r0, #0
 800e9bc:	f001 f80a 	bl	800f9d4 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800e9c0:	f001 fe18 	bl	80105f4 <RFW_Is_LongPacketModeEnabled>
 800e9c4:	2801      	cmp	r0, #1
 800e9c6:	d008      	beq.n	800e9da <RadioIrqProcess+0x10e>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800e9c8:	4b63      	ldr	r3, [pc, #396]	@ (800eb58 <RadioIrqProcess+0x28c>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d077      	beq.n	800eac0 <RadioIrqProcess+0x1f4>
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d074      	beq.n	800eac0 <RadioIrqProcess+0x1f4>
            RadioEvents->TxDone( );
 800e9d6:	4798      	blx	r3
 800e9d8:	e072      	b.n	800eac0 <RadioIrqProcess+0x1f4>
            RFW_DeInit_TxLongPacket( );
 800e9da:	f001 fe14 	bl	8010606 <RFW_DeInit_TxLongPacket>
 800e9de:	e7f3      	b.n	800e9c8 <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 800e9e0:	485c      	ldr	r0, [pc, #368]	@ (800eb54 <RadioIrqProcess+0x288>)
 800e9e2:	f002 fa2f 	bl	8010e44 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800e9e6:	4b59      	ldr	r3, [pc, #356]	@ (800eb4c <RadioIrqProcess+0x280>)
 800e9e8:	785b      	ldrb	r3, [r3, #1]
 800e9ea:	b1f3      	cbz	r3, 800ea2a <RadioIrqProcess+0x15e>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800e9ec:	22ff      	movs	r2, #255	@ 0xff
 800e9ee:	f10d 0107 	add.w	r1, sp, #7
 800e9f2:	485b      	ldr	r0, [pc, #364]	@ (800eb60 <RadioIrqProcess+0x294>)
 800e9f4:	f001 fcfa 	bl	80103ec <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800e9f8:	485a      	ldr	r0, [pc, #360]	@ (800eb64 <RadioIrqProcess+0x298>)
 800e9fa:	f001 f99b 	bl	800fd34 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800e9fe:	4b56      	ldr	r3, [pc, #344]	@ (800eb58 <RadioIrqProcess+0x28c>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d05c      	beq.n	800eac0 <RadioIrqProcess+0x1f4>
 800ea06:	689c      	ldr	r4, [r3, #8]
 800ea08:	2c00      	cmp	r4, #0
 800ea0a:	d059      	beq.n	800eac0 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 800ea0c:	4b4f      	ldr	r3, [pc, #316]	@ (800eb4c <RadioIrqProcess+0x280>)
 800ea0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d11d      	bne.n	800ea52 <RadioIrqProcess+0x186>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800ea16:	4a4d      	ldr	r2, [pc, #308]	@ (800eb4c <RadioIrqProcess+0x280>)
 800ea18:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 800ea1c:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 800ea20:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ea24:	484e      	ldr	r0, [pc, #312]	@ (800eb60 <RadioIrqProcess+0x294>)
 800ea26:	47a0      	blx	r4
                break;
 800ea28:	e04a      	b.n	800eac0 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	f000 ffd2 	bl	800f9d4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800ea30:	2100      	movs	r1, #0
 800ea32:	f640 1002 	movw	r0, #2306	@ 0x902
 800ea36:	f001 f9b9 	bl	800fdac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800ea3a:	f640 1044 	movw	r0, #2372	@ 0x944
 800ea3e:	f001 faa7 	bl	800ff90 <SUBGRF_ReadRegister>
 800ea42:	f040 0102 	orr.w	r1, r0, #2
 800ea46:	b2c9      	uxtb	r1, r1
 800ea48:	f640 1044 	movw	r0, #2372	@ 0x944
 800ea4c:	f001 f9ae 	bl	800fdac <SUBGRF_WriteRegister>
 800ea50:	e7cc      	b.n	800e9ec <RadioIrqProcess+0x120>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800ea52:	4c3e      	ldr	r4, [pc, #248]	@ (800eb4c <RadioIrqProcess+0x280>)
 800ea54:	4669      	mov	r1, sp
 800ea56:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800ea58:	f001 fd7c 	bl	8010554 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800ea5c:	4b3e      	ldr	r3, [pc, #248]	@ (800eb58 <RadioIrqProcess+0x28c>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	689d      	ldr	r5, [r3, #8]
 800ea62:	9b00      	ldr	r3, [sp, #0]
 800ea64:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800ea68:	4a3f      	ldr	r2, [pc, #252]	@ (800eb68 <RadioIrqProcess+0x29c>)
 800ea6a:	fb82 1203 	smull	r1, r2, r2, r3
 800ea6e:	17db      	asrs	r3, r3, #31
 800ea70:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800ea74:	b25b      	sxtb	r3, r3
 800ea76:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 800ea7a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ea7e:	4838      	ldr	r0, [pc, #224]	@ (800eb60 <RadioIrqProcess+0x294>)
 800ea80:	47a8      	blx	r5
                break;
 800ea82:	e01d      	b.n	800eac0 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 800ea84:	2000      	movs	r0, #0
 800ea86:	f000 ffa5 	bl	800f9d4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ea8a:	4b33      	ldr	r3, [pc, #204]	@ (800eb58 <RadioIrqProcess+0x28c>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	b1bb      	cbz	r3, 800eac0 <RadioIrqProcess+0x1f4>
 800ea90:	699b      	ldr	r3, [r3, #24]
 800ea92:	b1ab      	cbz	r3, 800eac0 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( true );
 800ea94:	2001      	movs	r0, #1
 800ea96:	4798      	blx	r3
 800ea98:	e012      	b.n	800eac0 <RadioIrqProcess+0x1f4>
            TimerStop( &TxTimeoutTimer );
 800ea9a:	4830      	ldr	r0, [pc, #192]	@ (800eb5c <RadioIrqProcess+0x290>)
 800ea9c:	f002 f9d2 	bl	8010e44 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800eaa0:	2000      	movs	r0, #0
 800eaa2:	f000 ff97 	bl	800f9d4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800eaa6:	4b2c      	ldr	r3, [pc, #176]	@ (800eb58 <RadioIrqProcess+0x28c>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	b14b      	cbz	r3, 800eac0 <RadioIrqProcess+0x1f4>
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	b13b      	cbz	r3, 800eac0 <RadioIrqProcess+0x1f4>
                RadioEvents->TxTimeout( );
 800eab0:	4798      	blx	r3
 800eab2:	e005      	b.n	800eac0 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800eab4:	4b2d      	ldr	r3, [pc, #180]	@ (800eb6c <RadioIrqProcess+0x2a0>)
 800eab6:	2201      	movs	r2, #1
 800eab8:	2100      	movs	r1, #0
 800eaba:	2002      	movs	r0, #2
 800eabc:	f001 fe7e 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
}
 800eac0:	b003      	add	sp, #12
 800eac2:	bd30      	pop	{r4, r5, pc}
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800eac4:	4b2a      	ldr	r3, [pc, #168]	@ (800eb70 <RadioIrqProcess+0x2a4>)
 800eac6:	2201      	movs	r2, #1
 800eac8:	2100      	movs	r1, #0
 800eaca:	2002      	movs	r0, #2
 800eacc:	f001 fe76 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 800ead0:	f001 fd8e 	bl	80105f0 <RFW_Is_Init>
 800ead4:	2801      	cmp	r0, #1
 800ead6:	d1f3      	bne.n	800eac0 <RadioIrqProcess+0x1f4>
            RFW_ReceivePayload( );
 800ead8:	f001 fd96 	bl	8010608 <RFW_ReceivePayload>
 800eadc:	e7f0      	b.n	800eac0 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800eade:	4b25      	ldr	r3, [pc, #148]	@ (800eb74 <RadioIrqProcess+0x2a8>)
 800eae0:	2201      	movs	r2, #1
 800eae2:	2100      	movs	r1, #0
 800eae4:	2002      	movs	r0, #2
 800eae6:	f001 fe69 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800eaea:	e7e9      	b.n	800eac0 <RadioIrqProcess+0x1f4>
        TimerStop( &RxTimeoutTimer );
 800eaec:	4819      	ldr	r0, [pc, #100]	@ (800eb54 <RadioIrqProcess+0x288>)
 800eaee:	f002 f9a9 	bl	8010e44 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800eaf2:	4b16      	ldr	r3, [pc, #88]	@ (800eb4c <RadioIrqProcess+0x280>)
 800eaf4:	785b      	ldrb	r3, [r3, #1]
 800eaf6:	b173      	cbz	r3, 800eb16 <RadioIrqProcess+0x24a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800eaf8:	4b17      	ldr	r3, [pc, #92]	@ (800eb58 <RadioIrqProcess+0x28c>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d0df      	beq.n	800eac0 <RadioIrqProcess+0x1f4>
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d0dc      	beq.n	800eac0 <RadioIrqProcess+0x1f4>
            RadioEvents->RxTimeout( );
 800eb06:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800eb08:	4b1b      	ldr	r3, [pc, #108]	@ (800eb78 <RadioIrqProcess+0x2ac>)
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	2002      	movs	r0, #2
 800eb10:	f001 fe54 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
 800eb14:	e7d4      	b.n	800eac0 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800eb16:	2000      	movs	r0, #0
 800eb18:	f000 ff5c 	bl	800f9d4 <SUBGRF_SetStandby>
 800eb1c:	e7ec      	b.n	800eaf8 <RadioIrqProcess+0x22c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800eb1e:	4b17      	ldr	r3, [pc, #92]	@ (800eb7c <RadioIrqProcess+0x2b0>)
 800eb20:	2201      	movs	r2, #1
 800eb22:	2100      	movs	r1, #0
 800eb24:	2002      	movs	r0, #2
 800eb26:	f001 fe49 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800eb2a:	4b08      	ldr	r3, [pc, #32]	@ (800eb4c <RadioIrqProcess+0x280>)
 800eb2c:	785b      	ldrb	r3, [r3, #1]
 800eb2e:	b143      	cbz	r3, 800eb42 <RadioIrqProcess+0x276>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800eb30:	4b09      	ldr	r3, [pc, #36]	@ (800eb58 <RadioIrqProcess+0x28c>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d0c3      	beq.n	800eac0 <RadioIrqProcess+0x1f4>
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d0c0      	beq.n	800eac0 <RadioIrqProcess+0x1f4>
            RadioEvents->RxError( );
 800eb3e:	4798      	blx	r3
}
 800eb40:	e7be      	b.n	800eac0 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 800eb42:	2000      	movs	r0, #0
 800eb44:	f000 ff46 	bl	800f9d4 <SUBGRF_SetStandby>
 800eb48:	e7f2      	b.n	800eb30 <RadioIrqProcess+0x264>
 800eb4a:	bf00      	nop
 800eb4c:	20001400 	.word	0x20001400
 800eb50:	080148a8 	.word	0x080148a8
 800eb54:	200013d0 	.word	0x200013d0
 800eb58:	20001458 	.word	0x20001458
 800eb5c:	200013e8 	.word	0x200013e8
 800eb60:	2000145c 	.word	0x2000145c
 800eb64:	20001424 	.word	0x20001424
 800eb68:	10624dd3 	.word	0x10624dd3
 800eb6c:	080148bc 	.word	0x080148bc
 800eb70:	080148c8 	.word	0x080148c8
 800eb74:	080148d4 	.word	0x080148d4
 800eb78:	080148e0 	.word	0x080148e0
 800eb7c:	080148ec 	.word	0x080148ec

0800eb80 <RadioOnDioIrq>:
{
 800eb80:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800eb82:	4b03      	ldr	r3, [pc, #12]	@ (800eb90 <RadioOnDioIrq+0x10>)
 800eb84:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 800eb88:	f7ff fea0 	bl	800e8cc <RadioIrqProcess>
}
 800eb8c:	bd08      	pop	{r3, pc}
 800eb8e:	bf00      	nop
 800eb90:	20001400 	.word	0x20001400

0800eb94 <RadioGetWakeupTime>:
{
 800eb94:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800eb96:	f001 fc6e 	bl	8010476 <SUBGRF_GetRadioWakeUpTime>
}
 800eb9a:	3003      	adds	r0, #3
 800eb9c:	bd08      	pop	{r3, pc}

0800eb9e <RadioReadRegisters>:
{
 800eb9e:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800eba0:	f001 fbae 	bl	8010300 <SUBGRF_ReadRegisters>
}
 800eba4:	bd08      	pop	{r3, pc}

0800eba6 <RadioWriteRegisters>:
{
 800eba6:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800eba8:	f001 faf6 	bl	8010198 <SUBGRF_WriteRegisters>
}
 800ebac:	bd08      	pop	{r3, pc}

0800ebae <RadioRssi>:
{
 800ebae:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800ebb0:	f001 f8b2 	bl	800fd18 <SUBGRF_GetRssiInst>
}
 800ebb4:	bd08      	pop	{r3, pc}
	...

0800ebb8 <RadioSetTxContinuousWave>:
{
 800ebb8:	b538      	push	{r3, r4, r5, lr}
 800ebba:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800ebbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ebc0:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 800ebc4:	f001 f868 	bl	800fc98 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800ebc8:	4628      	mov	r0, r5
 800ebca:	f001 fc3d 	bl	8010448 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800ebce:	2101      	movs	r1, #1
 800ebd0:	f001 fc26 	bl	8010420 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800ebd4:	f000 ff7c 	bl	800fad0 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800ebd8:	4d04      	ldr	r5, [pc, #16]	@ (800ebec <RadioSetTxContinuousWave+0x34>)
 800ebda:	4621      	mov	r1, r4
 800ebdc:	4628      	mov	r0, r5
 800ebde:	f002 f9d1 	bl	8010f84 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ebe2:	4628      	mov	r0, r5
 800ebe4:	f002 f988 	bl	8010ef8 <UTIL_TIMER_Start>
}
 800ebe8:	bd38      	pop	{r3, r4, r5, pc}
 800ebea:	bf00      	nop
 800ebec:	200013e8 	.word	0x200013e8

0800ebf0 <RadioSetChannel>:
{
 800ebf0:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800ebf2:	f001 f851 	bl	800fc98 <SUBGRF_SetRfFrequency>
}
 800ebf6:	bd08      	pop	{r3, pc}

0800ebf8 <RadioStartCad>:
{
 800ebf8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800ebfa:	2100      	movs	r1, #0
 800ebfc:	4b07      	ldr	r3, [pc, #28]	@ (800ec1c <RadioStartCad+0x24>)
 800ebfe:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800ec02:	f001 fc0d 	bl	8010420 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800ec06:	2300      	movs	r3, #0
 800ec08:	461a      	mov	r2, r3
 800ec0a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800ec0e:	4608      	mov	r0, r1
 800ec10:	f001 f809 	bl	800fc26 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800ec14:	f000 ff50 	bl	800fab8 <SUBGRF_SetCad>
}
 800ec18:	bd08      	pop	{r3, pc}
 800ec1a:	bf00      	nop
 800ec1c:	20001400 	.word	0x20001400

0800ec20 <RadioRx>:
{
 800ec20:	b538      	push	{r3, r4, r5, lr}
 800ec22:	4604      	mov	r4, r0
    if ( 1UL == RFW_Is_Init( ) )
 800ec24:	f001 fce4 	bl	80105f0 <RFW_Is_Init>
 800ec28:	2801      	cmp	r0, #1
 800ec2a:	d014      	beq.n	800ec56 <RadioRx+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	461a      	mov	r2, r3
 800ec30:	f240 2162 	movw	r1, #610	@ 0x262
 800ec34:	4608      	mov	r0, r1
 800ec36:	f000 fff6 	bl	800fc26 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800ec3a:	b97c      	cbnz	r4, 800ec5c <RadioRx+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800ec3c:	4c0f      	ldr	r4, [pc, #60]	@ (800ec7c <RadioRx+0x5c>)
 800ec3e:	2100      	movs	r1, #0
 800ec40:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800ec44:	f001 fbec 	bl	8010420 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800ec48:	7863      	ldrb	r3, [r4, #1]
 800ec4a:	b183      	cbz	r3, 800ec6e <RadioRx+0x4e>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800ec4c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800ec50:	f000 fef4 	bl	800fa3c <SUBGRF_SetRx>
}
 800ec54:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit( );
 800ec56:	f001 fcd3 	bl	8010600 <RFW_ReceiveInit>
 800ec5a:	e7ee      	b.n	800ec3a <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800ec5c:	4d08      	ldr	r5, [pc, #32]	@ (800ec80 <RadioRx+0x60>)
 800ec5e:	4621      	mov	r1, r4
 800ec60:	4628      	mov	r0, r5
 800ec62:	f002 f98f 	bl	8010f84 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800ec66:	4628      	mov	r0, r5
 800ec68:	f002 f946 	bl	8010ef8 <UTIL_TIMER_Start>
 800ec6c:	e7e6      	b.n	800ec3c <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800ec6e:	4b03      	ldr	r3, [pc, #12]	@ (800ec7c <RadioRx+0x5c>)
 800ec70:	6898      	ldr	r0, [r3, #8]
 800ec72:	0180      	lsls	r0, r0, #6
 800ec74:	f000 fee2 	bl	800fa3c <SUBGRF_SetRx>
}
 800ec78:	e7ec      	b.n	800ec54 <RadioRx+0x34>
 800ec7a:	bf00      	nop
 800ec7c:	20001400 	.word	0x20001400
 800ec80:	200013d0 	.word	0x200013d0

0800ec84 <RadioSleep>:
{
 800ec84:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800ec86:	f04f 0004 	mov.w	r0, #4
 800ec8a:	f001 f9db 	bl	8010044 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800ec8e:	2002      	movs	r0, #2
 800ec90:	f7f2 fd74 	bl	800177c <HAL_Delay>
}
 800ec94:	bd08      	pop	{r3, pc}
	...

0800ec98 <RadioSend>:
{
 800ec98:	b570      	push	{r4, r5, r6, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800eca0:	2300      	movs	r3, #0
 800eca2:	461a      	mov	r2, r3
 800eca4:	f240 2101 	movw	r1, #513	@ 0x201
 800eca8:	4608      	mov	r0, r1
 800ecaa:	f000 ffbc 	bl	800fc26 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800ecae:	4e5a      	ldr	r6, [pc, #360]	@ (800ee18 <RadioSend+0x180>)
 800ecb0:	2101      	movs	r1, #1
 800ecb2:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 800ecb6:	f001 fbb3 	bl	8010420 <SUBGRF_SetSwitch>
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800ecba:	7833      	ldrb	r3, [r6, #0]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d103      	bne.n	800ecc8 <RadioSend+0x30>
 800ecc0:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 800ecc4:	2b06      	cmp	r3, #6
 800ecc6:	d012      	beq.n	800ecee <RadioSend+0x56>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800ecc8:	f640 0089 	movw	r0, #2185	@ 0x889
 800eccc:	f001 f960 	bl	800ff90 <SUBGRF_ReadRegister>
 800ecd0:	f040 0104 	orr.w	r1, r0, #4
 800ecd4:	b2c9      	uxtb	r1, r1
 800ecd6:	f640 0089 	movw	r0, #2185	@ 0x889
 800ecda:	f001 f867 	bl	800fdac <SUBGRF_WriteRegister>
    switch(SubgRf.Modem)
 800ecde:	4b4e      	ldr	r3, [pc, #312]	@ (800ee18 <RadioSend+0x180>)
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	2b03      	cmp	r3, #3
 800ece4:	d818      	bhi.n	800ed18 <RadioSend+0x80>
 800ece6:	e8df f003 	tbb	[pc, r3]
 800ecea:	0d22      	.short	0x0d22
 800ecec:	5a4d      	.short	0x5a4d
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800ecee:	f640 0089 	movw	r0, #2185	@ 0x889
 800ecf2:	f001 f94d 	bl	800ff90 <SUBGRF_ReadRegister>
 800ecf6:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800ecfa:	f640 0089 	movw	r0, #2185	@ 0x889
 800ecfe:	f001 f855 	bl	800fdac <SUBGRF_WriteRegister>
 800ed02:	e7ec      	b.n	800ecde <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800ed04:	4844      	ldr	r0, [pc, #272]	@ (800ee18 <RadioSend+0x180>)
 800ed06:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ed08:	300e      	adds	r0, #14
 800ed0a:	f001 fa87 	bl	801021c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ed0e:	2200      	movs	r2, #0
 800ed10:	4621      	mov	r1, r4
 800ed12:	4628      	mov	r0, r5
 800ed14:	f001 fb51 	bl	80103ba <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800ed18:	4c40      	ldr	r4, [pc, #256]	@ (800ee1c <RadioSend+0x184>)
 800ed1a:	4b3f      	ldr	r3, [pc, #252]	@ (800ee18 <RadioSend+0x180>)
 800ed1c:	6859      	ldr	r1, [r3, #4]
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f002 f930 	bl	8010f84 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ed24:	4620      	mov	r0, r4
 800ed26:	f002 f8e7 	bl	8010ef8 <UTIL_TIMER_Start>
}
 800ed2a:	b002      	add	sp, #8
 800ed2c:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800ed2e:	f001 fc5f 	bl	80105f0 <RFW_Is_Init>
 800ed32:	2801      	cmp	r0, #1
 800ed34:	d00a      	beq.n	800ed4c <RadioSend+0xb4>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800ed36:	4838      	ldr	r0, [pc, #224]	@ (800ee18 <RadioSend+0x180>)
 800ed38:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ed3a:	300e      	adds	r0, #14
 800ed3c:	f001 fa6e 	bl	801021c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800ed40:	2200      	movs	r2, #0
 800ed42:	4621      	mov	r1, r4
 800ed44:	4628      	mov	r0, r5
 800ed46:	f001 fb38 	bl	80103ba <SUBGRF_SendPayload>
 800ed4a:	e7e5      	b.n	800ed18 <RadioSend+0x80>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800ed4c:	f10d 0207 	add.w	r2, sp, #7
 800ed50:	4621      	mov	r1, r4
 800ed52:	4628      	mov	r0, r5
 800ed54:	f001 fc51 	bl	80105fa <RFW_TransmitInit>
 800ed58:	b968      	cbnz	r0, 800ed76 <RadioSend+0xde>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800ed5a:	482f      	ldr	r0, [pc, #188]	@ (800ee18 <RadioSend+0x180>)
 800ed5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ed60:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ed62:	300e      	adds	r0, #14
 800ed64:	f001 fa5a 	bl	801021c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f001 fb23 	bl	80103ba <SUBGRF_SendPayload>
 800ed74:	e7d0      	b.n	800ed18 <RadioSend+0x80>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800ed76:	4b2a      	ldr	r3, [pc, #168]	@ (800ee20 <RadioSend+0x188>)
 800ed78:	2201      	movs	r2, #1
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	2002      	movs	r0, #2
 800ed7e:	f001 fd1d 	bl	80107bc <UTIL_ADV_TRACE_COND_FSend>
                return;
 800ed82:	e7d2      	b.n	800ed2a <RadioSend+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ed84:	4824      	ldr	r0, [pc, #144]	@ (800ee18 <RadioSend+0x180>)
 800ed86:	2302      	movs	r3, #2
 800ed88:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800ed8a:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ed8c:	300e      	adds	r0, #14
 800ed8e:	f001 fa45 	bl	801021c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ed92:	2200      	movs	r2, #0
 800ed94:	4621      	mov	r1, r4
 800ed96:	4628      	mov	r0, r5
 800ed98:	f001 fb0f 	bl	80103ba <SUBGRF_SendPayload>
            break;
 800ed9c:	e7bc      	b.n	800ed18 <RadioSend+0x80>
            payload_integration( RadioBuffer, buffer, size );
 800ed9e:	4622      	mov	r2, r4
 800eda0:	4629      	mov	r1, r5
 800eda2:	4820      	ldr	r0, [pc, #128]	@ (800ee24 <RadioSend+0x18c>)
 800eda4:	f7ff fca0 	bl	800e6e8 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800eda8:	4e1b      	ldr	r6, [pc, #108]	@ (800ee18 <RadioSend+0x180>)
 800edaa:	2302      	movs	r3, #2
 800edac:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800edae:	1c65      	adds	r5, r4, #1
 800edb0:	b2ed      	uxtb	r5, r5
 800edb2:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800edb4:	f106 000e 	add.w	r0, r6, #14
 800edb8:	f001 fa30 	bl	801021c <SUBGRF_SetPacketParams>
            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800edbc:	2100      	movs	r1, #0
 800edbe:	20f1      	movs	r0, #241	@ 0xf1
 800edc0:	f7ff fd08 	bl	800e7d4 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800edc4:	2100      	movs	r1, #0
 800edc6:	20f0      	movs	r0, #240	@ 0xf0
 800edc8:	f7ff fd04 	bl	800e7d4 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800edcc:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800edce:	2b64      	cmp	r3, #100	@ 0x64
 800edd0:	d019      	beq.n	800ee06 <RadioSend+0x16e>
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 800edd2:	21e1      	movs	r1, #225	@ 0xe1
 800edd4:	20f3      	movs	r0, #243	@ 0xf3
 800edd6:	f7ff fcfd 	bl	800e7d4 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 800edda:	2104      	movs	r1, #4
 800eddc:	20f2      	movs	r0, #242	@ 0xf2
 800edde:	f7ff fcf9 	bl	800e7d4 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800ede2:	00e1      	lsls	r1, r4, #3
 800ede4:	1c8c      	adds	r4, r1, #2
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800ede6:	0a09      	lsrs	r1, r1, #8
 800ede8:	20f4      	movs	r0, #244	@ 0xf4
 800edea:	f7ff fcf3 	bl	800e7d4 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800edee:	f004 01fe 	and.w	r1, r4, #254	@ 0xfe
 800edf2:	20f5      	movs	r0, #245	@ 0xf5
 800edf4:	f7ff fcee 	bl	800e7d4 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800edf8:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800edfc:	4629      	mov	r1, r5
 800edfe:	4809      	ldr	r0, [pc, #36]	@ (800ee24 <RadioSend+0x18c>)
 800ee00:	f001 fadb 	bl	80103ba <SUBGRF_SendPayload>
            break;
 800ee04:	e788      	b.n	800ed18 <RadioSend+0x80>
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800ee06:	2170      	movs	r1, #112	@ 0x70
 800ee08:	20f3      	movs	r0, #243	@ 0xf3
 800ee0a:	f7ff fce3 	bl	800e7d4 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800ee0e:	211d      	movs	r1, #29
 800ee10:	20f2      	movs	r0, #242	@ 0xf2
 800ee12:	f7ff fcdf 	bl	800e7d4 <RadioWrite>
 800ee16:	e7e4      	b.n	800ede2 <RadioSend+0x14a>
 800ee18:	20001400 	.word	0x20001400
 800ee1c:	200013e8 	.word	0x200013e8
 800ee20:	080148fc 	.word	0x080148fc
 800ee24:	2000145c 	.word	0x2000145c

0800ee28 <RadioSetModem>:
{
 800ee28:	b510      	push	{r4, lr}
 800ee2a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800ee2c:	4b19      	ldr	r3, [pc, #100]	@ (800ee94 <RadioSetModem+0x6c>)
 800ee2e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem(modem);
 800ee30:	f001 fbeb 	bl	801060a <RFW_SetRadioModem>
    switch( modem )
 800ee34:	3c01      	subs	r4, #1
 800ee36:	2c03      	cmp	r4, #3
 800ee38:	d803      	bhi.n	800ee42 <RadioSetModem+0x1a>
 800ee3a:	e8df f004 	tbb	[pc, r4]
 800ee3e:	1509      	.short	0x1509
 800ee40:	231c      	.short	0x231c
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800ee42:	2000      	movs	r0, #0
 800ee44:	f001 f802 	bl	800fe4c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ee48:	4b12      	ldr	r3, [pc, #72]	@ (800ee94 <RadioSetModem+0x6c>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	735a      	strb	r2, [r3, #13]
        break;
 800ee4e:	e011      	b.n	800ee74 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800ee50:	2001      	movs	r0, #1
 800ee52:	f000 fffb 	bl	800fe4c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800ee56:	4b0f      	ldr	r3, [pc, #60]	@ (800ee94 <RadioSetModem+0x6c>)
 800ee58:	7b5a      	ldrb	r2, [r3, #13]
 800ee5a:	7b18      	ldrb	r0, [r3, #12]
 800ee5c:	4282      	cmp	r2, r0
 800ee5e:	d009      	beq.n	800ee74 <RadioSetModem+0x4c>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800ee60:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800ee62:	f000 fa85 	bl	800f370 <RadioSetPublicNetwork>
 800ee66:	e005      	b.n	800ee74 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ee68:	2002      	movs	r0, #2
 800ee6a:	f000 ffef 	bl	800fe4c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ee6e:	4b09      	ldr	r3, [pc, #36]	@ (800ee94 <RadioSetModem+0x6c>)
 800ee70:	2200      	movs	r2, #0
 800ee72:	735a      	strb	r2, [r3, #13]
}
 800ee74:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ee76:	2002      	movs	r0, #2
 800ee78:	f000 ffe8 	bl	800fe4c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ee7c:	4b05      	ldr	r3, [pc, #20]	@ (800ee94 <RadioSetModem+0x6c>)
 800ee7e:	2200      	movs	r2, #0
 800ee80:	735a      	strb	r2, [r3, #13]
        break;
 800ee82:	e7f7      	b.n	800ee74 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800ee84:	2000      	movs	r0, #0
 800ee86:	f000 ffe1 	bl	800fe4c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800ee8a:	4b02      	ldr	r3, [pc, #8]	@ (800ee94 <RadioSetModem+0x6c>)
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	735a      	strb	r2, [r3, #13]
}
 800ee90:	e7f0      	b.n	800ee74 <RadioSetModem+0x4c>
 800ee92:	bf00      	nop
 800ee94:	20001400 	.word	0x20001400

0800ee98 <RadioSetTxGenericConfig>:
    }
    return status;
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800ee98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee9c:	b086      	sub	sp, #24
 800ee9e:	4605      	mov	r5, r0
 800eea0:	460c      	mov	r4, r1
 800eea2:	4617      	mov	r7, r2
 800eea4:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800eea6:	2300      	movs	r3, #0
 800eea8:	9304      	str	r3, [sp, #16]
 800eeaa:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800eeac:	f001 fb9f 	bl	80105ee <RFW_DeInit>
    switch( modem )
 800eeb0:	2d01      	cmp	r5, #1
 800eeb2:	f000 8086 	beq.w	800efc2 <RadioSetTxGenericConfig+0x12a>
 800eeb6:	2d02      	cmp	r5, #2
 800eeb8:	f000 80ee 	beq.w	800f098 <RadioSetTxGenericConfig+0x200>
 800eebc:	b165      	cbz	r5, 800eed8 <RadioSetTxGenericConfig+0x40>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800eebe:	4638      	mov	r0, r7
 800eec0:	f001 fac2 	bl	8010448 <SUBGRF_SetRfTxPower>
 800eec4:	4c85      	ldr	r4, [pc, #532]	@ (800f0dc <RadioSetTxGenericConfig+0x244>)
 800eec6:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800eeca:	f001 fb95 	bl	80105f8 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800eece:	6066      	str	r6, [r4, #4]
    return 0;
 800eed0:	2000      	movs	r0, #0
}
 800eed2:	b006      	add	sp, #24
 800eed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800eed8:	68a3      	ldr	r3, [r4, #8]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f000 80f1 	beq.w	800f0c2 <RadioSetTxGenericConfig+0x22a>
 800eee0:	6923      	ldr	r3, [r4, #16]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	f000 80f0 	beq.w	800f0c8 <RadioSetTxGenericConfig+0x230>
        if( config->fsk.SyncWordLength > 8 )
 800eee8:	7d20      	ldrb	r0, [r4, #20]
 800eeea:	2808      	cmp	r0, #8
 800eeec:	f200 80ef 	bhi.w	800f0ce <RadioSetTxGenericConfig+0x236>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800eef0:	2100      	movs	r1, #0
 800eef2:	e007      	b.n	800ef04 <RadioSetTxGenericConfig+0x6c>
                syncword[i] = config->fsk.SyncWord[i];
 800eef4:	69a3      	ldr	r3, [r4, #24]
 800eef6:	5c5a      	ldrb	r2, [r3, r1]
 800eef8:	f101 0318 	add.w	r3, r1, #24
 800eefc:	446b      	add	r3, sp
 800eefe:	f803 2c08 	strb.w	r2, [r3, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ef02:	3101      	adds	r1, #1
 800ef04:	4288      	cmp	r0, r1
 800ef06:	dcf5      	bgt.n	800eef4 <RadioSetTxGenericConfig+0x5c>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ef08:	4d74      	ldr	r5, [pc, #464]	@ (800f0dc <RadioSetTxGenericConfig+0x244>)
 800ef0a:	f04f 0800 	mov.w	r8, #0
 800ef0e:	f885 8038 	strb.w	r8, [r5, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800ef12:	68a3      	ldr	r3, [r4, #8]
 800ef14:	63eb      	str	r3, [r5, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800ef16:	7823      	ldrb	r3, [r4, #0]
 800ef18:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800ef1c:	6860      	ldr	r0, [r4, #4]
 800ef1e:	f001 fb01 	bl	8010524 <SUBGRF_GetFskBandwidthRegValue>
 800ef22:	f885 0045 	strb.w	r0, [r5, #69]	@ 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800ef26:	68e3      	ldr	r3, [r4, #12]
 800ef28:	642b      	str	r3, [r5, #64]	@ 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ef2a:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800ef2e:	6923      	ldr	r3, [r4, #16]
 800ef30:	00db      	lsls	r3, r3, #3
 800ef32:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800ef34:	2304      	movs	r3, #4
 800ef36:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800ef38:	7d23      	ldrb	r3, [r4, #20]
 800ef3a:	00db      	lsls	r3, r3, #3
 800ef3c:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800ef3e:	f885 8014 	strb.w	r8, [r5, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800ef42:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800ef46:	2b02      	cmp	r3, #2
 800ef48:	d008      	beq.n	800ef5c <RadioSetTxGenericConfig+0xc4>
 800ef4a:	7fa2      	ldrb	r2, [r4, #30]
 800ef4c:	2a02      	cmp	r2, #2
 800ef4e:	d005      	beq.n	800ef5c <RadioSetTxGenericConfig+0xc4>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800ef50:	7fe0      	ldrb	r0, [r4, #31]
 800ef52:	4962      	ldr	r1, [pc, #392]	@ (800f0dc <RadioSetTxGenericConfig+0x244>)
 800ef54:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800ef56:	760b      	strb	r3, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800ef58:	754a      	strb	r2, [r1, #21]
 800ef5a:	e018      	b.n	800ef8e <RadioSetTxGenericConfig+0xf6>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800ef5c:	7fe2      	ldrb	r2, [r4, #31]
 800ef5e:	f102 030f 	add.w	r3, r2, #15
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d901      	bls.n	800ef6c <RadioSetTxGenericConfig+0xd4>
 800ef68:	2a01      	cmp	r2, #1
 800ef6a:	d127      	bne.n	800efbc <RadioSetTxGenericConfig+0x124>
            ConfigGeneric.rtx = CONFIG_TX;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 800ef72:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800ef74:	4a5a      	ldr	r2, [pc, #360]	@ (800f0e0 <RadioSetTxGenericConfig+0x248>)
 800ef76:	4b5b      	ldr	r3, [pc, #364]	@ (800f0e4 <RadioSetTxGenericConfig+0x24c>)
 800ef78:	6819      	ldr	r1, [r3, #0]
 800ef7a:	a801      	add	r0, sp, #4
 800ef7c:	f001 fb34 	bl	80105e8 <RFW_Init>
 800ef80:	b9e0      	cbnz	r0, 800efbc <RadioSetTxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800ef82:	4b56      	ldr	r3, [pc, #344]	@ (800f0dc <RadioSetTxGenericConfig+0x244>)
 800ef84:	2200      	movs	r2, #0
 800ef86:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800ef88:	2101      	movs	r1, #1
 800ef8a:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800ef8c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800ef8e:	f7ff fc87 	bl	800e8a0 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800ef92:	2000      	movs	r0, #0
 800ef94:	f7ff ff48 	bl	800ee28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ef98:	4d53      	ldr	r5, [pc, #332]	@ (800f0e8 <RadioSetTxGenericConfig+0x250>)
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	f000 ff70 	bl	800fe80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800efa0:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 800efa4:	f001 f93a 	bl	801021c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800efa8:	a804      	add	r0, sp, #16
 800efaa:	f001 f905 	bl	80101b8 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800efae:	8ba0      	ldrh	r0, [r4, #28]
 800efb0:	f001 f868 	bl	8010084 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800efb4:	8c20      	ldrh	r0, [r4, #32]
 800efb6:	f001 f91c 	bl	80101f2 <SUBGRF_SetCrcPolynomial>
        break;
 800efba:	e780      	b.n	800eebe <RadioSetTxGenericConfig+0x26>
                return -1;
 800efbc:	f04f 30ff 	mov.w	r0, #4294967295
 800efc0:	e787      	b.n	800eed2 <RadioSetTxGenericConfig+0x3a>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800efc2:	4b46      	ldr	r3, [pc, #280]	@ (800f0dc <RadioSetTxGenericConfig+0x244>)
 800efc4:	2201      	movs	r2, #1
 800efc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800efca:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800efce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800efd2:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 800efd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800efda:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800efde:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800efe2:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 800efe6:	2b01      	cmp	r3, #1
 800efe8:	d036      	beq.n	800f058 <RadioSetTxGenericConfig+0x1c0>
 800efea:	2b02      	cmp	r3, #2
 800efec:	d039      	beq.n	800f062 <RadioSetTxGenericConfig+0x1ca>
 800efee:	b373      	cbz	r3, 800f04e <RadioSetTxGenericConfig+0x1b6>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800eff0:	4d3a      	ldr	r5, [pc, #232]	@ (800f0dc <RadioSetTxGenericConfig+0x244>)
 800eff2:	f04f 0801 	mov.w	r8, #1
 800eff6:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800effa:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 800effc:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800effe:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f002:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800f004:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800f008:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800f00c:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f010:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 800f014:	f7ff fc44 	bl	800e8a0 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800f018:	4640      	mov	r0, r8
 800f01a:	f7ff ff05 	bl	800ee28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f01e:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800f022:	f000 ff2d 	bl	800fe80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f026:	f105 000e 	add.w	r0, r5, #14
 800f02a:	f001 f8f7 	bl	801021c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800f02e:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 800f032:	2b06      	cmp	r3, #6
 800f034:	d025      	beq.n	800f082 <RadioSetTxGenericConfig+0x1ea>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800f036:	f640 0089 	movw	r0, #2185	@ 0x889
 800f03a:	f000 ffa9 	bl	800ff90 <SUBGRF_ReadRegister>
 800f03e:	f040 0104 	orr.w	r1, r0, #4
 800f042:	b2c9      	uxtb	r1, r1
 800f044:	f640 0089 	movw	r0, #2185	@ 0x889
 800f048:	f000 feb0 	bl	800fdac <SUBGRF_WriteRegister>
 800f04c:	e737      	b.n	800eebe <RadioSetTxGenericConfig+0x26>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f04e:	4b23      	ldr	r3, [pc, #140]	@ (800f0dc <RadioSetTxGenericConfig+0x244>)
 800f050:	2200      	movs	r2, #0
 800f052:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800f056:	e7cb      	b.n	800eff0 <RadioSetTxGenericConfig+0x158>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f058:	4b20      	ldr	r3, [pc, #128]	@ (800f0dc <RadioSetTxGenericConfig+0x244>)
 800f05a:	2201      	movs	r2, #1
 800f05c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800f060:	e7c6      	b.n	800eff0 <RadioSetTxGenericConfig+0x158>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800f062:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f066:	3b0b      	subs	r3, #11
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d904      	bls.n	800f078 <RadioSetTxGenericConfig+0x1e0>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f06e:	4b1b      	ldr	r3, [pc, #108]	@ (800f0dc <RadioSetTxGenericConfig+0x244>)
 800f070:	2200      	movs	r2, #0
 800f072:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800f076:	e7bb      	b.n	800eff0 <RadioSetTxGenericConfig+0x158>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f078:	4b18      	ldr	r3, [pc, #96]	@ (800f0dc <RadioSetTxGenericConfig+0x244>)
 800f07a:	2201      	movs	r2, #1
 800f07c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800f080:	e7b6      	b.n	800eff0 <RadioSetTxGenericConfig+0x158>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800f082:	f640 0089 	movw	r0, #2185	@ 0x889
 800f086:	f000 ff83 	bl	800ff90 <SUBGRF_ReadRegister>
 800f08a:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800f08e:	f640 0089 	movw	r0, #2185	@ 0x889
 800f092:	f000 fe8b 	bl	800fdac <SUBGRF_WriteRegister>
 800f096:	e712      	b.n	800eebe <RadioSetTxGenericConfig+0x26>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800f098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f09a:	3b01      	subs	r3, #1
 800f09c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f0a0:	d218      	bcs.n	800f0d4 <RadioSetTxGenericConfig+0x23c>
        RadioSetModem( MODEM_BPSK );
 800f0a2:	2002      	movs	r0, #2
 800f0a4:	f7ff fec0 	bl	800ee28 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800f0a8:	480c      	ldr	r0, [pc, #48]	@ (800f0dc <RadioSetTxGenericConfig+0x244>)
 800f0aa:	2302      	movs	r3, #2
 800f0ac:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800f0b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f0b2:	6483      	str	r3, [r0, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800f0b4:	2316      	movs	r3, #22
 800f0b6:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f0ba:	3038      	adds	r0, #56	@ 0x38
 800f0bc:	f000 fee0 	bl	800fe80 <SUBGRF_SetModulationParams>
        break;
 800f0c0:	e6fd      	b.n	800eebe <RadioSetTxGenericConfig+0x26>
            return -1;
 800f0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c6:	e704      	b.n	800eed2 <RadioSetTxGenericConfig+0x3a>
 800f0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0cc:	e701      	b.n	800eed2 <RadioSetTxGenericConfig+0x3a>
            return -1;
 800f0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d2:	e6fe      	b.n	800eed2 <RadioSetTxGenericConfig+0x3a>
            return -1;
 800f0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d8:	e6fb      	b.n	800eed2 <RadioSetTxGenericConfig+0x3a>
 800f0da:	bf00      	nop
 800f0dc:	20001400 	.word	0x20001400
 800f0e0:	200013e8 	.word	0x200013e8
 800f0e4:	20001458 	.word	0x20001458
 800f0e8:	20001438 	.word	0x20001438

0800f0ec <RadioSetRxGenericConfig>:
{
 800f0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0ee:	b087      	sub	sp, #28
 800f0f0:	4607      	mov	r7, r0
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	4615      	mov	r5, r2
 800f0f6:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	9304      	str	r3, [sp, #16]
 800f0fc:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800f0fe:	f001 fa76 	bl	80105ee <RFW_DeInit>
    if( rxContinuous != 0 )
 800f102:	b105      	cbz	r5, 800f106 <RadioSetRxGenericConfig+0x1a>
        symbTimeout = 0;
 800f104:	2600      	movs	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800f106:	3d00      	subs	r5, #0
 800f108:	bf18      	it	ne
 800f10a:	2501      	movne	r5, #1
 800f10c:	4b94      	ldr	r3, [pc, #592]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f10e:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800f110:	b12f      	cbz	r7, 800f11e <RadioSetRxGenericConfig+0x32>
 800f112:	2f01      	cmp	r7, #1
 800f114:	f000 8095 	beq.w	800f242 <RadioSetRxGenericConfig+0x156>
 800f118:	2000      	movs	r0, #0
}
 800f11a:	b007      	add	sp, #28
 800f11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800f11e:	68e3      	ldr	r3, [r4, #12]
 800f120:	2b00      	cmp	r3, #0
 800f122:	f000 8111 	beq.w	800f348 <RadioSetRxGenericConfig+0x25c>
 800f126:	6923      	ldr	r3, [r4, #16]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f000 8110 	beq.w	800f34e <RadioSetRxGenericConfig+0x262>
        if( config->fsk.SyncWordLength > 8 )
 800f12e:	7d63      	ldrb	r3, [r4, #21]
 800f130:	2b08      	cmp	r3, #8
 800f132:	f200 810f 	bhi.w	800f354 <RadioSetRxGenericConfig+0x268>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800f136:	2200      	movs	r2, #0
 800f138:	e007      	b.n	800f14a <RadioSetRxGenericConfig+0x5e>
                syncword[i] = config->fsk.SyncWord[i];
 800f13a:	69a1      	ldr	r1, [r4, #24]
 800f13c:	5c88      	ldrb	r0, [r1, r2]
 800f13e:	f102 0118 	add.w	r1, r2, #24
 800f142:	4469      	add	r1, sp
 800f144:	f801 0c08 	strb.w	r0, [r1, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800f148:	3201      	adds	r2, #1
 800f14a:	4293      	cmp	r3, r2
 800f14c:	dcf5      	bgt.n	800f13a <RadioSetRxGenericConfig+0x4e>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800f14e:	6820      	ldr	r0, [r4, #0]
 800f150:	3800      	subs	r0, #0
 800f152:	bf18      	it	ne
 800f154:	2001      	movne	r0, #1
 800f156:	f000 fcc9 	bl	800faec <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f15a:	4d81      	ldr	r5, [pc, #516]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f15c:	2700      	movs	r7, #0
 800f15e:	f885 7038 	strb.w	r7, [r5, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800f162:	68e3      	ldr	r3, [r4, #12]
 800f164:	63eb      	str	r3, [r5, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800f166:	7923      	ldrb	r3, [r4, #4]
 800f168:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800f16c:	68a0      	ldr	r0, [r4, #8]
 800f16e:	f001 f9d9 	bl	8010524 <SUBGRF_GetFskBandwidthRegValue>
 800f172:	f885 0045 	strb.w	r0, [r5, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f176:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800f178:	6923      	ldr	r3, [r4, #16]
 800f17a:	00db      	lsls	r3, r3, #3
 800f17c:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800f17e:	7d23      	ldrb	r3, [r4, #20]
 800f180:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800f182:	7d63      	ldrb	r3, [r4, #21]
 800f184:	00db      	lsls	r3, r3, #3
 800f186:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800f188:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800f18c:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800f18e:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 800f192:	b973      	cbnz	r3, 800f1b2 <RadioSetRxGenericConfig+0xc6>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800f194:	69e1      	ldr	r1, [r4, #28]
 800f196:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800f198:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800f19c:	2a02      	cmp	r2, #2
 800f19e:	d012      	beq.n	800f1c6 <RadioSetRxGenericConfig+0xda>
 800f1a0:	2b02      	cmp	r3, #2
 800f1a2:	d010      	beq.n	800f1c6 <RadioSetRxGenericConfig+0xda>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800f1a4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800f1a8:	496d      	ldr	r1, [pc, #436]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f1aa:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800f1ac:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800f1ae:	754b      	strb	r3, [r1, #21]
 800f1b0:	e023      	b.n	800f1fa <RadioSetRxGenericConfig+0x10e>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	d003      	beq.n	800f1be <RadioSetRxGenericConfig+0xd2>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800f1b6:	4a6a      	ldr	r2, [pc, #424]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f1b8:	21ff      	movs	r1, #255	@ 0xff
 800f1ba:	7591      	strb	r1, [r2, #22]
 800f1bc:	e7ec      	b.n	800f198 <RadioSetRxGenericConfig+0xac>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800f1be:	4a68      	ldr	r2, [pc, #416]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f1c0:	21ff      	movs	r1, #255	@ 0xff
 800f1c2:	7591      	strb	r1, [r2, #22]
 800f1c4:	e7e8      	b.n	800f198 <RadioSetRxGenericConfig+0xac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800f1c6:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800f1ca:	f102 030f 	add.w	r3, r2, #15
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d901      	bls.n	800f1d8 <RadioSetRxGenericConfig+0xec>
 800f1d4:	2a01      	cmp	r2, #1
 800f1d6:	d131      	bne.n	800f23c <RadioSetRxGenericConfig+0x150>
          ConfigGeneric.rtx = CONFIG_RX;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 800f1de:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800f1e0:	4a60      	ldr	r2, [pc, #384]	@ (800f364 <RadioSetRxGenericConfig+0x278>)
 800f1e2:	4b61      	ldr	r3, [pc, #388]	@ (800f368 <RadioSetRxGenericConfig+0x27c>)
 800f1e4:	6819      	ldr	r1, [r3, #0]
 800f1e6:	a801      	add	r0, sp, #4
 800f1e8:	f001 f9fe 	bl	80105e8 <RFW_Init>
 800f1ec:	bb30      	cbnz	r0, 800f23c <RadioSetRxGenericConfig+0x150>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800f1ee:	4b5c      	ldr	r3, [pc, #368]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800f1f4:	2101      	movs	r1, #1
 800f1f6:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800f1f8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800f1fa:	f7ff fb51 	bl	800e8a0 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800f1fe:	2000      	movs	r0, #0
 800f200:	f7ff fe12 	bl	800ee28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f204:	4d59      	ldr	r5, [pc, #356]	@ (800f36c <RadioSetRxGenericConfig+0x280>)
 800f206:	4628      	mov	r0, r5
 800f208:	f000 fe3a 	bl	800fe80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f20c:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 800f210:	f001 f804 	bl	801021c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800f214:	a804      	add	r0, sp, #16
 800f216:	f000 ffcf 	bl	80101b8 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800f21a:	8c20      	ldrh	r0, [r4, #32]
 800f21c:	f000 ff32 	bl	8010084 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800f220:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 800f222:	f000 ffe6 	bl	80101f2 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800f226:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800f22a:	fb06 f303 	mul.w	r3, r6, r3
 800f22e:	68e2      	ldr	r2, [r4, #12]
 800f230:	fbb3 f3f2 	udiv	r3, r3, r2
 800f234:	f845 3c30 	str.w	r3, [r5, #-48]
    return status;
 800f238:	2000      	movs	r0, #0
        break;
 800f23a:	e76e      	b.n	800f11a <RadioSetRxGenericConfig+0x2e>
            return -1;
 800f23c:	f04f 30ff 	mov.w	r0, #4294967295
 800f240:	e76b      	b.n	800f11a <RadioSetRxGenericConfig+0x2e>
        if( config->lora.PreambleLen == 0 )
 800f242:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f244:	2b00      	cmp	r3, #0
 800f246:	f000 8088 	beq.w	800f35a <RadioSetRxGenericConfig+0x26e>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800f24a:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d053      	beq.n	800f2fa <RadioSetRxGenericConfig+0x20e>
            MaxPayloadLength = 0xFF;
 800f252:	27ff      	movs	r7, #255	@ 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800f254:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f256:	3800      	subs	r0, #0
 800f258:	bf18      	it	ne
 800f25a:	2001      	movne	r0, #1
 800f25c:	f000 fc46 	bl	800faec <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f260:	b2f0      	uxtb	r0, r6
 800f262:	f000 fdd1 	bl	800fe08 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f266:	4b3e      	ldr	r3, [pc, #248]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f268:	2201      	movs	r2, #1
 800f26a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800f26e:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 800f272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800f276:	f894 2031 	ldrb.w	r2, [r4, #49]	@ 0x31
 800f27a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800f27e:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
 800f282:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800f286:	f894 3033 	ldrb.w	r3, [r4, #51]	@ 0x33
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d03c      	beq.n	800f308 <RadioSetRxGenericConfig+0x21c>
 800f28e:	2b02      	cmp	r3, #2
 800f290:	d03f      	beq.n	800f312 <RadioSetRxGenericConfig+0x226>
 800f292:	b3a3      	cbz	r3, 800f2fe <RadioSetRxGenericConfig+0x212>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f294:	4d32      	ldr	r5, [pc, #200]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f296:	2601      	movs	r6, #1
 800f298:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800f29a:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f29c:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800f29e:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 800f2a2:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f2a4:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800f2a6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f2aa:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800f2ae:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800f2b2:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 800f2b6:	f7ff faf3 	bl	800e8a0 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	f7ff fdb4 	bl	800ee28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f2c0:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800f2c4:	f000 fddc 	bl	800fe80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f2c8:	f105 000e 	add.w	r0, r5, #14
 800f2cc:	f000 ffa6 	bl	801021c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f2d0:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800f2d4:	42b3      	cmp	r3, r6
 800f2d6:	d02c      	beq.n	800f332 <RadioSetRxGenericConfig+0x246>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800f2d8:	f240 7036 	movw	r0, #1846	@ 0x736
 800f2dc:	f000 fe58 	bl	800ff90 <SUBGRF_ReadRegister>
 800f2e0:	f040 0104 	orr.w	r1, r0, #4
 800f2e4:	b2c9      	uxtb	r1, r1
 800f2e6:	f240 7036 	movw	r0, #1846	@ 0x736
 800f2ea:	f000 fd5f 	bl	800fdac <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800f2ee:	4b1c      	ldr	r3, [pc, #112]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f2f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2f4:	609a      	str	r2, [r3, #8]
    return status;
 800f2f6:	2000      	movs	r0, #0
        break;
 800f2f8:	e70f      	b.n	800f11a <RadioSetRxGenericConfig+0x2e>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800f2fa:	7f27      	ldrb	r7, [r4, #28]
 800f2fc:	e7aa      	b.n	800f254 <RadioSetRxGenericConfig+0x168>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f2fe:	4b18      	ldr	r3, [pc, #96]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f300:	2200      	movs	r2, #0
 800f302:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800f306:	e7c5      	b.n	800f294 <RadioSetRxGenericConfig+0x1a8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f308:	4b15      	ldr	r3, [pc, #84]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f30a:	2201      	movs	r2, #1
 800f30c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800f310:	e7c0      	b.n	800f294 <RadioSetRxGenericConfig+0x1a8>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800f312:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f316:	3b0b      	subs	r3, #11
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	2b01      	cmp	r3, #1
 800f31c:	d904      	bls.n	800f328 <RadioSetRxGenericConfig+0x23c>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f31e:	4b10      	ldr	r3, [pc, #64]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f320:	2200      	movs	r2, #0
 800f322:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800f326:	e7b5      	b.n	800f294 <RadioSetRxGenericConfig+0x1a8>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f328:	4b0d      	ldr	r3, [pc, #52]	@ (800f360 <RadioSetRxGenericConfig+0x274>)
 800f32a:	2201      	movs	r2, #1
 800f32c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800f330:	e7b0      	b.n	800f294 <RadioSetRxGenericConfig+0x1a8>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800f332:	f240 7036 	movw	r0, #1846	@ 0x736
 800f336:	f000 fe2b 	bl	800ff90 <SUBGRF_ReadRegister>
 800f33a:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800f33e:	f240 7036 	movw	r0, #1846	@ 0x736
 800f342:	f000 fd33 	bl	800fdac <SUBGRF_WriteRegister>
 800f346:	e7d2      	b.n	800f2ee <RadioSetRxGenericConfig+0x202>
            return -1;
 800f348:	f04f 30ff 	mov.w	r0, #4294967295
 800f34c:	e6e5      	b.n	800f11a <RadioSetRxGenericConfig+0x2e>
 800f34e:	f04f 30ff 	mov.w	r0, #4294967295
 800f352:	e6e2      	b.n	800f11a <RadioSetRxGenericConfig+0x2e>
            return -1;
 800f354:	f04f 30ff 	mov.w	r0, #4294967295
 800f358:	e6df      	b.n	800f11a <RadioSetRxGenericConfig+0x2e>
            return -1;
 800f35a:	f04f 30ff 	mov.w	r0, #4294967295
 800f35e:	e6dc      	b.n	800f11a <RadioSetRxGenericConfig+0x2e>
 800f360:	20001400 	.word	0x20001400
 800f364:	200013d0 	.word	0x200013d0
 800f368:	20001458 	.word	0x20001458
 800f36c:	20001438 	.word	0x20001438

0800f370 <RadioSetPublicNetwork>:
{
 800f370:	b510      	push	{r4, lr}
 800f372:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800f374:	4b0e      	ldr	r3, [pc, #56]	@ (800f3b0 <RadioSetPublicNetwork+0x40>)
 800f376:	7318      	strb	r0, [r3, #12]
 800f378:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800f37a:	2001      	movs	r0, #1
 800f37c:	f7ff fd54 	bl	800ee28 <RadioSetModem>
    if( enable == true )
 800f380:	b154      	cbz	r4, 800f398 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800f382:	2134      	movs	r1, #52	@ 0x34
 800f384:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800f388:	f000 fd10 	bl	800fdac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800f38c:	2144      	movs	r1, #68	@ 0x44
 800f38e:	f240 7041 	movw	r0, #1857	@ 0x741
 800f392:	f000 fd0b 	bl	800fdac <SUBGRF_WriteRegister>
}
 800f396:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800f398:	2114      	movs	r1, #20
 800f39a:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800f39e:	f000 fd05 	bl	800fdac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800f3a2:	2124      	movs	r1, #36	@ 0x24
 800f3a4:	f240 7041 	movw	r0, #1857	@ 0x741
 800f3a8:	f000 fd00 	bl	800fdac <SUBGRF_WriteRegister>
}
 800f3ac:	e7f3      	b.n	800f396 <RadioSetPublicNetwork+0x26>
 800f3ae:	bf00      	nop
 800f3b0:	20001400 	.word	0x20001400

0800f3b4 <RadioSetTxConfig>:
{
 800f3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b8:	b083      	sub	sp, #12
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	460d      	mov	r5, r1
 800f3be:	4691      	mov	r9, r2
 800f3c0:	461f      	mov	r7, r3
 800f3c2:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 800f3c6:	f89d 803c 	ldrb.w	r8, [sp, #60]	@ 0x3c
 800f3ca:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f3ce:	f001 f90e 	bl	80105ee <RFW_DeInit>
    switch( modem )
 800f3d2:	2c01      	cmp	r4, #1
 800f3d4:	d05a      	beq.n	800f48c <RadioSetTxConfig+0xd8>
 800f3d6:	2c03      	cmp	r4, #3
 800f3d8:	f000 80ab 	beq.w	800f532 <RadioSetTxConfig+0x17e>
 800f3dc:	b164      	cbz	r4, 800f3f8 <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800f3de:	4628      	mov	r0, r5
 800f3e0:	f001 f832 	bl	8010448 <SUBGRF_SetRfTxPower>
 800f3e4:	4c5b      	ldr	r4, [pc, #364]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f3e6:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800f3ea:	f001 f905 	bl	80105f8 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800f3ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f3f0:	6063      	str	r3, [r4, #4]
}
 800f3f2:	b003      	add	sp, #12
 800f3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f3f8:	4c56      	ldr	r4, [pc, #344]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f3fa:	f04f 0b00 	mov.w	fp, #0
 800f3fe:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f402:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f404:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f406:	230b      	movs	r3, #11
 800f408:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f40c:	4638      	mov	r0, r7
 800f40e:	f001 f889 	bl	8010524 <SUBGRF_GetFskBandwidthRegValue>
 800f412:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800f416:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f41a:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f41e:	00f6      	lsls	r6, r6, #3
 800f420:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f422:	2304      	movs	r3, #4
 800f424:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800f426:	2318      	movs	r3, #24
 800f428:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f42a:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f42e:	f088 0801 	eor.w	r8, r8, #1
 800f432:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 800f436:	f1ba 0f00 	cmp.w	sl, #0
 800f43a:	d023      	beq.n	800f484 <RadioSetTxConfig+0xd0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f43c:	22f2      	movs	r2, #242	@ 0xf2
 800f43e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f440:	4c44      	ldr	r4, [pc, #272]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f442:	2301      	movs	r3, #1
 800f444:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f446:	f7ff fa2b 	bl	800e8a0 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f44a:	4626      	mov	r6, r4
 800f44c:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f450:	3800      	subs	r0, #0
 800f452:	bf18      	it	ne
 800f454:	2001      	movne	r0, #1
 800f456:	f7ff fce7 	bl	800ee28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f45a:	4630      	mov	r0, r6
 800f45c:	f000 fd10 	bl	800fe80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f460:	f104 000e 	add.w	r0, r4, #14
 800f464:	f000 feda 	bl	801021c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f468:	4a3b      	ldr	r2, [pc, #236]	@ (800f558 <RadioSetTxConfig+0x1a4>)
 800f46a:	466b      	mov	r3, sp
 800f46c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f470:	e883 0003 	stmia.w	r3, {r0, r1}
 800f474:	4618      	mov	r0, r3
 800f476:	f000 fe9f 	bl	80101b8 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f47a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800f47e:	f000 fe01 	bl	8010084 <SUBGRF_SetWhiteningSeed>
            break;
 800f482:	e7ac      	b.n	800f3de <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f484:	4b33      	ldr	r3, [pc, #204]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f486:	2201      	movs	r2, #1
 800f488:	75da      	strb	r2, [r3, #23]
 800f48a:	e7d9      	b.n	800f440 <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f48c:	4a31      	ldr	r2, [pc, #196]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f48e:	2301      	movs	r3, #1
 800f490:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800f494:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f496:	b2db      	uxtb	r3, r3
 800f498:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800f49c:	492f      	ldr	r1, [pc, #188]	@ (800f55c <RadioSetTxConfig+0x1a8>)
 800f49e:	5dc9      	ldrb	r1, [r1, r7]
 800f4a0:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800f4a4:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 800f4a8:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f4ac:	b91f      	cbnz	r7, 800f4b6 <RadioSetTxConfig+0x102>
 800f4ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f4b0:	3a0b      	subs	r2, #11
 800f4b2:	2a01      	cmp	r2, #1
 800f4b4:	d92f      	bls.n	800f516 <RadioSetTxConfig+0x162>
 800f4b6:	2f01      	cmp	r7, #1
 800f4b8:	d02a      	beq.n	800f510 <RadioSetTxConfig+0x15c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f4ba:	4a26      	ldr	r2, [pc, #152]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f4bc:	2100      	movs	r1, #0
 800f4be:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f4c2:	4a24      	ldr	r2, [pc, #144]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f4c4:	2101      	movs	r1, #1
 800f4c6:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f4c8:	3b05      	subs	r3, #5
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	428b      	cmp	r3, r1
 800f4ce:	d927      	bls.n	800f520 <RadioSetTxConfig+0x16c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f4d0:	4b20      	ldr	r3, [pc, #128]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f4d2:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f4d4:	4c1f      	ldr	r4, [pc, #124]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f4d6:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f4da:	4b21      	ldr	r3, [pc, #132]	@ (800f560 <RadioSetTxConfig+0x1ac>)
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f4e0:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f4e4:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800f4e8:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800f4ec:	f7ff f9d8 	bl	800e8a0 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f4f0:	4626      	mov	r6, r4
 800f4f2:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f4f6:	3800      	subs	r0, #0
 800f4f8:	bf18      	it	ne
 800f4fa:	2001      	movne	r0, #1
 800f4fc:	f7ff fc94 	bl	800ee28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f500:	4630      	mov	r0, r6
 800f502:	f000 fcbd 	bl	800fe80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f506:	f104 000e 	add.w	r0, r4, #14
 800f50a:	f000 fe87 	bl	801021c <SUBGRF_SetPacketParams>
            break;
 800f50e:	e766      	b.n	800f3de <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f510:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f512:	2a0c      	cmp	r2, #12
 800f514:	d1d1      	bne.n	800f4ba <RadioSetTxConfig+0x106>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f516:	4a0f      	ldr	r2, [pc, #60]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f518:	2101      	movs	r1, #1
 800f51a:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 800f51e:	e7d0      	b.n	800f4c2 <RadioSetTxConfig+0x10e>
                if( preambleLen < 12 )
 800f520:	2e0b      	cmp	r6, #11
 800f522:	d803      	bhi.n	800f52c <RadioSetTxConfig+0x178>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f524:	4613      	mov	r3, r2
 800f526:	220c      	movs	r2, #12
 800f528:	839a      	strh	r2, [r3, #28]
 800f52a:	e7d3      	b.n	800f4d4 <RadioSetTxConfig+0x120>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f52c:	4b09      	ldr	r3, [pc, #36]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f52e:	839e      	strh	r6, [r3, #28]
 800f530:	e7d0      	b.n	800f4d4 <RadioSetTxConfig+0x120>
            RadioSetModem(MODEM_SIGFOX_TX);
 800f532:	2003      	movs	r0, #3
 800f534:	f7ff fc78 	bl	800ee28 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800f538:	4806      	ldr	r0, [pc, #24]	@ (800f554 <RadioSetTxConfig+0x1a0>)
 800f53a:	2302      	movs	r3, #2
 800f53c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800f540:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f542:	6483      	str	r3, [r0, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800f544:	2316      	movs	r3, #22
 800f546:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f54a:	3038      	adds	r0, #56	@ 0x38
 800f54c:	f000 fc98 	bl	800fe80 <SUBGRF_SetModulationParams>
            break;
 800f550:	e745      	b.n	800f3de <RadioSetTxConfig+0x2a>
 800f552:	bf00      	nop
 800f554:	20001400 	.word	0x20001400
 800f558:	08013d78 	.word	0x08013d78
 800f55c:	08014914 	.word	0x08014914
 800f560:	200000d0 	.word	0x200000d0

0800f564 <RadioSetRxConfig>:
{
 800f564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f568:	b087      	sub	sp, #28
 800f56a:	4604      	mov	r4, r0
 800f56c:	460e      	mov	r6, r1
 800f56e:	4615      	mov	r5, r2
 800f570:	9301      	str	r3, [sp, #4]
 800f572:	f8bd 9044 	ldrh.w	r9, [sp, #68]	@ 0x44
 800f576:	f8bd a048 	ldrh.w	sl, [sp, #72]	@ 0x48
 800f57a:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 800f57e:	f89d b054 	ldrb.w	fp, [sp, #84]	@ 0x54
 800f582:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
    SubgRf.RxContinuous = rxContinuous;
 800f586:	4baf      	ldr	r3, [pc, #700]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f588:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f58c:	f001 f82f 	bl	80105ee <RFW_DeInit>
    if( rxContinuous == true )
 800f590:	f1b8 0f00 	cmp.w	r8, #0
 800f594:	d001      	beq.n	800f59a <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800f596:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800f59a:	b16f      	cbz	r7, 800f5b8 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 800f59c:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 800f5a0:	4ba9      	ldr	r3, [pc, #676]	@ (800f848 <RadioSetRxConfig+0x2e4>)
 800f5a2:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800f5a4:	2c01      	cmp	r4, #1
 800f5a6:	f000 80d6 	beq.w	800f756 <RadioSetRxConfig+0x1f2>
 800f5aa:	2c04      	cmp	r4, #4
 800f5ac:	d008      	beq.n	800f5c0 <RadioSetRxConfig+0x5c>
 800f5ae:	2c00      	cmp	r4, #0
 800f5b0:	d07c      	beq.n	800f6ac <RadioSetRxConfig+0x148>
}
 800f5b2:	b007      	add	sp, #28
 800f5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800f5b8:	4ba3      	ldr	r3, [pc, #652]	@ (800f848 <RadioSetRxConfig+0x2e4>)
 800f5ba:	22ff      	movs	r2, #255	@ 0xff
 800f5bc:	701a      	strb	r2, [r3, #0]
 800f5be:	e7f1      	b.n	800f5a4 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800f5c0:	2001      	movs	r0, #1
 800f5c2:	f000 fa93 	bl	800faec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f5c6:	4c9f      	ldr	r4, [pc, #636]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f5c8:	2700      	movs	r7, #0
 800f5ca:	f884 7038 	strb.w	r7, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f5ce:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800f5d0:	2309      	movs	r3, #9
 800f5d2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800f5d6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800f5da:	6423      	str	r3, [r4, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f5dc:	4630      	mov	r0, r6
 800f5de:	f000 ffa1 	bl	8010524 <SUBGRF_GetFskBandwidthRegValue>
 800f5e2:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f5e6:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f5e8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f5ec:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800f5f0:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800f5f2:	2310      	movs	r3, #16
 800f5f4:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f5f6:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800f5f8:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800f5fa:	4b93      	ldr	r3, [pc, #588]	@ (800f848 <RadioSetRxConfig+0x2e4>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f600:	2301      	movs	r3, #1
 800f602:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800f604:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800f606:	2004      	movs	r0, #4
 800f608:	f7ff fc0e 	bl	800ee28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f60c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800f610:	f000 fc36 	bl	800fe80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f614:	f104 000e 	add.w	r0, r4, #14
 800f618:	f000 fe00 	bl	801021c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f61c:	ab02      	add	r3, sp, #8
 800f61e:	4a8b      	ldr	r2, [pc, #556]	@ (800f84c <RadioSetRxConfig+0x2e8>)
 800f620:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f624:	e883 0003 	stmia.w	r3, {r0, r1}
 800f628:	4618      	mov	r0, r3
 800f62a:	f000 fdc5 	bl	80101b8 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f62e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800f632:	f000 fd27 	bl	8010084 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 800f636:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800f63a:	f7ff f8c7 	bl	800e7cc <RadioRead>
            RadioWrite(0x8b8, modReg);
 800f63e:	f000 01ef 	and.w	r1, r0, #239	@ 0xef
 800f642:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800f646:	f7ff f8c5 	bl	800e7d4 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 800f64a:	2104      	movs	r1, #4
 800f64c:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 800f650:	f7ff f8c0 	bl	800e7d4 <RadioWrite>
            modReg= RadioRead(0x89b);
 800f654:	f640 009b 	movw	r0, #2203	@ 0x89b
 800f658:	f7ff f8b8 	bl	800e7cc <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800f65c:	f000 01e3 	and.w	r1, r0, #227	@ 0xe3
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 800f660:	f041 0108 	orr.w	r1, r1, #8
 800f664:	f640 009b 	movw	r0, #2203	@ 0x89b
 800f668:	f7ff f8b4 	bl	800e7d4 <RadioWrite>
            modReg= RadioRead(0x6d1);
 800f66c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800f670:	f7ff f8ac 	bl	800e7cc <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800f674:	f000 01e7 	and.w	r1, r0, #231	@ 0xe7
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800f678:	f041 0118 	orr.w	r1, r1, #24
 800f67c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800f680:	f7ff f8a8 	bl	800e7d4 <RadioWrite>
            modReg= RadioRead(0x6ac);
 800f684:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800f688:	f7ff f8a0 	bl	800e7cc <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800f68c:	f000 018f 	and.w	r1, r0, #143	@ 0x8f
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 800f690:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 800f694:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800f698:	f7ff f89c 	bl	800e7d4 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800f69c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800f6a0:	fb03 f30a 	mul.w	r3, r3, sl
 800f6a4:	fbb3 f3f5 	udiv	r3, r3, r5
 800f6a8:	60a3      	str	r3, [r4, #8]
            break;
 800f6aa:	e782      	b.n	800f5b2 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f6ac:	2000      	movs	r0, #0
 800f6ae:	f000 fa1d 	bl	800faec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f6b2:	4c64      	ldr	r4, [pc, #400]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f6b4:	f04f 0800 	mov.w	r8, #0
 800f6b8:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f6bc:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f6be:	230b      	movs	r3, #11
 800f6c0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	f000 ff2d 	bl	8010524 <SUBGRF_GetFskBandwidthRegValue>
 800f6ca:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f6ce:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f6d2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f6d6:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f6da:	2304      	movs	r3, #4
 800f6dc:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800f6de:	2318      	movs	r3, #24
 800f6e0:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f6e2:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f6e6:	f087 0701 	eor.w	r7, r7, #1
 800f6ea:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800f6ec:	4b56      	ldr	r3, [pc, #344]	@ (800f848 <RadioSetRxConfig+0x2e4>)
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800f6f2:	f1bb 0f00 	cmp.w	fp, #0
 800f6f6:	d02a      	beq.n	800f74e <RadioSetRxConfig+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f6f8:	22f2      	movs	r2, #242	@ 0xf2
 800f6fa:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f6fc:	4c51      	ldr	r4, [pc, #324]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f6fe:	2301      	movs	r3, #1
 800f700:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f702:	f7ff f8cd 	bl	800e8a0 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f706:	4626      	mov	r6, r4
 800f708:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 800f70c:	3800      	subs	r0, #0
 800f70e:	bf18      	it	ne
 800f710:	2001      	movne	r0, #1
 800f712:	f7ff fb89 	bl	800ee28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f716:	4630      	mov	r0, r6
 800f718:	f000 fbb2 	bl	800fe80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f71c:	f104 000e 	add.w	r0, r4, #14
 800f720:	f000 fd7c 	bl	801021c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f724:	4a4a      	ldr	r2, [pc, #296]	@ (800f850 <RadioSetRxConfig+0x2ec>)
 800f726:	ab04      	add	r3, sp, #16
 800f728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f72c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f730:	4618      	mov	r0, r3
 800f732:	f000 fd41 	bl	80101b8 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f736:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800f73a:	f000 fca3 	bl	8010084 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800f73e:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800f742:	fb03 f30a 	mul.w	r3, r3, sl
 800f746:	fbb3 f3f5 	udiv	r3, r3, r5
 800f74a:	60a3      	str	r3, [r4, #8]
            break;
 800f74c:	e731      	b.n	800f5b2 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f74e:	4b3d      	ldr	r3, [pc, #244]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f750:	2201      	movs	r2, #1
 800f752:	75da      	strb	r2, [r3, #23]
 800f754:	e7d2      	b.n	800f6fc <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f756:	2000      	movs	r0, #0
 800f758:	f000 f9c8 	bl	800faec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f75c:	4a39      	ldr	r2, [pc, #228]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f75e:	2301      	movs	r3, #1
 800f760:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800f764:	b2eb      	uxtb	r3, r5
 800f766:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800f76a:	493a      	ldr	r1, [pc, #232]	@ (800f854 <RadioSetRxConfig+0x2f0>)
 800f76c:	5d89      	ldrb	r1, [r1, r6]
 800f76e:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800f772:	9901      	ldr	r1, [sp, #4]
 800f774:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f778:	b91e      	cbnz	r6, 800f782 <RadioSetRxConfig+0x21e>
 800f77a:	f1a5 020b 	sub.w	r2, r5, #11
 800f77e:	2a01      	cmp	r2, #1
 800f780:	d945      	bls.n	800f80e <RadioSetRxConfig+0x2aa>
 800f782:	2e01      	cmp	r6, #1
 800f784:	d041      	beq.n	800f80a <RadioSetRxConfig+0x2a6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f786:	4a2f      	ldr	r2, [pc, #188]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f788:	2100      	movs	r1, #0
 800f78a:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f78e:	4a2d      	ldr	r2, [pc, #180]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f790:	2101      	movs	r1, #1
 800f792:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f794:	3b05      	subs	r3, #5
 800f796:	b2db      	uxtb	r3, r3
 800f798:	428b      	cmp	r3, r1
 800f79a:	d93d      	bls.n	800f818 <RadioSetRxConfig+0x2b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f79c:	4b29      	ldr	r3, [pc, #164]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f79e:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f7a2:	4c28      	ldr	r4, [pc, #160]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f7a4:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f7a6:	4b28      	ldr	r3, [pc, #160]	@ (800f848 <RadioSetRxConfig+0x2e4>)
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f7ac:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f7b0:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 800f7b4:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800f7b8:	f7ff f872 	bl	800e8a0 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800f7bc:	4625      	mov	r5, r4
 800f7be:	f815 0f38 	ldrb.w	r0, [r5, #56]!
 800f7c2:	3800      	subs	r0, #0
 800f7c4:	bf18      	it	ne
 800f7c6:	2001      	movne	r0, #1
 800f7c8:	f7ff fb2e 	bl	800ee28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f7cc:	4628      	mov	r0, r5
 800f7ce:	f000 fb57 	bl	800fe80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f7d2:	f104 000e 	add.w	r0, r4, #14
 800f7d6:	f000 fd21 	bl	801021c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f7da:	fa5f f08a 	uxtb.w	r0, sl
 800f7de:	f000 fb13 	bl	800fe08 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f7e2:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d021      	beq.n	800f82e <RadioSetRxConfig+0x2ca>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800f7ea:	f240 7036 	movw	r0, #1846	@ 0x736
 800f7ee:	f000 fbcf 	bl	800ff90 <SUBGRF_ReadRegister>
 800f7f2:	f040 0104 	orr.w	r1, r0, #4
 800f7f6:	b2c9      	uxtb	r1, r1
 800f7f8:	f240 7036 	movw	r0, #1846	@ 0x736
 800f7fc:	f000 fad6 	bl	800fdac <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800f800:	4b10      	ldr	r3, [pc, #64]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f806:	609a      	str	r2, [r3, #8]
}
 800f808:	e6d3      	b.n	800f5b2 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f80a:	2d0c      	cmp	r5, #12
 800f80c:	d1bb      	bne.n	800f786 <RadioSetRxConfig+0x222>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f80e:	4a0d      	ldr	r2, [pc, #52]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f810:	2101      	movs	r1, #1
 800f812:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 800f816:	e7ba      	b.n	800f78e <RadioSetRxConfig+0x22a>
                if( preambleLen < 12 )
 800f818:	f1b9 0f0b 	cmp.w	r9, #11
 800f81c:	d803      	bhi.n	800f826 <RadioSetRxConfig+0x2c2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f81e:	4613      	mov	r3, r2
 800f820:	220c      	movs	r2, #12
 800f822:	839a      	strh	r2, [r3, #28]
 800f824:	e7bd      	b.n	800f7a2 <RadioSetRxConfig+0x23e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f826:	4b07      	ldr	r3, [pc, #28]	@ (800f844 <RadioSetRxConfig+0x2e0>)
 800f828:	f8a3 901c 	strh.w	r9, [r3, #28]
 800f82c:	e7b9      	b.n	800f7a2 <RadioSetRxConfig+0x23e>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800f82e:	f240 7036 	movw	r0, #1846	@ 0x736
 800f832:	f000 fbad 	bl	800ff90 <SUBGRF_ReadRegister>
 800f836:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800f83a:	f240 7036 	movw	r0, #1846	@ 0x736
 800f83e:	f000 fab5 	bl	800fdac <SUBGRF_WriteRegister>
 800f842:	e7dd      	b.n	800f800 <RadioSetRxConfig+0x29c>
 800f844:	20001400 	.word	0x20001400
 800f848:	200000d0 	.word	0x200000d0
 800f84c:	08013d80 	.word	0x08013d80
 800f850:	08013d78 	.word	0x08013d78
 800f854:	08014914 	.word	0x08014914

0800f858 <RadioRandom>:
{
 800f858:	b508      	push	{r3, lr}
    RadioSetModem( MODEM_LORA );
 800f85a:	2001      	movs	r0, #1
 800f85c:	f7ff fae4 	bl	800ee28 <RadioSetModem>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f860:	2300      	movs	r3, #0
 800f862:	461a      	mov	r2, r3
 800f864:	4619      	mov	r1, r3
 800f866:	4618      	mov	r0, r3
 800f868:	f000 f9dd 	bl	800fc26 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800f86c:	f000 fd58 	bl	8010320 <SUBGRF_GetRandom>
}
 800f870:	bd08      	pop	{r3, pc}

0800f872 <RadioIsChannelFree>:
{
 800f872:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f874:	b08b      	sub	sp, #44	@ 0x2c
 800f876:	4604      	mov	r4, r0
 800f878:	460f      	mov	r7, r1
 800f87a:	4616      	mov	r6, r2
 800f87c:	461d      	mov	r5, r3
    RadioStandby( );
 800f87e:	f7ff f80f 	bl	800e8a0 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800f882:	2000      	movs	r0, #0
 800f884:	f7ff fad0 	bl	800ee28 <RadioSetModem>
    RadioSetChannel( freq );
 800f888:	4620      	mov	r0, r4
 800f88a:	f7ff f9b1 	bl	800ebf0 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800f88e:	2301      	movs	r3, #1
 800f890:	9309      	str	r3, [sp, #36]	@ 0x24
 800f892:	2400      	movs	r4, #0
 800f894:	9408      	str	r4, [sp, #32]
 800f896:	9407      	str	r4, [sp, #28]
 800f898:	9406      	str	r4, [sp, #24]
 800f89a:	9405      	str	r4, [sp, #20]
 800f89c:	9404      	str	r4, [sp, #16]
 800f89e:	9403      	str	r4, [sp, #12]
 800f8a0:	9402      	str	r4, [sp, #8]
 800f8a2:	2303      	movs	r3, #3
 800f8a4:	9301      	str	r3, [sp, #4]
 800f8a6:	9700      	str	r7, [sp, #0]
 800f8a8:	4623      	mov	r3, r4
 800f8aa:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800f8ae:	4639      	mov	r1, r7
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f7ff fe57 	bl	800f564 <RadioSetRxConfig>
    RadioRx( 0 );
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	f7ff f9b2 	bl	800ec20 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800f8bc:	f7ff f96a 	bl	800eb94 <RadioGetWakeupTime>
 800f8c0:	f7f1 ff5c 	bl	800177c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800f8c4:	f001 fa7e 	bl	8010dc4 <UTIL_TIMER_GetCurrentTime>
 800f8c8:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	f001 fa84 	bl	8010dd8 <UTIL_TIMER_GetElapsedTime>
 800f8d0:	42a8      	cmp	r0, r5
 800f8d2:	d206      	bcs.n	800f8e2 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800f8d4:	2000      	movs	r0, #0
 800f8d6:	f7ff f96a 	bl	800ebae <RadioRssi>
        if( rssi > rssiThresh )
 800f8da:	42b0      	cmp	r0, r6
 800f8dc:	ddf5      	ble.n	800f8ca <RadioIsChannelFree+0x58>
            status = false;
 800f8de:	2400      	movs	r4, #0
 800f8e0:	e000      	b.n	800f8e4 <RadioIsChannelFree+0x72>
    bool status = true;
 800f8e2:	2401      	movs	r4, #1
    RadioStandby( );
 800f8e4:	f7fe ffdc 	bl	800e8a0 <RadioStandby>
}
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	b00b      	add	sp, #44	@ 0x2c
 800f8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f8f0 <RadioInit>:
{
 800f8f0:	b570      	push	{r4, r5, r6, lr}
 800f8f2:	b082      	sub	sp, #8
    RadioEvents = events;
 800f8f4:	4b1d      	ldr	r3, [pc, #116]	@ (800f96c <RadioInit+0x7c>)
 800f8f6:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800f8f8:	4b1d      	ldr	r3, [pc, #116]	@ (800f970 <RadioInit+0x80>)
 800f8fa:	2400      	movs	r4, #0
 800f8fc:	705c      	strb	r4, [r3, #1]
    SubgRf.TxTimeout = 0;
 800f8fe:	605c      	str	r4, [r3, #4]
    SubgRf.RxTimeout = 0;
 800f900:	609c      	str	r4, [r3, #8]
    SUBGRF_Init( RadioOnDioIrq );
 800f902:	481c      	ldr	r0, [pc, #112]	@ (800f974 <RadioInit+0x84>)
 800f904:	f000 fb68 	bl	800ffd8 <SUBGRF_Init>
    RadioSetPublicNetwork( false );
 800f908:	4620      	mov	r0, r4
 800f90a:	f7ff fd31 	bl	800f370 <RadioSetPublicNetwork>
    SUBGRF_SetRegulatorMode(  );
 800f90e:	f000 f8fa 	bl	800fb06 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800f912:	4621      	mov	r1, r4
 800f914:	4620      	mov	r0, r4
 800f916:	f000 f9f1 	bl	800fcfc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800f91a:	2204      	movs	r2, #4
 800f91c:	4621      	mov	r1, r4
 800f91e:	2001      	movs	r0, #1
 800f920:	f000 fbc9 	bl	80100b6 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f924:	4623      	mov	r3, r4
 800f926:	4622      	mov	r2, r4
 800f928:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f92c:	4608      	mov	r0, r1
 800f92e:	f000 f97a 	bl	800fc26 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800f932:	f7ff f9a7 	bl	800ec84 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800f936:	4e10      	ldr	r6, [pc, #64]	@ (800f978 <RadioInit+0x88>)
 800f938:	9400      	str	r4, [sp, #0]
 800f93a:	4b10      	ldr	r3, [pc, #64]	@ (800f97c <RadioInit+0x8c>)
 800f93c:	4622      	mov	r2, r4
 800f93e:	f04f 31ff 	mov.w	r1, #4294967295
 800f942:	4630      	mov	r0, r6
 800f944:	f001 fa20 	bl	8010d88 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800f948:	4d0d      	ldr	r5, [pc, #52]	@ (800f980 <RadioInit+0x90>)
 800f94a:	9400      	str	r4, [sp, #0]
 800f94c:	4b0d      	ldr	r3, [pc, #52]	@ (800f984 <RadioInit+0x94>)
 800f94e:	4622      	mov	r2, r4
 800f950:	f04f 31ff 	mov.w	r1, #4294967295
 800f954:	4628      	mov	r0, r5
 800f956:	f001 fa17 	bl	8010d88 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800f95a:	4630      	mov	r0, r6
 800f95c:	f001 fa72 	bl	8010e44 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800f960:	4628      	mov	r0, r5
 800f962:	f001 fa6f 	bl	8010e44 <UTIL_TIMER_Stop>
}
 800f966:	b002      	add	sp, #8
 800f968:	bd70      	pop	{r4, r5, r6, pc}
 800f96a:	bf00      	nop
 800f96c:	20001458 	.word	0x20001458
 800f970:	20001400 	.word	0x20001400
 800f974:	0800eb81 	.word	0x0800eb81
 800f978:	200013e8 	.word	0x200013e8
 800f97c:	0800e6c5 	.word	0x0800e6c5
 800f980:	200013d0 	.word	0x200013d0
 800f984:	0800e6e1 	.word	0x0800e6e1

0800f988 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f988:	b510      	push	{r4, lr}
 800f98a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f98c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f990:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800f992:	460a      	mov	r2, r1
 800f994:	4601      	mov	r1, r0
 800f996:	4803      	ldr	r0, [pc, #12]	@ (800f9a4 <SUBGRF_WriteCommand+0x1c>)
 800f998:	f7f5 f986 	bl	8004ca8 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f99c:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f9a0:	bd10      	pop	{r4, pc}
 800f9a2:	bf00      	nop
 800f9a4:	2000035c 	.word	0x2000035c

0800f9a8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f9a8:	b510      	push	{r4, lr}
 800f9aa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9ac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f9b0:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800f9b2:	460a      	mov	r2, r1
 800f9b4:	4601      	mov	r1, r0
 800f9b6:	4803      	ldr	r0, [pc, #12]	@ (800f9c4 <SUBGRF_ReadCommand+0x1c>)
 800f9b8:	f7f5 f9cc 	bl	8004d54 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9bc:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f9c0:	bd10      	pop	{r4, pc}
 800f9c2:	bf00      	nop
 800f9c4:	2000035c 	.word	0x2000035c

0800f9c8 <SUBGRF_GetOperatingMode>:
}
 800f9c8:	4b01      	ldr	r3, [pc, #4]	@ (800f9d0 <SUBGRF_GetOperatingMode+0x8>)
 800f9ca:	7818      	ldrb	r0, [r3, #0]
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	2000156a 	.word	0x2000156a

0800f9d4 <SUBGRF_SetStandby>:
{
 800f9d4:	b500      	push	{lr}
 800f9d6:	b083      	sub	sp, #12
 800f9d8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f10d 0107 	add.w	r1, sp, #7
 800f9e2:	2080      	movs	r0, #128	@ 0x80
 800f9e4:	f7ff ffd0 	bl	800f988 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800f9e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f9ec:	b92b      	cbnz	r3, 800f9fa <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800f9ee:	4b05      	ldr	r3, [pc, #20]	@ (800fa04 <SUBGRF_SetStandby+0x30>)
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	701a      	strb	r2, [r3, #0]
}
 800f9f4:	b003      	add	sp, #12
 800f9f6:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800f9fa:	4b02      	ldr	r3, [pc, #8]	@ (800fa04 <SUBGRF_SetStandby+0x30>)
 800f9fc:	2202      	movs	r2, #2
 800f9fe:	701a      	strb	r2, [r3, #0]
}
 800fa00:	e7f8      	b.n	800f9f4 <SUBGRF_SetStandby+0x20>
 800fa02:	bf00      	nop
 800fa04:	2000156a 	.word	0x2000156a

0800fa08 <SUBGRF_SetTx>:
{
 800fa08:	b500      	push	{lr}
 800fa0a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800fa0c:	4b0a      	ldr	r3, [pc, #40]	@ (800fa38 <SUBGRF_SetTx+0x30>)
 800fa0e:	2204      	movs	r2, #4
 800fa10:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fa12:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fa16:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fa1a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fa1e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fa22:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800fa26:	2203      	movs	r2, #3
 800fa28:	a901      	add	r1, sp, #4
 800fa2a:	2083      	movs	r0, #131	@ 0x83
 800fa2c:	f7ff ffac 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fa30:	b003      	add	sp, #12
 800fa32:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa36:	bf00      	nop
 800fa38:	2000156a 	.word	0x2000156a

0800fa3c <SUBGRF_SetRx>:
{
 800fa3c:	b500      	push	{lr}
 800fa3e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800fa40:	4b0a      	ldr	r3, [pc, #40]	@ (800fa6c <SUBGRF_SetRx+0x30>)
 800fa42:	2205      	movs	r2, #5
 800fa44:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fa46:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fa4a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fa4e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fa52:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fa56:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800fa5a:	2203      	movs	r2, #3
 800fa5c:	a901      	add	r1, sp, #4
 800fa5e:	2082      	movs	r0, #130	@ 0x82
 800fa60:	f7ff ff92 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fa64:	b003      	add	sp, #12
 800fa66:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa6a:	bf00      	nop
 800fa6c:	2000156a 	.word	0x2000156a

0800fa70 <SUBGRF_SetRxDutyCycle>:
{
 800fa70:	b500      	push	{lr}
 800fa72:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800fa74:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fa78:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800fa7c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fa80:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800fa84:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800fa88:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fa8c:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800fa90:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800fa94:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800fa98:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800fa9c:	2206      	movs	r2, #6
 800fa9e:	4669      	mov	r1, sp
 800faa0:	2094      	movs	r0, #148	@ 0x94
 800faa2:	f7ff ff71 	bl	800f988 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800faa6:	4b03      	ldr	r3, [pc, #12]	@ (800fab4 <SUBGRF_SetRxDutyCycle+0x44>)
 800faa8:	2206      	movs	r2, #6
 800faaa:	701a      	strb	r2, [r3, #0]
}
 800faac:	b003      	add	sp, #12
 800faae:	f85d fb04 	ldr.w	pc, [sp], #4
 800fab2:	bf00      	nop
 800fab4:	2000156a 	.word	0x2000156a

0800fab8 <SUBGRF_SetCad>:
{
 800fab8:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800faba:	2200      	movs	r2, #0
 800fabc:	4611      	mov	r1, r2
 800fabe:	20c5      	movs	r0, #197	@ 0xc5
 800fac0:	f7ff ff62 	bl	800f988 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800fac4:	4b01      	ldr	r3, [pc, #4]	@ (800facc <SUBGRF_SetCad+0x14>)
 800fac6:	2207      	movs	r2, #7
 800fac8:	701a      	strb	r2, [r3, #0]
}
 800faca:	bd08      	pop	{r3, pc}
 800facc:	2000156a 	.word	0x2000156a

0800fad0 <SUBGRF_SetTxContinuousWave>:
{
 800fad0:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800fad2:	2200      	movs	r2, #0
 800fad4:	4611      	mov	r1, r2
 800fad6:	20d1      	movs	r0, #209	@ 0xd1
 800fad8:	f7ff ff56 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fadc:	bd08      	pop	{r3, pc}

0800fade <SUBGRF_SetTxInfinitePreamble>:
{
 800fade:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800fae0:	2200      	movs	r2, #0
 800fae2:	4611      	mov	r1, r2
 800fae4:	20d2      	movs	r0, #210	@ 0xd2
 800fae6:	f7ff ff4f 	bl	800f988 <SUBGRF_WriteCommand>
}
 800faea:	bd08      	pop	{r3, pc}

0800faec <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800faec:	b500      	push	{lr}
 800faee:	b083      	sub	sp, #12
 800faf0:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800faf4:	2201      	movs	r2, #1
 800faf6:	f10d 0107 	add.w	r1, sp, #7
 800fafa:	209f      	movs	r0, #159	@ 0x9f
 800fafc:	f7ff ff44 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fb00:	b003      	add	sp, #12
 800fb02:	f85d fb04 	ldr.w	pc, [sp], #4

0800fb06 <SUBGRF_SetRegulatorMode>:
{
 800fb06:	b500      	push	{lr}
 800fb08:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800fb0a:	f7f2 fb2b 	bl	8002164 <RBI_IsDCDC>
 800fb0e:	2801      	cmp	r0, #1
 800fb10:	d00b      	beq.n	800fb2a <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 800fb12:	2300      	movs	r3, #0
 800fb14:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800fb18:	2201      	movs	r2, #1
 800fb1a:	f10d 0107 	add.w	r1, sp, #7
 800fb1e:	2096      	movs	r0, #150	@ 0x96
 800fb20:	f7ff ff32 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fb24:	b003      	add	sp, #12
 800fb26:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	f88d 3007 	strb.w	r3, [sp, #7]
 800fb30:	e7f2      	b.n	800fb18 <SUBGRF_SetRegulatorMode+0x12>

0800fb32 <SUBGRF_Calibrate>:
{
 800fb32:	b500      	push	{lr}
 800fb34:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800fb36:	f000 0340 	and.w	r3, r0, #64	@ 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800fb3a:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800fb3e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800fb40:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800fb44:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800fb46:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800fb4a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800fb4c:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800fb50:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800fb52:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800fb56:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800fb58:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800fb5c:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800fb5e:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800fb62:	2201      	movs	r2, #1
 800fb64:	f10d 0107 	add.w	r1, sp, #7
 800fb68:	2089      	movs	r0, #137	@ 0x89
 800fb6a:	f7ff ff0d 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fb6e:	b003      	add	sp, #12
 800fb70:	f85d fb04 	ldr.w	pc, [sp], #4

0800fb74 <SUBGRF_CalibrateImage>:
{
 800fb74:	b500      	push	{lr}
 800fb76:	b083      	sub	sp, #12
    if( freq > 900000000 )
 800fb78:	4b1c      	ldr	r3, [pc, #112]	@ (800fbec <SUBGRF_CalibrateImage+0x78>)
 800fb7a:	4298      	cmp	r0, r3
 800fb7c:	d90d      	bls.n	800fb9a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800fb7e:	23e1      	movs	r3, #225	@ 0xe1
 800fb80:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800fb84:	23e9      	movs	r3, #233	@ 0xe9
 800fb86:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800fb8a:	2202      	movs	r2, #2
 800fb8c:	a901      	add	r1, sp, #4
 800fb8e:	2098      	movs	r0, #152	@ 0x98
 800fb90:	f7ff fefa 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fb94:	b003      	add	sp, #12
 800fb96:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800fb9a:	4b15      	ldr	r3, [pc, #84]	@ (800fbf0 <SUBGRF_CalibrateImage+0x7c>)
 800fb9c:	4298      	cmp	r0, r3
 800fb9e:	d906      	bls.n	800fbae <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800fba0:	23d7      	movs	r3, #215	@ 0xd7
 800fba2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800fba6:	23db      	movs	r3, #219	@ 0xdb
 800fba8:	f88d 3005 	strb.w	r3, [sp, #5]
 800fbac:	e7ed      	b.n	800fb8a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800fbae:	4b11      	ldr	r3, [pc, #68]	@ (800fbf4 <SUBGRF_CalibrateImage+0x80>)
 800fbb0:	4298      	cmp	r0, r3
 800fbb2:	d906      	bls.n	800fbc2 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800fbb4:	23c1      	movs	r3, #193	@ 0xc1
 800fbb6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800fbba:	23c5      	movs	r3, #197	@ 0xc5
 800fbbc:	f88d 3005 	strb.w	r3, [sp, #5]
 800fbc0:	e7e3      	b.n	800fb8a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800fbc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fbf8 <SUBGRF_CalibrateImage+0x84>)
 800fbc4:	4298      	cmp	r0, r3
 800fbc6:	d906      	bls.n	800fbd6 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 800fbc8:	2375      	movs	r3, #117	@ 0x75
 800fbca:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800fbce:	2381      	movs	r3, #129	@ 0x81
 800fbd0:	f88d 3005 	strb.w	r3, [sp, #5]
 800fbd4:	e7d9      	b.n	800fb8a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800fbd6:	4b09      	ldr	r3, [pc, #36]	@ (800fbfc <SUBGRF_CalibrateImage+0x88>)
 800fbd8:	4298      	cmp	r0, r3
 800fbda:	d9d6      	bls.n	800fb8a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 800fbdc:	236b      	movs	r3, #107	@ 0x6b
 800fbde:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800fbe2:	236f      	movs	r3, #111	@ 0x6f
 800fbe4:	f88d 3005 	strb.w	r3, [sp, #5]
 800fbe8:	e7cf      	b.n	800fb8a <SUBGRF_CalibrateImage+0x16>
 800fbea:	bf00      	nop
 800fbec:	35a4e900 	.word	0x35a4e900
 800fbf0:	32a9f880 	.word	0x32a9f880
 800fbf4:	2de54480 	.word	0x2de54480
 800fbf8:	1b6b0b00 	.word	0x1b6b0b00
 800fbfc:	1954fc40 	.word	0x1954fc40

0800fc00 <SUBGRF_SetPaConfig>:
{
 800fc00:	b500      	push	{lr}
 800fc02:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800fc04:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800fc08:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 800fc0c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 800fc10:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800fc14:	2204      	movs	r2, #4
 800fc16:	eb0d 0102 	add.w	r1, sp, r2
 800fc1a:	2095      	movs	r0, #149	@ 0x95
 800fc1c:	f7ff feb4 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fc20:	b003      	add	sp, #12
 800fc22:	f85d fb04 	ldr.w	pc, [sp], #4

0800fc26 <SUBGRF_SetDioIrqParams>:
{
 800fc26:	b500      	push	{lr}
 800fc28:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800fc2a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800fc2e:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800fc32:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800fc36:	0a08      	lsrs	r0, r1, #8
 800fc38:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800fc3c:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800fc40:	0a11      	lsrs	r1, r2, #8
 800fc42:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800fc46:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800fc4a:	0a1a      	lsrs	r2, r3, #8
 800fc4c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800fc50:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800fc54:	2208      	movs	r2, #8
 800fc56:	4669      	mov	r1, sp
 800fc58:	4610      	mov	r0, r2
 800fc5a:	f7ff fe95 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fc5e:	b003      	add	sp, #12
 800fc60:	f85d fb04 	ldr.w	pc, [sp], #4

0800fc64 <SUBGRF_SetTcxoMode>:
{
 800fc64:	b500      	push	{lr}
 800fc66:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 800fc68:	f000 0007 	and.w	r0, r0, #7
 800fc6c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fc70:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fc74:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fc78:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800fc7c:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800fc80:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800fc84:	2204      	movs	r2, #4
 800fc86:	eb0d 0102 	add.w	r1, sp, r2
 800fc8a:	2097      	movs	r0, #151	@ 0x97
 800fc8c:	f7ff fe7c 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fc90:	b003      	add	sp, #12
 800fc92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800fc98 <SUBGRF_SetRfFrequency>:
{
 800fc98:	b510      	push	{r4, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800fc9e:	4b12      	ldr	r3, [pc, #72]	@ (800fce8 <SUBGRF_SetRfFrequency+0x50>)
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	b1d3      	cbz	r3, 800fcda <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800fca4:	4a11      	ldr	r2, [pc, #68]	@ (800fcec <SUBGRF_SetRfFrequency+0x54>)
 800fca6:	2300      	movs	r3, #0
 800fca8:	0660      	lsls	r0, r4, #25
 800fcaa:	09e1      	lsrs	r1, r4, #7
 800fcac:	f7f1 f862 	bl	8000d74 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800fcb0:	0e03      	lsrs	r3, r0, #24
 800fcb2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800fcb6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fcba:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800fcbe:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fcc2:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800fcc6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800fcca:	2204      	movs	r2, #4
 800fccc:	eb0d 0102 	add.w	r1, sp, r2
 800fcd0:	2086      	movs	r0, #134	@ 0x86
 800fcd2:	f7ff fe59 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fcd6:	b002      	add	sp, #8
 800fcd8:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 800fcda:	f7ff ff4b 	bl	800fb74 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800fcde:	4b02      	ldr	r3, [pc, #8]	@ (800fce8 <SUBGRF_SetRfFrequency+0x50>)
 800fce0:	2201      	movs	r2, #1
 800fce2:	701a      	strb	r2, [r3, #0]
 800fce4:	e7de      	b.n	800fca4 <SUBGRF_SetRfFrequency+0xc>
 800fce6:	bf00      	nop
 800fce8:	20001560 	.word	0x20001560
 800fcec:	01e84800 	.word	0x01e84800

0800fcf0 <SUBGRF_GetPacketType>:
}
 800fcf0:	4b01      	ldr	r3, [pc, #4]	@ (800fcf8 <SUBGRF_GetPacketType+0x8>)
 800fcf2:	7818      	ldrb	r0, [r3, #0]
 800fcf4:	4770      	bx	lr
 800fcf6:	bf00      	nop
 800fcf8:	20001569 	.word	0x20001569

0800fcfc <SUBGRF_SetBufferBaseAddress>:
{
 800fcfc:	b500      	push	{lr}
 800fcfe:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 800fd00:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800fd04:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800fd08:	2202      	movs	r2, #2
 800fd0a:	a901      	add	r1, sp, #4
 800fd0c:	208f      	movs	r0, #143	@ 0x8f
 800fd0e:	f7ff fe3b 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fd12:	b003      	add	sp, #12
 800fd14:	f85d fb04 	ldr.w	pc, [sp], #4

0800fd18 <SUBGRF_GetRssiInst>:
{
 800fd18:	b500      	push	{lr}
 800fd1a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	a901      	add	r1, sp, #4
 800fd20:	2015      	movs	r0, #21
 800fd22:	f7ff fe41 	bl	800f9a8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800fd26:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800fd2a:	4240      	negs	r0, r0
}
 800fd2c:	1040      	asrs	r0, r0, #1
 800fd2e:	b003      	add	sp, #12
 800fd30:	f85d fb04 	ldr.w	pc, [sp], #4

0800fd34 <SUBGRF_GetPacketStatus>:
{
 800fd34:	b510      	push	{r4, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800fd3a:	2203      	movs	r2, #3
 800fd3c:	a901      	add	r1, sp, #4
 800fd3e:	2014      	movs	r0, #20
 800fd40:	f7ff fe32 	bl	800f9a8 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800fd44:	f7ff ffd4 	bl	800fcf0 <SUBGRF_GetPacketType>
 800fd48:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 800fd4a:	b148      	cbz	r0, 800fd60 <SUBGRF_GetPacketStatus+0x2c>
 800fd4c:	2801      	cmp	r0, #1
 800fd4e:	d018      	beq.n	800fd82 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800fd50:	2214      	movs	r2, #20
 800fd52:	2100      	movs	r1, #0
 800fd54:	4620      	mov	r0, r4
 800fd56:	f000 fe52 	bl	80109fe <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800fd5a:	230f      	movs	r3, #15
 800fd5c:	7023      	strb	r3, [r4, #0]
}
 800fd5e:	e00e      	b.n	800fd7e <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800fd60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fd64:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800fd66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fd6a:	425b      	negs	r3, r3
 800fd6c:	105b      	asrs	r3, r3, #1
 800fd6e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800fd70:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fd74:	425b      	negs	r3, r3
 800fd76:	105b      	asrs	r3, r3, #1
 800fd78:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	60a3      	str	r3, [r4, #8]
}
 800fd7e:	b002      	add	sp, #8
 800fd80:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800fd82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fd86:	425b      	negs	r3, r3
 800fd88:	105b      	asrs	r3, r3, #1
 800fd8a:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800fd8c:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800fd90:	3302      	adds	r3, #2
 800fd92:	109b      	asrs	r3, r3, #2
 800fd94:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800fd96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fd9a:	425b      	negs	r3, r3
 800fd9c:	105b      	asrs	r3, r3, #1
 800fd9e:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800fda0:	4b01      	ldr	r3, [pc, #4]	@ (800fda8 <SUBGRF_GetPacketStatus+0x74>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	6123      	str	r3, [r4, #16]
            break;
 800fda6:	e7ea      	b.n	800fd7e <SUBGRF_GetPacketStatus+0x4a>
 800fda8:	20001564 	.word	0x20001564

0800fdac <SUBGRF_WriteRegister>:
{
 800fdac:	b500      	push	{lr}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	f10d 0207 	add.w	r2, sp, #7
 800fdba:	4601      	mov	r1, r0
 800fdbc:	4802      	ldr	r0, [pc, #8]	@ (800fdc8 <SUBGRF_WriteRegister+0x1c>)
 800fdbe:	f7f4 fecf 	bl	8004b60 <HAL_SUBGHZ_WriteRegisters>
}
 800fdc2:	b003      	add	sp, #12
 800fdc4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fdc8:	2000035c 	.word	0x2000035c

0800fdcc <SUBGRF_SetRxBoosted>:
{
 800fdcc:	b510      	push	{r4, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 800fdd2:	4b0c      	ldr	r3, [pc, #48]	@ (800fe04 <SUBGRF_SetRxBoosted+0x38>)
 800fdd4:	2205      	movs	r2, #5
 800fdd6:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800fdd8:	2197      	movs	r1, #151	@ 0x97
 800fdda:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800fdde:	f7ff ffe5 	bl	800fdac <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fde2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800fde6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fdea:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800fdee:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fdf2:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800fdf6:	2203      	movs	r2, #3
 800fdf8:	a901      	add	r1, sp, #4
 800fdfa:	2082      	movs	r0, #130	@ 0x82
 800fdfc:	f7ff fdc4 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fe00:	b002      	add	sp, #8
 800fe02:	bd10      	pop	{r4, pc}
 800fe04:	2000156a 	.word	0x2000156a

0800fe08 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800fe08:	b500      	push	{lr}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800fe10:	2201      	movs	r2, #1
 800fe12:	f10d 0107 	add.w	r1, sp, #7
 800fe16:	20a0      	movs	r0, #160	@ 0xa0
 800fe18:	f7ff fdb6 	bl	800f988 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 800fe1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fe20:	2b3f      	cmp	r3, #63	@ 0x3f
 800fe22:	d90f      	bls.n	800fe44 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800fe24:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 800fe26:	2200      	movs	r2, #0
        while( mant > 31 )
 800fe28:	e002      	b.n	800fe30 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 800fe2a:	089b      	lsrs	r3, r3, #2
            exp++;
 800fe2c:	3201      	adds	r2, #1
 800fe2e:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 800fe30:	2b1f      	cmp	r3, #31
 800fe32:	d8fa      	bhi.n	800fe2a <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 800fe34:	00d9      	lsls	r1, r3, #3
 800fe36:	b2c9      	uxtb	r1, r1
 800fe38:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800fe3a:	b2c9      	uxtb	r1, r1
 800fe3c:	f240 7006 	movw	r0, #1798	@ 0x706
 800fe40:	f7ff ffb4 	bl	800fdac <SUBGRF_WriteRegister>
}
 800fe44:	b003      	add	sp, #12
 800fe46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800fe4c <SUBGRF_SetPacketType>:
{
 800fe4c:	b500      	push	{lr}
 800fe4e:	b083      	sub	sp, #12
 800fe50:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800fe54:	b2c3      	uxtb	r3, r0
 800fe56:	4a09      	ldr	r2, [pc, #36]	@ (800fe7c <SUBGRF_SetPacketType+0x30>)
 800fe58:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800fe5a:	b143      	cbz	r3, 800fe6e <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	f10d 0107 	add.w	r1, sp, #7
 800fe62:	208a      	movs	r0, #138	@ 0x8a
 800fe64:	f7ff fd90 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fe68:	b003      	add	sp, #12
 800fe6a:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800fe6e:	2100      	movs	r1, #0
 800fe70:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800fe74:	f7ff ff9a 	bl	800fdac <SUBGRF_WriteRegister>
 800fe78:	e7f0      	b.n	800fe5c <SUBGRF_SetPacketType+0x10>
 800fe7a:	bf00      	nop
 800fe7c:	20001569 	.word	0x20001569

0800fe80 <SUBGRF_SetModulationParams>:
{
 800fe80:	b510      	push	{r4, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800fe86:	4b3e      	ldr	r3, [pc, #248]	@ (800ff80 <SUBGRF_SetModulationParams+0x100>)
 800fe88:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe8c:	ab02      	add	r3, sp, #8
 800fe8e:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800fe92:	7820      	ldrb	r0, [r4, #0]
 800fe94:	4b3b      	ldr	r3, [pc, #236]	@ (800ff84 <SUBGRF_SetModulationParams+0x104>)
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	4298      	cmp	r0, r3
 800fe9a:	d106      	bne.n	800feaa <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 800fe9c:	7823      	ldrb	r3, [r4, #0]
 800fe9e:	2b03      	cmp	r3, #3
 800fea0:	d82c      	bhi.n	800fefc <SUBGRF_SetModulationParams+0x7c>
 800fea2:	e8df f003 	tbb	[pc, r3]
 800fea6:	4205      	.short	0x4205
 800fea8:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800feaa:	f7ff ffcf 	bl	800fe4c <SUBGRF_SetPacketType>
 800feae:	e7f5      	b.n	800fe9c <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800feb0:	6862      	ldr	r2, [r4, #4]
 800feb2:	4b35      	ldr	r3, [pc, #212]	@ (800ff88 <SUBGRF_SetModulationParams+0x108>)
 800feb4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800feb8:	0c1a      	lsrs	r2, r3, #16
 800feba:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800febe:	0a1a      	lsrs	r2, r3, #8
 800fec0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fec4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800fec8:	7b23      	ldrb	r3, [r4, #12]
 800feca:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800fece:	7b63      	ldrb	r3, [r4, #13]
 800fed0:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800fed4:	68a1      	ldr	r1, [r4, #8]
 800fed6:	4a2d      	ldr	r2, [pc, #180]	@ (800ff8c <SUBGRF_SetModulationParams+0x10c>)
 800fed8:	2300      	movs	r3, #0
 800feda:	0648      	lsls	r0, r1, #25
 800fedc:	09c9      	lsrs	r1, r1, #7
 800fede:	f7f0 ff49 	bl	8000d74 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800fee2:	0c03      	lsrs	r3, r0, #16
 800fee4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800fee8:	0a03      	lsrs	r3, r0, #8
 800feea:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 800feee:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fef2:	2208      	movs	r2, #8
 800fef4:	4669      	mov	r1, sp
 800fef6:	208b      	movs	r0, #139	@ 0x8b
 800fef8:	f7ff fd46 	bl	800f988 <SUBGRF_WriteCommand>
}
 800fefc:	b002      	add	sp, #8
 800fefe:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800ff00:	6922      	ldr	r2, [r4, #16]
 800ff02:	4b21      	ldr	r3, [pc, #132]	@ (800ff88 <SUBGRF_SetModulationParams+0x108>)
 800ff04:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800ff08:	0c1a      	lsrs	r2, r3, #16
 800ff0a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ff0e:	0a1a      	lsrs	r2, r3, #8
 800ff10:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800ff14:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800ff18:	7d23      	ldrb	r3, [r4, #20]
 800ff1a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ff1e:	2204      	movs	r2, #4
 800ff20:	4669      	mov	r1, sp
 800ff22:	208b      	movs	r0, #139	@ 0x8b
 800ff24:	f7ff fd30 	bl	800f988 <SUBGRF_WriteCommand>
        break;
 800ff28:	e7e8      	b.n	800fefc <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800ff2a:	7e23      	ldrb	r3, [r4, #24]
 800ff2c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800ff30:	7e63      	ldrb	r3, [r4, #25]
 800ff32:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800ff36:	7ea3      	ldrb	r3, [r4, #26]
 800ff38:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800ff3c:	7ee3      	ldrb	r3, [r4, #27]
 800ff3e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ff42:	2204      	movs	r2, #4
 800ff44:	4669      	mov	r1, sp
 800ff46:	208b      	movs	r0, #139	@ 0x8b
 800ff48:	f7ff fd1e 	bl	800f988 <SUBGRF_WriteCommand>
        break;
 800ff4c:	e7d6      	b.n	800fefc <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800ff4e:	6862      	ldr	r2, [r4, #4]
 800ff50:	4b0d      	ldr	r3, [pc, #52]	@ (800ff88 <SUBGRF_SetModulationParams+0x108>)
 800ff52:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800ff56:	0c1a      	lsrs	r2, r3, #16
 800ff58:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ff5c:	0a1a      	lsrs	r2, r3, #8
 800ff5e:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800ff62:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800ff66:	7b23      	ldrb	r3, [r4, #12]
 800ff68:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800ff6c:	7b63      	ldrb	r3, [r4, #13]
 800ff6e:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ff72:	2205      	movs	r2, #5
 800ff74:	4669      	mov	r1, sp
 800ff76:	208b      	movs	r0, #139	@ 0x8b
 800ff78:	f7ff fd06 	bl	800f988 <SUBGRF_WriteCommand>
}
 800ff7c:	e7be      	b.n	800fefc <SUBGRF_SetModulationParams+0x7c>
 800ff7e:	bf00      	nop
 800ff80:	08013d88 	.word	0x08013d88
 800ff84:	20001569 	.word	0x20001569
 800ff88:	3d090000 	.word	0x3d090000
 800ff8c:	01e84800 	.word	0x01e84800

0800ff90 <SUBGRF_ReadRegister>:
{
 800ff90:	b500      	push	{lr}
 800ff92:	b083      	sub	sp, #12
 800ff94:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ff96:	2301      	movs	r3, #1
 800ff98:	f10d 0207 	add.w	r2, sp, #7
 800ff9c:	4803      	ldr	r0, [pc, #12]	@ (800ffac <SUBGRF_ReadRegister+0x1c>)
 800ff9e:	f7f4 fe2f 	bl	8004c00 <HAL_SUBGHZ_ReadRegisters>
}
 800ffa2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ffa6:	b003      	add	sp, #12
 800ffa8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffac:	2000035c 	.word	0x2000035c

0800ffb0 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800ffb0:	b510      	push	{r4, lr}
 800ffb2:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800ffb4:	f7f2 f8d6 	bl	8002164 <RBI_IsDCDC>
 800ffb8:	2801      	cmp	r0, #1
 800ffba:	d000      	beq.n	800ffbe <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800ffbc:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800ffbe:	f640 1023 	movw	r0, #2339	@ 0x923
 800ffc2:	f7ff ffe5 	bl	800ff90 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800ffc6:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800ffca:	4321      	orrs	r1, r4
 800ffcc:	f640 1023 	movw	r0, #2339	@ 0x923
 800ffd0:	f7ff feec 	bl	800fdac <SUBGRF_WriteRegister>
}
 800ffd4:	e7f2      	b.n	800ffbc <Radio_SMPS_Set+0xc>
	...

0800ffd8 <SUBGRF_Init>:
{
 800ffd8:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 800ffda:	b108      	cbz	r0, 800ffe0 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 800ffdc:	4a16      	ldr	r2, [pc, #88]	@ (8010038 <SUBGRF_Init+0x60>)
 800ffde:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800ffe0:	f7f1 faca 	bl	8001578 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800ffe4:	2002      	movs	r0, #2
 800ffe6:	f7ff ffe3 	bl	800ffb0 <Radio_SMPS_Set>
    ImageCalibrated = false;
 800ffea:	2000      	movs	r0, #0
 800ffec:	4b13      	ldr	r3, [pc, #76]	@ (801003c <SUBGRF_Init+0x64>)
 800ffee:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800fff0:	f7ff fcf0 	bl	800f9d4 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 800fff4:	f7f2 f8b2 	bl	800215c <RBI_IsTCXO>
 800fff8:	2801      	cmp	r0, #1
 800fffa:	d00f      	beq.n	801001c <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800fffc:	2120      	movs	r1, #32
 800fffe:	f640 1011 	movw	r0, #2321	@ 0x911
 8010002:	f7ff fed3 	bl	800fdac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010006:	2120      	movs	r1, #32
 8010008:	f640 1012 	movw	r0, #2322	@ 0x912
 801000c:	f7ff fece 	bl	800fdac <SUBGRF_WriteRegister>
    RBI_Init();
 8010010:	f7f2 f898 	bl	8002144 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8010014:	4b0a      	ldr	r3, [pc, #40]	@ (8010040 <SUBGRF_Init+0x68>)
 8010016:	2201      	movs	r2, #1
 8010018:	701a      	strb	r2, [r3, #0]
}
 801001a:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801001c:	2140      	movs	r1, #64	@ 0x40
 801001e:	f7ff fe21 	bl	800fc64 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8010022:	2100      	movs	r1, #0
 8010024:	f640 1011 	movw	r0, #2321	@ 0x911
 8010028:	f7ff fec0 	bl	800fdac <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 801002c:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 8010030:	f7ff fd7f 	bl	800fb32 <SUBGRF_Calibrate>
 8010034:	e7ec      	b.n	8010010 <SUBGRF_Init+0x38>
 8010036:	bf00      	nop
 8010038:	2000155c 	.word	0x2000155c
 801003c:	20001560 	.word	0x20001560
 8010040:	2000156a 	.word	0x2000156a

08010044 <SUBGRF_SetSleep>:
{
 8010044:	b510      	push	{r4, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801004a:	2000      	movs	r0, #0
 801004c:	f7f2 f87e 	bl	800214c <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010050:	2002      	movs	r0, #2
 8010052:	f7ff ffad 	bl	800ffb0 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010056:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801005a:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801005e:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8010060:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010064:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010066:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801006a:	2201      	movs	r2, #1
 801006c:	f10d 0107 	add.w	r1, sp, #7
 8010070:	2084      	movs	r0, #132	@ 0x84
 8010072:	f7ff fc89 	bl	800f988 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8010076:	4b02      	ldr	r3, [pc, #8]	@ (8010080 <SUBGRF_SetSleep+0x3c>)
 8010078:	2200      	movs	r2, #0
 801007a:	701a      	strb	r2, [r3, #0]
}
 801007c:	b002      	add	sp, #8
 801007e:	bd10      	pop	{r4, pc}
 8010080:	2000156a 	.word	0x2000156a

08010084 <SUBGRF_SetWhiteningSeed>:
{
 8010084:	b510      	push	{r4, lr}
 8010086:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8010088:	f7ff fe32 	bl	800fcf0 <SUBGRF_GetPacketType>
 801008c:	b100      	cbz	r0, 8010090 <SUBGRF_SetWhiteningSeed+0xc>
}
 801008e:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8010090:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8010094:	f7ff ff7c 	bl	800ff90 <SUBGRF_ReadRegister>
 8010098:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801009c:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80100a0:	4301      	orrs	r1, r0
 80100a2:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80100a6:	f7ff fe81 	bl	800fdac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80100aa:	b2e1      	uxtb	r1, r4
 80100ac:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80100b0:	f7ff fe7c 	bl	800fdac <SUBGRF_WriteRegister>
}
 80100b4:	e7eb      	b.n	801008e <SUBGRF_SetWhiteningSeed+0xa>

080100b6 <SUBGRF_SetTxParams>:
{
 80100b6:	b530      	push	{r4, r5, lr}
 80100b8:	b083      	sub	sp, #12
 80100ba:	460c      	mov	r4, r1
 80100bc:	4615      	mov	r5, r2
    if( paSelect == RFO_LP )
 80100be:	2801      	cmp	r0, #1
 80100c0:	d127      	bne.n	8010112 <SUBGRF_SetTxParams+0x5c>
        if( power == 15 )
 80100c2:	290f      	cmp	r1, #15
 80100c4:	d00d      	beq.n	80100e2 <SUBGRF_SetTxParams+0x2c>
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80100c6:	2301      	movs	r3, #1
 80100c8:	461a      	mov	r2, r3
 80100ca:	2100      	movs	r1, #0
 80100cc:	2004      	movs	r0, #4
 80100ce:	f7ff fd97 	bl	800fc00 <SUBGRF_SetPaConfig>
        if( power >= 14 )
 80100d2:	2c0d      	cmp	r4, #13
 80100d4:	dc0c      	bgt.n	80100f0 <SUBGRF_SetTxParams+0x3a>
        else if( power < -17 )
 80100d6:	f114 0f11 	cmn.w	r4, #17
 80100da:	da0a      	bge.n	80100f2 <SUBGRF_SetTxParams+0x3c>
            power = -17;
 80100dc:	f06f 0410 	mvn.w	r4, #16
 80100e0:	e007      	b.n	80100f2 <SUBGRF_SetTxParams+0x3c>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80100e2:	2301      	movs	r3, #1
 80100e4:	461a      	mov	r2, r3
 80100e6:	2100      	movs	r1, #0
 80100e8:	2006      	movs	r0, #6
 80100ea:	f7ff fd89 	bl	800fc00 <SUBGRF_SetPaConfig>
 80100ee:	e7f0      	b.n	80100d2 <SUBGRF_SetTxParams+0x1c>
            power = 14;
 80100f0:	240e      	movs	r4, #14
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80100f2:	2118      	movs	r1, #24
 80100f4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80100f8:	f7ff fe58 	bl	800fdac <SUBGRF_WriteRegister>
    buf[0] = power;
 80100fc:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 8010100:	f88d 5005 	strb.w	r5, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8010104:	2202      	movs	r2, #2
 8010106:	a901      	add	r1, sp, #4
 8010108:	208e      	movs	r0, #142	@ 0x8e
 801010a:	f7ff fc3d 	bl	800f988 <SUBGRF_WriteCommand>
}
 801010e:	b003      	add	sp, #12
 8010110:	bd30      	pop	{r4, r5, pc}
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8010112:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8010116:	f7ff ff3b 	bl	800ff90 <SUBGRF_ReadRegister>
 801011a:	f040 011e 	orr.w	r1, r0, #30
 801011e:	b2c9      	uxtb	r1, r1
 8010120:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8010124:	f7ff fe42 	bl	800fdac <SUBGRF_WriteRegister>
        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8010128:	2301      	movs	r3, #1
 801012a:	2200      	movs	r2, #0
 801012c:	2107      	movs	r1, #7
 801012e:	2004      	movs	r0, #4
 8010130:	f7ff fd66 	bl	800fc00 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8010134:	2c16      	cmp	r4, #22
 8010136:	dc05      	bgt.n	8010144 <SUBGRF_SetTxParams+0x8e>
        else if( power < -9 )
 8010138:	f114 0f09 	cmn.w	r4, #9
 801013c:	da03      	bge.n	8010146 <SUBGRF_SetTxParams+0x90>
            power = -9;
 801013e:	f06f 0408 	mvn.w	r4, #8
 8010142:	e000      	b.n	8010146 <SUBGRF_SetTxParams+0x90>
            power = 22;
 8010144:	2416      	movs	r4, #22
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8010146:	2138      	movs	r1, #56	@ 0x38
 8010148:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801014c:	f7ff fe2e 	bl	800fdac <SUBGRF_WriteRegister>
 8010150:	e7d4      	b.n	80100fc <SUBGRF_SetTxParams+0x46>
	...

08010154 <SUBGRF_GetRxBufferStatus>:
{
 8010154:	b530      	push	{r4, r5, lr}
 8010156:	b083      	sub	sp, #12
 8010158:	4605      	mov	r5, r0
 801015a:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801015c:	2202      	movs	r2, #2
 801015e:	a901      	add	r1, sp, #4
 8010160:	2013      	movs	r0, #19
 8010162:	f7ff fc21 	bl	800f9a8 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8010166:	f7ff fdc3 	bl	800fcf0 <SUBGRF_GetPacketType>
 801016a:	2801      	cmp	r0, #1
 801016c:	d007      	beq.n	801017e <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 801016e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010172:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8010174:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010178:	7023      	strb	r3, [r4, #0]
}
 801017a:	b003      	add	sp, #12
 801017c:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801017e:	4b05      	ldr	r3, [pc, #20]	@ (8010194 <SUBGRF_GetRxBufferStatus+0x40>)
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	b2db      	uxtb	r3, r3
 8010184:	2b01      	cmp	r3, #1
 8010186:	d1f2      	bne.n	801016e <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8010188:	f240 7002 	movw	r0, #1794	@ 0x702
 801018c:	f7ff ff00 	bl	800ff90 <SUBGRF_ReadRegister>
 8010190:	7028      	strb	r0, [r5, #0]
 8010192:	e7ef      	b.n	8010174 <SUBGRF_GetRxBufferStatus+0x20>
 8010194:	20001568 	.word	0x20001568

08010198 <SUBGRF_WriteRegisters>:
{
 8010198:	b510      	push	{r4, lr}
 801019a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801019c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80101a0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80101a2:	460a      	mov	r2, r1
 80101a4:	4601      	mov	r1, r0
 80101a6:	4803      	ldr	r0, [pc, #12]	@ (80101b4 <SUBGRF_WriteRegisters+0x1c>)
 80101a8:	f7f4 fcda 	bl	8004b60 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101ac:	f384 8810 	msr	PRIMASK, r4
}
 80101b0:	bd10      	pop	{r4, pc}
 80101b2:	bf00      	nop
 80101b4:	2000035c 	.word	0x2000035c

080101b8 <SUBGRF_SetSyncWord>:
{
 80101b8:	b508      	push	{r3, lr}
 80101ba:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80101bc:	2208      	movs	r2, #8
 80101be:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80101c2:	f7ff ffe9 	bl	8010198 <SUBGRF_WriteRegisters>
}
 80101c6:	2000      	movs	r0, #0
 80101c8:	bd08      	pop	{r3, pc}

080101ca <SUBGRF_SetCrcSeed>:
{
 80101ca:	b500      	push	{lr}
 80101cc:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80101ce:	0a03      	lsrs	r3, r0, #8
 80101d0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80101d4:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80101d8:	f7ff fd8a 	bl	800fcf0 <SUBGRF_GetPacketType>
 80101dc:	b110      	cbz	r0, 80101e4 <SUBGRF_SetCrcSeed+0x1a>
}
 80101de:	b003      	add	sp, #12
 80101e0:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80101e4:	2202      	movs	r2, #2
 80101e6:	a901      	add	r1, sp, #4
 80101e8:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80101ec:	f7ff ffd4 	bl	8010198 <SUBGRF_WriteRegisters>
}
 80101f0:	e7f5      	b.n	80101de <SUBGRF_SetCrcSeed+0x14>

080101f2 <SUBGRF_SetCrcPolynomial>:
{
 80101f2:	b500      	push	{lr}
 80101f4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80101f6:	0a03      	lsrs	r3, r0, #8
 80101f8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80101fc:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010200:	f7ff fd76 	bl	800fcf0 <SUBGRF_GetPacketType>
 8010204:	b110      	cbz	r0, 801020c <SUBGRF_SetCrcPolynomial+0x1a>
}
 8010206:	b003      	add	sp, #12
 8010208:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801020c:	2202      	movs	r2, #2
 801020e:	a901      	add	r1, sp, #4
 8010210:	f240 60be 	movw	r0, #1726	@ 0x6be
 8010214:	f7ff ffc0 	bl	8010198 <SUBGRF_WriteRegisters>
}
 8010218:	e7f5      	b.n	8010206 <SUBGRF_SetCrcPolynomial+0x14>
	...

0801021c <SUBGRF_SetPacketParams>:
{
 801021c:	b510      	push	{r4, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010222:	ab01      	add	r3, sp, #4
 8010224:	4a33      	ldr	r2, [pc, #204]	@ (80102f4 <SUBGRF_SetPacketParams+0xd8>)
 8010226:	ca07      	ldmia	r2, {r0, r1, r2}
 8010228:	c303      	stmia	r3!, {r0, r1}
 801022a:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 801022c:	7820      	ldrb	r0, [r4, #0]
 801022e:	4b32      	ldr	r3, [pc, #200]	@ (80102f8 <SUBGRF_SetPacketParams+0xdc>)
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	4298      	cmp	r0, r3
 8010234:	d106      	bne.n	8010244 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8010236:	7823      	ldrb	r3, [r4, #0]
 8010238:	2b03      	cmp	r3, #3
 801023a:	d82a      	bhi.n	8010292 <SUBGRF_SetPacketParams+0x76>
 801023c:	e8df f003 	tbb	[pc, r3]
 8010240:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8010244:	f7ff fe02 	bl	800fe4c <SUBGRF_SetPacketType>
 8010248:	e7f5      	b.n	8010236 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801024a:	7a63      	ldrb	r3, [r4, #9]
 801024c:	2bf1      	cmp	r3, #241	@ 0xf1
 801024e:	d022      	beq.n	8010296 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8010250:	2bf2      	cmp	r3, #242	@ 0xf2
 8010252:	d02a      	beq.n	80102aa <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8010254:	8862      	ldrh	r2, [r4, #2]
 8010256:	0a11      	lsrs	r1, r2, #8
 8010258:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801025c:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8010260:	7922      	ldrb	r2, [r4, #4]
 8010262:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8010266:	7962      	ldrb	r2, [r4, #5]
 8010268:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801026c:	79a2      	ldrb	r2, [r4, #6]
 801026e:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8010272:	79e2      	ldrb	r2, [r4, #7]
 8010274:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8010278:	7a22      	ldrb	r2, [r4, #8]
 801027a:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 801027e:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8010282:	7aa3      	ldrb	r3, [r4, #10]
 8010284:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8010288:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801028a:	a901      	add	r1, sp, #4
 801028c:	208c      	movs	r0, #140	@ 0x8c
 801028e:	f7ff fb7b 	bl	800f988 <SUBGRF_WriteCommand>
}
 8010292:	b004      	add	sp, #16
 8010294:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8010296:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801029a:	f7ff ff96 	bl	80101ca <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801029e:	f248 0005 	movw	r0, #32773	@ 0x8005
 80102a2:	f7ff ffa6 	bl	80101f2 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80102a6:	2302      	movs	r3, #2
 80102a8:	e7d4      	b.n	8010254 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80102aa:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80102ae:	f7ff ff8c 	bl	80101ca <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80102b2:	f241 0021 	movw	r0, #4129	@ 0x1021
 80102b6:	f7ff ff9c 	bl	80101f2 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80102ba:	2306      	movs	r3, #6
 80102bc:	e7ca      	b.n	8010254 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80102be:	7b23      	ldrb	r3, [r4, #12]
 80102c0:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80102c4:	2201      	movs	r2, #1
        break;
 80102c6:	e7e0      	b.n	801028a <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80102c8:	89e3      	ldrh	r3, [r4, #14]
 80102ca:	0a1a      	lsrs	r2, r3, #8
 80102cc:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80102d0:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80102d4:	7c23      	ldrb	r3, [r4, #16]
 80102d6:	4a09      	ldr	r2, [pc, #36]	@ (80102fc <SUBGRF_SetPacketParams+0xe0>)
 80102d8:	7013      	strb	r3, [r2, #0]
 80102da:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80102de:	7c63      	ldrb	r3, [r4, #17]
 80102e0:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80102e4:	7ca3      	ldrb	r3, [r4, #18]
 80102e6:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80102ea:	7ce3      	ldrb	r3, [r4, #19]
 80102ec:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80102f0:	2206      	movs	r2, #6
        break;
 80102f2:	e7ca      	b.n	801028a <SUBGRF_SetPacketParams+0x6e>
 80102f4:	08013d90 	.word	0x08013d90
 80102f8:	20001569 	.word	0x20001569
 80102fc:	20001568 	.word	0x20001568

08010300 <SUBGRF_ReadRegisters>:
{
 8010300:	b510      	push	{r4, lr}
 8010302:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010304:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010308:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801030a:	460a      	mov	r2, r1
 801030c:	4601      	mov	r1, r0
 801030e:	4803      	ldr	r0, [pc, #12]	@ (801031c <SUBGRF_ReadRegisters+0x1c>)
 8010310:	f7f4 fc76 	bl	8004c00 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010314:	f384 8810 	msr	PRIMASK, r4
}
 8010318:	bd10      	pop	{r4, pc}
 801031a:	bf00      	nop
 801031c:	2000035c 	.word	0x2000035c

08010320 <SUBGRF_GetRandom>:
{
 8010320:	b570      	push	{r4, r5, r6, lr}
 8010322:	b082      	sub	sp, #8
    uint32_t number = 0;
 8010324:	2600      	movs	r6, #0
 8010326:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8010328:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801032c:	f7ff fe30 	bl	800ff90 <SUBGRF_ReadRegister>
 8010330:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8010332:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 8010336:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801033a:	f7ff fd37 	bl	800fdac <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801033e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010342:	f7ff fe25 	bl	800ff90 <SUBGRF_ReadRegister>
 8010346:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8010348:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 801034c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010350:	f7ff fd2c 	bl	800fdac <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8010354:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8010358:	f7ff fb70 	bl	800fa3c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801035c:	2204      	movs	r2, #4
 801035e:	eb0d 0102 	add.w	r1, sp, r2
 8010362:	f640 0019 	movw	r0, #2073	@ 0x819
 8010366:	f7ff ffcb 	bl	8010300 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 801036a:	4630      	mov	r0, r6
 801036c:	f7ff fb32 	bl	800f9d4 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8010370:	4629      	mov	r1, r5
 8010372:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8010376:	f7ff fd19 	bl	800fdac <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801037a:	4621      	mov	r1, r4
 801037c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010380:	f7ff fd14 	bl	800fdac <SUBGRF_WriteRegister>
}
 8010384:	9801      	ldr	r0, [sp, #4]
 8010386:	b002      	add	sp, #8
 8010388:	bd70      	pop	{r4, r5, r6, pc}
	...

0801038c <SUBGRF_WriteBuffer>:
{
 801038c:	b510      	push	{r4, lr}
 801038e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010390:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010394:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8010396:	460a      	mov	r2, r1
 8010398:	4601      	mov	r1, r0
 801039a:	4803      	ldr	r0, [pc, #12]	@ (80103a8 <SUBGRF_WriteBuffer+0x1c>)
 801039c:	f7f4 fd88 	bl	8004eb0 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103a0:	f384 8810 	msr	PRIMASK, r4
}
 80103a4:	bd10      	pop	{r4, pc}
 80103a6:	bf00      	nop
 80103a8:	2000035c 	.word	0x2000035c

080103ac <SUBGRF_SetPayload>:
{
 80103ac:	b508      	push	{r3, lr}
 80103ae:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80103b0:	4601      	mov	r1, r0
 80103b2:	2000      	movs	r0, #0
 80103b4:	f7ff ffea 	bl	801038c <SUBGRF_WriteBuffer>
}
 80103b8:	bd08      	pop	{r3, pc}

080103ba <SUBGRF_SendPayload>:
{
 80103ba:	b510      	push	{r4, lr}
 80103bc:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80103be:	f7ff fff5 	bl	80103ac <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80103c2:	4620      	mov	r0, r4
 80103c4:	f7ff fb20 	bl	800fa08 <SUBGRF_SetTx>
}
 80103c8:	bd10      	pop	{r4, pc}
	...

080103cc <SUBGRF_ReadBuffer>:
{
 80103cc:	b510      	push	{r4, lr}
 80103ce:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103d0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80103d4:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80103d6:	460a      	mov	r2, r1
 80103d8:	4601      	mov	r1, r0
 80103da:	4803      	ldr	r0, [pc, #12]	@ (80103e8 <SUBGRF_ReadBuffer+0x1c>)
 80103dc:	f7f4 fdb2 	bl	8004f44 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103e0:	f384 8810 	msr	PRIMASK, r4
}
 80103e4:	bd10      	pop	{r4, pc}
 80103e6:	bf00      	nop
 80103e8:	2000035c 	.word	0x2000035c

080103ec <SUBGRF_GetPayload>:
{
 80103ec:	b570      	push	{r4, r5, r6, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	4606      	mov	r6, r0
 80103f2:	460c      	mov	r4, r1
 80103f4:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80103f6:	2300      	movs	r3, #0
 80103f8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80103fc:	f10d 0107 	add.w	r1, sp, #7
 8010400:	4620      	mov	r0, r4
 8010402:	f7ff fea7 	bl	8010154 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8010406:	7822      	ldrb	r2, [r4, #0]
 8010408:	42aa      	cmp	r2, r5
 801040a:	d902      	bls.n	8010412 <SUBGRF_GetPayload+0x26>
        return 1;
 801040c:	2001      	movs	r0, #1
}
 801040e:	b002      	add	sp, #8
 8010410:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8010412:	4631      	mov	r1, r6
 8010414:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010418:	f7ff ffd8 	bl	80103cc <SUBGRF_ReadBuffer>
    return 0;
 801041c:	2000      	movs	r0, #0
 801041e:	e7f6      	b.n	801040e <SUBGRF_GetPayload+0x22>

08010420 <SUBGRF_SetSwitch>:
{
 8010420:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8010422:	2901      	cmp	r1, #1
 8010424:	d003      	beq.n	801042e <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8010426:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8010428:	f7f1 fe90 	bl	800214c <RBI_ConfigRFSwitch>
}
 801042c:	bd10      	pop	{r4, pc}
 801042e:	4604      	mov	r4, r0
 8010430:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8010432:	2c01      	cmp	r4, #1
 8010434:	d003      	beq.n	801043e <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8010436:	2c02      	cmp	r4, #2
 8010438:	d1f6      	bne.n	8010428 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 801043a:	2003      	movs	r0, #3
 801043c:	e7f4      	b.n	8010428 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801043e:	2004      	movs	r0, #4
 8010440:	f7ff fdb6 	bl	800ffb0 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8010444:	2002      	movs	r0, #2
 8010446:	e7f6      	b.n	8010436 <SUBGRF_SetSwitch+0x16>

08010448 <SUBGRF_SetRfTxPower>:
{
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 801044c:	f7f1 fe82 	bl	8002154 <RBI_GetTxConfig>
    switch (TxConfig)
 8010450:	b148      	cbz	r0, 8010466 <SUBGRF_SetRfTxPower+0x1e>
 8010452:	2802      	cmp	r0, #2
 8010454:	d10d      	bne.n	8010472 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8010456:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8010458:	2202      	movs	r2, #2
 801045a:	4621      	mov	r1, r4
 801045c:	4628      	mov	r0, r5
 801045e:	f7ff fe2a 	bl	80100b6 <SUBGRF_SetTxParams>
}
 8010462:	4628      	mov	r0, r5
 8010464:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8010466:	2c0f      	cmp	r4, #15
 8010468:	dc01      	bgt.n	801046e <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 801046a:	2501      	movs	r5, #1
 801046c:	e7f4      	b.n	8010458 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 801046e:	2502      	movs	r5, #2
 8010470:	e7f2      	b.n	8010458 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8010472:	2501      	movs	r5, #1
 8010474:	e7f0      	b.n	8010458 <SUBGRF_SetRfTxPower+0x10>

08010476 <SUBGRF_GetRadioWakeUpTime>:
}
 8010476:	2001      	movs	r0, #1
 8010478:	4770      	bx	lr
	...

0801047c <HAL_SUBGHZ_TxCpltCallback>:
{
 801047c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801047e:	4b02      	ldr	r3, [pc, #8]	@ (8010488 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	2001      	movs	r0, #1
 8010484:	4798      	blx	r3
}
 8010486:	bd08      	pop	{r3, pc}
 8010488:	2000155c 	.word	0x2000155c

0801048c <HAL_SUBGHZ_RxCpltCallback>:
{
 801048c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801048e:	4b02      	ldr	r3, [pc, #8]	@ (8010498 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2002      	movs	r0, #2
 8010494:	4798      	blx	r3
}
 8010496:	bd08      	pop	{r3, pc}
 8010498:	2000155c 	.word	0x2000155c

0801049c <HAL_SUBGHZ_CRCErrorCallback>:
{
 801049c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801049e:	4b02      	ldr	r3, [pc, #8]	@ (80104a8 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2040      	movs	r0, #64	@ 0x40
 80104a4:	4798      	blx	r3
}
 80104a6:	bd08      	pop	{r3, pc}
 80104a8:	2000155c 	.word	0x2000155c

080104ac <HAL_SUBGHZ_CADStatusCallback>:
{
 80104ac:	b508      	push	{r3, lr}
    switch (cadstatus)
 80104ae:	b111      	cbz	r1, 80104b6 <HAL_SUBGHZ_CADStatusCallback+0xa>
 80104b0:	2901      	cmp	r1, #1
 80104b2:	d005      	beq.n	80104c0 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 80104b4:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80104b6:	4b05      	ldr	r3, [pc, #20]	@ (80104cc <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	2080      	movs	r0, #128	@ 0x80
 80104bc:	4798      	blx	r3
            break;
 80104be:	e7f9      	b.n	80104b4 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80104c0:	4b02      	ldr	r3, [pc, #8]	@ (80104cc <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80104c8:	4798      	blx	r3
}
 80104ca:	e7f3      	b.n	80104b4 <HAL_SUBGHZ_CADStatusCallback+0x8>
 80104cc:	2000155c 	.word	0x2000155c

080104d0 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80104d0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80104d2:	4b03      	ldr	r3, [pc, #12]	@ (80104e0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80104da:	4798      	blx	r3
}
 80104dc:	bd08      	pop	{r3, pc}
 80104de:	bf00      	nop
 80104e0:	2000155c 	.word	0x2000155c

080104e4 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80104e4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80104e6:	4b02      	ldr	r3, [pc, #8]	@ (80104f0 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2020      	movs	r0, #32
 80104ec:	4798      	blx	r3
}
 80104ee:	bd08      	pop	{r3, pc}
 80104f0:	2000155c 	.word	0x2000155c

080104f4 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80104f4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80104f6:	4b02      	ldr	r3, [pc, #8]	@ (8010500 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	2004      	movs	r0, #4
 80104fc:	4798      	blx	r3
}
 80104fe:	bd08      	pop	{r3, pc}
 8010500:	2000155c 	.word	0x2000155c

08010504 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8010504:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8010506:	4b02      	ldr	r3, [pc, #8]	@ (8010510 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2008      	movs	r0, #8
 801050c:	4798      	blx	r3
}
 801050e:	bd08      	pop	{r3, pc}
 8010510:	2000155c 	.word	0x2000155c

08010514 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8010514:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8010516:	4b02      	ldr	r3, [pc, #8]	@ (8010520 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2010      	movs	r0, #16
 801051c:	4798      	blx	r3
}
 801051e:	bd08      	pop	{r3, pc}
 8010520:	2000155c 	.word	0x2000155c

08010524 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8010524:	4601      	mov	r1, r0
 8010526:	b180      	cbz	r0, 801054a <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010528:	2300      	movs	r3, #0
 801052a:	2b15      	cmp	r3, #21
 801052c:	d80c      	bhi.n	8010548 <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801052e:	4a08      	ldr	r2, [pc, #32]	@ (8010550 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8010530:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010534:	428a      	cmp	r2, r1
 8010536:	d802      	bhi.n	801053e <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010538:	3301      	adds	r3, #1
 801053a:	b2db      	uxtb	r3, r3
 801053c:	e7f5      	b.n	801052a <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 801053e:	4a04      	ldr	r2, [pc, #16]	@ (8010550 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8010540:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010544:	7918      	ldrb	r0, [r3, #4]
 8010546:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8010548:	e7fe      	b.n	8010548 <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 801054a:	201f      	movs	r0, #31
}
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop
 8010550:	0801499c 	.word	0x0801499c

08010554 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8010554:	b570      	push	{r4, r5, r6, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	4605      	mov	r5, r0
 801055a:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 801055c:	4b1d      	ldr	r3, [pc, #116]	@ (80105d4 <SUBGRF_GetCFO+0x80>)
 801055e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8010560:	f640 0007 	movw	r0, #2055	@ 0x807
 8010564:	f7ff fd14 	bl	800ff90 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8010568:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 801056c:	3308      	adds	r3, #8
 801056e:	446b      	add	r3, sp
 8010570:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8010574:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8010578:	3b01      	subs	r3, #1
 801057a:	fa02 f303 	lsl.w	r3, r2, r3
 801057e:	4a16      	ldr	r2, [pc, #88]	@ (80105d8 <SUBGRF_GetCFO+0x84>)
 8010580:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8010584:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8010588:	2807      	cmp	r0, #7
 801058a:	d921      	bls.n	80105d0 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 801058c:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 801058e:	fb03 f000 	mul.w	r0, r3, r0
 8010592:	2803      	cmp	r0, #3
 8010594:	d800      	bhi.n	8010598 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8010596:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8010598:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 801059c:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 80105a0:	f7ff fcf6 	bl	800ff90 <SUBGRF_ReadRegister>
 80105a4:	0206      	lsls	r6, r0, #8
 80105a6:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 80105aa:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 80105ae:	f7ff fcef 	bl	800ff90 <SUBGRF_ReadRegister>
 80105b2:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80105b4:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 80105b8:	d003      	beq.n	80105c2 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80105ba:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80105be:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80105c2:	096b      	lsrs	r3, r5, #5
 80105c4:	fb03 f000 	mul.w	r0, r3, r0
 80105c8:	11c0      	asrs	r0, r0, #7
 80105ca:	6020      	str	r0, [r4, #0]
}
 80105cc:	b002      	add	sp, #8
 80105ce:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80105d0:	2302      	movs	r3, #2
 80105d2:	e7dc      	b.n	801058e <SUBGRF_GetCFO+0x3a>
 80105d4:	0c0a0804 	.word	0x0c0a0804
 80105d8:	01e84800 	.word	0x01e84800

080105dc <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80105dc:	f04f 30ff 	mov.w	r0, #4294967295
 80105e0:	4770      	bx	lr

080105e2 <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80105e2:	f04f 30ff 	mov.w	r0, #4294967295
 80105e6:	4770      	bx	lr

080105e8 <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 80105e8:	f04f 30ff 	mov.w	r0, #4294967295
 80105ec:	4770      	bx	lr

080105ee <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80105ee:	4770      	bx	lr

080105f0 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 80105f0:	2000      	movs	r0, #0
 80105f2:	4770      	bx	lr

080105f4 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 80105f4:	2000      	movs	r0, #0
 80105f6:	4770      	bx	lr

080105f8 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 80105f8:	4770      	bx	lr

080105fa <RFW_TransmitInit>:
    
    status= 0;
  }
#endif
  return status;
}
 80105fa:	f04f 30ff 	mov.w	r0, #4294967295
 80105fe:	4770      	bx	lr

08010600 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8010600:	f04f 30ff 	mov.w	r0, #4294967295
 8010604:	4770      	bx	lr

08010606 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8010606:	4770      	bx	lr

08010608 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8010608:	4770      	bx	lr

0801060a <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801060a:	4770      	bx	lr

0801060c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801060c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801060e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010612:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8010614:	4b1e      	ldr	r3, [pc, #120]	@ (8010690 <TRACE_AllocateBufer+0x84>)
 8010616:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 801061a:	8a1a      	ldrh	r2, [r3, #16]
 801061c:	4596      	cmp	lr, r2
 801061e:	d011      	beq.n	8010644 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010620:	4596      	cmp	lr, r2
 8010622:	d921      	bls.n	8010668 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010624:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 8010628:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801062a:	4283      	cmp	r3, r0
 801062c:	d81f      	bhi.n	801066e <TRACE_AllocateBufer+0x62>
 801062e:	4282      	cmp	r2, r0
 8010630:	d91d      	bls.n	801066e <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010632:	4b17      	ldr	r3, [pc, #92]	@ (8010690 <TRACE_AllocateBufer+0x84>)
 8010634:	2401      	movs	r4, #1
 8010636:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010638:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801063c:	2400      	movs	r4, #0
 801063e:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010640:	4613      	mov	r3, r2
 8010642:	e014      	b.n	801066e <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010644:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 8010648:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801064a:	4298      	cmp	r0, r3
 801064c:	d30f      	bcc.n	801066e <TRACE_AllocateBufer+0x62>
 801064e:	4282      	cmp	r2, r0
 8010650:	d90d      	bls.n	801066e <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010652:	4b0f      	ldr	r3, [pc, #60]	@ (8010690 <TRACE_AllocateBufer+0x84>)
 8010654:	2401      	movs	r4, #1
 8010656:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010658:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801065c:	f04f 0e00 	mov.w	lr, #0
 8010660:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010664:	4613      	mov	r3, r2
 8010666:	e002      	b.n	801066e <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8010668:	eba2 020e 	sub.w	r2, r2, lr
 801066c:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801066e:	4283      	cmp	r3, r0
 8010670:	d90a      	bls.n	8010688 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8010672:	4a07      	ldr	r2, [pc, #28]	@ (8010690 <TRACE_AllocateBufer+0x84>)
 8010674:	8a53      	ldrh	r3, [r2, #18]
 8010676:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010678:	4403      	add	r3, r0
 801067a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801067e:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8010680:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010682:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8010686:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8010688:	f04f 30ff 	mov.w	r0, #4294967295
 801068c:	e7f9      	b.n	8010682 <TRACE_AllocateBufer+0x76>
 801068e:	bf00      	nop
 8010690:	20001b6c 	.word	0x20001b6c

08010694 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010694:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010698:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 801069a:	4a03      	ldr	r2, [pc, #12]	@ (80106a8 <TRACE_Lock+0x14>)
 801069c:	8ad3      	ldrh	r3, [r2, #22]
 801069e:	3301      	adds	r3, #1
 80106a0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106a2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80106a6:	4770      	bx	lr
 80106a8:	20001b6c 	.word	0x20001b6c

080106ac <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80106b0:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80106b2:	4a03      	ldr	r2, [pc, #12]	@ (80106c0 <TRACE_UnLock+0x14>)
 80106b4:	8ad3      	ldrh	r3, [r2, #22]
 80106b6:	3b01      	subs	r3, #1
 80106b8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106ba:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80106be:	4770      	bx	lr
 80106c0:	20001b6c 	.word	0x20001b6c

080106c4 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80106c4:	4b02      	ldr	r3, [pc, #8]	@ (80106d0 <TRACE_IsLocked+0xc>)
 80106c6:	8ad8      	ldrh	r0, [r3, #22]
}
 80106c8:	3800      	subs	r0, #0
 80106ca:	bf18      	it	ne
 80106cc:	2001      	movne	r0, #1
 80106ce:	4770      	bx	lr
 80106d0:	20001b6c 	.word	0x20001b6c

080106d4 <UTIL_ADV_TRACE_Init>:
{
 80106d4:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80106d6:	2218      	movs	r2, #24
 80106d8:	2100      	movs	r1, #0
 80106da:	4807      	ldr	r0, [pc, #28]	@ (80106f8 <UTIL_ADV_TRACE_Init+0x24>)
 80106dc:	f000 f98f 	bl	80109fe <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80106e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80106e4:	2100      	movs	r1, #0
 80106e6:	4805      	ldr	r0, [pc, #20]	@ (80106fc <UTIL_ADV_TRACE_Init+0x28>)
 80106e8:	f000 f989 	bl	80109fe <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80106ec:	4b04      	ldr	r3, [pc, #16]	@ (8010700 <UTIL_ADV_TRACE_Init+0x2c>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4804      	ldr	r0, [pc, #16]	@ (8010704 <UTIL_ADV_TRACE_Init+0x30>)
 80106f2:	4798      	blx	r3
}
 80106f4:	bd08      	pop	{r3, pc}
 80106f6:	bf00      	nop
 80106f8:	20001b6c 	.word	0x20001b6c
 80106fc:	2000176c 	.word	0x2000176c
 8010700:	08013e28 	.word	0x08013e28
 8010704:	08010885 	.word	0x08010885

08010708 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8010708:	4b01      	ldr	r3, [pc, #4]	@ (8010710 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 801070a:	6058      	str	r0, [r3, #4]
}
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	20001b6c 	.word	0x20001b6c

08010714 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8010714:	4b01      	ldr	r3, [pc, #4]	@ (801071c <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8010716:	7218      	strb	r0, [r3, #8]
}
 8010718:	4770      	bx	lr
 801071a:	bf00      	nop
 801071c:	20001b6c 	.word	0x20001b6c

08010720 <TRACE_Send>:
{
 8010720:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010722:	f3ef 8310 	mrs	r3, PRIMASK
 8010726:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8010728:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 801072a:	f7ff ffcb 	bl	80106c4 <TRACE_IsLocked>
 801072e:	b118      	cbz	r0, 8010738 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010730:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010734:	2000      	movs	r0, #0
}
 8010736:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8010738:	f7ff ffac 	bl	8010694 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801073c:	4b1c      	ldr	r3, [pc, #112]	@ (80107b0 <TRACE_Send+0x90>)
 801073e:	8a1a      	ldrh	r2, [r3, #16]
 8010740:	8a5b      	ldrh	r3, [r3, #18]
 8010742:	429a      	cmp	r2, r3
 8010744:	d02e      	beq.n	80107a4 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010746:	491a      	ldr	r1, [pc, #104]	@ (80107b0 <TRACE_Send+0x90>)
 8010748:	7889      	ldrb	r1, [r1, #2]
 801074a:	2901      	cmp	r1, #1
 801074c:	d017      	beq.n	801077e <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801074e:	4a18      	ldr	r2, [pc, #96]	@ (80107b0 <TRACE_Send+0x90>)
 8010750:	7892      	ldrb	r2, [r2, #2]
 8010752:	b932      	cbnz	r2, 8010762 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010754:	4a16      	ldr	r2, [pc, #88]	@ (80107b0 <TRACE_Send+0x90>)
 8010756:	8a12      	ldrh	r2, [r2, #16]
 8010758:	4293      	cmp	r3, r2
 801075a:	d91e      	bls.n	801079a <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801075c:	1a9b      	subs	r3, r3, r2
 801075e:	4a14      	ldr	r2, [pc, #80]	@ (80107b0 <TRACE_Send+0x90>)
 8010760:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8010762:	4e13      	ldr	r6, [pc, #76]	@ (80107b0 <TRACE_Send+0x90>)
 8010764:	8a35      	ldrh	r5, [r6, #16]
 8010766:	4b13      	ldr	r3, [pc, #76]	@ (80107b4 <TRACE_Send+0x94>)
 8010768:	441d      	add	r5, r3
 801076a:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 801076e:	f7f0 fff3 	bl	8001758 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8010772:	4b11      	ldr	r3, [pc, #68]	@ (80107b8 <TRACE_Send+0x98>)
 8010774:	68db      	ldr	r3, [r3, #12]
 8010776:	8ab1      	ldrh	r1, [r6, #20]
 8010778:	4628      	mov	r0, r5
 801077a:	4798      	blx	r3
 801077c:	e7db      	b.n	8010736 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801077e:	480c      	ldr	r0, [pc, #48]	@ (80107b0 <TRACE_Send+0x90>)
 8010780:	8801      	ldrh	r1, [r0, #0]
 8010782:	1a8a      	subs	r2, r1, r2
 8010784:	b292      	uxth	r2, r2
 8010786:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8010788:	2102      	movs	r1, #2
 801078a:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801078c:	2100      	movs	r1, #0
 801078e:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010790:	2a00      	cmp	r2, #0
 8010792:	d1dc      	bne.n	801074e <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010794:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010796:	8201      	strh	r1, [r0, #16]
 8010798:	e7d9      	b.n	801074e <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801079a:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 801079e:	4b04      	ldr	r3, [pc, #16]	@ (80107b0 <TRACE_Send+0x90>)
 80107a0:	829a      	strh	r2, [r3, #20]
 80107a2:	e7de      	b.n	8010762 <TRACE_Send+0x42>
      TRACE_UnLock();
 80107a4:	f7ff ff82 	bl	80106ac <TRACE_UnLock>
 80107a8:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80107ac:	2000      	movs	r0, #0
}
 80107ae:	e7c2      	b.n	8010736 <TRACE_Send+0x16>
 80107b0:	20001b6c 	.word	0x20001b6c
 80107b4:	2000176c 	.word	0x2000176c
 80107b8:	08013e28 	.word	0x08013e28

080107bc <UTIL_ADV_TRACE_COND_FSend>:
{
 80107bc:	b408      	push	{r3}
 80107be:	b530      	push	{r4, r5, lr}
 80107c0:	b086      	sub	sp, #24
 80107c2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 80107c4:	2300      	movs	r3, #0
 80107c6:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80107ca:	4b2b      	ldr	r3, [pc, #172]	@ (8010878 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80107cc:	7a1b      	ldrb	r3, [r3, #8]
 80107ce:	4283      	cmp	r3, r0
 80107d0:	d34c      	bcc.n	801086c <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80107d2:	4b29      	ldr	r3, [pc, #164]	@ (8010878 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80107d4:	68db      	ldr	r3, [r3, #12]
 80107d6:	4399      	bics	r1, r3
 80107d8:	d14b      	bne.n	8010872 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80107da:	4b27      	ldr	r3, [pc, #156]	@ (8010878 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	b123      	cbz	r3, 80107ea <UTIL_ADV_TRACE_COND_FSend+0x2e>
 80107e0:	b11a      	cbz	r2, 80107ea <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80107e2:	f10d 0102 	add.w	r1, sp, #2
 80107e6:	a801      	add	r0, sp, #4
 80107e8:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80107ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80107ec:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80107ee:	4622      	mov	r2, r4
 80107f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80107f4:	4821      	ldr	r0, [pc, #132]	@ (801087c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80107f6:	f000 fcc3 	bl	8011180 <tiny_vsnprintf_like>
 80107fa:	b285      	uxth	r5, r0
  TRACE_Lock();
 80107fc:	f7ff ff4a 	bl	8010694 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8010800:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010804:	18e8      	adds	r0, r5, r3
 8010806:	4669      	mov	r1, sp
 8010808:	b280      	uxth	r0, r0
 801080a:	f7ff feff 	bl	801060c <TRACE_AllocateBufer>
 801080e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010812:	d026      	beq.n	8010862 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8010814:	2300      	movs	r3, #0
 8010816:	e00d      	b.n	8010834 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8010818:	f8bd 2000 	ldrh.w	r2, [sp]
 801081c:	f103 0118 	add.w	r1, r3, #24
 8010820:	4469      	add	r1, sp
 8010822:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8010826:	4916      	ldr	r1, [pc, #88]	@ (8010880 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8010828:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 801082a:	3201      	adds	r2, #1
 801082c:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8010830:	3301      	adds	r3, #1
 8010832:	b29b      	uxth	r3, r3
 8010834:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010838:	429a      	cmp	r2, r3
 801083a:	d8ed      	bhi.n	8010818 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801083c:	f8bd 0000 	ldrh.w	r0, [sp]
 8010840:	9b05      	ldr	r3, [sp, #20]
 8010842:	4622      	mov	r2, r4
 8010844:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010848:	4c0d      	ldr	r4, [pc, #52]	@ (8010880 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 801084a:	4420      	add	r0, r4
 801084c:	f000 fc98 	bl	8011180 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8010850:	f7ff ff2c 	bl	80106ac <TRACE_UnLock>
    return TRACE_Send();
 8010854:	f7ff ff64 	bl	8010720 <TRACE_Send>
}
 8010858:	b006      	add	sp, #24
 801085a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801085e:	b001      	add	sp, #4
 8010860:	4770      	bx	lr
  TRACE_UnLock();
 8010862:	f7ff ff23 	bl	80106ac <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8010866:	f06f 0002 	mvn.w	r0, #2
 801086a:	e7f5      	b.n	8010858 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 801086c:	f06f 0004 	mvn.w	r0, #4
 8010870:	e7f2      	b.n	8010858 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8010872:	f06f 0005 	mvn.w	r0, #5
 8010876:	e7ef      	b.n	8010858 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8010878:	20001b6c 	.word	0x20001b6c
 801087c:	2000156c 	.word	0x2000156c
 8010880:	2000176c 	.word	0x2000176c

08010884 <TRACE_TxCpltCallback>:
{
 8010884:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010886:	f3ef 8310 	mrs	r3, PRIMASK
 801088a:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801088c:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801088e:	4b26      	ldr	r3, [pc, #152]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 8010890:	789b      	ldrb	r3, [r3, #2]
 8010892:	2b02      	cmp	r3, #2
 8010894:	d016      	beq.n	80108c4 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010896:	4a24      	ldr	r2, [pc, #144]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 8010898:	8a13      	ldrh	r3, [r2, #16]
 801089a:	8a90      	ldrh	r0, [r2, #20]
 801089c:	4403      	add	r3, r0
 801089e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80108a2:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80108a4:	4b20      	ldr	r3, [pc, #128]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 80108a6:	8a1a      	ldrh	r2, [r3, #16]
 80108a8:	8a5b      	ldrh	r3, [r3, #18]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d003      	beq.n	80108b6 <TRACE_TxCpltCallback+0x32>
 80108ae:	481e      	ldr	r0, [pc, #120]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 80108b0:	8ac0      	ldrh	r0, [r0, #22]
 80108b2:	2801      	cmp	r0, #1
 80108b4:	d00b      	beq.n	80108ce <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108b6:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80108ba:	f7f0 ff53 	bl	8001764 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80108be:	f7ff fef5 	bl	80106ac <TRACE_UnLock>
}
 80108c2:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80108c4:	4b18      	ldr	r3, [pc, #96]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 80108c6:	2200      	movs	r2, #0
 80108c8:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80108ca:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80108cc:	e7ea      	b.n	80108a4 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80108ce:	4816      	ldr	r0, [pc, #88]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 80108d0:	7880      	ldrb	r0, [r0, #2]
 80108d2:	2801      	cmp	r0, #1
 80108d4:	d014      	beq.n	8010900 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80108d6:	4a14      	ldr	r2, [pc, #80]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 80108d8:	7892      	ldrb	r2, [r2, #2]
 80108da:	b932      	cbnz	r2, 80108ea <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80108dc:	4a12      	ldr	r2, [pc, #72]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 80108de:	8a12      	ldrh	r2, [r2, #16]
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d91b      	bls.n	801091c <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80108e4:	1a9b      	subs	r3, r3, r2
 80108e6:	4a10      	ldr	r2, [pc, #64]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 80108e8:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80108ea:	4b0f      	ldr	r3, [pc, #60]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 80108ec:	8a18      	ldrh	r0, [r3, #16]
 80108ee:	4a0f      	ldr	r2, [pc, #60]	@ (801092c <TRACE_TxCpltCallback+0xa8>)
 80108f0:	4410      	add	r0, r2
 80108f2:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80108f6:	4a0e      	ldr	r2, [pc, #56]	@ (8010930 <TRACE_TxCpltCallback+0xac>)
 80108f8:	68d2      	ldr	r2, [r2, #12]
 80108fa:	8a99      	ldrh	r1, [r3, #20]
 80108fc:	4790      	blx	r2
 80108fe:	e7e0      	b.n	80108c2 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8010900:	4c09      	ldr	r4, [pc, #36]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 8010902:	8820      	ldrh	r0, [r4, #0]
 8010904:	1a82      	subs	r2, r0, r2
 8010906:	b292      	uxth	r2, r2
 8010908:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801090a:	2002      	movs	r0, #2
 801090c:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801090e:	2000      	movs	r0, #0
 8010910:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010912:	2a00      	cmp	r2, #0
 8010914:	d1df      	bne.n	80108d6 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010916:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010918:	8220      	strh	r0, [r4, #16]
 801091a:	e7dc      	b.n	80108d6 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801091c:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 8010920:	4b01      	ldr	r3, [pc, #4]	@ (8010928 <TRACE_TxCpltCallback+0xa4>)
 8010922:	829a      	strh	r2, [r3, #20]
 8010924:	e7e1      	b.n	80108ea <TRACE_TxCpltCallback+0x66>
 8010926:	bf00      	nop
 8010928:	20001b6c 	.word	0x20001b6c
 801092c:	2000176c 	.word	0x2000176c
 8010930:	08013e28 	.word	0x08013e28

08010934 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8010934:	2300      	movs	r3, #0
 8010936:	4a02      	ldr	r2, [pc, #8]	@ (8010940 <UTIL_LPM_Init+0xc>)
 8010938:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801093a:	4a02      	ldr	r2, [pc, #8]	@ (8010944 <UTIL_LPM_Init+0x10>)
 801093c:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801093e:	4770      	bx	lr
 8010940:	20001b88 	.word	0x20001b88
 8010944:	20001b84 	.word	0x20001b84

08010948 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010948:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801094c:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 801094e:	b141      	cbz	r1, 8010962 <UTIL_LPM_SetStopMode+0x1a>
 8010950:	2901      	cmp	r1, #1
 8010952:	d103      	bne.n	801095c <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8010954:	4906      	ldr	r1, [pc, #24]	@ (8010970 <UTIL_LPM_SetStopMode+0x28>)
 8010956:	680a      	ldr	r2, [r1, #0]
 8010958:	4302      	orrs	r2, r0
 801095a:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801095c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010960:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8010962:	4903      	ldr	r1, [pc, #12]	@ (8010970 <UTIL_LPM_SetStopMode+0x28>)
 8010964:	680a      	ldr	r2, [r1, #0]
 8010966:	ea22 0200 	bic.w	r2, r2, r0
 801096a:	600a      	str	r2, [r1, #0]
      break;
 801096c:	e7f6      	b.n	801095c <UTIL_LPM_SetStopMode+0x14>
 801096e:	bf00      	nop
 8010970:	20001b88 	.word	0x20001b88

08010974 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010974:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010978:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 801097a:	b141      	cbz	r1, 801098e <UTIL_LPM_SetOffMode+0x1a>
 801097c:	2901      	cmp	r1, #1
 801097e:	d103      	bne.n	8010988 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8010980:	4906      	ldr	r1, [pc, #24]	@ (801099c <UTIL_LPM_SetOffMode+0x28>)
 8010982:	680a      	ldr	r2, [r1, #0]
 8010984:	4302      	orrs	r2, r0
 8010986:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010988:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801098c:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 801098e:	4903      	ldr	r1, [pc, #12]	@ (801099c <UTIL_LPM_SetOffMode+0x28>)
 8010990:	680a      	ldr	r2, [r1, #0]
 8010992:	ea22 0200 	bic.w	r2, r2, r0
 8010996:	600a      	str	r2, [r1, #0]
      break;
 8010998:	e7f6      	b.n	8010988 <UTIL_LPM_SetOffMode+0x14>
 801099a:	bf00      	nop
 801099c:	20001b84 	.word	0x20001b84

080109a0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80109a0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109a2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80109a6:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80109a8:	4b0c      	ldr	r3, [pc, #48]	@ (80109dc <UTIL_LPM_EnterLowPower+0x3c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	b13b      	cbz	r3, 80109be <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80109ae:	4d0c      	ldr	r5, [pc, #48]	@ (80109e0 <UTIL_LPM_EnterLowPower+0x40>)
 80109b0:	682b      	ldr	r3, [r5, #0]
 80109b2:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80109b4:	686b      	ldr	r3, [r5, #4]
 80109b6:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109b8:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80109bc:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80109be:	4b09      	ldr	r3, [pc, #36]	@ (80109e4 <UTIL_LPM_EnterLowPower+0x44>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	b12b      	cbz	r3, 80109d0 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80109c4:	4d06      	ldr	r5, [pc, #24]	@ (80109e0 <UTIL_LPM_EnterLowPower+0x40>)
 80109c6:	68ab      	ldr	r3, [r5, #8]
 80109c8:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80109ca:	68eb      	ldr	r3, [r5, #12]
 80109cc:	4798      	blx	r3
 80109ce:	e7f3      	b.n	80109b8 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80109d0:	4d03      	ldr	r5, [pc, #12]	@ (80109e0 <UTIL_LPM_EnterLowPower+0x40>)
 80109d2:	692b      	ldr	r3, [r5, #16]
 80109d4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80109d6:	696b      	ldr	r3, [r5, #20]
 80109d8:	4798      	blx	r3
 80109da:	e7ed      	b.n	80109b8 <UTIL_LPM_EnterLowPower+0x18>
 80109dc:	20001b88 	.word	0x20001b88
 80109e0:	08013db8 	.word	0x08013db8
 80109e4:	20001b84 	.word	0x20001b84

080109e8 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80109e8:	e004      	b.n	80109f4 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80109ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109ee:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80109f2:	461a      	mov	r2, r3
 80109f4:	1e53      	subs	r3, r2, #1
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	2a00      	cmp	r2, #0
 80109fa:	d1f6      	bne.n	80109ea <UTIL_MEM_cpy_8+0x2>
    }
}
 80109fc:	4770      	bx	lr

080109fe <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80109fe:	e002      	b.n	8010a06 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8010a00:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8010a04:	461a      	mov	r2, r3
 8010a06:	1e53      	subs	r3, r2, #1
 8010a08:	b29b      	uxth	r3, r3
 8010a0a:	2a00      	cmp	r2, #0
 8010a0c:	d1f8      	bne.n	8010a00 <UTIL_MEM_set_8+0x2>
  }
}
 8010a0e:	4770      	bx	lr

08010a10 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a10:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010a14:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8010a16:	4a06      	ldr	r2, [pc, #24]	@ (8010a30 <UTIL_SEQ_SetTask+0x20>)
 8010a18:	6813      	ldr	r3, [r2, #0]
 8010a1a:	4303      	orrs	r3, r0
 8010a1c:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010a1e:	4a05      	ldr	r2, [pc, #20]	@ (8010a34 <UTIL_SEQ_SetTask+0x24>)
 8010a20:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8010a24:	4303      	orrs	r3, r0
 8010a26:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a2a:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8010a2e:	4770      	bx	lr
 8010a30:	20001c28 	.word	0x20001c28
 8010a34:	20001b8c 	.word	0x20001b8c

08010a38 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010a38:	4770      	bx	lr

08010a3a <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010a3a:	4770      	bx	lr

08010a3c <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8010a3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010a40:	d216      	bcs.n	8010a70 <SEQ_BitPosition+0x34>
 8010a42:	0400      	lsls	r0, r0, #16
 8010a44:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8010a46:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8010a4a:	d202      	bcs.n	8010a52 <SEQ_BitPosition+0x16>
 8010a4c:	3308      	adds	r3, #8
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8010a52:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8010a56:	d202      	bcs.n	8010a5e <SEQ_BitPosition+0x22>
 8010a58:	3304      	adds	r3, #4
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8010a5e:	0f00      	lsrs	r0, r0, #28
 8010a60:	4a04      	ldr	r2, [pc, #16]	@ (8010a74 <SEQ_BitPosition+0x38>)
 8010a62:	5c10      	ldrb	r0, [r2, r0]
 8010a64:	4418      	add	r0, r3
 8010a66:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8010a68:	f1c0 001f 	rsb	r0, r0, #31
}
 8010a6c:	b2c0      	uxtb	r0, r0
 8010a6e:	4770      	bx	lr
  uint8_t n = 0U;
 8010a70:	2300      	movs	r3, #0
 8010a72:	e7e8      	b.n	8010a46 <SEQ_BitPosition+0xa>
 8010a74:	08014a4c 	.word	0x08014a4c

08010a78 <UTIL_SEQ_Run>:
{
 8010a78:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8010a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8010b68 <UTIL_SEQ_Run+0xf0>)
 8010a7c:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8010a7e:	4020      	ands	r0, r4
 8010a80:	6018      	str	r0, [r3, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8010a82:	e03f      	b.n	8010b04 <UTIL_SEQ_Run+0x8c>
      counter++;
 8010a84:	3301      	adds	r3, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8010a86:	4839      	ldr	r0, [pc, #228]	@ (8010b6c <UTIL_SEQ_Run+0xf4>)
 8010a88:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8010a8c:	4008      	ands	r0, r1
 8010a8e:	4010      	ands	r0, r2
 8010a90:	d0f8      	beq.n	8010a84 <UTIL_SEQ_Run+0xc>
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8010a92:	4a36      	ldr	r2, [pc, #216]	@ (8010b6c <UTIL_SEQ_Run+0xf4>)
 8010a94:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010a98:	6852      	ldr	r2, [r2, #4]
 8010a9a:	4210      	tst	r0, r2
 8010a9c:	d105      	bne.n	8010aaa <UTIL_SEQ_Run+0x32>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8010a9e:	4a33      	ldr	r2, [pc, #204]	@ (8010b6c <UTIL_SEQ_Run+0xf4>)
 8010aa0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8010aa8:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010aaa:	4d30      	ldr	r5, [pc, #192]	@ (8010b6c <UTIL_SEQ_Run+0xf4>)
 8010aac:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010ab0:	686e      	ldr	r6, [r5, #4]
 8010ab2:	4030      	ands	r0, r6
 8010ab4:	f7ff ffc2 	bl	8010a3c <SEQ_BitPosition>
 8010ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8010b70 <UTIL_SEQ_Run+0xf8>)
 8010aba:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8010abc:	2301      	movs	r3, #1
 8010abe:	fa03 f000 	lsl.w	r0, r3, r0
 8010ac2:	ea26 0600 	bic.w	r6, r6, r0
 8010ac6:	606e      	str	r6, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ac8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010acc:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010ace:	6812      	ldr	r2, [r2, #0]
 8010ad0:	4093      	lsls	r3, r2
 8010ad2:	43dd      	mvns	r5, r3
 8010ad4:	4927      	ldr	r1, [pc, #156]	@ (8010b74 <UTIL_SEQ_Run+0xfc>)
 8010ad6:	680a      	ldr	r2, [r1, #0]
 8010ad8:	ea22 0203 	bic.w	r2, r2, r3
 8010adc:	600a      	str	r2, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010ade:	2302      	movs	r3, #2
 8010ae0:	e006      	b.n	8010af0 <UTIL_SEQ_Run+0x78>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8010ae2:	3b01      	subs	r3, #1
 8010ae4:	4921      	ldr	r1, [pc, #132]	@ (8010b6c <UTIL_SEQ_Run+0xf4>)
 8010ae6:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8010aea:	402a      	ands	r2, r5
 8010aec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d1f6      	bne.n	8010ae2 <UTIL_SEQ_Run+0x6a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010af4:	f380 8810 	msr	PRIMASK, r0
    TaskCb[CurrentTaskIdx]( );
 8010af8:	4b1d      	ldr	r3, [pc, #116]	@ (8010b70 <UTIL_SEQ_Run+0xf8>)
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	4b1e      	ldr	r3, [pc, #120]	@ (8010b78 <UTIL_SEQ_Run+0x100>)
 8010afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b02:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8010b04:	4b1d      	ldr	r3, [pc, #116]	@ (8010b7c <UTIL_SEQ_Run+0x104>)
 8010b06:	6819      	ldr	r1, [r3, #0]
 8010b08:	4b1a      	ldr	r3, [pc, #104]	@ (8010b74 <UTIL_SEQ_Run+0xfc>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	400b      	ands	r3, r1
 8010b0e:	4a16      	ldr	r2, [pc, #88]	@ (8010b68 <UTIL_SEQ_Run+0xf0>)
 8010b10:	6812      	ldr	r2, [r2, #0]
 8010b12:	4213      	tst	r3, r2
 8010b14:	d005      	beq.n	8010b22 <UTIL_SEQ_Run+0xaa>
 8010b16:	4b1a      	ldr	r3, [pc, #104]	@ (8010b80 <UTIL_SEQ_Run+0x108>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	481a      	ldr	r0, [pc, #104]	@ (8010b84 <UTIL_SEQ_Run+0x10c>)
 8010b1c:	6800      	ldr	r0, [r0, #0]
 8010b1e:	4003      	ands	r3, r0
 8010b20:	d0b1      	beq.n	8010a86 <UTIL_SEQ_Run+0xe>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010b22:	4b13      	ldr	r3, [pc, #76]	@ (8010b70 <UTIL_SEQ_Run+0xf8>)
 8010b24:	f04f 32ff 	mov.w	r2, #4294967295
 8010b28:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010b2a:	f7ff ff85 	bl	8010a38 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b2e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010b32:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8010b34:	4b0f      	ldr	r3, [pc, #60]	@ (8010b74 <UTIL_SEQ_Run+0xfc>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	4a10      	ldr	r2, [pc, #64]	@ (8010b7c <UTIL_SEQ_Run+0x104>)
 8010b3a:	6812      	ldr	r2, [r2, #0]
 8010b3c:	4013      	ands	r3, r2
 8010b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8010b68 <UTIL_SEQ_Run+0xf0>)
 8010b40:	6812      	ldr	r2, [r2, #0]
 8010b42:	4213      	tst	r3, r2
 8010b44:	d105      	bne.n	8010b52 <UTIL_SEQ_Run+0xda>
 8010b46:	4b0e      	ldr	r3, [pc, #56]	@ (8010b80 <UTIL_SEQ_Run+0x108>)
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8010b84 <UTIL_SEQ_Run+0x10c>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	421a      	tst	r2, r3
 8010b50:	d006      	beq.n	8010b60 <UTIL_SEQ_Run+0xe8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b52:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8010b56:	f7ff ff70 	bl	8010a3a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8010b5a:	4b03      	ldr	r3, [pc, #12]	@ (8010b68 <UTIL_SEQ_Run+0xf0>)
 8010b5c:	601c      	str	r4, [r3, #0]
}
 8010b5e:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 8010b60:	f7f0 fd74 	bl	800164c <UTIL_SEQ_Idle>
 8010b64:	e7f5      	b.n	8010b52 <UTIL_SEQ_Run+0xda>
 8010b66:	bf00      	nop
 8010b68:	200000d4 	.word	0x200000d4
 8010b6c:	20001b8c 	.word	0x20001b8c
 8010b70:	20001c1c 	.word	0x20001c1c
 8010b74:	20001c28 	.word	0x20001c28
 8010b78:	20001b9c 	.word	0x20001b9c
 8010b7c:	200000d8 	.word	0x200000d8
 8010b80:	20001c24 	.word	0x20001c24
 8010b84:	20001c20 	.word	0x20001c20

08010b88 <UTIL_SEQ_RegTask>:
{
 8010b88:	b538      	push	{r3, r4, r5, lr}
 8010b8a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b8c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010b90:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8010b92:	f7ff ff53 	bl	8010a3c <SEQ_BitPosition>
 8010b96:	4b03      	ldr	r3, [pc, #12]	@ (8010ba4 <UTIL_SEQ_RegTask+0x1c>)
 8010b98:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b9c:	f385 8810 	msr	PRIMASK, r5
}
 8010ba0:	bd38      	pop	{r3, r4, r5, pc}
 8010ba2:	bf00      	nop
 8010ba4:	20001b9c 	.word	0x20001b9c

08010ba8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8010ba8:	b082      	sub	sp, #8
 8010baa:	b082      	sub	sp, #8
 8010bac:	f10d 0c08 	add.w	ip, sp, #8
 8010bb0:	e90c 0006 	stmdb	ip, {r1, r2}
 8010bb4:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	6002      	str	r2, [r0, #0]
 8010bba:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8010bbc:	440b      	add	r3, r1
 8010bbe:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8010bc0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010bc4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8010bc8:	440a      	add	r2, r1
 8010bca:	b291      	uxth	r1, r2
 8010bcc:	b212      	sxth	r2, r2
 8010bce:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8010bd0:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8010bd4:	db04      	blt.n	8010be0 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8010bda:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 8010bde:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8010be0:	b002      	add	sp, #8
 8010be2:	b002      	add	sp, #8
 8010be4:	4770      	bx	lr

08010be6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8010be6:	b082      	sub	sp, #8
 8010be8:	b082      	sub	sp, #8
 8010bea:	f10d 0c08 	add.w	ip, sp, #8
 8010bee:	e90c 0006 	stmdb	ip, {r1, r2}
 8010bf2:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	6002      	str	r2, [r0, #0]
 8010bf8:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8010bfa:	1acb      	subs	r3, r1, r3
 8010bfc:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8010bfe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010c02:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8010c06:	1a52      	subs	r2, r2, r1
 8010c08:	b291      	uxth	r1, r2
 8010c0a:	b212      	sxth	r2, r2
 8010c0c:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8010c0e:	2a00      	cmp	r2, #0
 8010c10:	db02      	blt.n	8010c18 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8010c12:	b002      	add	sp, #8
 8010c14:	b002      	add	sp, #8
 8010c16:	4770      	bx	lr
    c.Seconds--;
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8010c1c:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8010c20:	8081      	strh	r1, [r0, #4]
  return c;
 8010c22:	e7f6      	b.n	8010c12 <SysTimeSub+0x2c>

08010c24 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8010c24:	b530      	push	{r4, r5, lr}
 8010c26:	b089      	sub	sp, #36	@ 0x24
 8010c28:	ac02      	add	r4, sp, #8
 8010c2a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010c2e:	2300      	movs	r3, #0
 8010c30:	9304      	str	r3, [sp, #16]
 8010c32:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010c36:	4d0b      	ldr	r5, [pc, #44]	@ (8010c64 <SysTimeSet+0x40>)
 8010c38:	692b      	ldr	r3, [r5, #16]
 8010c3a:	a805      	add	r0, sp, #20
 8010c3c:	4798      	blx	r3
 8010c3e:	4603      	mov	r3, r0
 8010c40:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8010c42:	9a05      	ldr	r2, [sp, #20]
 8010c44:	9200      	str	r2, [sp, #0]
 8010c46:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010c4a:	a806      	add	r0, sp, #24
 8010c4c:	f7ff ffcb 	bl	8010be6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8010c50:	682b      	ldr	r3, [r5, #0]
 8010c52:	9806      	ldr	r0, [sp, #24]
 8010c54:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8010c56:	68ab      	ldr	r3, [r5, #8]
 8010c58:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8010c5c:	4798      	blx	r3
}
 8010c5e:	b009      	add	sp, #36	@ 0x24
 8010c60:	bd30      	pop	{r4, r5, pc}
 8010c62:	bf00      	nop
 8010c64:	08013de8 	.word	0x08013de8

08010c68 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8010c68:	b530      	push	{r4, r5, lr}
 8010c6a:	b087      	sub	sp, #28
 8010c6c:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010c6e:	2300      	movs	r3, #0
 8010c70:	9304      	str	r3, [sp, #16]
 8010c72:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8010c76:	6003      	str	r3, [r0, #0]
 8010c78:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010c7a:	4d0b      	ldr	r5, [pc, #44]	@ (8010ca8 <SysTimeGet+0x40>)
 8010c7c:	692b      	ldr	r3, [r5, #16]
 8010c7e:	a805      	add	r0, sp, #20
 8010c80:	4798      	blx	r3
 8010c82:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010c84:	68eb      	ldr	r3, [r5, #12]
 8010c86:	4798      	blx	r3
 8010c88:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010c8c:	686b      	ldr	r3, [r5, #4]
 8010c8e:	4798      	blx	r3
 8010c90:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8010c92:	9b05      	ldr	r3, [sp, #20]
 8010c94:	9300      	str	r3, [sp, #0]
 8010c96:	9b04      	ldr	r3, [sp, #16]
 8010c98:	aa02      	add	r2, sp, #8
 8010c9a:	ca06      	ldmia	r2, {r1, r2}
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	f7ff ff83 	bl	8010ba8 <SysTimeAdd>

  return sysTime;
}
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	b007      	add	sp, #28
 8010ca6:	bd30      	pop	{r4, r5, pc}
 8010ca8:	08013de8 	.word	0x08013de8

08010cac <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8010cac:	b530      	push	{r4, r5, lr}
 8010cae:	b083      	sub	sp, #12
 8010cb0:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010cba:	4b06      	ldr	r3, [pc, #24]	@ (8010cd4 <SysTimeGetMcuTime+0x28>)
 8010cbc:	691b      	ldr	r3, [r3, #16]
 8010cbe:	466d      	mov	r5, sp
 8010cc0:	a801      	add	r0, sp, #4
 8010cc2:	4798      	blx	r3
 8010cc4:	9000      	str	r0, [sp, #0]
  
  return calendarTime;
 8010cc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010cca:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8010cce:	4620      	mov	r0, r4
 8010cd0:	b003      	add	sp, #12
 8010cd2:	bd30      	pop	{r4, r5, pc}
 8010cd4:	08013de8 	.word	0x08013de8

08010cd8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8010cd8:	b530      	push	{r4, r5, lr}
 8010cda:	b089      	sub	sp, #36	@ 0x24
 8010cdc:	ac02      	add	r4, sp, #8
 8010cde:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010ce2:	4d0c      	ldr	r5, [pc, #48]	@ (8010d14 <SysTimeToMs+0x3c>)
 8010ce4:	68eb      	ldr	r3, [r5, #12]
 8010ce6:	4798      	blx	r3
 8010ce8:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010cec:	686b      	ldr	r3, [r5, #4]
 8010cee:	4798      	blx	r3
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	9006      	str	r0, [sp, #24]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8010cf4:	9a07      	ldr	r2, [sp, #28]
 8010cf6:	9200      	str	r2, [sp, #0]
 8010cf8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010cfc:	a804      	add	r0, sp, #16
 8010cfe:	f7ff ff72 	bl	8010be6 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8010d02:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8010d06:	9a04      	ldr	r2, [sp, #16]
 8010d08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010d0c:	fb00 3002 	mla	r0, r0, r2, r3
 8010d10:	b009      	add	sp, #36	@ 0x24
 8010d12:	bd30      	pop	{r4, r5, pc}
 8010d14:	08013de8 	.word	0x08013de8

08010d18 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8010d18:	b530      	push	{r4, r5, lr}
 8010d1a:	b087      	sub	sp, #28
 8010d1c:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8010d1e:	4b12      	ldr	r3, [pc, #72]	@ (8010d68 <SysTimeFromMs+0x50>)
 8010d20:	fba3 2301 	umull	r2, r3, r3, r1
 8010d24:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8010d26:	9304      	str	r3, [sp, #16]
 8010d28:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8010d2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010d30:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8010d34:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8010d38:	2300      	movs	r3, #0
 8010d3a:	9302      	str	r3, [sp, #8]
 8010d3c:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010d3e:	4d0b      	ldr	r5, [pc, #44]	@ (8010d6c <SysTimeFromMs+0x54>)
 8010d40:	68eb      	ldr	r3, [r5, #12]
 8010d42:	4798      	blx	r3
 8010d44:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010d48:	686b      	ldr	r3, [r5, #4]
 8010d4a:	4798      	blx	r3
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8010d50:	9a03      	ldr	r2, [sp, #12]
 8010d52:	9200      	str	r2, [sp, #0]
 8010d54:	aa06      	add	r2, sp, #24
 8010d56:	e912 0006 	ldmdb	r2, {r1, r2}
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	f7ff ff24 	bl	8010ba8 <SysTimeAdd>
}
 8010d60:	4620      	mov	r0, r4
 8010d62:	b007      	add	sp, #28
 8010d64:	bd30      	pop	{r4, r5, pc}
 8010d66:	bf00      	nop
 8010d68:	10624dd3 	.word	0x10624dd3
 8010d6c:	08013de8 	.word	0x08013de8

08010d70 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8010d70:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8010d72:	4b03      	ldr	r3, [pc, #12]	@ (8010d80 <UTIL_TIMER_Init+0x10>)
 8010d74:	2200      	movs	r2, #0
 8010d76:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8010d78:	4b02      	ldr	r3, [pc, #8]	@ (8010d84 <UTIL_TIMER_Init+0x14>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4798      	blx	r3
}
 8010d7e:	bd08      	pop	{r3, pc}
 8010d80:	20001c2c 	.word	0x20001c2c
 8010d84:	08013dfc 	.word	0x08013dfc

08010d88 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8010d88:	b1a8      	cbz	r0, 8010db6 <UTIL_TIMER_Create+0x2e>
{
 8010d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d8c:	4617      	mov	r7, r2
 8010d8e:	461e      	mov	r6, r3
 8010d90:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8010d92:	b193      	cbz	r3, 8010dba <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8010d94:	2500      	movs	r5, #0
 8010d96:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8010d98:	4b09      	ldr	r3, [pc, #36]	@ (8010dc0 <UTIL_TIMER_Create+0x38>)
 8010d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d9c:	4608      	mov	r0, r1
 8010d9e:	4798      	blx	r3
 8010da0:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8010da2:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8010da4:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8010da6:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8010da8:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8010daa:	9b06      	ldr	r3, [sp, #24]
 8010dac:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8010dae:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8010db0:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8010db2:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8010db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8010db6:	2001      	movs	r0, #1
}
 8010db8:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8010dba:	2001      	movs	r0, #1
 8010dbc:	e7fa      	b.n	8010db4 <UTIL_TIMER_Create+0x2c>
 8010dbe:	bf00      	nop
 8010dc0:	08013dfc 	.word	0x08013dfc

08010dc4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8010dc4:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8010dc6:	4c03      	ldr	r4, [pc, #12]	@ (8010dd4 <UTIL_TIMER_GetCurrentTime+0x10>)
 8010dc8:	69e3      	ldr	r3, [r4, #28]
 8010dca:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8010dcc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010dce:	4798      	blx	r3
}
 8010dd0:	bd10      	pop	{r4, pc}
 8010dd2:	bf00      	nop
 8010dd4:	08013dfc 	.word	0x08013dfc

08010dd8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8010dd8:	b570      	push	{r4, r5, r6, lr}
 8010dda:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8010ddc:	4d05      	ldr	r5, [pc, #20]	@ (8010df4 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8010dde:	69eb      	ldr	r3, [r5, #28]
 8010de0:	4798      	blx	r3
 8010de2:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8010de4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010de6:	4630      	mov	r0, r6
 8010de8:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8010dea:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8010dec:	1a20      	subs	r0, r4, r0
 8010dee:	4798      	blx	r3
}
 8010df0:	bd70      	pop	{r4, r5, r6, pc}
 8010df2:	bf00      	nop
 8010df4:	08013dfc 	.word	0x08013dfc

08010df8 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010df8:	4b05      	ldr	r3, [pc, #20]	@ (8010e10 <TimerExists+0x18>)
 8010dfa:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8010dfc:	e000      	b.n	8010e00 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8010dfe:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8010e00:	b11b      	cbz	r3, 8010e0a <TimerExists+0x12>
    if( cur == TimerObject )
 8010e02:	4283      	cmp	r3, r0
 8010e04:	d1fb      	bne.n	8010dfe <TimerExists+0x6>
      return true;
 8010e06:	2001      	movs	r0, #1
  }
  return false;
}
 8010e08:	4770      	bx	lr
  return false;
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	4770      	bx	lr
 8010e0e:	bf00      	nop
 8010e10:	20001c2c 	.word	0x20001c2c

08010e14 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8010e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e16:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010e18:	4e09      	ldr	r6, [pc, #36]	@ (8010e40 <TimerSetTimeout+0x2c>)
 8010e1a:	6a33      	ldr	r3, [r6, #32]
 8010e1c:	4798      	blx	r3
 8010e1e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8010e20:	2301      	movs	r3, #1
 8010e22:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010e24:	6827      	ldr	r7, [r4, #0]
 8010e26:	69b6      	ldr	r6, [r6, #24]
 8010e28:	47b0      	blx	r6
 8010e2a:	4428      	add	r0, r5
 8010e2c:	4287      	cmp	r7, r0
 8010e2e:	d202      	bcs.n	8010e36 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8010e30:	47b0      	blx	r6
 8010e32:	4428      	add	r0, r5
 8010e34:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8010e36:	4b02      	ldr	r3, [pc, #8]	@ (8010e40 <TimerSetTimeout+0x2c>)
 8010e38:	689b      	ldr	r3, [r3, #8]
 8010e3a:	6820      	ldr	r0, [r4, #0]
 8010e3c:	4798      	blx	r3
}
 8010e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e40:	08013dfc 	.word	0x08013dfc

08010e44 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8010e44:	b368      	cbz	r0, 8010ea2 <UTIL_TIMER_Stop+0x5e>
{
 8010e46:	b510      	push	{r4, lr}
 8010e48:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e4a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010e4e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010e50:	4b15      	ldr	r3, [pc, #84]	@ (8010ea8 <UTIL_TIMER_Stop+0x64>)
 8010e52:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8010e54:	2301      	movs	r3, #1
 8010e56:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8010e58:	b1e1      	cbz	r1, 8010e94 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8010e5e:	4288      	cmp	r0, r1
 8010e60:	d006      	beq.n	8010e70 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8010e62:	460b      	mov	r3, r1
        while( cur != NULL )
 8010e64:	b1b3      	cbz	r3, 8010e94 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d011      	beq.n	8010e8e <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8010e6a:	4619      	mov	r1, r3
            cur = cur->Next;
 8010e6c:	695b      	ldr	r3, [r3, #20]
 8010e6e:	e7f9      	b.n	8010e64 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8010e70:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8010e72:	6948      	ldr	r0, [r1, #20]
 8010e74:	b120      	cbz	r0, 8010e80 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8010e76:	4b0c      	ldr	r3, [pc, #48]	@ (8010ea8 <UTIL_TIMER_Stop+0x64>)
 8010e78:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8010e7a:	f7ff ffcb 	bl	8010e14 <TimerSetTimeout>
 8010e7e:	e009      	b.n	8010e94 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8010e80:	4b0a      	ldr	r3, [pc, #40]	@ (8010eac <UTIL_TIMER_Stop+0x68>)
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	4798      	blx	r3
            TimerListHead = NULL;
 8010e86:	4b08      	ldr	r3, [pc, #32]	@ (8010ea8 <UTIL_TIMER_Stop+0x64>)
 8010e88:	2200      	movs	r2, #0
 8010e8a:	601a      	str	r2, [r3, #0]
 8010e8c:	e002      	b.n	8010e94 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8010e8e:	695b      	ldr	r3, [r3, #20]
 8010e90:	b123      	cbz	r3, 8010e9c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8010e92:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e94:	f384 8810 	msr	PRIMASK, r4
}
 8010e98:	2000      	movs	r0, #0
}
 8010e9a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	614b      	str	r3, [r1, #20]
 8010ea0:	e7f8      	b.n	8010e94 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8010ea2:	2001      	movs	r0, #1
}
 8010ea4:	4770      	bx	lr
 8010ea6:	bf00      	nop
 8010ea8:	20001c2c 	.word	0x20001c2c
 8010eac:	08013dfc 	.word	0x08013dfc

08010eb0 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010eb0:	4b09      	ldr	r3, [pc, #36]	@ (8010ed8 <TimerInsertTimer+0x28>)
 8010eb2:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8010eb4:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8010eb6:	e001      	b.n	8010ebc <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8010eb8:	461a      	mov	r2, r3
        next = next->Next;
 8010eba:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8010ebc:	6951      	ldr	r1, [r2, #20]
 8010ebe:	b139      	cbz	r1, 8010ed0 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8010ec0:	6819      	ldr	r1, [r3, #0]
 8010ec2:	f8d0 c000 	ldr.w	ip, [r0]
 8010ec6:	458c      	cmp	ip, r1
 8010ec8:	d8f6      	bhi.n	8010eb8 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8010eca:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8010ecc:	6143      	str	r3, [r0, #20]
        return;
 8010ece:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8010ed0:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	6143      	str	r3, [r0, #20]
}
 8010ed6:	4770      	bx	lr
 8010ed8:	20001c2c 	.word	0x20001c2c

08010edc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8010edc:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010ede:	4b05      	ldr	r3, [pc, #20]	@ (8010ef4 <TimerInsertNewHeadTimer+0x18>)
 8010ee0:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8010ee2:	b10b      	cbz	r3, 8010ee8 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8010ee8:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8010eea:	4b02      	ldr	r3, [pc, #8]	@ (8010ef4 <TimerInsertNewHeadTimer+0x18>)
 8010eec:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8010eee:	f7ff ff91 	bl	8010e14 <TimerSetTimeout>
}
 8010ef2:	bd08      	pop	{r3, pc}
 8010ef4:	20001c2c 	.word	0x20001c2c

08010ef8 <UTIL_TIMER_Start>:
{
 8010ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8010efa:	2800      	cmp	r0, #0
 8010efc:	d036      	beq.n	8010f6c <UTIL_TIMER_Start+0x74>
 8010efe:	4604      	mov	r4, r0
 8010f00:	f7ff ff7a 	bl	8010df8 <TimerExists>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	d134      	bne.n	8010f72 <UTIL_TIMER_Start+0x7a>
 8010f08:	7a65      	ldrb	r5, [r4, #9]
 8010f0a:	2d00      	cmp	r5, #0
 8010f0c:	d133      	bne.n	8010f76 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f0e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010f12:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8010f14:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8010f16:	4b19      	ldr	r3, [pc, #100]	@ (8010f7c <UTIL_TIMER_Start+0x84>)
 8010f18:	6a1b      	ldr	r3, [r3, #32]
 8010f1a:	4798      	blx	r3
    if( ticks < minValue )
 8010f1c:	4287      	cmp	r7, r0
 8010f1e:	d300      	bcc.n	8010f22 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8010f20:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8010f22:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8010f24:	2300      	movs	r3, #0
 8010f26:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8010f28:	2201      	movs	r2, #1
 8010f2a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8010f2c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8010f2e:	4b14      	ldr	r3, [pc, #80]	@ (8010f80 <UTIL_TIMER_Start+0x88>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	b183      	cbz	r3, 8010f56 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8010f34:	4b11      	ldr	r3, [pc, #68]	@ (8010f7c <UTIL_TIMER_Start+0x84>)
 8010f36:	699b      	ldr	r3, [r3, #24]
 8010f38:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8010f3a:	6823      	ldr	r3, [r4, #0]
 8010f3c:	4418      	add	r0, r3
 8010f3e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8010f40:	4b0f      	ldr	r3, [pc, #60]	@ (8010f80 <UTIL_TIMER_Start+0x88>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	4298      	cmp	r0, r3
 8010f48:	d20c      	bcs.n	8010f64 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f7ff ffc6 	bl	8010edc <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f50:	f386 8810 	msr	PRIMASK, r6
}
 8010f54:	e00b      	b.n	8010f6e <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8010f56:	4b09      	ldr	r3, [pc, #36]	@ (8010f7c <UTIL_TIMER_Start+0x84>)
 8010f58:	691b      	ldr	r3, [r3, #16]
 8010f5a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	f7ff ffbd 	bl	8010edc <TimerInsertNewHeadTimer>
 8010f62:	e7f5      	b.n	8010f50 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8010f64:	4620      	mov	r0, r4
 8010f66:	f7ff ffa3 	bl	8010eb0 <TimerInsertTimer>
 8010f6a:	e7f1      	b.n	8010f50 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010f6c:	2501      	movs	r5, #1
}
 8010f6e:	4628      	mov	r0, r5
 8010f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010f72:	2501      	movs	r5, #1
 8010f74:	e7fb      	b.n	8010f6e <UTIL_TIMER_Start+0x76>
 8010f76:	2501      	movs	r5, #1
 8010f78:	e7f9      	b.n	8010f6e <UTIL_TIMER_Start+0x76>
 8010f7a:	bf00      	nop
 8010f7c:	08013dfc 	.word	0x08013dfc
 8010f80:	20001c2c 	.word	0x20001c2c

08010f84 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8010f84:	b198      	cbz	r0, 8010fae <UTIL_TIMER_SetPeriod+0x2a>
{
 8010f86:	b510      	push	{r4, lr}
 8010f88:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8010f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8010fb4 <UTIL_TIMER_SetPeriod+0x30>)
 8010f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f8e:	4608      	mov	r0, r1
 8010f90:	4798      	blx	r3
 8010f92:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8010f94:	4620      	mov	r0, r4
 8010f96:	f7ff ff2f 	bl	8010df8 <TimerExists>
 8010f9a:	b908      	cbnz	r0, 8010fa0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010f9c:	2000      	movs	r0, #0
}
 8010f9e:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f7ff ff4f 	bl	8010e44 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	f7ff ffa6 	bl	8010ef8 <UTIL_TIMER_Start>
 8010fac:	e7f7      	b.n	8010f9e <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8010fae:	2001      	movs	r0, #1
}
 8010fb0:	4770      	bx	lr
 8010fb2:	bf00      	nop
 8010fb4:	08013dfc 	.word	0x08013dfc

08010fb8 <UTIL_TIMER_IRQ_Handler>:
{
 8010fb8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fba:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010fbe:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8010fc0:	4c1e      	ldr	r4, [pc, #120]	@ (801103c <UTIL_TIMER_IRQ_Handler+0x84>)
 8010fc2:	6963      	ldr	r3, [r4, #20]
 8010fc4:	4798      	blx	r3
 8010fc6:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8010fc8:	6923      	ldr	r3, [r4, #16]
 8010fca:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8010fcc:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8010fce:	4b1c      	ldr	r3, [pc, #112]	@ (8011040 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	b923      	cbnz	r3, 8010fde <UTIL_TIMER_IRQ_Handler+0x26>
 8010fd4:	e018      	b.n	8011008 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8010fda:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8010fdc:	b1a3      	cbz	r3, 8011008 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	42a2      	cmp	r2, r4
 8010fe2:	d9f8      	bls.n	8010fd6 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8010fe4:	1a31      	subs	r1, r6, r0
 8010fe6:	440a      	add	r2, r1
 8010fe8:	601a      	str	r2, [r3, #0]
 8010fea:	e7f6      	b.n	8010fda <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8010fec:	4b14      	ldr	r3, [pc, #80]	@ (8011040 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010fee:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8010ff0:	6962      	ldr	r2, [r4, #20]
 8010ff2:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8010ff8:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8010ffa:	68e3      	ldr	r3, [r4, #12]
 8010ffc:	6920      	ldr	r0, [r4, #16]
 8010ffe:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8011000:	8963      	ldrh	r3, [r4, #10]
 8011002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011006:	d012      	beq.n	801102e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8011008:	4b0d      	ldr	r3, [pc, #52]	@ (8011040 <UTIL_TIMER_IRQ_Handler+0x88>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	b13b      	cbz	r3, 801101e <UTIL_TIMER_IRQ_Handler+0x66>
 801100e:	681c      	ldr	r4, [r3, #0]
 8011010:	2c00      	cmp	r4, #0
 8011012:	d0eb      	beq.n	8010fec <UTIL_TIMER_IRQ_Handler+0x34>
 8011014:	4b09      	ldr	r3, [pc, #36]	@ (801103c <UTIL_TIMER_IRQ_Handler+0x84>)
 8011016:	699b      	ldr	r3, [r3, #24]
 8011018:	4798      	blx	r3
 801101a:	4284      	cmp	r4, r0
 801101c:	d3e6      	bcc.n	8010fec <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801101e:	4b08      	ldr	r3, [pc, #32]	@ (8011040 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011020:	6818      	ldr	r0, [r3, #0]
 8011022:	b108      	cbz	r0, 8011028 <UTIL_TIMER_IRQ_Handler+0x70>
 8011024:	7a03      	ldrb	r3, [r0, #8]
 8011026:	b133      	cbz	r3, 8011036 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011028:	f385 8810 	msr	PRIMASK, r5
}
 801102c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801102e:	4620      	mov	r0, r4
 8011030:	f7ff ff62 	bl	8010ef8 <UTIL_TIMER_Start>
 8011034:	e7e8      	b.n	8011008 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8011036:	f7ff feed 	bl	8010e14 <TimerSetTimeout>
 801103a:	e7f5      	b.n	8011028 <UTIL_TIMER_IRQ_Handler+0x70>
 801103c:	08013dfc 	.word	0x08013dfc
 8011040:	20001c2c 	.word	0x20001c2c

08011044 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8011044:	4601      	mov	r1, r0
  int i = 0;
 8011046:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8011048:	e008      	b.n	801105c <ee_skip_atoi+0x18>
 801104a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801104e:	1c53      	adds	r3, r2, #1
 8011050:	600b      	str	r3, [r1, #0]
 8011052:	7813      	ldrb	r3, [r2, #0]
 8011054:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8011058:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 801105c:	680a      	ldr	r2, [r1, #0]
 801105e:	7813      	ldrb	r3, [r2, #0]
 8011060:	3b30      	subs	r3, #48	@ 0x30
 8011062:	b2db      	uxtb	r3, r3
 8011064:	2b09      	cmp	r3, #9
 8011066:	d9f0      	bls.n	801104a <ee_skip_atoi+0x6>
  return i;
}
 8011068:	4770      	bx	lr
	...

0801106c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801106c:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8011070:	b093      	sub	sp, #76	@ 0x4c
 8011072:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011074:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8011076:	f016 0f40 	tst.w	r6, #64	@ 0x40
 801107a:	d110      	bne.n	801109e <ee_number+0x32>
  char *dig = lower_digits;
 801107c:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 8011178 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8011080:	1e9f      	subs	r7, r3, #2
 8011082:	2f22      	cmp	r7, #34	@ 0x22
 8011084:	d875      	bhi.n	8011172 <ee_number+0x106>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8011086:	f016 0401 	ands.w	r4, r6, #1
 801108a:	d00b      	beq.n	80110a4 <ee_number+0x38>
 801108c:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 8011090:	f016 0f02 	tst.w	r6, #2
 8011094:	d00f      	beq.n	80110b6 <ee_number+0x4a>
  {
    if (num < 0)
 8011096:	2a00      	cmp	r2, #0
 8011098:	db07      	blt.n	80110aa <ee_number+0x3e>
  sign = 0;
 801109a:	2700      	movs	r7, #0
 801109c:	e00c      	b.n	80110b8 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 801109e:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 801117c <ee_number+0x110>
 80110a2:	e7ed      	b.n	8011080 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80110a4:	f04f 0e20 	mov.w	lr, #32
 80110a8:	e7f2      	b.n	8011090 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80110aa:	4252      	negs	r2, r2
      size--;
 80110ac:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80110ae:	3e01      	subs	r6, #1
 80110b0:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 80110b2:	272d      	movs	r7, #45	@ 0x2d
 80110b4:	e000      	b.n	80110b8 <ee_number+0x4c>
  sign = 0;
 80110b6:	2700      	movs	r7, #0
  }
#endif
  
  i = 0;

  if (num == 0)
 80110b8:	bb5a      	cbnz	r2, 8011112 <ee_number+0xa6>
    tmp[i++] = '0';
 80110ba:	2330      	movs	r3, #48	@ 0x30
 80110bc:	f88d 3004 	strb.w	r3, [sp, #4]
 80110c0:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 80110c4:	45ac      	cmp	ip, r5
 80110c6:	dd00      	ble.n	80110ca <ee_number+0x5e>
 80110c8:	4665      	mov	r5, ip
  size -= precision;
 80110ca:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80110cc:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80110ce:	b31c      	cbz	r4, 8011118 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 80110d0:	b11f      	cbz	r7, 80110da <ee_number+0x6e>
 80110d2:	f800 7b01 	strb.w	r7, [r0], #1
 80110d6:	3901      	subs	r1, #1
 80110d8:	d007      	beq.n	80110ea <ee_number+0x7e>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80110da:	2b00      	cmp	r3, #0
 80110dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80110e0:	dd24      	ble.n	801112c <ee_number+0xc0>
 80110e2:	f800 eb01 	strb.w	lr, [r0], #1
 80110e6:	3901      	subs	r1, #1
 80110e8:	d1f7      	bne.n	80110da <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 80110ea:	b013      	add	sp, #76	@ 0x4c
 80110ec:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80110f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80110f4:	fb03 2216 	mls	r2, r3, r6, r2
 80110f8:	f81a 8002 	ldrb.w	r8, [sl, r2]
 80110fc:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 8011100:	446a      	add	r2, sp
 8011102:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8011106:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8011108:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 801110c:	2a00      	cmp	r2, #0
 801110e:	d1ef      	bne.n	80110f0 <ee_number+0x84>
 8011110:	e7d8      	b.n	80110c4 <ee_number+0x58>
  i = 0;
 8011112:	f04f 0c00 	mov.w	ip, #0
 8011116:	e7f9      	b.n	801110c <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8011118:	2b00      	cmp	r3, #0
 801111a:	f103 33ff 	add.w	r3, r3, #4294967295
 801111e:	ddd7      	ble.n	80110d0 <ee_number+0x64>
 8011120:	2220      	movs	r2, #32
 8011122:	f800 2b01 	strb.w	r2, [r0], #1
 8011126:	3901      	subs	r1, #1
 8011128:	d1f6      	bne.n	8011118 <ee_number+0xac>
 801112a:	e7de      	b.n	80110ea <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 801112c:	4565      	cmp	r5, ip
 801112e:	f105 35ff 	add.w	r5, r5, #4294967295
 8011132:	dd05      	ble.n	8011140 <ee_number+0xd4>
 8011134:	2230      	movs	r2, #48	@ 0x30
 8011136:	f800 2b01 	strb.w	r2, [r0], #1
 801113a:	3901      	subs	r1, #1
 801113c:	d1f6      	bne.n	801112c <ee_number+0xc0>
 801113e:	e7d4      	b.n	80110ea <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8011140:	4662      	mov	r2, ip
 8011142:	2a00      	cmp	r2, #0
 8011144:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011148:	dd09      	ble.n	801115e <ee_number+0xf2>
 801114a:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 801114e:	446a      	add	r2, sp
 8011150:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8011154:	f800 2b01 	strb.w	r2, [r0], #1
 8011158:	3901      	subs	r1, #1
 801115a:	d1f1      	bne.n	8011140 <ee_number+0xd4>
 801115c:	e7c5      	b.n	80110ea <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 801115e:	2b00      	cmp	r3, #0
 8011160:	f103 33ff 	add.w	r3, r3, #4294967295
 8011164:	ddc1      	ble.n	80110ea <ee_number+0x7e>
 8011166:	2220      	movs	r2, #32
 8011168:	f800 2b01 	strb.w	r2, [r0], #1
 801116c:	3901      	subs	r1, #1
 801116e:	d1f6      	bne.n	801115e <ee_number+0xf2>
 8011170:	e7bb      	b.n	80110ea <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8011172:	2000      	movs	r0, #0
 8011174:	e7b9      	b.n	80110ea <ee_number+0x7e>
 8011176:	bf00      	nop
 8011178:	08014a5c 	.word	0x08014a5c
 801117c:	08014a84 	.word	0x08014a84

08011180 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8011180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011184:	b087      	sub	sp, #28
 8011186:	9205      	str	r2, [sp, #20]
 8011188:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801118a:	1e0f      	subs	r7, r1, #0
 801118c:	f340 80b8 	ble.w	8011300 <tiny_vsnprintf_like+0x180>
 8011190:	4606      	mov	r6, r0
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8011192:	4604      	mov	r4, r0
 8011194:	e004      	b.n	80111a0 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);
    
    if (*fmt != '%')
    {
      *str++ = *fmt;
 8011196:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801119a:	9b05      	ldr	r3, [sp, #20]
 801119c:	3301      	adds	r3, #1
 801119e:	9305      	str	r3, [sp, #20]
 80111a0:	9905      	ldr	r1, [sp, #20]
 80111a2:	780a      	ldrb	r2, [r1, #0]
 80111a4:	b922      	cbnz	r2, 80111b0 <tiny_vsnprintf_like+0x30>
 80111a6:	1ba3      	subs	r3, r4, r6
 80111a8:	1e78      	subs	r0, r7, #1
 80111aa:	4283      	cmp	r3, r0
 80111ac:	f2c0 80a2 	blt.w	80112f4 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 80111b0:	1ba3      	subs	r3, r4, r6
 80111b2:	f107 38ff 	add.w	r8, r7, #4294967295
 80111b6:	4543      	cmp	r3, r8
 80111b8:	f280 809c 	bge.w	80112f4 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 80111bc:	2a25      	cmp	r2, #37	@ 0x25
 80111be:	d1ea      	bne.n	8011196 <tiny_vsnprintf_like+0x16>
                  
    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80111c0:	1c4b      	adds	r3, r1, #1
 80111c2:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 80111c4:	784b      	ldrb	r3, [r1, #1]
 80111c6:	2b30      	cmp	r3, #48	@ 0x30
 80111c8:	d020      	beq.n	801120c <tiny_vsnprintf_like+0x8c>
    flags = 0;
 80111ca:	f04f 0900 	mov.w	r9, #0
    }
#endif
    
    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 80111ce:	3b30      	subs	r3, #48	@ 0x30
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	2b09      	cmp	r3, #9
 80111d4:	d91d      	bls.n	8011212 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 80111d6:	f04f 35ff 	mov.w	r5, #4294967295
#endif
    
    // Default base
    base = 10;

    switch (*fmt)
 80111da:	9b05      	ldr	r3, [sp, #20]
 80111dc:	781a      	ldrb	r2, [r3, #0]
 80111de:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 80111e2:	2b20      	cmp	r3, #32
 80111e4:	d867      	bhi.n	80112b6 <tiny_vsnprintf_like+0x136>
 80111e6:	e8df f003 	tbb	[pc, r3]
 80111ea:	664a      	.short	0x664a
 80111ec:	66666666 	.word	0x66666666
 80111f0:	66666666 	.word	0x66666666
 80111f4:	66621e66 	.word	0x66621e66
 80111f8:	62666666 	.word	0x62666666
 80111fc:	66666666 	.word	0x66666666
 8011200:	66666666 	.word	0x66666666
 8011204:	19662866 	.word	0x19662866
 8011208:	6666      	.short	0x6666
 801120a:	7c          	.byte	0x7c
 801120b:	00          	.byte	0x00
      flags |= ZEROPAD;
 801120c:	f04f 0901 	mov.w	r9, #1
 8011210:	e7dd      	b.n	80111ce <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8011212:	a805      	add	r0, sp, #20
 8011214:	f7ff ff16 	bl	8011044 <ee_skip_atoi>
 8011218:	4605      	mov	r5, r0
 801121a:	e7de      	b.n	80111da <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 801121c:	230a      	movs	r3, #10
 801121e:	e031      	b.n	8011284 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8011220:	2320      	movs	r3, #32
 8011222:	f804 3b01 	strb.w	r3, [r4], #1
 8011226:	3d01      	subs	r5, #1
 8011228:	2d00      	cmp	r5, #0
 801122a:	dcf9      	bgt.n	8011220 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 801122c:	9b04      	ldr	r3, [sp, #16]
 801122e:	1d1a      	adds	r2, r3, #4
 8011230:	9204      	str	r2, [sp, #16]
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8011238:	e7af      	b.n	801119a <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 801123a:	9b04      	ldr	r3, [sp, #16]
 801123c:	1d1a      	adds	r2, r3, #4
 801123e:	9204      	str	r2, [sp, #16]
 8011240:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8011244:	f1b8 0f00 	cmp.w	r8, #0
 8011248:	d003      	beq.n	8011252 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 801124a:	4640      	mov	r0, r8
 801124c:	f7ee ffe8 	bl	8000220 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8011250:	e006      	b.n	8011260 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8011252:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8011304 <tiny_vsnprintf_like+0x184>
 8011256:	e7f8      	b.n	801124a <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8011258:	2220      	movs	r2, #32
 801125a:	f804 2b01 	strb.w	r2, [r4], #1
 801125e:	461d      	mov	r5, r3
 8011260:	1e6b      	subs	r3, r5, #1
 8011262:	4285      	cmp	r5, r0
 8011264:	dcf8      	bgt.n	8011258 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8011266:	2200      	movs	r2, #0
 8011268:	e006      	b.n	8011278 <tiny_vsnprintf_like+0xf8>
 801126a:	4643      	mov	r3, r8
 801126c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011270:	f804 1b01 	strb.w	r1, [r4], #1
 8011274:	3201      	adds	r2, #1
 8011276:	4698      	mov	r8, r3
 8011278:	4282      	cmp	r2, r0
 801127a:	dbf6      	blt.n	801126a <tiny_vsnprintf_like+0xea>
 801127c:	e78d      	b.n	801119a <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801127e:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 8011282:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8011284:	f019 0f02 	tst.w	r9, #2
 8011288:	d02f      	beq.n	80112ea <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 801128a:	9a04      	ldr	r2, [sp, #16]
 801128c:	1d11      	adds	r1, r2, #4
 801128e:	9104      	str	r1, [sp, #16]
 8011290:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8011292:	1ba1      	subs	r1, r4, r6
 8011294:	f8cd 9008 	str.w	r9, [sp, #8]
 8011298:	f04f 30ff 	mov.w	r0, #4294967295
 801129c:	9001      	str	r0, [sp, #4]
 801129e:	9500      	str	r5, [sp, #0]
 80112a0:	eba8 0101 	sub.w	r1, r8, r1
 80112a4:	4620      	mov	r0, r4
 80112a6:	f7ff fee1 	bl	801106c <ee_number>
 80112aa:	4604      	mov	r4, r0
 80112ac:	e775      	b.n	801119a <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80112ae:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80112b2:	230a      	movs	r3, #10
 80112b4:	e7e6      	b.n	8011284 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 80112b6:	2a25      	cmp	r2, #37	@ 0x25
 80112b8:	d002      	beq.n	80112c0 <tiny_vsnprintf_like+0x140>
 80112ba:	2325      	movs	r3, #37	@ 0x25
 80112bc:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80112c0:	1ba3      	subs	r3, r4, r6
 80112c2:	4598      	cmp	r8, r3
 80112c4:	dd0f      	ble.n	80112e6 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 80112c6:	9b05      	ldr	r3, [sp, #20]
 80112c8:	781a      	ldrb	r2, [r3, #0]
 80112ca:	b13a      	cbz	r2, 80112dc <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 80112cc:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80112d0:	1ba3      	subs	r3, r4, r6
 80112d2:	4598      	cmp	r8, r3
 80112d4:	f73f af61 	bgt.w	801119a <tiny_vsnprintf_like+0x1a>
    base = 10;
 80112d8:	230a      	movs	r3, #10
 80112da:	e7d3      	b.n	8011284 <tiny_vsnprintf_like+0x104>
          --fmt;
 80112dc:	3b01      	subs	r3, #1
 80112de:	9305      	str	r3, [sp, #20]
 80112e0:	e7f6      	b.n	80112d0 <tiny_vsnprintf_like+0x150>
        base = 16;
 80112e2:	2310      	movs	r3, #16
 80112e4:	e7ce      	b.n	8011284 <tiny_vsnprintf_like+0x104>
    base = 10;
 80112e6:	230a      	movs	r3, #10
 80112e8:	e7cc      	b.n	8011284 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 80112ea:	9a04      	ldr	r2, [sp, #16]
 80112ec:	1d11      	adds	r1, r2, #4
 80112ee:	9104      	str	r1, [sp, #16]
 80112f0:	6812      	ldr	r2, [r2, #0]
 80112f2:	e7ce      	b.n	8011292 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 80112f4:	2300      	movs	r3, #0
 80112f6:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80112f8:	1ba0      	subs	r0, r4, r6
}
 80112fa:	b007      	add	sp, #28
 80112fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8011300:	2000      	movs	r0, #0
 8011302:	e7fa      	b.n	80112fa <tiny_vsnprintf_like+0x17a>
 8011304:	08014aac 	.word	0x08014aac

08011308 <__cvt>:
 8011308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801130c:	b088      	sub	sp, #32
 801130e:	2b00      	cmp	r3, #0
 8011310:	461d      	mov	r5, r3
 8011312:	4614      	mov	r4, r2
 8011314:	bfbc      	itt	lt
 8011316:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801131a:	4614      	movlt	r4, r2
 801131c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801131e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8011320:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8011324:	bfb6      	itet	lt
 8011326:	461d      	movlt	r5, r3
 8011328:	2300      	movge	r3, #0
 801132a:	232d      	movlt	r3, #45	@ 0x2d
 801132c:	7013      	strb	r3, [r2, #0]
 801132e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011330:	f023 0820 	bic.w	r8, r3, #32
 8011334:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011338:	d005      	beq.n	8011346 <__cvt+0x3e>
 801133a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801133e:	d100      	bne.n	8011342 <__cvt+0x3a>
 8011340:	3601      	adds	r6, #1
 8011342:	2302      	movs	r3, #2
 8011344:	e000      	b.n	8011348 <__cvt+0x40>
 8011346:	2303      	movs	r3, #3
 8011348:	aa07      	add	r2, sp, #28
 801134a:	9204      	str	r2, [sp, #16]
 801134c:	aa06      	add	r2, sp, #24
 801134e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011352:	e9cd 3600 	strd	r3, r6, [sp]
 8011356:	4622      	mov	r2, r4
 8011358:	462b      	mov	r3, r5
 801135a:	f000 fe3d 	bl	8011fd8 <_dtoa_r>
 801135e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011362:	4607      	mov	r7, r0
 8011364:	d119      	bne.n	801139a <__cvt+0x92>
 8011366:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011368:	07db      	lsls	r3, r3, #31
 801136a:	d50e      	bpl.n	801138a <__cvt+0x82>
 801136c:	eb00 0906 	add.w	r9, r0, r6
 8011370:	2200      	movs	r2, #0
 8011372:	2300      	movs	r3, #0
 8011374:	4620      	mov	r0, r4
 8011376:	4629      	mov	r1, r5
 8011378:	f7ef fb7e 	bl	8000a78 <__aeabi_dcmpeq>
 801137c:	b108      	cbz	r0, 8011382 <__cvt+0x7a>
 801137e:	f8cd 901c 	str.w	r9, [sp, #28]
 8011382:	2230      	movs	r2, #48	@ 0x30
 8011384:	9b07      	ldr	r3, [sp, #28]
 8011386:	454b      	cmp	r3, r9
 8011388:	d31e      	bcc.n	80113c8 <__cvt+0xc0>
 801138a:	9b07      	ldr	r3, [sp, #28]
 801138c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801138e:	1bdb      	subs	r3, r3, r7
 8011390:	4638      	mov	r0, r7
 8011392:	6013      	str	r3, [r2, #0]
 8011394:	b008      	add	sp, #32
 8011396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801139a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801139e:	eb00 0906 	add.w	r9, r0, r6
 80113a2:	d1e5      	bne.n	8011370 <__cvt+0x68>
 80113a4:	7803      	ldrb	r3, [r0, #0]
 80113a6:	2b30      	cmp	r3, #48	@ 0x30
 80113a8:	d10a      	bne.n	80113c0 <__cvt+0xb8>
 80113aa:	2200      	movs	r2, #0
 80113ac:	2300      	movs	r3, #0
 80113ae:	4620      	mov	r0, r4
 80113b0:	4629      	mov	r1, r5
 80113b2:	f7ef fb61 	bl	8000a78 <__aeabi_dcmpeq>
 80113b6:	b918      	cbnz	r0, 80113c0 <__cvt+0xb8>
 80113b8:	f1c6 0601 	rsb	r6, r6, #1
 80113bc:	f8ca 6000 	str.w	r6, [sl]
 80113c0:	f8da 3000 	ldr.w	r3, [sl]
 80113c4:	4499      	add	r9, r3
 80113c6:	e7d3      	b.n	8011370 <__cvt+0x68>
 80113c8:	1c59      	adds	r1, r3, #1
 80113ca:	9107      	str	r1, [sp, #28]
 80113cc:	701a      	strb	r2, [r3, #0]
 80113ce:	e7d9      	b.n	8011384 <__cvt+0x7c>

080113d0 <__exponent>:
 80113d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113d2:	2900      	cmp	r1, #0
 80113d4:	bfba      	itte	lt
 80113d6:	4249      	neglt	r1, r1
 80113d8:	232d      	movlt	r3, #45	@ 0x2d
 80113da:	232b      	movge	r3, #43	@ 0x2b
 80113dc:	2909      	cmp	r1, #9
 80113de:	7002      	strb	r2, [r0, #0]
 80113e0:	7043      	strb	r3, [r0, #1]
 80113e2:	dd29      	ble.n	8011438 <__exponent+0x68>
 80113e4:	f10d 0307 	add.w	r3, sp, #7
 80113e8:	461d      	mov	r5, r3
 80113ea:	270a      	movs	r7, #10
 80113ec:	461a      	mov	r2, r3
 80113ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80113f2:	fb07 1416 	mls	r4, r7, r6, r1
 80113f6:	3430      	adds	r4, #48	@ 0x30
 80113f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80113fc:	460c      	mov	r4, r1
 80113fe:	2c63      	cmp	r4, #99	@ 0x63
 8011400:	f103 33ff 	add.w	r3, r3, #4294967295
 8011404:	4631      	mov	r1, r6
 8011406:	dcf1      	bgt.n	80113ec <__exponent+0x1c>
 8011408:	3130      	adds	r1, #48	@ 0x30
 801140a:	1e94      	subs	r4, r2, #2
 801140c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011410:	1c41      	adds	r1, r0, #1
 8011412:	4623      	mov	r3, r4
 8011414:	42ab      	cmp	r3, r5
 8011416:	d30a      	bcc.n	801142e <__exponent+0x5e>
 8011418:	f10d 0309 	add.w	r3, sp, #9
 801141c:	1a9b      	subs	r3, r3, r2
 801141e:	42ac      	cmp	r4, r5
 8011420:	bf88      	it	hi
 8011422:	2300      	movhi	r3, #0
 8011424:	3302      	adds	r3, #2
 8011426:	4403      	add	r3, r0
 8011428:	1a18      	subs	r0, r3, r0
 801142a:	b003      	add	sp, #12
 801142c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801142e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011432:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011436:	e7ed      	b.n	8011414 <__exponent+0x44>
 8011438:	2330      	movs	r3, #48	@ 0x30
 801143a:	3130      	adds	r1, #48	@ 0x30
 801143c:	7083      	strb	r3, [r0, #2]
 801143e:	70c1      	strb	r1, [r0, #3]
 8011440:	1d03      	adds	r3, r0, #4
 8011442:	e7f1      	b.n	8011428 <__exponent+0x58>

08011444 <_printf_float>:
 8011444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011448:	b091      	sub	sp, #68	@ 0x44
 801144a:	460c      	mov	r4, r1
 801144c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8011450:	4616      	mov	r6, r2
 8011452:	461f      	mov	r7, r3
 8011454:	4605      	mov	r5, r0
 8011456:	f000 fcbd 	bl	8011dd4 <_localeconv_r>
 801145a:	6803      	ldr	r3, [r0, #0]
 801145c:	9308      	str	r3, [sp, #32]
 801145e:	4618      	mov	r0, r3
 8011460:	f7ee fede 	bl	8000220 <strlen>
 8011464:	2300      	movs	r3, #0
 8011466:	930e      	str	r3, [sp, #56]	@ 0x38
 8011468:	f8d8 3000 	ldr.w	r3, [r8]
 801146c:	9009      	str	r0, [sp, #36]	@ 0x24
 801146e:	3307      	adds	r3, #7
 8011470:	f023 0307 	bic.w	r3, r3, #7
 8011474:	f103 0208 	add.w	r2, r3, #8
 8011478:	f894 a018 	ldrb.w	sl, [r4, #24]
 801147c:	f8d4 b000 	ldr.w	fp, [r4]
 8011480:	f8c8 2000 	str.w	r2, [r8]
 8011484:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011488:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801148c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801148e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8011492:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011496:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801149a:	4b9d      	ldr	r3, [pc, #628]	@ (8011710 <_printf_float+0x2cc>)
 801149c:	f04f 32ff 	mov.w	r2, #4294967295
 80114a0:	f7ef fb1c 	bl	8000adc <__aeabi_dcmpun>
 80114a4:	bb70      	cbnz	r0, 8011504 <_printf_float+0xc0>
 80114a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80114aa:	4b99      	ldr	r3, [pc, #612]	@ (8011710 <_printf_float+0x2cc>)
 80114ac:	f04f 32ff 	mov.w	r2, #4294967295
 80114b0:	f7ef faf6 	bl	8000aa0 <__aeabi_dcmple>
 80114b4:	bb30      	cbnz	r0, 8011504 <_printf_float+0xc0>
 80114b6:	2200      	movs	r2, #0
 80114b8:	2300      	movs	r3, #0
 80114ba:	4640      	mov	r0, r8
 80114bc:	4649      	mov	r1, r9
 80114be:	f7ef fae5 	bl	8000a8c <__aeabi_dcmplt>
 80114c2:	b110      	cbz	r0, 80114ca <_printf_float+0x86>
 80114c4:	232d      	movs	r3, #45	@ 0x2d
 80114c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80114ca:	4a92      	ldr	r2, [pc, #584]	@ (8011714 <_printf_float+0x2d0>)
 80114cc:	4b92      	ldr	r3, [pc, #584]	@ (8011718 <_printf_float+0x2d4>)
 80114ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80114d2:	bf94      	ite	ls
 80114d4:	4690      	movls	r8, r2
 80114d6:	4698      	movhi	r8, r3
 80114d8:	2303      	movs	r3, #3
 80114da:	6123      	str	r3, [r4, #16]
 80114dc:	f02b 0304 	bic.w	r3, fp, #4
 80114e0:	6023      	str	r3, [r4, #0]
 80114e2:	f04f 0900 	mov.w	r9, #0
 80114e6:	9700      	str	r7, [sp, #0]
 80114e8:	4633      	mov	r3, r6
 80114ea:	aa0f      	add	r2, sp, #60	@ 0x3c
 80114ec:	4621      	mov	r1, r4
 80114ee:	4628      	mov	r0, r5
 80114f0:	f000 f9d4 	bl	801189c <_printf_common>
 80114f4:	3001      	adds	r0, #1
 80114f6:	f040 808f 	bne.w	8011618 <_printf_float+0x1d4>
 80114fa:	f04f 30ff 	mov.w	r0, #4294967295
 80114fe:	b011      	add	sp, #68	@ 0x44
 8011500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011504:	4642      	mov	r2, r8
 8011506:	464b      	mov	r3, r9
 8011508:	4640      	mov	r0, r8
 801150a:	4649      	mov	r1, r9
 801150c:	f7ef fae6 	bl	8000adc <__aeabi_dcmpun>
 8011510:	b140      	cbz	r0, 8011524 <_printf_float+0xe0>
 8011512:	464b      	mov	r3, r9
 8011514:	2b00      	cmp	r3, #0
 8011516:	bfbc      	itt	lt
 8011518:	232d      	movlt	r3, #45	@ 0x2d
 801151a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801151e:	4a7f      	ldr	r2, [pc, #508]	@ (801171c <_printf_float+0x2d8>)
 8011520:	4b7f      	ldr	r3, [pc, #508]	@ (8011720 <_printf_float+0x2dc>)
 8011522:	e7d4      	b.n	80114ce <_printf_float+0x8a>
 8011524:	6863      	ldr	r3, [r4, #4]
 8011526:	1c5a      	adds	r2, r3, #1
 8011528:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801152c:	d13f      	bne.n	80115ae <_printf_float+0x16a>
 801152e:	2306      	movs	r3, #6
 8011530:	6063      	str	r3, [r4, #4]
 8011532:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8011536:	2200      	movs	r2, #0
 8011538:	6023      	str	r3, [r4, #0]
 801153a:	9206      	str	r2, [sp, #24]
 801153c:	aa0e      	add	r2, sp, #56	@ 0x38
 801153e:	e9cd a204 	strd	sl, r2, [sp, #16]
 8011542:	aa0d      	add	r2, sp, #52	@ 0x34
 8011544:	9203      	str	r2, [sp, #12]
 8011546:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801154a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801154e:	6863      	ldr	r3, [r4, #4]
 8011550:	9300      	str	r3, [sp, #0]
 8011552:	4642      	mov	r2, r8
 8011554:	464b      	mov	r3, r9
 8011556:	4628      	mov	r0, r5
 8011558:	910a      	str	r1, [sp, #40]	@ 0x28
 801155a:	f7ff fed5 	bl	8011308 <__cvt>
 801155e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011560:	2947      	cmp	r1, #71	@ 0x47
 8011562:	4680      	mov	r8, r0
 8011564:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011566:	d128      	bne.n	80115ba <_printf_float+0x176>
 8011568:	1cc8      	adds	r0, r1, #3
 801156a:	db02      	blt.n	8011572 <_printf_float+0x12e>
 801156c:	6863      	ldr	r3, [r4, #4]
 801156e:	4299      	cmp	r1, r3
 8011570:	dd40      	ble.n	80115f4 <_printf_float+0x1b0>
 8011572:	f1aa 0a02 	sub.w	sl, sl, #2
 8011576:	fa5f fa8a 	uxtb.w	sl, sl
 801157a:	3901      	subs	r1, #1
 801157c:	4652      	mov	r2, sl
 801157e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011582:	910d      	str	r1, [sp, #52]	@ 0x34
 8011584:	f7ff ff24 	bl	80113d0 <__exponent>
 8011588:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801158a:	1813      	adds	r3, r2, r0
 801158c:	2a01      	cmp	r2, #1
 801158e:	4681      	mov	r9, r0
 8011590:	6123      	str	r3, [r4, #16]
 8011592:	dc02      	bgt.n	801159a <_printf_float+0x156>
 8011594:	6822      	ldr	r2, [r4, #0]
 8011596:	07d2      	lsls	r2, r2, #31
 8011598:	d501      	bpl.n	801159e <_printf_float+0x15a>
 801159a:	3301      	adds	r3, #1
 801159c:	6123      	str	r3, [r4, #16]
 801159e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d09f      	beq.n	80114e6 <_printf_float+0xa2>
 80115a6:	232d      	movs	r3, #45	@ 0x2d
 80115a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80115ac:	e79b      	b.n	80114e6 <_printf_float+0xa2>
 80115ae:	2947      	cmp	r1, #71	@ 0x47
 80115b0:	d1bf      	bne.n	8011532 <_printf_float+0xee>
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d1bd      	bne.n	8011532 <_printf_float+0xee>
 80115b6:	2301      	movs	r3, #1
 80115b8:	e7ba      	b.n	8011530 <_printf_float+0xec>
 80115ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80115be:	d9dc      	bls.n	801157a <_printf_float+0x136>
 80115c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80115c4:	d118      	bne.n	80115f8 <_printf_float+0x1b4>
 80115c6:	2900      	cmp	r1, #0
 80115c8:	6863      	ldr	r3, [r4, #4]
 80115ca:	dd0b      	ble.n	80115e4 <_printf_float+0x1a0>
 80115cc:	6121      	str	r1, [r4, #16]
 80115ce:	b913      	cbnz	r3, 80115d6 <_printf_float+0x192>
 80115d0:	6822      	ldr	r2, [r4, #0]
 80115d2:	07d0      	lsls	r0, r2, #31
 80115d4:	d502      	bpl.n	80115dc <_printf_float+0x198>
 80115d6:	3301      	adds	r3, #1
 80115d8:	440b      	add	r3, r1
 80115da:	6123      	str	r3, [r4, #16]
 80115dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80115de:	f04f 0900 	mov.w	r9, #0
 80115e2:	e7dc      	b.n	801159e <_printf_float+0x15a>
 80115e4:	b913      	cbnz	r3, 80115ec <_printf_float+0x1a8>
 80115e6:	6822      	ldr	r2, [r4, #0]
 80115e8:	07d2      	lsls	r2, r2, #31
 80115ea:	d501      	bpl.n	80115f0 <_printf_float+0x1ac>
 80115ec:	3302      	adds	r3, #2
 80115ee:	e7f4      	b.n	80115da <_printf_float+0x196>
 80115f0:	2301      	movs	r3, #1
 80115f2:	e7f2      	b.n	80115da <_printf_float+0x196>
 80115f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80115f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115fa:	4299      	cmp	r1, r3
 80115fc:	db05      	blt.n	801160a <_printf_float+0x1c6>
 80115fe:	6823      	ldr	r3, [r4, #0]
 8011600:	6121      	str	r1, [r4, #16]
 8011602:	07d8      	lsls	r0, r3, #31
 8011604:	d5ea      	bpl.n	80115dc <_printf_float+0x198>
 8011606:	1c4b      	adds	r3, r1, #1
 8011608:	e7e7      	b.n	80115da <_printf_float+0x196>
 801160a:	2900      	cmp	r1, #0
 801160c:	bfd4      	ite	le
 801160e:	f1c1 0202 	rsble	r2, r1, #2
 8011612:	2201      	movgt	r2, #1
 8011614:	4413      	add	r3, r2
 8011616:	e7e0      	b.n	80115da <_printf_float+0x196>
 8011618:	6823      	ldr	r3, [r4, #0]
 801161a:	055a      	lsls	r2, r3, #21
 801161c:	d407      	bmi.n	801162e <_printf_float+0x1ea>
 801161e:	6923      	ldr	r3, [r4, #16]
 8011620:	4642      	mov	r2, r8
 8011622:	4631      	mov	r1, r6
 8011624:	4628      	mov	r0, r5
 8011626:	47b8      	blx	r7
 8011628:	3001      	adds	r0, #1
 801162a:	d12b      	bne.n	8011684 <_printf_float+0x240>
 801162c:	e765      	b.n	80114fa <_printf_float+0xb6>
 801162e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011632:	f240 80dd 	bls.w	80117f0 <_printf_float+0x3ac>
 8011636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801163a:	2200      	movs	r2, #0
 801163c:	2300      	movs	r3, #0
 801163e:	f7ef fa1b 	bl	8000a78 <__aeabi_dcmpeq>
 8011642:	2800      	cmp	r0, #0
 8011644:	d033      	beq.n	80116ae <_printf_float+0x26a>
 8011646:	4a37      	ldr	r2, [pc, #220]	@ (8011724 <_printf_float+0x2e0>)
 8011648:	2301      	movs	r3, #1
 801164a:	4631      	mov	r1, r6
 801164c:	4628      	mov	r0, r5
 801164e:	47b8      	blx	r7
 8011650:	3001      	adds	r0, #1
 8011652:	f43f af52 	beq.w	80114fa <_printf_float+0xb6>
 8011656:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801165a:	4543      	cmp	r3, r8
 801165c:	db02      	blt.n	8011664 <_printf_float+0x220>
 801165e:	6823      	ldr	r3, [r4, #0]
 8011660:	07d8      	lsls	r0, r3, #31
 8011662:	d50f      	bpl.n	8011684 <_printf_float+0x240>
 8011664:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011668:	4631      	mov	r1, r6
 801166a:	4628      	mov	r0, r5
 801166c:	47b8      	blx	r7
 801166e:	3001      	adds	r0, #1
 8011670:	f43f af43 	beq.w	80114fa <_printf_float+0xb6>
 8011674:	f04f 0900 	mov.w	r9, #0
 8011678:	f108 38ff 	add.w	r8, r8, #4294967295
 801167c:	f104 0a1a 	add.w	sl, r4, #26
 8011680:	45c8      	cmp	r8, r9
 8011682:	dc09      	bgt.n	8011698 <_printf_float+0x254>
 8011684:	6823      	ldr	r3, [r4, #0]
 8011686:	079b      	lsls	r3, r3, #30
 8011688:	f100 8103 	bmi.w	8011892 <_printf_float+0x44e>
 801168c:	68e0      	ldr	r0, [r4, #12]
 801168e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011690:	4298      	cmp	r0, r3
 8011692:	bfb8      	it	lt
 8011694:	4618      	movlt	r0, r3
 8011696:	e732      	b.n	80114fe <_printf_float+0xba>
 8011698:	2301      	movs	r3, #1
 801169a:	4652      	mov	r2, sl
 801169c:	4631      	mov	r1, r6
 801169e:	4628      	mov	r0, r5
 80116a0:	47b8      	blx	r7
 80116a2:	3001      	adds	r0, #1
 80116a4:	f43f af29 	beq.w	80114fa <_printf_float+0xb6>
 80116a8:	f109 0901 	add.w	r9, r9, #1
 80116ac:	e7e8      	b.n	8011680 <_printf_float+0x23c>
 80116ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	dc39      	bgt.n	8011728 <_printf_float+0x2e4>
 80116b4:	4a1b      	ldr	r2, [pc, #108]	@ (8011724 <_printf_float+0x2e0>)
 80116b6:	2301      	movs	r3, #1
 80116b8:	4631      	mov	r1, r6
 80116ba:	4628      	mov	r0, r5
 80116bc:	47b8      	blx	r7
 80116be:	3001      	adds	r0, #1
 80116c0:	f43f af1b 	beq.w	80114fa <_printf_float+0xb6>
 80116c4:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80116c8:	ea59 0303 	orrs.w	r3, r9, r3
 80116cc:	d102      	bne.n	80116d4 <_printf_float+0x290>
 80116ce:	6823      	ldr	r3, [r4, #0]
 80116d0:	07d9      	lsls	r1, r3, #31
 80116d2:	d5d7      	bpl.n	8011684 <_printf_float+0x240>
 80116d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80116d8:	4631      	mov	r1, r6
 80116da:	4628      	mov	r0, r5
 80116dc:	47b8      	blx	r7
 80116de:	3001      	adds	r0, #1
 80116e0:	f43f af0b 	beq.w	80114fa <_printf_float+0xb6>
 80116e4:	f04f 0a00 	mov.w	sl, #0
 80116e8:	f104 0b1a 	add.w	fp, r4, #26
 80116ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80116ee:	425b      	negs	r3, r3
 80116f0:	4553      	cmp	r3, sl
 80116f2:	dc01      	bgt.n	80116f8 <_printf_float+0x2b4>
 80116f4:	464b      	mov	r3, r9
 80116f6:	e793      	b.n	8011620 <_printf_float+0x1dc>
 80116f8:	2301      	movs	r3, #1
 80116fa:	465a      	mov	r2, fp
 80116fc:	4631      	mov	r1, r6
 80116fe:	4628      	mov	r0, r5
 8011700:	47b8      	blx	r7
 8011702:	3001      	adds	r0, #1
 8011704:	f43f aef9 	beq.w	80114fa <_printf_float+0xb6>
 8011708:	f10a 0a01 	add.w	sl, sl, #1
 801170c:	e7ee      	b.n	80116ec <_printf_float+0x2a8>
 801170e:	bf00      	nop
 8011710:	7fefffff 	.word	0x7fefffff
 8011714:	08014ab3 	.word	0x08014ab3
 8011718:	08014ab7 	.word	0x08014ab7
 801171c:	08014abb 	.word	0x08014abb
 8011720:	08014abf 	.word	0x08014abf
 8011724:	08014ac3 	.word	0x08014ac3
 8011728:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801172a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801172e:	4553      	cmp	r3, sl
 8011730:	bfa8      	it	ge
 8011732:	4653      	movge	r3, sl
 8011734:	2b00      	cmp	r3, #0
 8011736:	4699      	mov	r9, r3
 8011738:	dc36      	bgt.n	80117a8 <_printf_float+0x364>
 801173a:	f04f 0b00 	mov.w	fp, #0
 801173e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011742:	f104 021a 	add.w	r2, r4, #26
 8011746:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011748:	930a      	str	r3, [sp, #40]	@ 0x28
 801174a:	eba3 0309 	sub.w	r3, r3, r9
 801174e:	455b      	cmp	r3, fp
 8011750:	dc31      	bgt.n	80117b6 <_printf_float+0x372>
 8011752:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011754:	459a      	cmp	sl, r3
 8011756:	dc3a      	bgt.n	80117ce <_printf_float+0x38a>
 8011758:	6823      	ldr	r3, [r4, #0]
 801175a:	07da      	lsls	r2, r3, #31
 801175c:	d437      	bmi.n	80117ce <_printf_float+0x38a>
 801175e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011760:	ebaa 0903 	sub.w	r9, sl, r3
 8011764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011766:	ebaa 0303 	sub.w	r3, sl, r3
 801176a:	4599      	cmp	r9, r3
 801176c:	bfa8      	it	ge
 801176e:	4699      	movge	r9, r3
 8011770:	f1b9 0f00 	cmp.w	r9, #0
 8011774:	dc33      	bgt.n	80117de <_printf_float+0x39a>
 8011776:	f04f 0800 	mov.w	r8, #0
 801177a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801177e:	f104 0b1a 	add.w	fp, r4, #26
 8011782:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011784:	ebaa 0303 	sub.w	r3, sl, r3
 8011788:	eba3 0309 	sub.w	r3, r3, r9
 801178c:	4543      	cmp	r3, r8
 801178e:	f77f af79 	ble.w	8011684 <_printf_float+0x240>
 8011792:	2301      	movs	r3, #1
 8011794:	465a      	mov	r2, fp
 8011796:	4631      	mov	r1, r6
 8011798:	4628      	mov	r0, r5
 801179a:	47b8      	blx	r7
 801179c:	3001      	adds	r0, #1
 801179e:	f43f aeac 	beq.w	80114fa <_printf_float+0xb6>
 80117a2:	f108 0801 	add.w	r8, r8, #1
 80117a6:	e7ec      	b.n	8011782 <_printf_float+0x33e>
 80117a8:	4642      	mov	r2, r8
 80117aa:	4631      	mov	r1, r6
 80117ac:	4628      	mov	r0, r5
 80117ae:	47b8      	blx	r7
 80117b0:	3001      	adds	r0, #1
 80117b2:	d1c2      	bne.n	801173a <_printf_float+0x2f6>
 80117b4:	e6a1      	b.n	80114fa <_printf_float+0xb6>
 80117b6:	2301      	movs	r3, #1
 80117b8:	4631      	mov	r1, r6
 80117ba:	4628      	mov	r0, r5
 80117bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80117be:	47b8      	blx	r7
 80117c0:	3001      	adds	r0, #1
 80117c2:	f43f ae9a 	beq.w	80114fa <_printf_float+0xb6>
 80117c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80117c8:	f10b 0b01 	add.w	fp, fp, #1
 80117cc:	e7bb      	b.n	8011746 <_printf_float+0x302>
 80117ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80117d2:	4631      	mov	r1, r6
 80117d4:	4628      	mov	r0, r5
 80117d6:	47b8      	blx	r7
 80117d8:	3001      	adds	r0, #1
 80117da:	d1c0      	bne.n	801175e <_printf_float+0x31a>
 80117dc:	e68d      	b.n	80114fa <_printf_float+0xb6>
 80117de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80117e0:	464b      	mov	r3, r9
 80117e2:	4442      	add	r2, r8
 80117e4:	4631      	mov	r1, r6
 80117e6:	4628      	mov	r0, r5
 80117e8:	47b8      	blx	r7
 80117ea:	3001      	adds	r0, #1
 80117ec:	d1c3      	bne.n	8011776 <_printf_float+0x332>
 80117ee:	e684      	b.n	80114fa <_printf_float+0xb6>
 80117f0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80117f4:	f1ba 0f01 	cmp.w	sl, #1
 80117f8:	dc01      	bgt.n	80117fe <_printf_float+0x3ba>
 80117fa:	07db      	lsls	r3, r3, #31
 80117fc:	d536      	bpl.n	801186c <_printf_float+0x428>
 80117fe:	2301      	movs	r3, #1
 8011800:	4642      	mov	r2, r8
 8011802:	4631      	mov	r1, r6
 8011804:	4628      	mov	r0, r5
 8011806:	47b8      	blx	r7
 8011808:	3001      	adds	r0, #1
 801180a:	f43f ae76 	beq.w	80114fa <_printf_float+0xb6>
 801180e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011812:	4631      	mov	r1, r6
 8011814:	4628      	mov	r0, r5
 8011816:	47b8      	blx	r7
 8011818:	3001      	adds	r0, #1
 801181a:	f43f ae6e 	beq.w	80114fa <_printf_float+0xb6>
 801181e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011822:	2200      	movs	r2, #0
 8011824:	2300      	movs	r3, #0
 8011826:	f10a 3aff 	add.w	sl, sl, #4294967295
 801182a:	f7ef f925 	bl	8000a78 <__aeabi_dcmpeq>
 801182e:	b9c0      	cbnz	r0, 8011862 <_printf_float+0x41e>
 8011830:	4653      	mov	r3, sl
 8011832:	f108 0201 	add.w	r2, r8, #1
 8011836:	4631      	mov	r1, r6
 8011838:	4628      	mov	r0, r5
 801183a:	47b8      	blx	r7
 801183c:	3001      	adds	r0, #1
 801183e:	d10c      	bne.n	801185a <_printf_float+0x416>
 8011840:	e65b      	b.n	80114fa <_printf_float+0xb6>
 8011842:	2301      	movs	r3, #1
 8011844:	465a      	mov	r2, fp
 8011846:	4631      	mov	r1, r6
 8011848:	4628      	mov	r0, r5
 801184a:	47b8      	blx	r7
 801184c:	3001      	adds	r0, #1
 801184e:	f43f ae54 	beq.w	80114fa <_printf_float+0xb6>
 8011852:	f108 0801 	add.w	r8, r8, #1
 8011856:	45d0      	cmp	r8, sl
 8011858:	dbf3      	blt.n	8011842 <_printf_float+0x3fe>
 801185a:	464b      	mov	r3, r9
 801185c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011860:	e6df      	b.n	8011622 <_printf_float+0x1de>
 8011862:	f04f 0800 	mov.w	r8, #0
 8011866:	f104 0b1a 	add.w	fp, r4, #26
 801186a:	e7f4      	b.n	8011856 <_printf_float+0x412>
 801186c:	2301      	movs	r3, #1
 801186e:	4642      	mov	r2, r8
 8011870:	e7e1      	b.n	8011836 <_printf_float+0x3f2>
 8011872:	2301      	movs	r3, #1
 8011874:	464a      	mov	r2, r9
 8011876:	4631      	mov	r1, r6
 8011878:	4628      	mov	r0, r5
 801187a:	47b8      	blx	r7
 801187c:	3001      	adds	r0, #1
 801187e:	f43f ae3c 	beq.w	80114fa <_printf_float+0xb6>
 8011882:	f108 0801 	add.w	r8, r8, #1
 8011886:	68e3      	ldr	r3, [r4, #12]
 8011888:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801188a:	1a5b      	subs	r3, r3, r1
 801188c:	4543      	cmp	r3, r8
 801188e:	dcf0      	bgt.n	8011872 <_printf_float+0x42e>
 8011890:	e6fc      	b.n	801168c <_printf_float+0x248>
 8011892:	f04f 0800 	mov.w	r8, #0
 8011896:	f104 0919 	add.w	r9, r4, #25
 801189a:	e7f4      	b.n	8011886 <_printf_float+0x442>

0801189c <_printf_common>:
 801189c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118a0:	4616      	mov	r6, r2
 80118a2:	4698      	mov	r8, r3
 80118a4:	688a      	ldr	r2, [r1, #8]
 80118a6:	690b      	ldr	r3, [r1, #16]
 80118a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80118ac:	4293      	cmp	r3, r2
 80118ae:	bfb8      	it	lt
 80118b0:	4613      	movlt	r3, r2
 80118b2:	6033      	str	r3, [r6, #0]
 80118b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80118b8:	4607      	mov	r7, r0
 80118ba:	460c      	mov	r4, r1
 80118bc:	b10a      	cbz	r2, 80118c2 <_printf_common+0x26>
 80118be:	3301      	adds	r3, #1
 80118c0:	6033      	str	r3, [r6, #0]
 80118c2:	6823      	ldr	r3, [r4, #0]
 80118c4:	0699      	lsls	r1, r3, #26
 80118c6:	bf42      	ittt	mi
 80118c8:	6833      	ldrmi	r3, [r6, #0]
 80118ca:	3302      	addmi	r3, #2
 80118cc:	6033      	strmi	r3, [r6, #0]
 80118ce:	6825      	ldr	r5, [r4, #0]
 80118d0:	f015 0506 	ands.w	r5, r5, #6
 80118d4:	d106      	bne.n	80118e4 <_printf_common+0x48>
 80118d6:	f104 0a19 	add.w	sl, r4, #25
 80118da:	68e3      	ldr	r3, [r4, #12]
 80118dc:	6832      	ldr	r2, [r6, #0]
 80118de:	1a9b      	subs	r3, r3, r2
 80118e0:	42ab      	cmp	r3, r5
 80118e2:	dc26      	bgt.n	8011932 <_printf_common+0x96>
 80118e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80118e8:	6822      	ldr	r2, [r4, #0]
 80118ea:	3b00      	subs	r3, #0
 80118ec:	bf18      	it	ne
 80118ee:	2301      	movne	r3, #1
 80118f0:	0692      	lsls	r2, r2, #26
 80118f2:	d42b      	bmi.n	801194c <_printf_common+0xb0>
 80118f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80118f8:	4641      	mov	r1, r8
 80118fa:	4638      	mov	r0, r7
 80118fc:	47c8      	blx	r9
 80118fe:	3001      	adds	r0, #1
 8011900:	d01e      	beq.n	8011940 <_printf_common+0xa4>
 8011902:	6823      	ldr	r3, [r4, #0]
 8011904:	6922      	ldr	r2, [r4, #16]
 8011906:	f003 0306 	and.w	r3, r3, #6
 801190a:	2b04      	cmp	r3, #4
 801190c:	bf02      	ittt	eq
 801190e:	68e5      	ldreq	r5, [r4, #12]
 8011910:	6833      	ldreq	r3, [r6, #0]
 8011912:	1aed      	subeq	r5, r5, r3
 8011914:	68a3      	ldr	r3, [r4, #8]
 8011916:	bf0c      	ite	eq
 8011918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801191c:	2500      	movne	r5, #0
 801191e:	4293      	cmp	r3, r2
 8011920:	bfc4      	itt	gt
 8011922:	1a9b      	subgt	r3, r3, r2
 8011924:	18ed      	addgt	r5, r5, r3
 8011926:	2600      	movs	r6, #0
 8011928:	341a      	adds	r4, #26
 801192a:	42b5      	cmp	r5, r6
 801192c:	d11a      	bne.n	8011964 <_printf_common+0xc8>
 801192e:	2000      	movs	r0, #0
 8011930:	e008      	b.n	8011944 <_printf_common+0xa8>
 8011932:	2301      	movs	r3, #1
 8011934:	4652      	mov	r2, sl
 8011936:	4641      	mov	r1, r8
 8011938:	4638      	mov	r0, r7
 801193a:	47c8      	blx	r9
 801193c:	3001      	adds	r0, #1
 801193e:	d103      	bne.n	8011948 <_printf_common+0xac>
 8011940:	f04f 30ff 	mov.w	r0, #4294967295
 8011944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011948:	3501      	adds	r5, #1
 801194a:	e7c6      	b.n	80118da <_printf_common+0x3e>
 801194c:	18e1      	adds	r1, r4, r3
 801194e:	1c5a      	adds	r2, r3, #1
 8011950:	2030      	movs	r0, #48	@ 0x30
 8011952:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011956:	4422      	add	r2, r4
 8011958:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801195c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011960:	3302      	adds	r3, #2
 8011962:	e7c7      	b.n	80118f4 <_printf_common+0x58>
 8011964:	2301      	movs	r3, #1
 8011966:	4622      	mov	r2, r4
 8011968:	4641      	mov	r1, r8
 801196a:	4638      	mov	r0, r7
 801196c:	47c8      	blx	r9
 801196e:	3001      	adds	r0, #1
 8011970:	d0e6      	beq.n	8011940 <_printf_common+0xa4>
 8011972:	3601      	adds	r6, #1
 8011974:	e7d9      	b.n	801192a <_printf_common+0x8e>
	...

08011978 <_printf_i>:
 8011978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801197c:	7e0f      	ldrb	r7, [r1, #24]
 801197e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011980:	2f78      	cmp	r7, #120	@ 0x78
 8011982:	4691      	mov	r9, r2
 8011984:	4680      	mov	r8, r0
 8011986:	460c      	mov	r4, r1
 8011988:	469a      	mov	sl, r3
 801198a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801198e:	d807      	bhi.n	80119a0 <_printf_i+0x28>
 8011990:	2f62      	cmp	r7, #98	@ 0x62
 8011992:	d80a      	bhi.n	80119aa <_printf_i+0x32>
 8011994:	2f00      	cmp	r7, #0
 8011996:	f000 80d2 	beq.w	8011b3e <_printf_i+0x1c6>
 801199a:	2f58      	cmp	r7, #88	@ 0x58
 801199c:	f000 80b9 	beq.w	8011b12 <_printf_i+0x19a>
 80119a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80119a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80119a8:	e03a      	b.n	8011a20 <_printf_i+0xa8>
 80119aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80119ae:	2b15      	cmp	r3, #21
 80119b0:	d8f6      	bhi.n	80119a0 <_printf_i+0x28>
 80119b2:	a101      	add	r1, pc, #4	@ (adr r1, 80119b8 <_printf_i+0x40>)
 80119b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80119b8:	08011a11 	.word	0x08011a11
 80119bc:	08011a25 	.word	0x08011a25
 80119c0:	080119a1 	.word	0x080119a1
 80119c4:	080119a1 	.word	0x080119a1
 80119c8:	080119a1 	.word	0x080119a1
 80119cc:	080119a1 	.word	0x080119a1
 80119d0:	08011a25 	.word	0x08011a25
 80119d4:	080119a1 	.word	0x080119a1
 80119d8:	080119a1 	.word	0x080119a1
 80119dc:	080119a1 	.word	0x080119a1
 80119e0:	080119a1 	.word	0x080119a1
 80119e4:	08011b25 	.word	0x08011b25
 80119e8:	08011a4f 	.word	0x08011a4f
 80119ec:	08011adf 	.word	0x08011adf
 80119f0:	080119a1 	.word	0x080119a1
 80119f4:	080119a1 	.word	0x080119a1
 80119f8:	08011b47 	.word	0x08011b47
 80119fc:	080119a1 	.word	0x080119a1
 8011a00:	08011a4f 	.word	0x08011a4f
 8011a04:	080119a1 	.word	0x080119a1
 8011a08:	080119a1 	.word	0x080119a1
 8011a0c:	08011ae7 	.word	0x08011ae7
 8011a10:	6833      	ldr	r3, [r6, #0]
 8011a12:	1d1a      	adds	r2, r3, #4
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	6032      	str	r2, [r6, #0]
 8011a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011a1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011a20:	2301      	movs	r3, #1
 8011a22:	e09d      	b.n	8011b60 <_printf_i+0x1e8>
 8011a24:	6833      	ldr	r3, [r6, #0]
 8011a26:	6820      	ldr	r0, [r4, #0]
 8011a28:	1d19      	adds	r1, r3, #4
 8011a2a:	6031      	str	r1, [r6, #0]
 8011a2c:	0606      	lsls	r6, r0, #24
 8011a2e:	d501      	bpl.n	8011a34 <_printf_i+0xbc>
 8011a30:	681d      	ldr	r5, [r3, #0]
 8011a32:	e003      	b.n	8011a3c <_printf_i+0xc4>
 8011a34:	0645      	lsls	r5, r0, #25
 8011a36:	d5fb      	bpl.n	8011a30 <_printf_i+0xb8>
 8011a38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011a3c:	2d00      	cmp	r5, #0
 8011a3e:	da03      	bge.n	8011a48 <_printf_i+0xd0>
 8011a40:	232d      	movs	r3, #45	@ 0x2d
 8011a42:	426d      	negs	r5, r5
 8011a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a48:	4859      	ldr	r0, [pc, #356]	@ (8011bb0 <_printf_i+0x238>)
 8011a4a:	230a      	movs	r3, #10
 8011a4c:	e011      	b.n	8011a72 <_printf_i+0xfa>
 8011a4e:	6821      	ldr	r1, [r4, #0]
 8011a50:	6833      	ldr	r3, [r6, #0]
 8011a52:	0608      	lsls	r0, r1, #24
 8011a54:	f853 5b04 	ldr.w	r5, [r3], #4
 8011a58:	d402      	bmi.n	8011a60 <_printf_i+0xe8>
 8011a5a:	0649      	lsls	r1, r1, #25
 8011a5c:	bf48      	it	mi
 8011a5e:	b2ad      	uxthmi	r5, r5
 8011a60:	2f6f      	cmp	r7, #111	@ 0x6f
 8011a62:	4853      	ldr	r0, [pc, #332]	@ (8011bb0 <_printf_i+0x238>)
 8011a64:	6033      	str	r3, [r6, #0]
 8011a66:	bf14      	ite	ne
 8011a68:	230a      	movne	r3, #10
 8011a6a:	2308      	moveq	r3, #8
 8011a6c:	2100      	movs	r1, #0
 8011a6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011a72:	6866      	ldr	r6, [r4, #4]
 8011a74:	60a6      	str	r6, [r4, #8]
 8011a76:	2e00      	cmp	r6, #0
 8011a78:	bfa2      	ittt	ge
 8011a7a:	6821      	ldrge	r1, [r4, #0]
 8011a7c:	f021 0104 	bicge.w	r1, r1, #4
 8011a80:	6021      	strge	r1, [r4, #0]
 8011a82:	b90d      	cbnz	r5, 8011a88 <_printf_i+0x110>
 8011a84:	2e00      	cmp	r6, #0
 8011a86:	d04b      	beq.n	8011b20 <_printf_i+0x1a8>
 8011a88:	4616      	mov	r6, r2
 8011a8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011a8e:	fb03 5711 	mls	r7, r3, r1, r5
 8011a92:	5dc7      	ldrb	r7, [r0, r7]
 8011a94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011a98:	462f      	mov	r7, r5
 8011a9a:	42bb      	cmp	r3, r7
 8011a9c:	460d      	mov	r5, r1
 8011a9e:	d9f4      	bls.n	8011a8a <_printf_i+0x112>
 8011aa0:	2b08      	cmp	r3, #8
 8011aa2:	d10b      	bne.n	8011abc <_printf_i+0x144>
 8011aa4:	6823      	ldr	r3, [r4, #0]
 8011aa6:	07df      	lsls	r7, r3, #31
 8011aa8:	d508      	bpl.n	8011abc <_printf_i+0x144>
 8011aaa:	6923      	ldr	r3, [r4, #16]
 8011aac:	6861      	ldr	r1, [r4, #4]
 8011aae:	4299      	cmp	r1, r3
 8011ab0:	bfde      	ittt	le
 8011ab2:	2330      	movle	r3, #48	@ 0x30
 8011ab4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011ab8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011abc:	1b92      	subs	r2, r2, r6
 8011abe:	6122      	str	r2, [r4, #16]
 8011ac0:	f8cd a000 	str.w	sl, [sp]
 8011ac4:	464b      	mov	r3, r9
 8011ac6:	aa03      	add	r2, sp, #12
 8011ac8:	4621      	mov	r1, r4
 8011aca:	4640      	mov	r0, r8
 8011acc:	f7ff fee6 	bl	801189c <_printf_common>
 8011ad0:	3001      	adds	r0, #1
 8011ad2:	d14a      	bne.n	8011b6a <_printf_i+0x1f2>
 8011ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ad8:	b004      	add	sp, #16
 8011ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ade:	6823      	ldr	r3, [r4, #0]
 8011ae0:	f043 0320 	orr.w	r3, r3, #32
 8011ae4:	6023      	str	r3, [r4, #0]
 8011ae6:	4833      	ldr	r0, [pc, #204]	@ (8011bb4 <_printf_i+0x23c>)
 8011ae8:	2778      	movs	r7, #120	@ 0x78
 8011aea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011aee:	6823      	ldr	r3, [r4, #0]
 8011af0:	6831      	ldr	r1, [r6, #0]
 8011af2:	061f      	lsls	r7, r3, #24
 8011af4:	f851 5b04 	ldr.w	r5, [r1], #4
 8011af8:	d402      	bmi.n	8011b00 <_printf_i+0x188>
 8011afa:	065f      	lsls	r7, r3, #25
 8011afc:	bf48      	it	mi
 8011afe:	b2ad      	uxthmi	r5, r5
 8011b00:	6031      	str	r1, [r6, #0]
 8011b02:	07d9      	lsls	r1, r3, #31
 8011b04:	bf44      	itt	mi
 8011b06:	f043 0320 	orrmi.w	r3, r3, #32
 8011b0a:	6023      	strmi	r3, [r4, #0]
 8011b0c:	b11d      	cbz	r5, 8011b16 <_printf_i+0x19e>
 8011b0e:	2310      	movs	r3, #16
 8011b10:	e7ac      	b.n	8011a6c <_printf_i+0xf4>
 8011b12:	4827      	ldr	r0, [pc, #156]	@ (8011bb0 <_printf_i+0x238>)
 8011b14:	e7e9      	b.n	8011aea <_printf_i+0x172>
 8011b16:	6823      	ldr	r3, [r4, #0]
 8011b18:	f023 0320 	bic.w	r3, r3, #32
 8011b1c:	6023      	str	r3, [r4, #0]
 8011b1e:	e7f6      	b.n	8011b0e <_printf_i+0x196>
 8011b20:	4616      	mov	r6, r2
 8011b22:	e7bd      	b.n	8011aa0 <_printf_i+0x128>
 8011b24:	6833      	ldr	r3, [r6, #0]
 8011b26:	6825      	ldr	r5, [r4, #0]
 8011b28:	6961      	ldr	r1, [r4, #20]
 8011b2a:	1d18      	adds	r0, r3, #4
 8011b2c:	6030      	str	r0, [r6, #0]
 8011b2e:	062e      	lsls	r6, r5, #24
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	d501      	bpl.n	8011b38 <_printf_i+0x1c0>
 8011b34:	6019      	str	r1, [r3, #0]
 8011b36:	e002      	b.n	8011b3e <_printf_i+0x1c6>
 8011b38:	0668      	lsls	r0, r5, #25
 8011b3a:	d5fb      	bpl.n	8011b34 <_printf_i+0x1bc>
 8011b3c:	8019      	strh	r1, [r3, #0]
 8011b3e:	2300      	movs	r3, #0
 8011b40:	6123      	str	r3, [r4, #16]
 8011b42:	4616      	mov	r6, r2
 8011b44:	e7bc      	b.n	8011ac0 <_printf_i+0x148>
 8011b46:	6833      	ldr	r3, [r6, #0]
 8011b48:	1d1a      	adds	r2, r3, #4
 8011b4a:	6032      	str	r2, [r6, #0]
 8011b4c:	681e      	ldr	r6, [r3, #0]
 8011b4e:	6862      	ldr	r2, [r4, #4]
 8011b50:	2100      	movs	r1, #0
 8011b52:	4630      	mov	r0, r6
 8011b54:	f7ee fb14 	bl	8000180 <memchr>
 8011b58:	b108      	cbz	r0, 8011b5e <_printf_i+0x1e6>
 8011b5a:	1b80      	subs	r0, r0, r6
 8011b5c:	6060      	str	r0, [r4, #4]
 8011b5e:	6863      	ldr	r3, [r4, #4]
 8011b60:	6123      	str	r3, [r4, #16]
 8011b62:	2300      	movs	r3, #0
 8011b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011b68:	e7aa      	b.n	8011ac0 <_printf_i+0x148>
 8011b6a:	6923      	ldr	r3, [r4, #16]
 8011b6c:	4632      	mov	r2, r6
 8011b6e:	4649      	mov	r1, r9
 8011b70:	4640      	mov	r0, r8
 8011b72:	47d0      	blx	sl
 8011b74:	3001      	adds	r0, #1
 8011b76:	d0ad      	beq.n	8011ad4 <_printf_i+0x15c>
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	079b      	lsls	r3, r3, #30
 8011b7c:	d413      	bmi.n	8011ba6 <_printf_i+0x22e>
 8011b7e:	68e0      	ldr	r0, [r4, #12]
 8011b80:	9b03      	ldr	r3, [sp, #12]
 8011b82:	4298      	cmp	r0, r3
 8011b84:	bfb8      	it	lt
 8011b86:	4618      	movlt	r0, r3
 8011b88:	e7a6      	b.n	8011ad8 <_printf_i+0x160>
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	4632      	mov	r2, r6
 8011b8e:	4649      	mov	r1, r9
 8011b90:	4640      	mov	r0, r8
 8011b92:	47d0      	blx	sl
 8011b94:	3001      	adds	r0, #1
 8011b96:	d09d      	beq.n	8011ad4 <_printf_i+0x15c>
 8011b98:	3501      	adds	r5, #1
 8011b9a:	68e3      	ldr	r3, [r4, #12]
 8011b9c:	9903      	ldr	r1, [sp, #12]
 8011b9e:	1a5b      	subs	r3, r3, r1
 8011ba0:	42ab      	cmp	r3, r5
 8011ba2:	dcf2      	bgt.n	8011b8a <_printf_i+0x212>
 8011ba4:	e7eb      	b.n	8011b7e <_printf_i+0x206>
 8011ba6:	2500      	movs	r5, #0
 8011ba8:	f104 0619 	add.w	r6, r4, #25
 8011bac:	e7f5      	b.n	8011b9a <_printf_i+0x222>
 8011bae:	bf00      	nop
 8011bb0:	08014ac5 	.word	0x08014ac5
 8011bb4:	08014ad6 	.word	0x08014ad6

08011bb8 <std>:
 8011bb8:	2300      	movs	r3, #0
 8011bba:	b510      	push	{r4, lr}
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8011bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011bc6:	6083      	str	r3, [r0, #8]
 8011bc8:	8181      	strh	r1, [r0, #12]
 8011bca:	6643      	str	r3, [r0, #100]	@ 0x64
 8011bcc:	81c2      	strh	r2, [r0, #14]
 8011bce:	6183      	str	r3, [r0, #24]
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	2208      	movs	r2, #8
 8011bd4:	305c      	adds	r0, #92	@ 0x5c
 8011bd6:	f000 f8f4 	bl	8011dc2 <memset>
 8011bda:	4b0d      	ldr	r3, [pc, #52]	@ (8011c10 <std+0x58>)
 8011bdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8011bde:	4b0d      	ldr	r3, [pc, #52]	@ (8011c14 <std+0x5c>)
 8011be0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011be2:	4b0d      	ldr	r3, [pc, #52]	@ (8011c18 <std+0x60>)
 8011be4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011be6:	4b0d      	ldr	r3, [pc, #52]	@ (8011c1c <std+0x64>)
 8011be8:	6323      	str	r3, [r4, #48]	@ 0x30
 8011bea:	4b0d      	ldr	r3, [pc, #52]	@ (8011c20 <std+0x68>)
 8011bec:	6224      	str	r4, [r4, #32]
 8011bee:	429c      	cmp	r4, r3
 8011bf0:	d006      	beq.n	8011c00 <std+0x48>
 8011bf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011bf6:	4294      	cmp	r4, r2
 8011bf8:	d002      	beq.n	8011c00 <std+0x48>
 8011bfa:	33d0      	adds	r3, #208	@ 0xd0
 8011bfc:	429c      	cmp	r4, r3
 8011bfe:	d105      	bne.n	8011c0c <std+0x54>
 8011c00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c08:	f000 b958 	b.w	8011ebc <__retarget_lock_init_recursive>
 8011c0c:	bd10      	pop	{r4, pc}
 8011c0e:	bf00      	nop
 8011c10:	08011d3d 	.word	0x08011d3d
 8011c14:	08011d5f 	.word	0x08011d5f
 8011c18:	08011d97 	.word	0x08011d97
 8011c1c:	08011dbb 	.word	0x08011dbb
 8011c20:	20001c30 	.word	0x20001c30

08011c24 <stdio_exit_handler>:
 8011c24:	4a02      	ldr	r2, [pc, #8]	@ (8011c30 <stdio_exit_handler+0xc>)
 8011c26:	4903      	ldr	r1, [pc, #12]	@ (8011c34 <stdio_exit_handler+0x10>)
 8011c28:	4803      	ldr	r0, [pc, #12]	@ (8011c38 <stdio_exit_handler+0x14>)
 8011c2a:	f000 b869 	b.w	8011d00 <_fwalk_sglue>
 8011c2e:	bf00      	nop
 8011c30:	200000dc 	.word	0x200000dc
 8011c34:	08013569 	.word	0x08013569
 8011c38:	200000ec 	.word	0x200000ec

08011c3c <cleanup_stdio>:
 8011c3c:	6841      	ldr	r1, [r0, #4]
 8011c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8011c70 <cleanup_stdio+0x34>)
 8011c40:	4299      	cmp	r1, r3
 8011c42:	b510      	push	{r4, lr}
 8011c44:	4604      	mov	r4, r0
 8011c46:	d001      	beq.n	8011c4c <cleanup_stdio+0x10>
 8011c48:	f001 fc8e 	bl	8013568 <_fflush_r>
 8011c4c:	68a1      	ldr	r1, [r4, #8]
 8011c4e:	4b09      	ldr	r3, [pc, #36]	@ (8011c74 <cleanup_stdio+0x38>)
 8011c50:	4299      	cmp	r1, r3
 8011c52:	d002      	beq.n	8011c5a <cleanup_stdio+0x1e>
 8011c54:	4620      	mov	r0, r4
 8011c56:	f001 fc87 	bl	8013568 <_fflush_r>
 8011c5a:	68e1      	ldr	r1, [r4, #12]
 8011c5c:	4b06      	ldr	r3, [pc, #24]	@ (8011c78 <cleanup_stdio+0x3c>)
 8011c5e:	4299      	cmp	r1, r3
 8011c60:	d004      	beq.n	8011c6c <cleanup_stdio+0x30>
 8011c62:	4620      	mov	r0, r4
 8011c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c68:	f001 bc7e 	b.w	8013568 <_fflush_r>
 8011c6c:	bd10      	pop	{r4, pc}
 8011c6e:	bf00      	nop
 8011c70:	20001c30 	.word	0x20001c30
 8011c74:	20001c98 	.word	0x20001c98
 8011c78:	20001d00 	.word	0x20001d00

08011c7c <global_stdio_init.part.0>:
 8011c7c:	b510      	push	{r4, lr}
 8011c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8011cac <global_stdio_init.part.0+0x30>)
 8011c80:	4c0b      	ldr	r4, [pc, #44]	@ (8011cb0 <global_stdio_init.part.0+0x34>)
 8011c82:	4a0c      	ldr	r2, [pc, #48]	@ (8011cb4 <global_stdio_init.part.0+0x38>)
 8011c84:	601a      	str	r2, [r3, #0]
 8011c86:	4620      	mov	r0, r4
 8011c88:	2200      	movs	r2, #0
 8011c8a:	2104      	movs	r1, #4
 8011c8c:	f7ff ff94 	bl	8011bb8 <std>
 8011c90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011c94:	2201      	movs	r2, #1
 8011c96:	2109      	movs	r1, #9
 8011c98:	f7ff ff8e 	bl	8011bb8 <std>
 8011c9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011ca0:	2202      	movs	r2, #2
 8011ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ca6:	2112      	movs	r1, #18
 8011ca8:	f7ff bf86 	b.w	8011bb8 <std>
 8011cac:	20001d68 	.word	0x20001d68
 8011cb0:	20001c30 	.word	0x20001c30
 8011cb4:	08011c25 	.word	0x08011c25

08011cb8 <__sfp_lock_acquire>:
 8011cb8:	4801      	ldr	r0, [pc, #4]	@ (8011cc0 <__sfp_lock_acquire+0x8>)
 8011cba:	f000 b900 	b.w	8011ebe <__retarget_lock_acquire_recursive>
 8011cbe:	bf00      	nop
 8011cc0:	20001d71 	.word	0x20001d71

08011cc4 <__sfp_lock_release>:
 8011cc4:	4801      	ldr	r0, [pc, #4]	@ (8011ccc <__sfp_lock_release+0x8>)
 8011cc6:	f000 b8fb 	b.w	8011ec0 <__retarget_lock_release_recursive>
 8011cca:	bf00      	nop
 8011ccc:	20001d71 	.word	0x20001d71

08011cd0 <__sinit>:
 8011cd0:	b510      	push	{r4, lr}
 8011cd2:	4604      	mov	r4, r0
 8011cd4:	f7ff fff0 	bl	8011cb8 <__sfp_lock_acquire>
 8011cd8:	6a23      	ldr	r3, [r4, #32]
 8011cda:	b11b      	cbz	r3, 8011ce4 <__sinit+0x14>
 8011cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ce0:	f7ff bff0 	b.w	8011cc4 <__sfp_lock_release>
 8011ce4:	4b04      	ldr	r3, [pc, #16]	@ (8011cf8 <__sinit+0x28>)
 8011ce6:	6223      	str	r3, [r4, #32]
 8011ce8:	4b04      	ldr	r3, [pc, #16]	@ (8011cfc <__sinit+0x2c>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1f5      	bne.n	8011cdc <__sinit+0xc>
 8011cf0:	f7ff ffc4 	bl	8011c7c <global_stdio_init.part.0>
 8011cf4:	e7f2      	b.n	8011cdc <__sinit+0xc>
 8011cf6:	bf00      	nop
 8011cf8:	08011c3d 	.word	0x08011c3d
 8011cfc:	20001d68 	.word	0x20001d68

08011d00 <_fwalk_sglue>:
 8011d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d04:	4607      	mov	r7, r0
 8011d06:	4688      	mov	r8, r1
 8011d08:	4614      	mov	r4, r2
 8011d0a:	2600      	movs	r6, #0
 8011d0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d10:	f1b9 0901 	subs.w	r9, r9, #1
 8011d14:	d505      	bpl.n	8011d22 <_fwalk_sglue+0x22>
 8011d16:	6824      	ldr	r4, [r4, #0]
 8011d18:	2c00      	cmp	r4, #0
 8011d1a:	d1f7      	bne.n	8011d0c <_fwalk_sglue+0xc>
 8011d1c:	4630      	mov	r0, r6
 8011d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d22:	89ab      	ldrh	r3, [r5, #12]
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	d907      	bls.n	8011d38 <_fwalk_sglue+0x38>
 8011d28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	d003      	beq.n	8011d38 <_fwalk_sglue+0x38>
 8011d30:	4629      	mov	r1, r5
 8011d32:	4638      	mov	r0, r7
 8011d34:	47c0      	blx	r8
 8011d36:	4306      	orrs	r6, r0
 8011d38:	3568      	adds	r5, #104	@ 0x68
 8011d3a:	e7e9      	b.n	8011d10 <_fwalk_sglue+0x10>

08011d3c <__sread>:
 8011d3c:	b510      	push	{r4, lr}
 8011d3e:	460c      	mov	r4, r1
 8011d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d44:	f000 f86c 	bl	8011e20 <_read_r>
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	bfab      	itete	ge
 8011d4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8011d50:	181b      	addge	r3, r3, r0
 8011d52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011d56:	bfac      	ite	ge
 8011d58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011d5a:	81a3      	strhlt	r3, [r4, #12]
 8011d5c:	bd10      	pop	{r4, pc}

08011d5e <__swrite>:
 8011d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d62:	461f      	mov	r7, r3
 8011d64:	898b      	ldrh	r3, [r1, #12]
 8011d66:	05db      	lsls	r3, r3, #23
 8011d68:	4605      	mov	r5, r0
 8011d6a:	460c      	mov	r4, r1
 8011d6c:	4616      	mov	r6, r2
 8011d6e:	d505      	bpl.n	8011d7c <__swrite+0x1e>
 8011d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d74:	2302      	movs	r3, #2
 8011d76:	2200      	movs	r2, #0
 8011d78:	f000 f840 	bl	8011dfc <_lseek_r>
 8011d7c:	89a3      	ldrh	r3, [r4, #12]
 8011d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011d86:	81a3      	strh	r3, [r4, #12]
 8011d88:	4632      	mov	r2, r6
 8011d8a:	463b      	mov	r3, r7
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d92:	f000 b857 	b.w	8011e44 <_write_r>

08011d96 <__sseek>:
 8011d96:	b510      	push	{r4, lr}
 8011d98:	460c      	mov	r4, r1
 8011d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d9e:	f000 f82d 	bl	8011dfc <_lseek_r>
 8011da2:	1c43      	adds	r3, r0, #1
 8011da4:	89a3      	ldrh	r3, [r4, #12]
 8011da6:	bf15      	itete	ne
 8011da8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011daa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011dae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011db2:	81a3      	strheq	r3, [r4, #12]
 8011db4:	bf18      	it	ne
 8011db6:	81a3      	strhne	r3, [r4, #12]
 8011db8:	bd10      	pop	{r4, pc}

08011dba <__sclose>:
 8011dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dbe:	f000 b80d 	b.w	8011ddc <_close_r>

08011dc2 <memset>:
 8011dc2:	4402      	add	r2, r0
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	d100      	bne.n	8011dcc <memset+0xa>
 8011dca:	4770      	bx	lr
 8011dcc:	f803 1b01 	strb.w	r1, [r3], #1
 8011dd0:	e7f9      	b.n	8011dc6 <memset+0x4>
	...

08011dd4 <_localeconv_r>:
 8011dd4:	4800      	ldr	r0, [pc, #0]	@ (8011dd8 <_localeconv_r+0x4>)
 8011dd6:	4770      	bx	lr
 8011dd8:	20000228 	.word	0x20000228

08011ddc <_close_r>:
 8011ddc:	b538      	push	{r3, r4, r5, lr}
 8011dde:	4d06      	ldr	r5, [pc, #24]	@ (8011df8 <_close_r+0x1c>)
 8011de0:	2300      	movs	r3, #0
 8011de2:	4604      	mov	r4, r0
 8011de4:	4608      	mov	r0, r1
 8011de6:	602b      	str	r3, [r5, #0]
 8011de8:	f7ef fd0a 	bl	8001800 <_close>
 8011dec:	1c43      	adds	r3, r0, #1
 8011dee:	d102      	bne.n	8011df6 <_close_r+0x1a>
 8011df0:	682b      	ldr	r3, [r5, #0]
 8011df2:	b103      	cbz	r3, 8011df6 <_close_r+0x1a>
 8011df4:	6023      	str	r3, [r4, #0]
 8011df6:	bd38      	pop	{r3, r4, r5, pc}
 8011df8:	20001d6c 	.word	0x20001d6c

08011dfc <_lseek_r>:
 8011dfc:	b538      	push	{r3, r4, r5, lr}
 8011dfe:	4d07      	ldr	r5, [pc, #28]	@ (8011e1c <_lseek_r+0x20>)
 8011e00:	4604      	mov	r4, r0
 8011e02:	4608      	mov	r0, r1
 8011e04:	4611      	mov	r1, r2
 8011e06:	2200      	movs	r2, #0
 8011e08:	602a      	str	r2, [r5, #0]
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	f7ef fd02 	bl	8001814 <_lseek>
 8011e10:	1c43      	adds	r3, r0, #1
 8011e12:	d102      	bne.n	8011e1a <_lseek_r+0x1e>
 8011e14:	682b      	ldr	r3, [r5, #0]
 8011e16:	b103      	cbz	r3, 8011e1a <_lseek_r+0x1e>
 8011e18:	6023      	str	r3, [r4, #0]
 8011e1a:	bd38      	pop	{r3, r4, r5, pc}
 8011e1c:	20001d6c 	.word	0x20001d6c

08011e20 <_read_r>:
 8011e20:	b538      	push	{r3, r4, r5, lr}
 8011e22:	4d07      	ldr	r5, [pc, #28]	@ (8011e40 <_read_r+0x20>)
 8011e24:	4604      	mov	r4, r0
 8011e26:	4608      	mov	r0, r1
 8011e28:	4611      	mov	r1, r2
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	602a      	str	r2, [r5, #0]
 8011e2e:	461a      	mov	r2, r3
 8011e30:	f7ef fcc8 	bl	80017c4 <_read>
 8011e34:	1c43      	adds	r3, r0, #1
 8011e36:	d102      	bne.n	8011e3e <_read_r+0x1e>
 8011e38:	682b      	ldr	r3, [r5, #0]
 8011e3a:	b103      	cbz	r3, 8011e3e <_read_r+0x1e>
 8011e3c:	6023      	str	r3, [r4, #0]
 8011e3e:	bd38      	pop	{r3, r4, r5, pc}
 8011e40:	20001d6c 	.word	0x20001d6c

08011e44 <_write_r>:
 8011e44:	b538      	push	{r3, r4, r5, lr}
 8011e46:	4d07      	ldr	r5, [pc, #28]	@ (8011e64 <_write_r+0x20>)
 8011e48:	4604      	mov	r4, r0
 8011e4a:	4608      	mov	r0, r1
 8011e4c:	4611      	mov	r1, r2
 8011e4e:	2200      	movs	r2, #0
 8011e50:	602a      	str	r2, [r5, #0]
 8011e52:	461a      	mov	r2, r3
 8011e54:	f7ef fcc6 	bl	80017e4 <_write>
 8011e58:	1c43      	adds	r3, r0, #1
 8011e5a:	d102      	bne.n	8011e62 <_write_r+0x1e>
 8011e5c:	682b      	ldr	r3, [r5, #0]
 8011e5e:	b103      	cbz	r3, 8011e62 <_write_r+0x1e>
 8011e60:	6023      	str	r3, [r4, #0]
 8011e62:	bd38      	pop	{r3, r4, r5, pc}
 8011e64:	20001d6c 	.word	0x20001d6c

08011e68 <__errno>:
 8011e68:	4b01      	ldr	r3, [pc, #4]	@ (8011e70 <__errno+0x8>)
 8011e6a:	6818      	ldr	r0, [r3, #0]
 8011e6c:	4770      	bx	lr
 8011e6e:	bf00      	nop
 8011e70:	200000e8 	.word	0x200000e8

08011e74 <__libc_init_array>:
 8011e74:	b570      	push	{r4, r5, r6, lr}
 8011e76:	4d0d      	ldr	r5, [pc, #52]	@ (8011eac <__libc_init_array+0x38>)
 8011e78:	4c0d      	ldr	r4, [pc, #52]	@ (8011eb0 <__libc_init_array+0x3c>)
 8011e7a:	1b64      	subs	r4, r4, r5
 8011e7c:	10a4      	asrs	r4, r4, #2
 8011e7e:	2600      	movs	r6, #0
 8011e80:	42a6      	cmp	r6, r4
 8011e82:	d109      	bne.n	8011e98 <__libc_init_array+0x24>
 8011e84:	4d0b      	ldr	r5, [pc, #44]	@ (8011eb4 <__libc_init_array+0x40>)
 8011e86:	4c0c      	ldr	r4, [pc, #48]	@ (8011eb8 <__libc_init_array+0x44>)
 8011e88:	f001 ff3a 	bl	8013d00 <_init>
 8011e8c:	1b64      	subs	r4, r4, r5
 8011e8e:	10a4      	asrs	r4, r4, #2
 8011e90:	2600      	movs	r6, #0
 8011e92:	42a6      	cmp	r6, r4
 8011e94:	d105      	bne.n	8011ea2 <__libc_init_array+0x2e>
 8011e96:	bd70      	pop	{r4, r5, r6, pc}
 8011e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e9c:	4798      	blx	r3
 8011e9e:	3601      	adds	r6, #1
 8011ea0:	e7ee      	b.n	8011e80 <__libc_init_array+0xc>
 8011ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ea6:	4798      	blx	r3
 8011ea8:	3601      	adds	r6, #1
 8011eaa:	e7f2      	b.n	8011e92 <__libc_init_array+0x1e>
 8011eac:	08014e30 	.word	0x08014e30
 8011eb0:	08014e30 	.word	0x08014e30
 8011eb4:	08014e30 	.word	0x08014e30
 8011eb8:	08014e34 	.word	0x08014e34

08011ebc <__retarget_lock_init_recursive>:
 8011ebc:	4770      	bx	lr

08011ebe <__retarget_lock_acquire_recursive>:
 8011ebe:	4770      	bx	lr

08011ec0 <__retarget_lock_release_recursive>:
 8011ec0:	4770      	bx	lr

08011ec2 <quorem>:
 8011ec2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec6:	6903      	ldr	r3, [r0, #16]
 8011ec8:	690c      	ldr	r4, [r1, #16]
 8011eca:	42a3      	cmp	r3, r4
 8011ecc:	4607      	mov	r7, r0
 8011ece:	db7e      	blt.n	8011fce <quorem+0x10c>
 8011ed0:	3c01      	subs	r4, #1
 8011ed2:	f101 0814 	add.w	r8, r1, #20
 8011ed6:	00a3      	lsls	r3, r4, #2
 8011ed8:	f100 0514 	add.w	r5, r0, #20
 8011edc:	9300      	str	r3, [sp, #0]
 8011ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ee2:	9301      	str	r3, [sp, #4]
 8011ee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011eec:	3301      	adds	r3, #1
 8011eee:	429a      	cmp	r2, r3
 8011ef0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011ef4:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ef8:	d32e      	bcc.n	8011f58 <quorem+0x96>
 8011efa:	f04f 0a00 	mov.w	sl, #0
 8011efe:	46c4      	mov	ip, r8
 8011f00:	46ae      	mov	lr, r5
 8011f02:	46d3      	mov	fp, sl
 8011f04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011f08:	b298      	uxth	r0, r3
 8011f0a:	fb06 a000 	mla	r0, r6, r0, sl
 8011f0e:	0c02      	lsrs	r2, r0, #16
 8011f10:	0c1b      	lsrs	r3, r3, #16
 8011f12:	fb06 2303 	mla	r3, r6, r3, r2
 8011f16:	f8de 2000 	ldr.w	r2, [lr]
 8011f1a:	b280      	uxth	r0, r0
 8011f1c:	b292      	uxth	r2, r2
 8011f1e:	1a12      	subs	r2, r2, r0
 8011f20:	445a      	add	r2, fp
 8011f22:	f8de 0000 	ldr.w	r0, [lr]
 8011f26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f2a:	b29b      	uxth	r3, r3
 8011f2c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011f30:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011f34:	b292      	uxth	r2, r2
 8011f36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011f3a:	45e1      	cmp	r9, ip
 8011f3c:	f84e 2b04 	str.w	r2, [lr], #4
 8011f40:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011f44:	d2de      	bcs.n	8011f04 <quorem+0x42>
 8011f46:	9b00      	ldr	r3, [sp, #0]
 8011f48:	58eb      	ldr	r3, [r5, r3]
 8011f4a:	b92b      	cbnz	r3, 8011f58 <quorem+0x96>
 8011f4c:	9b01      	ldr	r3, [sp, #4]
 8011f4e:	3b04      	subs	r3, #4
 8011f50:	429d      	cmp	r5, r3
 8011f52:	461a      	mov	r2, r3
 8011f54:	d32f      	bcc.n	8011fb6 <quorem+0xf4>
 8011f56:	613c      	str	r4, [r7, #16]
 8011f58:	4638      	mov	r0, r7
 8011f5a:	f001 f97f 	bl	801325c <__mcmp>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	db25      	blt.n	8011fae <quorem+0xec>
 8011f62:	4629      	mov	r1, r5
 8011f64:	2000      	movs	r0, #0
 8011f66:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f6a:	f8d1 c000 	ldr.w	ip, [r1]
 8011f6e:	fa1f fe82 	uxth.w	lr, r2
 8011f72:	fa1f f38c 	uxth.w	r3, ip
 8011f76:	eba3 030e 	sub.w	r3, r3, lr
 8011f7a:	4403      	add	r3, r0
 8011f7c:	0c12      	lsrs	r2, r2, #16
 8011f7e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011f82:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011f86:	b29b      	uxth	r3, r3
 8011f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f8c:	45c1      	cmp	r9, r8
 8011f8e:	f841 3b04 	str.w	r3, [r1], #4
 8011f92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011f96:	d2e6      	bcs.n	8011f66 <quorem+0xa4>
 8011f98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fa0:	b922      	cbnz	r2, 8011fac <quorem+0xea>
 8011fa2:	3b04      	subs	r3, #4
 8011fa4:	429d      	cmp	r5, r3
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	d30b      	bcc.n	8011fc2 <quorem+0x100>
 8011faa:	613c      	str	r4, [r7, #16]
 8011fac:	3601      	adds	r6, #1
 8011fae:	4630      	mov	r0, r6
 8011fb0:	b003      	add	sp, #12
 8011fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb6:	6812      	ldr	r2, [r2, #0]
 8011fb8:	3b04      	subs	r3, #4
 8011fba:	2a00      	cmp	r2, #0
 8011fbc:	d1cb      	bne.n	8011f56 <quorem+0x94>
 8011fbe:	3c01      	subs	r4, #1
 8011fc0:	e7c6      	b.n	8011f50 <quorem+0x8e>
 8011fc2:	6812      	ldr	r2, [r2, #0]
 8011fc4:	3b04      	subs	r3, #4
 8011fc6:	2a00      	cmp	r2, #0
 8011fc8:	d1ef      	bne.n	8011faa <quorem+0xe8>
 8011fca:	3c01      	subs	r4, #1
 8011fcc:	e7ea      	b.n	8011fa4 <quorem+0xe2>
 8011fce:	2000      	movs	r0, #0
 8011fd0:	e7ee      	b.n	8011fb0 <quorem+0xee>
 8011fd2:	0000      	movs	r0, r0
 8011fd4:	0000      	movs	r0, r0
	...

08011fd8 <_dtoa_r>:
 8011fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fdc:	69c7      	ldr	r7, [r0, #28]
 8011fde:	b097      	sub	sp, #92	@ 0x5c
 8011fe0:	4614      	mov	r4, r2
 8011fe2:	461d      	mov	r5, r3
 8011fe4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011fe8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8011fea:	4683      	mov	fp, r0
 8011fec:	b97f      	cbnz	r7, 801200e <_dtoa_r+0x36>
 8011fee:	2010      	movs	r0, #16
 8011ff0:	f000 fe04 	bl	8012bfc <malloc>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	f8cb 001c 	str.w	r0, [fp, #28]
 8011ffa:	b920      	cbnz	r0, 8012006 <_dtoa_r+0x2e>
 8011ffc:	4ba8      	ldr	r3, [pc, #672]	@ (80122a0 <_dtoa_r+0x2c8>)
 8011ffe:	21ef      	movs	r1, #239	@ 0xef
 8012000:	48a8      	ldr	r0, [pc, #672]	@ (80122a4 <_dtoa_r+0x2cc>)
 8012002:	f001 faf7 	bl	80135f4 <__assert_func>
 8012006:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801200a:	6007      	str	r7, [r0, #0]
 801200c:	60c7      	str	r7, [r0, #12]
 801200e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012012:	6819      	ldr	r1, [r3, #0]
 8012014:	b159      	cbz	r1, 801202e <_dtoa_r+0x56>
 8012016:	685a      	ldr	r2, [r3, #4]
 8012018:	604a      	str	r2, [r1, #4]
 801201a:	2301      	movs	r3, #1
 801201c:	4093      	lsls	r3, r2
 801201e:	608b      	str	r3, [r1, #8]
 8012020:	4658      	mov	r0, fp
 8012022:	f000 fee1 	bl	8012de8 <_Bfree>
 8012026:	f8db 301c 	ldr.w	r3, [fp, #28]
 801202a:	2200      	movs	r2, #0
 801202c:	601a      	str	r2, [r3, #0]
 801202e:	1e2b      	subs	r3, r5, #0
 8012030:	bfb9      	ittee	lt
 8012032:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012036:	9303      	strlt	r3, [sp, #12]
 8012038:	2300      	movge	r3, #0
 801203a:	6033      	strge	r3, [r6, #0]
 801203c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012040:	4b99      	ldr	r3, [pc, #612]	@ (80122a8 <_dtoa_r+0x2d0>)
 8012042:	bfbc      	itt	lt
 8012044:	2201      	movlt	r2, #1
 8012046:	6032      	strlt	r2, [r6, #0]
 8012048:	ea33 0308 	bics.w	r3, r3, r8
 801204c:	d112      	bne.n	8012074 <_dtoa_r+0x9c>
 801204e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012050:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012054:	6013      	str	r3, [r2, #0]
 8012056:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801205a:	4323      	orrs	r3, r4
 801205c:	f000 8551 	beq.w	8012b02 <_dtoa_r+0xb2a>
 8012060:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8012062:	f8df a248 	ldr.w	sl, [pc, #584]	@ 80122ac <_dtoa_r+0x2d4>
 8012066:	2b00      	cmp	r3, #0
 8012068:	f000 8553 	beq.w	8012b12 <_dtoa_r+0xb3a>
 801206c:	f10a 0303 	add.w	r3, sl, #3
 8012070:	f000 bd4d 	b.w	8012b0e <_dtoa_r+0xb36>
 8012074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012078:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801207c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012080:	2200      	movs	r2, #0
 8012082:	2300      	movs	r3, #0
 8012084:	f7ee fcf8 	bl	8000a78 <__aeabi_dcmpeq>
 8012088:	4607      	mov	r7, r0
 801208a:	b158      	cbz	r0, 80120a4 <_dtoa_r+0xcc>
 801208c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801208e:	2301      	movs	r3, #1
 8012090:	6013      	str	r3, [r2, #0]
 8012092:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8012094:	b113      	cbz	r3, 801209c <_dtoa_r+0xc4>
 8012096:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8012098:	4b85      	ldr	r3, [pc, #532]	@ (80122b0 <_dtoa_r+0x2d8>)
 801209a:	6013      	str	r3, [r2, #0]
 801209c:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80122b4 <_dtoa_r+0x2dc>
 80120a0:	f000 bd37 	b.w	8012b12 <_dtoa_r+0xb3a>
 80120a4:	ab14      	add	r3, sp, #80	@ 0x50
 80120a6:	9301      	str	r3, [sp, #4]
 80120a8:	ab15      	add	r3, sp, #84	@ 0x54
 80120aa:	9300      	str	r3, [sp, #0]
 80120ac:	4658      	mov	r0, fp
 80120ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80120b2:	f001 f981 	bl	80133b8 <__d2b>
 80120b6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80120ba:	4681      	mov	r9, r0
 80120bc:	2e00      	cmp	r6, #0
 80120be:	d076      	beq.n	80121ae <_dtoa_r+0x1d6>
 80120c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80120c2:	9712      	str	r7, [sp, #72]	@ 0x48
 80120c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80120cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80120d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80120d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80120d8:	4619      	mov	r1, r3
 80120da:	2200      	movs	r2, #0
 80120dc:	4b76      	ldr	r3, [pc, #472]	@ (80122b8 <_dtoa_r+0x2e0>)
 80120de:	f7ee f8ab 	bl	8000238 <__aeabi_dsub>
 80120e2:	a369      	add	r3, pc, #420	@ (adr r3, 8012288 <_dtoa_r+0x2b0>)
 80120e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e8:	f7ee fa5e 	bl	80005a8 <__aeabi_dmul>
 80120ec:	a368      	add	r3, pc, #416	@ (adr r3, 8012290 <_dtoa_r+0x2b8>)
 80120ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f2:	f7ee f8a3 	bl	800023c <__adddf3>
 80120f6:	4604      	mov	r4, r0
 80120f8:	4630      	mov	r0, r6
 80120fa:	460d      	mov	r5, r1
 80120fc:	f7ee f9ea 	bl	80004d4 <__aeabi_i2d>
 8012100:	a365      	add	r3, pc, #404	@ (adr r3, 8012298 <_dtoa_r+0x2c0>)
 8012102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012106:	f7ee fa4f 	bl	80005a8 <__aeabi_dmul>
 801210a:	4602      	mov	r2, r0
 801210c:	460b      	mov	r3, r1
 801210e:	4620      	mov	r0, r4
 8012110:	4629      	mov	r1, r5
 8012112:	f7ee f893 	bl	800023c <__adddf3>
 8012116:	4604      	mov	r4, r0
 8012118:	460d      	mov	r5, r1
 801211a:	f7ee fcf5 	bl	8000b08 <__aeabi_d2iz>
 801211e:	2200      	movs	r2, #0
 8012120:	4607      	mov	r7, r0
 8012122:	2300      	movs	r3, #0
 8012124:	4620      	mov	r0, r4
 8012126:	4629      	mov	r1, r5
 8012128:	f7ee fcb0 	bl	8000a8c <__aeabi_dcmplt>
 801212c:	b140      	cbz	r0, 8012140 <_dtoa_r+0x168>
 801212e:	4638      	mov	r0, r7
 8012130:	f7ee f9d0 	bl	80004d4 <__aeabi_i2d>
 8012134:	4622      	mov	r2, r4
 8012136:	462b      	mov	r3, r5
 8012138:	f7ee fc9e 	bl	8000a78 <__aeabi_dcmpeq>
 801213c:	b900      	cbnz	r0, 8012140 <_dtoa_r+0x168>
 801213e:	3f01      	subs	r7, #1
 8012140:	2f16      	cmp	r7, #22
 8012142:	d852      	bhi.n	80121ea <_dtoa_r+0x212>
 8012144:	4b5d      	ldr	r3, [pc, #372]	@ (80122bc <_dtoa_r+0x2e4>)
 8012146:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012152:	f7ee fc9b 	bl	8000a8c <__aeabi_dcmplt>
 8012156:	2800      	cmp	r0, #0
 8012158:	d049      	beq.n	80121ee <_dtoa_r+0x216>
 801215a:	3f01      	subs	r7, #1
 801215c:	2300      	movs	r3, #0
 801215e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012160:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012162:	1b9b      	subs	r3, r3, r6
 8012164:	1e5a      	subs	r2, r3, #1
 8012166:	bf44      	itt	mi
 8012168:	f1c3 0801 	rsbmi	r8, r3, #1
 801216c:	2300      	movmi	r3, #0
 801216e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012170:	bf54      	ite	pl
 8012172:	f04f 0800 	movpl.w	r8, #0
 8012176:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8012178:	2f00      	cmp	r7, #0
 801217a:	db3a      	blt.n	80121f2 <_dtoa_r+0x21a>
 801217c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801217e:	970e      	str	r7, [sp, #56]	@ 0x38
 8012180:	443b      	add	r3, r7
 8012182:	9309      	str	r3, [sp, #36]	@ 0x24
 8012184:	2300      	movs	r3, #0
 8012186:	930a      	str	r3, [sp, #40]	@ 0x28
 8012188:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801218a:	2b09      	cmp	r3, #9
 801218c:	d865      	bhi.n	801225a <_dtoa_r+0x282>
 801218e:	2b05      	cmp	r3, #5
 8012190:	bfc4      	itt	gt
 8012192:	3b04      	subgt	r3, #4
 8012194:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8012196:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012198:	f1a3 0302 	sub.w	r3, r3, #2
 801219c:	bfcc      	ite	gt
 801219e:	2400      	movgt	r4, #0
 80121a0:	2401      	movle	r4, #1
 80121a2:	2b03      	cmp	r3, #3
 80121a4:	d864      	bhi.n	8012270 <_dtoa_r+0x298>
 80121a6:	e8df f003 	tbb	[pc, r3]
 80121aa:	382b      	.short	0x382b
 80121ac:	5636      	.short	0x5636
 80121ae:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80121b2:	441e      	add	r6, r3
 80121b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80121b8:	2b20      	cmp	r3, #32
 80121ba:	bfc1      	itttt	gt
 80121bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80121c0:	fa08 f803 	lslgt.w	r8, r8, r3
 80121c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80121c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80121cc:	bfd6      	itet	le
 80121ce:	f1c3 0320 	rsble	r3, r3, #32
 80121d2:	ea48 0003 	orrgt.w	r0, r8, r3
 80121d6:	fa04 f003 	lslle.w	r0, r4, r3
 80121da:	f7ee f96b 	bl	80004b4 <__aeabi_ui2d>
 80121de:	2201      	movs	r2, #1
 80121e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80121e4:	3e01      	subs	r6, #1
 80121e6:	9212      	str	r2, [sp, #72]	@ 0x48
 80121e8:	e776      	b.n	80120d8 <_dtoa_r+0x100>
 80121ea:	2301      	movs	r3, #1
 80121ec:	e7b7      	b.n	801215e <_dtoa_r+0x186>
 80121ee:	900f      	str	r0, [sp, #60]	@ 0x3c
 80121f0:	e7b6      	b.n	8012160 <_dtoa_r+0x188>
 80121f2:	427b      	negs	r3, r7
 80121f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80121f6:	2300      	movs	r3, #0
 80121f8:	eba8 0807 	sub.w	r8, r8, r7
 80121fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80121fe:	e7c3      	b.n	8012188 <_dtoa_r+0x1b0>
 8012200:	2300      	movs	r3, #0
 8012202:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012204:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012206:	2b00      	cmp	r3, #0
 8012208:	dc35      	bgt.n	8012276 <_dtoa_r+0x29e>
 801220a:	2301      	movs	r3, #1
 801220c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8012210:	461a      	mov	r2, r3
 8012212:	9221      	str	r2, [sp, #132]	@ 0x84
 8012214:	e00b      	b.n	801222e <_dtoa_r+0x256>
 8012216:	2301      	movs	r3, #1
 8012218:	e7f3      	b.n	8012202 <_dtoa_r+0x22a>
 801221a:	2300      	movs	r3, #0
 801221c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801221e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012220:	18fb      	adds	r3, r7, r3
 8012222:	9308      	str	r3, [sp, #32]
 8012224:	3301      	adds	r3, #1
 8012226:	2b01      	cmp	r3, #1
 8012228:	9307      	str	r3, [sp, #28]
 801222a:	bfb8      	it	lt
 801222c:	2301      	movlt	r3, #1
 801222e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012232:	2100      	movs	r1, #0
 8012234:	2204      	movs	r2, #4
 8012236:	f102 0514 	add.w	r5, r2, #20
 801223a:	429d      	cmp	r5, r3
 801223c:	d91f      	bls.n	801227e <_dtoa_r+0x2a6>
 801223e:	6041      	str	r1, [r0, #4]
 8012240:	4658      	mov	r0, fp
 8012242:	f000 fd91 	bl	8012d68 <_Balloc>
 8012246:	4682      	mov	sl, r0
 8012248:	2800      	cmp	r0, #0
 801224a:	d13b      	bne.n	80122c4 <_dtoa_r+0x2ec>
 801224c:	4b1c      	ldr	r3, [pc, #112]	@ (80122c0 <_dtoa_r+0x2e8>)
 801224e:	4602      	mov	r2, r0
 8012250:	f240 11af 	movw	r1, #431	@ 0x1af
 8012254:	e6d4      	b.n	8012000 <_dtoa_r+0x28>
 8012256:	2301      	movs	r3, #1
 8012258:	e7e0      	b.n	801221c <_dtoa_r+0x244>
 801225a:	2401      	movs	r4, #1
 801225c:	2300      	movs	r3, #0
 801225e:	9320      	str	r3, [sp, #128]	@ 0x80
 8012260:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012262:	f04f 33ff 	mov.w	r3, #4294967295
 8012266:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801226a:	2200      	movs	r2, #0
 801226c:	2312      	movs	r3, #18
 801226e:	e7d0      	b.n	8012212 <_dtoa_r+0x23a>
 8012270:	2301      	movs	r3, #1
 8012272:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012274:	e7f5      	b.n	8012262 <_dtoa_r+0x28a>
 8012276:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012278:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801227c:	e7d7      	b.n	801222e <_dtoa_r+0x256>
 801227e:	3101      	adds	r1, #1
 8012280:	0052      	lsls	r2, r2, #1
 8012282:	e7d8      	b.n	8012236 <_dtoa_r+0x25e>
 8012284:	f3af 8000 	nop.w
 8012288:	636f4361 	.word	0x636f4361
 801228c:	3fd287a7 	.word	0x3fd287a7
 8012290:	8b60c8b3 	.word	0x8b60c8b3
 8012294:	3fc68a28 	.word	0x3fc68a28
 8012298:	509f79fb 	.word	0x509f79fb
 801229c:	3fd34413 	.word	0x3fd34413
 80122a0:	08014af4 	.word	0x08014af4
 80122a4:	08014b0b 	.word	0x08014b0b
 80122a8:	7ff00000 	.word	0x7ff00000
 80122ac:	08014af0 	.word	0x08014af0
 80122b0:	08014ac4 	.word	0x08014ac4
 80122b4:	08014ac3 	.word	0x08014ac3
 80122b8:	3ff80000 	.word	0x3ff80000
 80122bc:	08014c08 	.word	0x08014c08
 80122c0:	08014b63 	.word	0x08014b63
 80122c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80122c8:	6018      	str	r0, [r3, #0]
 80122ca:	9b07      	ldr	r3, [sp, #28]
 80122cc:	2b0e      	cmp	r3, #14
 80122ce:	f200 80a4 	bhi.w	801241a <_dtoa_r+0x442>
 80122d2:	2c00      	cmp	r4, #0
 80122d4:	f000 80a1 	beq.w	801241a <_dtoa_r+0x442>
 80122d8:	2f00      	cmp	r7, #0
 80122da:	dd33      	ble.n	8012344 <_dtoa_r+0x36c>
 80122dc:	4b86      	ldr	r3, [pc, #536]	@ (80124f8 <_dtoa_r+0x520>)
 80122de:	f007 020f 	and.w	r2, r7, #15
 80122e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80122ea:	05f8      	lsls	r0, r7, #23
 80122ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80122f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80122f4:	d516      	bpl.n	8012324 <_dtoa_r+0x34c>
 80122f6:	4b81      	ldr	r3, [pc, #516]	@ (80124fc <_dtoa_r+0x524>)
 80122f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012300:	f7ee fa7c 	bl	80007fc <__aeabi_ddiv>
 8012304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012308:	f004 040f 	and.w	r4, r4, #15
 801230c:	2603      	movs	r6, #3
 801230e:	4d7b      	ldr	r5, [pc, #492]	@ (80124fc <_dtoa_r+0x524>)
 8012310:	b954      	cbnz	r4, 8012328 <_dtoa_r+0x350>
 8012312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801231a:	f7ee fa6f 	bl	80007fc <__aeabi_ddiv>
 801231e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012322:	e028      	b.n	8012376 <_dtoa_r+0x39e>
 8012324:	2602      	movs	r6, #2
 8012326:	e7f2      	b.n	801230e <_dtoa_r+0x336>
 8012328:	07e1      	lsls	r1, r4, #31
 801232a:	d508      	bpl.n	801233e <_dtoa_r+0x366>
 801232c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012330:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012334:	f7ee f938 	bl	80005a8 <__aeabi_dmul>
 8012338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801233c:	3601      	adds	r6, #1
 801233e:	1064      	asrs	r4, r4, #1
 8012340:	3508      	adds	r5, #8
 8012342:	e7e5      	b.n	8012310 <_dtoa_r+0x338>
 8012344:	f000 80d2 	beq.w	80124ec <_dtoa_r+0x514>
 8012348:	427c      	negs	r4, r7
 801234a:	4b6b      	ldr	r3, [pc, #428]	@ (80124f8 <_dtoa_r+0x520>)
 801234c:	4d6b      	ldr	r5, [pc, #428]	@ (80124fc <_dtoa_r+0x524>)
 801234e:	f004 020f 	and.w	r2, r4, #15
 8012352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801235e:	f7ee f923 	bl	80005a8 <__aeabi_dmul>
 8012362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012366:	1124      	asrs	r4, r4, #4
 8012368:	2300      	movs	r3, #0
 801236a:	2602      	movs	r6, #2
 801236c:	2c00      	cmp	r4, #0
 801236e:	f040 80b2 	bne.w	80124d6 <_dtoa_r+0x4fe>
 8012372:	2b00      	cmp	r3, #0
 8012374:	d1d3      	bne.n	801231e <_dtoa_r+0x346>
 8012376:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012378:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801237c:	2b00      	cmp	r3, #0
 801237e:	f000 80b7 	beq.w	80124f0 <_dtoa_r+0x518>
 8012382:	4b5f      	ldr	r3, [pc, #380]	@ (8012500 <_dtoa_r+0x528>)
 8012384:	2200      	movs	r2, #0
 8012386:	4620      	mov	r0, r4
 8012388:	4629      	mov	r1, r5
 801238a:	f7ee fb7f 	bl	8000a8c <__aeabi_dcmplt>
 801238e:	2800      	cmp	r0, #0
 8012390:	f000 80ae 	beq.w	80124f0 <_dtoa_r+0x518>
 8012394:	9b07      	ldr	r3, [sp, #28]
 8012396:	2b00      	cmp	r3, #0
 8012398:	f000 80aa 	beq.w	80124f0 <_dtoa_r+0x518>
 801239c:	9b08      	ldr	r3, [sp, #32]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	dd37      	ble.n	8012412 <_dtoa_r+0x43a>
 80123a2:	1e7b      	subs	r3, r7, #1
 80123a4:	9304      	str	r3, [sp, #16]
 80123a6:	4620      	mov	r0, r4
 80123a8:	4b56      	ldr	r3, [pc, #344]	@ (8012504 <_dtoa_r+0x52c>)
 80123aa:	2200      	movs	r2, #0
 80123ac:	4629      	mov	r1, r5
 80123ae:	f7ee f8fb 	bl	80005a8 <__aeabi_dmul>
 80123b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123b6:	9c08      	ldr	r4, [sp, #32]
 80123b8:	3601      	adds	r6, #1
 80123ba:	4630      	mov	r0, r6
 80123bc:	f7ee f88a 	bl	80004d4 <__aeabi_i2d>
 80123c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123c4:	f7ee f8f0 	bl	80005a8 <__aeabi_dmul>
 80123c8:	4b4f      	ldr	r3, [pc, #316]	@ (8012508 <_dtoa_r+0x530>)
 80123ca:	2200      	movs	r2, #0
 80123cc:	f7ed ff36 	bl	800023c <__adddf3>
 80123d0:	4605      	mov	r5, r0
 80123d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80123d6:	2c00      	cmp	r4, #0
 80123d8:	f040 809a 	bne.w	8012510 <_dtoa_r+0x538>
 80123dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123e0:	4b4a      	ldr	r3, [pc, #296]	@ (801250c <_dtoa_r+0x534>)
 80123e2:	2200      	movs	r2, #0
 80123e4:	f7ed ff28 	bl	8000238 <__aeabi_dsub>
 80123e8:	4602      	mov	r2, r0
 80123ea:	460b      	mov	r3, r1
 80123ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80123f0:	462a      	mov	r2, r5
 80123f2:	4633      	mov	r3, r6
 80123f4:	f7ee fb68 	bl	8000ac8 <__aeabi_dcmpgt>
 80123f8:	2800      	cmp	r0, #0
 80123fa:	f040 828e 	bne.w	801291a <_dtoa_r+0x942>
 80123fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012402:	462a      	mov	r2, r5
 8012404:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012408:	f7ee fb40 	bl	8000a8c <__aeabi_dcmplt>
 801240c:	2800      	cmp	r0, #0
 801240e:	f040 8127 	bne.w	8012660 <_dtoa_r+0x688>
 8012412:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012416:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801241a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801241c:	2b00      	cmp	r3, #0
 801241e:	f2c0 8163 	blt.w	80126e8 <_dtoa_r+0x710>
 8012422:	2f0e      	cmp	r7, #14
 8012424:	f300 8160 	bgt.w	80126e8 <_dtoa_r+0x710>
 8012428:	4b33      	ldr	r3, [pc, #204]	@ (80124f8 <_dtoa_r+0x520>)
 801242a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801242e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012432:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8012436:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012438:	2b00      	cmp	r3, #0
 801243a:	da03      	bge.n	8012444 <_dtoa_r+0x46c>
 801243c:	9b07      	ldr	r3, [sp, #28]
 801243e:	2b00      	cmp	r3, #0
 8012440:	f340 8100 	ble.w	8012644 <_dtoa_r+0x66c>
 8012444:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012448:	4656      	mov	r6, sl
 801244a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801244e:	4620      	mov	r0, r4
 8012450:	4629      	mov	r1, r5
 8012452:	f7ee f9d3 	bl	80007fc <__aeabi_ddiv>
 8012456:	f7ee fb57 	bl	8000b08 <__aeabi_d2iz>
 801245a:	4680      	mov	r8, r0
 801245c:	f7ee f83a 	bl	80004d4 <__aeabi_i2d>
 8012460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012464:	f7ee f8a0 	bl	80005a8 <__aeabi_dmul>
 8012468:	4602      	mov	r2, r0
 801246a:	460b      	mov	r3, r1
 801246c:	4620      	mov	r0, r4
 801246e:	4629      	mov	r1, r5
 8012470:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012474:	f7ed fee0 	bl	8000238 <__aeabi_dsub>
 8012478:	f806 4b01 	strb.w	r4, [r6], #1
 801247c:	9d07      	ldr	r5, [sp, #28]
 801247e:	eba6 040a 	sub.w	r4, r6, sl
 8012482:	42a5      	cmp	r5, r4
 8012484:	4602      	mov	r2, r0
 8012486:	460b      	mov	r3, r1
 8012488:	f040 8116 	bne.w	80126b8 <_dtoa_r+0x6e0>
 801248c:	f7ed fed6 	bl	800023c <__adddf3>
 8012490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012494:	4604      	mov	r4, r0
 8012496:	460d      	mov	r5, r1
 8012498:	f7ee fb16 	bl	8000ac8 <__aeabi_dcmpgt>
 801249c:	2800      	cmp	r0, #0
 801249e:	f040 80f8 	bne.w	8012692 <_dtoa_r+0x6ba>
 80124a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124a6:	4620      	mov	r0, r4
 80124a8:	4629      	mov	r1, r5
 80124aa:	f7ee fae5 	bl	8000a78 <__aeabi_dcmpeq>
 80124ae:	b118      	cbz	r0, 80124b8 <_dtoa_r+0x4e0>
 80124b0:	f018 0f01 	tst.w	r8, #1
 80124b4:	f040 80ed 	bne.w	8012692 <_dtoa_r+0x6ba>
 80124b8:	4649      	mov	r1, r9
 80124ba:	4658      	mov	r0, fp
 80124bc:	f000 fc94 	bl	8012de8 <_Bfree>
 80124c0:	2300      	movs	r3, #0
 80124c2:	7033      	strb	r3, [r6, #0]
 80124c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80124c6:	3701      	adds	r7, #1
 80124c8:	601f      	str	r7, [r3, #0]
 80124ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	f000 8320 	beq.w	8012b12 <_dtoa_r+0xb3a>
 80124d2:	601e      	str	r6, [r3, #0]
 80124d4:	e31d      	b.n	8012b12 <_dtoa_r+0xb3a>
 80124d6:	07e2      	lsls	r2, r4, #31
 80124d8:	d505      	bpl.n	80124e6 <_dtoa_r+0x50e>
 80124da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80124de:	f7ee f863 	bl	80005a8 <__aeabi_dmul>
 80124e2:	3601      	adds	r6, #1
 80124e4:	2301      	movs	r3, #1
 80124e6:	1064      	asrs	r4, r4, #1
 80124e8:	3508      	adds	r5, #8
 80124ea:	e73f      	b.n	801236c <_dtoa_r+0x394>
 80124ec:	2602      	movs	r6, #2
 80124ee:	e742      	b.n	8012376 <_dtoa_r+0x39e>
 80124f0:	9c07      	ldr	r4, [sp, #28]
 80124f2:	9704      	str	r7, [sp, #16]
 80124f4:	e761      	b.n	80123ba <_dtoa_r+0x3e2>
 80124f6:	bf00      	nop
 80124f8:	08014c08 	.word	0x08014c08
 80124fc:	08014be0 	.word	0x08014be0
 8012500:	3ff00000 	.word	0x3ff00000
 8012504:	40240000 	.word	0x40240000
 8012508:	401c0000 	.word	0x401c0000
 801250c:	40140000 	.word	0x40140000
 8012510:	4b70      	ldr	r3, [pc, #448]	@ (80126d4 <_dtoa_r+0x6fc>)
 8012512:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012514:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012518:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801251c:	4454      	add	r4, sl
 801251e:	2900      	cmp	r1, #0
 8012520:	d045      	beq.n	80125ae <_dtoa_r+0x5d6>
 8012522:	496d      	ldr	r1, [pc, #436]	@ (80126d8 <_dtoa_r+0x700>)
 8012524:	2000      	movs	r0, #0
 8012526:	f7ee f969 	bl	80007fc <__aeabi_ddiv>
 801252a:	4633      	mov	r3, r6
 801252c:	462a      	mov	r2, r5
 801252e:	f7ed fe83 	bl	8000238 <__aeabi_dsub>
 8012532:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012536:	4656      	mov	r6, sl
 8012538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801253c:	f7ee fae4 	bl	8000b08 <__aeabi_d2iz>
 8012540:	4605      	mov	r5, r0
 8012542:	f7ed ffc7 	bl	80004d4 <__aeabi_i2d>
 8012546:	4602      	mov	r2, r0
 8012548:	460b      	mov	r3, r1
 801254a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801254e:	f7ed fe73 	bl	8000238 <__aeabi_dsub>
 8012552:	3530      	adds	r5, #48	@ 0x30
 8012554:	4602      	mov	r2, r0
 8012556:	460b      	mov	r3, r1
 8012558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801255c:	f806 5b01 	strb.w	r5, [r6], #1
 8012560:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012564:	f7ee fa92 	bl	8000a8c <__aeabi_dcmplt>
 8012568:	2800      	cmp	r0, #0
 801256a:	d163      	bne.n	8012634 <_dtoa_r+0x65c>
 801256c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012570:	495a      	ldr	r1, [pc, #360]	@ (80126dc <_dtoa_r+0x704>)
 8012572:	2000      	movs	r0, #0
 8012574:	f7ed fe60 	bl	8000238 <__aeabi_dsub>
 8012578:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801257c:	f7ee fa86 	bl	8000a8c <__aeabi_dcmplt>
 8012580:	2800      	cmp	r0, #0
 8012582:	f040 8087 	bne.w	8012694 <_dtoa_r+0x6bc>
 8012586:	42a6      	cmp	r6, r4
 8012588:	f43f af43 	beq.w	8012412 <_dtoa_r+0x43a>
 801258c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012590:	4b53      	ldr	r3, [pc, #332]	@ (80126e0 <_dtoa_r+0x708>)
 8012592:	2200      	movs	r2, #0
 8012594:	f7ee f808 	bl	80005a8 <__aeabi_dmul>
 8012598:	4b51      	ldr	r3, [pc, #324]	@ (80126e0 <_dtoa_r+0x708>)
 801259a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801259e:	2200      	movs	r2, #0
 80125a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125a4:	f7ee f800 	bl	80005a8 <__aeabi_dmul>
 80125a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125ac:	e7c4      	b.n	8012538 <_dtoa_r+0x560>
 80125ae:	4631      	mov	r1, r6
 80125b0:	4628      	mov	r0, r5
 80125b2:	f7ed fff9 	bl	80005a8 <__aeabi_dmul>
 80125b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80125ba:	9413      	str	r4, [sp, #76]	@ 0x4c
 80125bc:	4656      	mov	r6, sl
 80125be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125c2:	f7ee faa1 	bl	8000b08 <__aeabi_d2iz>
 80125c6:	4605      	mov	r5, r0
 80125c8:	f7ed ff84 	bl	80004d4 <__aeabi_i2d>
 80125cc:	4602      	mov	r2, r0
 80125ce:	460b      	mov	r3, r1
 80125d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125d4:	f7ed fe30 	bl	8000238 <__aeabi_dsub>
 80125d8:	3530      	adds	r5, #48	@ 0x30
 80125da:	f806 5b01 	strb.w	r5, [r6], #1
 80125de:	4602      	mov	r2, r0
 80125e0:	460b      	mov	r3, r1
 80125e2:	42a6      	cmp	r6, r4
 80125e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80125e8:	f04f 0200 	mov.w	r2, #0
 80125ec:	d124      	bne.n	8012638 <_dtoa_r+0x660>
 80125ee:	4b3a      	ldr	r3, [pc, #232]	@ (80126d8 <_dtoa_r+0x700>)
 80125f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80125f4:	f7ed fe22 	bl	800023c <__adddf3>
 80125f8:	4602      	mov	r2, r0
 80125fa:	460b      	mov	r3, r1
 80125fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012600:	f7ee fa62 	bl	8000ac8 <__aeabi_dcmpgt>
 8012604:	2800      	cmp	r0, #0
 8012606:	d145      	bne.n	8012694 <_dtoa_r+0x6bc>
 8012608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801260c:	4932      	ldr	r1, [pc, #200]	@ (80126d8 <_dtoa_r+0x700>)
 801260e:	2000      	movs	r0, #0
 8012610:	f7ed fe12 	bl	8000238 <__aeabi_dsub>
 8012614:	4602      	mov	r2, r0
 8012616:	460b      	mov	r3, r1
 8012618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801261c:	f7ee fa36 	bl	8000a8c <__aeabi_dcmplt>
 8012620:	2800      	cmp	r0, #0
 8012622:	f43f aef6 	beq.w	8012412 <_dtoa_r+0x43a>
 8012626:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8012628:	1e73      	subs	r3, r6, #1
 801262a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801262c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012630:	2b30      	cmp	r3, #48	@ 0x30
 8012632:	d0f8      	beq.n	8012626 <_dtoa_r+0x64e>
 8012634:	9f04      	ldr	r7, [sp, #16]
 8012636:	e73f      	b.n	80124b8 <_dtoa_r+0x4e0>
 8012638:	4b29      	ldr	r3, [pc, #164]	@ (80126e0 <_dtoa_r+0x708>)
 801263a:	f7ed ffb5 	bl	80005a8 <__aeabi_dmul>
 801263e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012642:	e7bc      	b.n	80125be <_dtoa_r+0x5e6>
 8012644:	d10c      	bne.n	8012660 <_dtoa_r+0x688>
 8012646:	4b27      	ldr	r3, [pc, #156]	@ (80126e4 <_dtoa_r+0x70c>)
 8012648:	2200      	movs	r2, #0
 801264a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801264e:	f7ed ffab 	bl	80005a8 <__aeabi_dmul>
 8012652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012656:	f7ee fa2d 	bl	8000ab4 <__aeabi_dcmpge>
 801265a:	2800      	cmp	r0, #0
 801265c:	f000 815b 	beq.w	8012916 <_dtoa_r+0x93e>
 8012660:	2400      	movs	r4, #0
 8012662:	4625      	mov	r5, r4
 8012664:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012666:	43db      	mvns	r3, r3
 8012668:	9304      	str	r3, [sp, #16]
 801266a:	4656      	mov	r6, sl
 801266c:	2700      	movs	r7, #0
 801266e:	4621      	mov	r1, r4
 8012670:	4658      	mov	r0, fp
 8012672:	f000 fbb9 	bl	8012de8 <_Bfree>
 8012676:	2d00      	cmp	r5, #0
 8012678:	d0dc      	beq.n	8012634 <_dtoa_r+0x65c>
 801267a:	b12f      	cbz	r7, 8012688 <_dtoa_r+0x6b0>
 801267c:	42af      	cmp	r7, r5
 801267e:	d003      	beq.n	8012688 <_dtoa_r+0x6b0>
 8012680:	4639      	mov	r1, r7
 8012682:	4658      	mov	r0, fp
 8012684:	f000 fbb0 	bl	8012de8 <_Bfree>
 8012688:	4629      	mov	r1, r5
 801268a:	4658      	mov	r0, fp
 801268c:	f000 fbac 	bl	8012de8 <_Bfree>
 8012690:	e7d0      	b.n	8012634 <_dtoa_r+0x65c>
 8012692:	9704      	str	r7, [sp, #16]
 8012694:	4633      	mov	r3, r6
 8012696:	461e      	mov	r6, r3
 8012698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801269c:	2a39      	cmp	r2, #57	@ 0x39
 801269e:	d107      	bne.n	80126b0 <_dtoa_r+0x6d8>
 80126a0:	459a      	cmp	sl, r3
 80126a2:	d1f8      	bne.n	8012696 <_dtoa_r+0x6be>
 80126a4:	9a04      	ldr	r2, [sp, #16]
 80126a6:	3201      	adds	r2, #1
 80126a8:	9204      	str	r2, [sp, #16]
 80126aa:	2230      	movs	r2, #48	@ 0x30
 80126ac:	f88a 2000 	strb.w	r2, [sl]
 80126b0:	781a      	ldrb	r2, [r3, #0]
 80126b2:	3201      	adds	r2, #1
 80126b4:	701a      	strb	r2, [r3, #0]
 80126b6:	e7bd      	b.n	8012634 <_dtoa_r+0x65c>
 80126b8:	4b09      	ldr	r3, [pc, #36]	@ (80126e0 <_dtoa_r+0x708>)
 80126ba:	2200      	movs	r2, #0
 80126bc:	f7ed ff74 	bl	80005a8 <__aeabi_dmul>
 80126c0:	2200      	movs	r2, #0
 80126c2:	2300      	movs	r3, #0
 80126c4:	4604      	mov	r4, r0
 80126c6:	460d      	mov	r5, r1
 80126c8:	f7ee f9d6 	bl	8000a78 <__aeabi_dcmpeq>
 80126cc:	2800      	cmp	r0, #0
 80126ce:	f43f aebc 	beq.w	801244a <_dtoa_r+0x472>
 80126d2:	e6f1      	b.n	80124b8 <_dtoa_r+0x4e0>
 80126d4:	08014c08 	.word	0x08014c08
 80126d8:	3fe00000 	.word	0x3fe00000
 80126dc:	3ff00000 	.word	0x3ff00000
 80126e0:	40240000 	.word	0x40240000
 80126e4:	40140000 	.word	0x40140000
 80126e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80126ea:	2a00      	cmp	r2, #0
 80126ec:	f000 80db 	beq.w	80128a6 <_dtoa_r+0x8ce>
 80126f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80126f2:	2a01      	cmp	r2, #1
 80126f4:	f300 80bf 	bgt.w	8012876 <_dtoa_r+0x89e>
 80126f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80126fa:	2a00      	cmp	r2, #0
 80126fc:	f000 80b7 	beq.w	801286e <_dtoa_r+0x896>
 8012700:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012704:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012706:	4646      	mov	r6, r8
 8012708:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801270a:	2101      	movs	r1, #1
 801270c:	441a      	add	r2, r3
 801270e:	4658      	mov	r0, fp
 8012710:	4498      	add	r8, r3
 8012712:	9209      	str	r2, [sp, #36]	@ 0x24
 8012714:	f000 fc1c 	bl	8012f50 <__i2b>
 8012718:	4605      	mov	r5, r0
 801271a:	b15e      	cbz	r6, 8012734 <_dtoa_r+0x75c>
 801271c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801271e:	2b00      	cmp	r3, #0
 8012720:	dd08      	ble.n	8012734 <_dtoa_r+0x75c>
 8012722:	42b3      	cmp	r3, r6
 8012724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012726:	bfa8      	it	ge
 8012728:	4633      	movge	r3, r6
 801272a:	eba8 0803 	sub.w	r8, r8, r3
 801272e:	1af6      	subs	r6, r6, r3
 8012730:	1ad3      	subs	r3, r2, r3
 8012732:	9309      	str	r3, [sp, #36]	@ 0x24
 8012734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012736:	b1f3      	cbz	r3, 8012776 <_dtoa_r+0x79e>
 8012738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801273a:	2b00      	cmp	r3, #0
 801273c:	f000 80b7 	beq.w	80128ae <_dtoa_r+0x8d6>
 8012740:	b18c      	cbz	r4, 8012766 <_dtoa_r+0x78e>
 8012742:	4629      	mov	r1, r5
 8012744:	4622      	mov	r2, r4
 8012746:	4658      	mov	r0, fp
 8012748:	f000 fcc2 	bl	80130d0 <__pow5mult>
 801274c:	464a      	mov	r2, r9
 801274e:	4601      	mov	r1, r0
 8012750:	4605      	mov	r5, r0
 8012752:	4658      	mov	r0, fp
 8012754:	f000 fc12 	bl	8012f7c <__multiply>
 8012758:	4649      	mov	r1, r9
 801275a:	9004      	str	r0, [sp, #16]
 801275c:	4658      	mov	r0, fp
 801275e:	f000 fb43 	bl	8012de8 <_Bfree>
 8012762:	9b04      	ldr	r3, [sp, #16]
 8012764:	4699      	mov	r9, r3
 8012766:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012768:	1b1a      	subs	r2, r3, r4
 801276a:	d004      	beq.n	8012776 <_dtoa_r+0x79e>
 801276c:	4649      	mov	r1, r9
 801276e:	4658      	mov	r0, fp
 8012770:	f000 fcae 	bl	80130d0 <__pow5mult>
 8012774:	4681      	mov	r9, r0
 8012776:	2101      	movs	r1, #1
 8012778:	4658      	mov	r0, fp
 801277a:	f000 fbe9 	bl	8012f50 <__i2b>
 801277e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012780:	4604      	mov	r4, r0
 8012782:	2b00      	cmp	r3, #0
 8012784:	f000 81c9 	beq.w	8012b1a <_dtoa_r+0xb42>
 8012788:	461a      	mov	r2, r3
 801278a:	4601      	mov	r1, r0
 801278c:	4658      	mov	r0, fp
 801278e:	f000 fc9f 	bl	80130d0 <__pow5mult>
 8012792:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012794:	2b01      	cmp	r3, #1
 8012796:	4604      	mov	r4, r0
 8012798:	f300 808f 	bgt.w	80128ba <_dtoa_r+0x8e2>
 801279c:	9b02      	ldr	r3, [sp, #8]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	f040 8087 	bne.w	80128b2 <_dtoa_r+0x8da>
 80127a4:	9b03      	ldr	r3, [sp, #12]
 80127a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	f040 8083 	bne.w	80128b6 <_dtoa_r+0x8de>
 80127b0:	9b03      	ldr	r3, [sp, #12]
 80127b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80127b6:	0d1b      	lsrs	r3, r3, #20
 80127b8:	051b      	lsls	r3, r3, #20
 80127ba:	b12b      	cbz	r3, 80127c8 <_dtoa_r+0x7f0>
 80127bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127be:	3301      	adds	r3, #1
 80127c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80127c2:	f108 0801 	add.w	r8, r8, #1
 80127c6:	2301      	movs	r3, #1
 80127c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80127ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f000 81aa 	beq.w	8012b26 <_dtoa_r+0xb4e>
 80127d2:	6923      	ldr	r3, [r4, #16]
 80127d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80127d8:	6918      	ldr	r0, [r3, #16]
 80127da:	f000 fb6d 	bl	8012eb8 <__hi0bits>
 80127de:	f1c0 0020 	rsb	r0, r0, #32
 80127e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127e4:	4418      	add	r0, r3
 80127e6:	f010 001f 	ands.w	r0, r0, #31
 80127ea:	d071      	beq.n	80128d0 <_dtoa_r+0x8f8>
 80127ec:	f1c0 0320 	rsb	r3, r0, #32
 80127f0:	2b04      	cmp	r3, #4
 80127f2:	dd65      	ble.n	80128c0 <_dtoa_r+0x8e8>
 80127f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127f6:	f1c0 001c 	rsb	r0, r0, #28
 80127fa:	4403      	add	r3, r0
 80127fc:	4480      	add	r8, r0
 80127fe:	4406      	add	r6, r0
 8012800:	9309      	str	r3, [sp, #36]	@ 0x24
 8012802:	f1b8 0f00 	cmp.w	r8, #0
 8012806:	dd05      	ble.n	8012814 <_dtoa_r+0x83c>
 8012808:	4649      	mov	r1, r9
 801280a:	4642      	mov	r2, r8
 801280c:	4658      	mov	r0, fp
 801280e:	f000 fcb9 	bl	8013184 <__lshift>
 8012812:	4681      	mov	r9, r0
 8012814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012816:	2b00      	cmp	r3, #0
 8012818:	dd05      	ble.n	8012826 <_dtoa_r+0x84e>
 801281a:	4621      	mov	r1, r4
 801281c:	461a      	mov	r2, r3
 801281e:	4658      	mov	r0, fp
 8012820:	f000 fcb0 	bl	8013184 <__lshift>
 8012824:	4604      	mov	r4, r0
 8012826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012828:	2b00      	cmp	r3, #0
 801282a:	d053      	beq.n	80128d4 <_dtoa_r+0x8fc>
 801282c:	4621      	mov	r1, r4
 801282e:	4648      	mov	r0, r9
 8012830:	f000 fd14 	bl	801325c <__mcmp>
 8012834:	2800      	cmp	r0, #0
 8012836:	da4d      	bge.n	80128d4 <_dtoa_r+0x8fc>
 8012838:	1e7b      	subs	r3, r7, #1
 801283a:	9304      	str	r3, [sp, #16]
 801283c:	4649      	mov	r1, r9
 801283e:	2300      	movs	r3, #0
 8012840:	220a      	movs	r2, #10
 8012842:	4658      	mov	r0, fp
 8012844:	f000 faf2 	bl	8012e2c <__multadd>
 8012848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801284a:	4681      	mov	r9, r0
 801284c:	2b00      	cmp	r3, #0
 801284e:	f000 816c 	beq.w	8012b2a <_dtoa_r+0xb52>
 8012852:	2300      	movs	r3, #0
 8012854:	4629      	mov	r1, r5
 8012856:	220a      	movs	r2, #10
 8012858:	4658      	mov	r0, fp
 801285a:	f000 fae7 	bl	8012e2c <__multadd>
 801285e:	9b08      	ldr	r3, [sp, #32]
 8012860:	2b00      	cmp	r3, #0
 8012862:	4605      	mov	r5, r0
 8012864:	dc61      	bgt.n	801292a <_dtoa_r+0x952>
 8012866:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012868:	2b02      	cmp	r3, #2
 801286a:	dc3b      	bgt.n	80128e4 <_dtoa_r+0x90c>
 801286c:	e05d      	b.n	801292a <_dtoa_r+0x952>
 801286e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012870:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012874:	e746      	b.n	8012704 <_dtoa_r+0x72c>
 8012876:	9b07      	ldr	r3, [sp, #28]
 8012878:	1e5c      	subs	r4, r3, #1
 801287a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801287c:	42a3      	cmp	r3, r4
 801287e:	bfbf      	itttt	lt
 8012880:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012882:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8012884:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012886:	1ae3      	sublt	r3, r4, r3
 8012888:	bfb4      	ite	lt
 801288a:	18d2      	addlt	r2, r2, r3
 801288c:	1b1c      	subge	r4, r3, r4
 801288e:	9b07      	ldr	r3, [sp, #28]
 8012890:	bfbc      	itt	lt
 8012892:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8012894:	2400      	movlt	r4, #0
 8012896:	2b00      	cmp	r3, #0
 8012898:	bfb5      	itete	lt
 801289a:	eba8 0603 	sublt.w	r6, r8, r3
 801289e:	9b07      	ldrge	r3, [sp, #28]
 80128a0:	2300      	movlt	r3, #0
 80128a2:	4646      	movge	r6, r8
 80128a4:	e730      	b.n	8012708 <_dtoa_r+0x730>
 80128a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80128a8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80128aa:	4646      	mov	r6, r8
 80128ac:	e735      	b.n	801271a <_dtoa_r+0x742>
 80128ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80128b0:	e75c      	b.n	801276c <_dtoa_r+0x794>
 80128b2:	2300      	movs	r3, #0
 80128b4:	e788      	b.n	80127c8 <_dtoa_r+0x7f0>
 80128b6:	9b02      	ldr	r3, [sp, #8]
 80128b8:	e786      	b.n	80127c8 <_dtoa_r+0x7f0>
 80128ba:	2300      	movs	r3, #0
 80128bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80128be:	e788      	b.n	80127d2 <_dtoa_r+0x7fa>
 80128c0:	d09f      	beq.n	8012802 <_dtoa_r+0x82a>
 80128c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128c4:	331c      	adds	r3, #28
 80128c6:	441a      	add	r2, r3
 80128c8:	4498      	add	r8, r3
 80128ca:	441e      	add	r6, r3
 80128cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80128ce:	e798      	b.n	8012802 <_dtoa_r+0x82a>
 80128d0:	4603      	mov	r3, r0
 80128d2:	e7f6      	b.n	80128c2 <_dtoa_r+0x8ea>
 80128d4:	9b07      	ldr	r3, [sp, #28]
 80128d6:	9704      	str	r7, [sp, #16]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	dc20      	bgt.n	801291e <_dtoa_r+0x946>
 80128dc:	9308      	str	r3, [sp, #32]
 80128de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80128e0:	2b02      	cmp	r3, #2
 80128e2:	dd1e      	ble.n	8012922 <_dtoa_r+0x94a>
 80128e4:	9b08      	ldr	r3, [sp, #32]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	f47f aebc 	bne.w	8012664 <_dtoa_r+0x68c>
 80128ec:	4621      	mov	r1, r4
 80128ee:	2205      	movs	r2, #5
 80128f0:	4658      	mov	r0, fp
 80128f2:	f000 fa9b 	bl	8012e2c <__multadd>
 80128f6:	4601      	mov	r1, r0
 80128f8:	4604      	mov	r4, r0
 80128fa:	4648      	mov	r0, r9
 80128fc:	f000 fcae 	bl	801325c <__mcmp>
 8012900:	2800      	cmp	r0, #0
 8012902:	f77f aeaf 	ble.w	8012664 <_dtoa_r+0x68c>
 8012906:	4656      	mov	r6, sl
 8012908:	2331      	movs	r3, #49	@ 0x31
 801290a:	f806 3b01 	strb.w	r3, [r6], #1
 801290e:	9b04      	ldr	r3, [sp, #16]
 8012910:	3301      	adds	r3, #1
 8012912:	9304      	str	r3, [sp, #16]
 8012914:	e6aa      	b.n	801266c <_dtoa_r+0x694>
 8012916:	9c07      	ldr	r4, [sp, #28]
 8012918:	9704      	str	r7, [sp, #16]
 801291a:	4625      	mov	r5, r4
 801291c:	e7f3      	b.n	8012906 <_dtoa_r+0x92e>
 801291e:	9b07      	ldr	r3, [sp, #28]
 8012920:	9308      	str	r3, [sp, #32]
 8012922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012924:	2b00      	cmp	r3, #0
 8012926:	f000 8104 	beq.w	8012b32 <_dtoa_r+0xb5a>
 801292a:	2e00      	cmp	r6, #0
 801292c:	dd05      	ble.n	801293a <_dtoa_r+0x962>
 801292e:	4629      	mov	r1, r5
 8012930:	4632      	mov	r2, r6
 8012932:	4658      	mov	r0, fp
 8012934:	f000 fc26 	bl	8013184 <__lshift>
 8012938:	4605      	mov	r5, r0
 801293a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801293c:	2b00      	cmp	r3, #0
 801293e:	d05a      	beq.n	80129f6 <_dtoa_r+0xa1e>
 8012940:	6869      	ldr	r1, [r5, #4]
 8012942:	4658      	mov	r0, fp
 8012944:	f000 fa10 	bl	8012d68 <_Balloc>
 8012948:	4606      	mov	r6, r0
 801294a:	b928      	cbnz	r0, 8012958 <_dtoa_r+0x980>
 801294c:	4b84      	ldr	r3, [pc, #528]	@ (8012b60 <_dtoa_r+0xb88>)
 801294e:	4602      	mov	r2, r0
 8012950:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012954:	f7ff bb54 	b.w	8012000 <_dtoa_r+0x28>
 8012958:	692a      	ldr	r2, [r5, #16]
 801295a:	3202      	adds	r2, #2
 801295c:	0092      	lsls	r2, r2, #2
 801295e:	f105 010c 	add.w	r1, r5, #12
 8012962:	300c      	adds	r0, #12
 8012964:	f000 fe38 	bl	80135d8 <memcpy>
 8012968:	2201      	movs	r2, #1
 801296a:	4631      	mov	r1, r6
 801296c:	4658      	mov	r0, fp
 801296e:	f000 fc09 	bl	8013184 <__lshift>
 8012972:	f10a 0301 	add.w	r3, sl, #1
 8012976:	9307      	str	r3, [sp, #28]
 8012978:	9b08      	ldr	r3, [sp, #32]
 801297a:	4453      	add	r3, sl
 801297c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801297e:	9b02      	ldr	r3, [sp, #8]
 8012980:	f003 0301 	and.w	r3, r3, #1
 8012984:	462f      	mov	r7, r5
 8012986:	930a      	str	r3, [sp, #40]	@ 0x28
 8012988:	4605      	mov	r5, r0
 801298a:	9b07      	ldr	r3, [sp, #28]
 801298c:	4621      	mov	r1, r4
 801298e:	3b01      	subs	r3, #1
 8012990:	4648      	mov	r0, r9
 8012992:	9302      	str	r3, [sp, #8]
 8012994:	f7ff fa95 	bl	8011ec2 <quorem>
 8012998:	4639      	mov	r1, r7
 801299a:	9008      	str	r0, [sp, #32]
 801299c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80129a0:	4648      	mov	r0, r9
 80129a2:	f000 fc5b 	bl	801325c <__mcmp>
 80129a6:	462a      	mov	r2, r5
 80129a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80129aa:	4621      	mov	r1, r4
 80129ac:	4658      	mov	r0, fp
 80129ae:	f000 fc71 	bl	8013294 <__mdiff>
 80129b2:	68c2      	ldr	r2, [r0, #12]
 80129b4:	4606      	mov	r6, r0
 80129b6:	bb02      	cbnz	r2, 80129fa <_dtoa_r+0xa22>
 80129b8:	4601      	mov	r1, r0
 80129ba:	4648      	mov	r0, r9
 80129bc:	f000 fc4e 	bl	801325c <__mcmp>
 80129c0:	4602      	mov	r2, r0
 80129c2:	4631      	mov	r1, r6
 80129c4:	4658      	mov	r0, fp
 80129c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80129c8:	f000 fa0e 	bl	8012de8 <_Bfree>
 80129cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80129ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80129d0:	9e07      	ldr	r6, [sp, #28]
 80129d2:	ea43 0102 	orr.w	r1, r3, r2
 80129d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80129d8:	4319      	orrs	r1, r3
 80129da:	d110      	bne.n	80129fe <_dtoa_r+0xa26>
 80129dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80129e0:	d029      	beq.n	8012a36 <_dtoa_r+0xa5e>
 80129e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	dd02      	ble.n	80129ee <_dtoa_r+0xa16>
 80129e8:	9b08      	ldr	r3, [sp, #32]
 80129ea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80129ee:	9b02      	ldr	r3, [sp, #8]
 80129f0:	f883 8000 	strb.w	r8, [r3]
 80129f4:	e63b      	b.n	801266e <_dtoa_r+0x696>
 80129f6:	4628      	mov	r0, r5
 80129f8:	e7bb      	b.n	8012972 <_dtoa_r+0x99a>
 80129fa:	2201      	movs	r2, #1
 80129fc:	e7e1      	b.n	80129c2 <_dtoa_r+0x9ea>
 80129fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	db04      	blt.n	8012a0e <_dtoa_r+0xa36>
 8012a04:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8012a06:	430b      	orrs	r3, r1
 8012a08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a0a:	430b      	orrs	r3, r1
 8012a0c:	d120      	bne.n	8012a50 <_dtoa_r+0xa78>
 8012a0e:	2a00      	cmp	r2, #0
 8012a10:	dded      	ble.n	80129ee <_dtoa_r+0xa16>
 8012a12:	4649      	mov	r1, r9
 8012a14:	2201      	movs	r2, #1
 8012a16:	4658      	mov	r0, fp
 8012a18:	f000 fbb4 	bl	8013184 <__lshift>
 8012a1c:	4621      	mov	r1, r4
 8012a1e:	4681      	mov	r9, r0
 8012a20:	f000 fc1c 	bl	801325c <__mcmp>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	dc03      	bgt.n	8012a30 <_dtoa_r+0xa58>
 8012a28:	d1e1      	bne.n	80129ee <_dtoa_r+0xa16>
 8012a2a:	f018 0f01 	tst.w	r8, #1
 8012a2e:	d0de      	beq.n	80129ee <_dtoa_r+0xa16>
 8012a30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a34:	d1d8      	bne.n	80129e8 <_dtoa_r+0xa10>
 8012a36:	9a02      	ldr	r2, [sp, #8]
 8012a38:	2339      	movs	r3, #57	@ 0x39
 8012a3a:	7013      	strb	r3, [r2, #0]
 8012a3c:	4633      	mov	r3, r6
 8012a3e:	461e      	mov	r6, r3
 8012a40:	3b01      	subs	r3, #1
 8012a42:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012a46:	2a39      	cmp	r2, #57	@ 0x39
 8012a48:	d052      	beq.n	8012af0 <_dtoa_r+0xb18>
 8012a4a:	3201      	adds	r2, #1
 8012a4c:	701a      	strb	r2, [r3, #0]
 8012a4e:	e60e      	b.n	801266e <_dtoa_r+0x696>
 8012a50:	2a00      	cmp	r2, #0
 8012a52:	dd07      	ble.n	8012a64 <_dtoa_r+0xa8c>
 8012a54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a58:	d0ed      	beq.n	8012a36 <_dtoa_r+0xa5e>
 8012a5a:	9a02      	ldr	r2, [sp, #8]
 8012a5c:	f108 0301 	add.w	r3, r8, #1
 8012a60:	7013      	strb	r3, [r2, #0]
 8012a62:	e604      	b.n	801266e <_dtoa_r+0x696>
 8012a64:	9b07      	ldr	r3, [sp, #28]
 8012a66:	9a07      	ldr	r2, [sp, #28]
 8012a68:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d028      	beq.n	8012ac4 <_dtoa_r+0xaec>
 8012a72:	4649      	mov	r1, r9
 8012a74:	2300      	movs	r3, #0
 8012a76:	220a      	movs	r2, #10
 8012a78:	4658      	mov	r0, fp
 8012a7a:	f000 f9d7 	bl	8012e2c <__multadd>
 8012a7e:	42af      	cmp	r7, r5
 8012a80:	4681      	mov	r9, r0
 8012a82:	f04f 0300 	mov.w	r3, #0
 8012a86:	f04f 020a 	mov.w	r2, #10
 8012a8a:	4639      	mov	r1, r7
 8012a8c:	4658      	mov	r0, fp
 8012a8e:	d107      	bne.n	8012aa0 <_dtoa_r+0xac8>
 8012a90:	f000 f9cc 	bl	8012e2c <__multadd>
 8012a94:	4607      	mov	r7, r0
 8012a96:	4605      	mov	r5, r0
 8012a98:	9b07      	ldr	r3, [sp, #28]
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	9307      	str	r3, [sp, #28]
 8012a9e:	e774      	b.n	801298a <_dtoa_r+0x9b2>
 8012aa0:	f000 f9c4 	bl	8012e2c <__multadd>
 8012aa4:	4629      	mov	r1, r5
 8012aa6:	4607      	mov	r7, r0
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	220a      	movs	r2, #10
 8012aac:	4658      	mov	r0, fp
 8012aae:	f000 f9bd 	bl	8012e2c <__multadd>
 8012ab2:	4605      	mov	r5, r0
 8012ab4:	e7f0      	b.n	8012a98 <_dtoa_r+0xac0>
 8012ab6:	9b08      	ldr	r3, [sp, #32]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	bfcc      	ite	gt
 8012abc:	461e      	movgt	r6, r3
 8012abe:	2601      	movle	r6, #1
 8012ac0:	4456      	add	r6, sl
 8012ac2:	2700      	movs	r7, #0
 8012ac4:	4649      	mov	r1, r9
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	4658      	mov	r0, fp
 8012aca:	f000 fb5b 	bl	8013184 <__lshift>
 8012ace:	4621      	mov	r1, r4
 8012ad0:	4681      	mov	r9, r0
 8012ad2:	f000 fbc3 	bl	801325c <__mcmp>
 8012ad6:	2800      	cmp	r0, #0
 8012ad8:	dcb0      	bgt.n	8012a3c <_dtoa_r+0xa64>
 8012ada:	d102      	bne.n	8012ae2 <_dtoa_r+0xb0a>
 8012adc:	f018 0f01 	tst.w	r8, #1
 8012ae0:	d1ac      	bne.n	8012a3c <_dtoa_r+0xa64>
 8012ae2:	4633      	mov	r3, r6
 8012ae4:	461e      	mov	r6, r3
 8012ae6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012aea:	2a30      	cmp	r2, #48	@ 0x30
 8012aec:	d0fa      	beq.n	8012ae4 <_dtoa_r+0xb0c>
 8012aee:	e5be      	b.n	801266e <_dtoa_r+0x696>
 8012af0:	459a      	cmp	sl, r3
 8012af2:	d1a4      	bne.n	8012a3e <_dtoa_r+0xa66>
 8012af4:	9b04      	ldr	r3, [sp, #16]
 8012af6:	3301      	adds	r3, #1
 8012af8:	9304      	str	r3, [sp, #16]
 8012afa:	2331      	movs	r3, #49	@ 0x31
 8012afc:	f88a 3000 	strb.w	r3, [sl]
 8012b00:	e5b5      	b.n	801266e <_dtoa_r+0x696>
 8012b02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8012b04:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012b64 <_dtoa_r+0xb8c>
 8012b08:	b11b      	cbz	r3, 8012b12 <_dtoa_r+0xb3a>
 8012b0a:	f10a 0308 	add.w	r3, sl, #8
 8012b0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8012b10:	6013      	str	r3, [r2, #0]
 8012b12:	4650      	mov	r0, sl
 8012b14:	b017      	add	sp, #92	@ 0x5c
 8012b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012b1c:	2b01      	cmp	r3, #1
 8012b1e:	f77f ae3d 	ble.w	801279c <_dtoa_r+0x7c4>
 8012b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b24:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b26:	2001      	movs	r0, #1
 8012b28:	e65b      	b.n	80127e2 <_dtoa_r+0x80a>
 8012b2a:	9b08      	ldr	r3, [sp, #32]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f77f aed6 	ble.w	80128de <_dtoa_r+0x906>
 8012b32:	4656      	mov	r6, sl
 8012b34:	4621      	mov	r1, r4
 8012b36:	4648      	mov	r0, r9
 8012b38:	f7ff f9c3 	bl	8011ec2 <quorem>
 8012b3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012b40:	f806 8b01 	strb.w	r8, [r6], #1
 8012b44:	9b08      	ldr	r3, [sp, #32]
 8012b46:	eba6 020a 	sub.w	r2, r6, sl
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	ddb3      	ble.n	8012ab6 <_dtoa_r+0xade>
 8012b4e:	4649      	mov	r1, r9
 8012b50:	2300      	movs	r3, #0
 8012b52:	220a      	movs	r2, #10
 8012b54:	4658      	mov	r0, fp
 8012b56:	f000 f969 	bl	8012e2c <__multadd>
 8012b5a:	4681      	mov	r9, r0
 8012b5c:	e7ea      	b.n	8012b34 <_dtoa_r+0xb5c>
 8012b5e:	bf00      	nop
 8012b60:	08014b63 	.word	0x08014b63
 8012b64:	08014ae7 	.word	0x08014ae7

08012b68 <_free_r>:
 8012b68:	b538      	push	{r3, r4, r5, lr}
 8012b6a:	4605      	mov	r5, r0
 8012b6c:	2900      	cmp	r1, #0
 8012b6e:	d041      	beq.n	8012bf4 <_free_r+0x8c>
 8012b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b74:	1f0c      	subs	r4, r1, #4
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	bfb8      	it	lt
 8012b7a:	18e4      	addlt	r4, r4, r3
 8012b7c:	f000 f8e8 	bl	8012d50 <__malloc_lock>
 8012b80:	4a1d      	ldr	r2, [pc, #116]	@ (8012bf8 <_free_r+0x90>)
 8012b82:	6813      	ldr	r3, [r2, #0]
 8012b84:	b933      	cbnz	r3, 8012b94 <_free_r+0x2c>
 8012b86:	6063      	str	r3, [r4, #4]
 8012b88:	6014      	str	r4, [r2, #0]
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b90:	f000 b8e4 	b.w	8012d5c <__malloc_unlock>
 8012b94:	42a3      	cmp	r3, r4
 8012b96:	d908      	bls.n	8012baa <_free_r+0x42>
 8012b98:	6820      	ldr	r0, [r4, #0]
 8012b9a:	1821      	adds	r1, r4, r0
 8012b9c:	428b      	cmp	r3, r1
 8012b9e:	bf01      	itttt	eq
 8012ba0:	6819      	ldreq	r1, [r3, #0]
 8012ba2:	685b      	ldreq	r3, [r3, #4]
 8012ba4:	1809      	addeq	r1, r1, r0
 8012ba6:	6021      	streq	r1, [r4, #0]
 8012ba8:	e7ed      	b.n	8012b86 <_free_r+0x1e>
 8012baa:	461a      	mov	r2, r3
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	b10b      	cbz	r3, 8012bb4 <_free_r+0x4c>
 8012bb0:	42a3      	cmp	r3, r4
 8012bb2:	d9fa      	bls.n	8012baa <_free_r+0x42>
 8012bb4:	6811      	ldr	r1, [r2, #0]
 8012bb6:	1850      	adds	r0, r2, r1
 8012bb8:	42a0      	cmp	r0, r4
 8012bba:	d10b      	bne.n	8012bd4 <_free_r+0x6c>
 8012bbc:	6820      	ldr	r0, [r4, #0]
 8012bbe:	4401      	add	r1, r0
 8012bc0:	1850      	adds	r0, r2, r1
 8012bc2:	4283      	cmp	r3, r0
 8012bc4:	6011      	str	r1, [r2, #0]
 8012bc6:	d1e0      	bne.n	8012b8a <_free_r+0x22>
 8012bc8:	6818      	ldr	r0, [r3, #0]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	6053      	str	r3, [r2, #4]
 8012bce:	4408      	add	r0, r1
 8012bd0:	6010      	str	r0, [r2, #0]
 8012bd2:	e7da      	b.n	8012b8a <_free_r+0x22>
 8012bd4:	d902      	bls.n	8012bdc <_free_r+0x74>
 8012bd6:	230c      	movs	r3, #12
 8012bd8:	602b      	str	r3, [r5, #0]
 8012bda:	e7d6      	b.n	8012b8a <_free_r+0x22>
 8012bdc:	6820      	ldr	r0, [r4, #0]
 8012bde:	1821      	adds	r1, r4, r0
 8012be0:	428b      	cmp	r3, r1
 8012be2:	bf04      	itt	eq
 8012be4:	6819      	ldreq	r1, [r3, #0]
 8012be6:	685b      	ldreq	r3, [r3, #4]
 8012be8:	6063      	str	r3, [r4, #4]
 8012bea:	bf04      	itt	eq
 8012bec:	1809      	addeq	r1, r1, r0
 8012bee:	6021      	streq	r1, [r4, #0]
 8012bf0:	6054      	str	r4, [r2, #4]
 8012bf2:	e7ca      	b.n	8012b8a <_free_r+0x22>
 8012bf4:	bd38      	pop	{r3, r4, r5, pc}
 8012bf6:	bf00      	nop
 8012bf8:	20001d78 	.word	0x20001d78

08012bfc <malloc>:
 8012bfc:	4b02      	ldr	r3, [pc, #8]	@ (8012c08 <malloc+0xc>)
 8012bfe:	4601      	mov	r1, r0
 8012c00:	6818      	ldr	r0, [r3, #0]
 8012c02:	f000 b825 	b.w	8012c50 <_malloc_r>
 8012c06:	bf00      	nop
 8012c08:	200000e8 	.word	0x200000e8

08012c0c <sbrk_aligned>:
 8012c0c:	b570      	push	{r4, r5, r6, lr}
 8012c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8012c4c <sbrk_aligned+0x40>)
 8012c10:	460c      	mov	r4, r1
 8012c12:	6831      	ldr	r1, [r6, #0]
 8012c14:	4605      	mov	r5, r0
 8012c16:	b911      	cbnz	r1, 8012c1e <sbrk_aligned+0x12>
 8012c18:	f000 fcce 	bl	80135b8 <_sbrk_r>
 8012c1c:	6030      	str	r0, [r6, #0]
 8012c1e:	4621      	mov	r1, r4
 8012c20:	4628      	mov	r0, r5
 8012c22:	f000 fcc9 	bl	80135b8 <_sbrk_r>
 8012c26:	1c43      	adds	r3, r0, #1
 8012c28:	d103      	bne.n	8012c32 <sbrk_aligned+0x26>
 8012c2a:	f04f 34ff 	mov.w	r4, #4294967295
 8012c2e:	4620      	mov	r0, r4
 8012c30:	bd70      	pop	{r4, r5, r6, pc}
 8012c32:	1cc4      	adds	r4, r0, #3
 8012c34:	f024 0403 	bic.w	r4, r4, #3
 8012c38:	42a0      	cmp	r0, r4
 8012c3a:	d0f8      	beq.n	8012c2e <sbrk_aligned+0x22>
 8012c3c:	1a21      	subs	r1, r4, r0
 8012c3e:	4628      	mov	r0, r5
 8012c40:	f000 fcba 	bl	80135b8 <_sbrk_r>
 8012c44:	3001      	adds	r0, #1
 8012c46:	d1f2      	bne.n	8012c2e <sbrk_aligned+0x22>
 8012c48:	e7ef      	b.n	8012c2a <sbrk_aligned+0x1e>
 8012c4a:	bf00      	nop
 8012c4c:	20001d74 	.word	0x20001d74

08012c50 <_malloc_r>:
 8012c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c54:	1ccd      	adds	r5, r1, #3
 8012c56:	f025 0503 	bic.w	r5, r5, #3
 8012c5a:	3508      	adds	r5, #8
 8012c5c:	2d0c      	cmp	r5, #12
 8012c5e:	bf38      	it	cc
 8012c60:	250c      	movcc	r5, #12
 8012c62:	2d00      	cmp	r5, #0
 8012c64:	4606      	mov	r6, r0
 8012c66:	db01      	blt.n	8012c6c <_malloc_r+0x1c>
 8012c68:	42a9      	cmp	r1, r5
 8012c6a:	d904      	bls.n	8012c76 <_malloc_r+0x26>
 8012c6c:	230c      	movs	r3, #12
 8012c6e:	6033      	str	r3, [r6, #0]
 8012c70:	2000      	movs	r0, #0
 8012c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d4c <_malloc_r+0xfc>
 8012c7a:	f000 f869 	bl	8012d50 <__malloc_lock>
 8012c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8012c82:	461c      	mov	r4, r3
 8012c84:	bb44      	cbnz	r4, 8012cd8 <_malloc_r+0x88>
 8012c86:	4629      	mov	r1, r5
 8012c88:	4630      	mov	r0, r6
 8012c8a:	f7ff ffbf 	bl	8012c0c <sbrk_aligned>
 8012c8e:	1c43      	adds	r3, r0, #1
 8012c90:	4604      	mov	r4, r0
 8012c92:	d158      	bne.n	8012d46 <_malloc_r+0xf6>
 8012c94:	f8d8 4000 	ldr.w	r4, [r8]
 8012c98:	4627      	mov	r7, r4
 8012c9a:	2f00      	cmp	r7, #0
 8012c9c:	d143      	bne.n	8012d26 <_malloc_r+0xd6>
 8012c9e:	2c00      	cmp	r4, #0
 8012ca0:	d04b      	beq.n	8012d3a <_malloc_r+0xea>
 8012ca2:	6823      	ldr	r3, [r4, #0]
 8012ca4:	4639      	mov	r1, r7
 8012ca6:	4630      	mov	r0, r6
 8012ca8:	eb04 0903 	add.w	r9, r4, r3
 8012cac:	f000 fc84 	bl	80135b8 <_sbrk_r>
 8012cb0:	4581      	cmp	r9, r0
 8012cb2:	d142      	bne.n	8012d3a <_malloc_r+0xea>
 8012cb4:	6821      	ldr	r1, [r4, #0]
 8012cb6:	1a6d      	subs	r5, r5, r1
 8012cb8:	4629      	mov	r1, r5
 8012cba:	4630      	mov	r0, r6
 8012cbc:	f7ff ffa6 	bl	8012c0c <sbrk_aligned>
 8012cc0:	3001      	adds	r0, #1
 8012cc2:	d03a      	beq.n	8012d3a <_malloc_r+0xea>
 8012cc4:	6823      	ldr	r3, [r4, #0]
 8012cc6:	442b      	add	r3, r5
 8012cc8:	6023      	str	r3, [r4, #0]
 8012cca:	f8d8 3000 	ldr.w	r3, [r8]
 8012cce:	685a      	ldr	r2, [r3, #4]
 8012cd0:	bb62      	cbnz	r2, 8012d2c <_malloc_r+0xdc>
 8012cd2:	f8c8 7000 	str.w	r7, [r8]
 8012cd6:	e00f      	b.n	8012cf8 <_malloc_r+0xa8>
 8012cd8:	6822      	ldr	r2, [r4, #0]
 8012cda:	1b52      	subs	r2, r2, r5
 8012cdc:	d420      	bmi.n	8012d20 <_malloc_r+0xd0>
 8012cde:	2a0b      	cmp	r2, #11
 8012ce0:	d917      	bls.n	8012d12 <_malloc_r+0xc2>
 8012ce2:	1961      	adds	r1, r4, r5
 8012ce4:	42a3      	cmp	r3, r4
 8012ce6:	6025      	str	r5, [r4, #0]
 8012ce8:	bf18      	it	ne
 8012cea:	6059      	strne	r1, [r3, #4]
 8012cec:	6863      	ldr	r3, [r4, #4]
 8012cee:	bf08      	it	eq
 8012cf0:	f8c8 1000 	streq.w	r1, [r8]
 8012cf4:	5162      	str	r2, [r4, r5]
 8012cf6:	604b      	str	r3, [r1, #4]
 8012cf8:	4630      	mov	r0, r6
 8012cfa:	f000 f82f 	bl	8012d5c <__malloc_unlock>
 8012cfe:	f104 000b 	add.w	r0, r4, #11
 8012d02:	1d23      	adds	r3, r4, #4
 8012d04:	f020 0007 	bic.w	r0, r0, #7
 8012d08:	1ac2      	subs	r2, r0, r3
 8012d0a:	bf1c      	itt	ne
 8012d0c:	1a1b      	subne	r3, r3, r0
 8012d0e:	50a3      	strne	r3, [r4, r2]
 8012d10:	e7af      	b.n	8012c72 <_malloc_r+0x22>
 8012d12:	6862      	ldr	r2, [r4, #4]
 8012d14:	42a3      	cmp	r3, r4
 8012d16:	bf0c      	ite	eq
 8012d18:	f8c8 2000 	streq.w	r2, [r8]
 8012d1c:	605a      	strne	r2, [r3, #4]
 8012d1e:	e7eb      	b.n	8012cf8 <_malloc_r+0xa8>
 8012d20:	4623      	mov	r3, r4
 8012d22:	6864      	ldr	r4, [r4, #4]
 8012d24:	e7ae      	b.n	8012c84 <_malloc_r+0x34>
 8012d26:	463c      	mov	r4, r7
 8012d28:	687f      	ldr	r7, [r7, #4]
 8012d2a:	e7b6      	b.n	8012c9a <_malloc_r+0x4a>
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	42a3      	cmp	r3, r4
 8012d32:	d1fb      	bne.n	8012d2c <_malloc_r+0xdc>
 8012d34:	2300      	movs	r3, #0
 8012d36:	6053      	str	r3, [r2, #4]
 8012d38:	e7de      	b.n	8012cf8 <_malloc_r+0xa8>
 8012d3a:	230c      	movs	r3, #12
 8012d3c:	6033      	str	r3, [r6, #0]
 8012d3e:	4630      	mov	r0, r6
 8012d40:	f000 f80c 	bl	8012d5c <__malloc_unlock>
 8012d44:	e794      	b.n	8012c70 <_malloc_r+0x20>
 8012d46:	6005      	str	r5, [r0, #0]
 8012d48:	e7d6      	b.n	8012cf8 <_malloc_r+0xa8>
 8012d4a:	bf00      	nop
 8012d4c:	20001d78 	.word	0x20001d78

08012d50 <__malloc_lock>:
 8012d50:	4801      	ldr	r0, [pc, #4]	@ (8012d58 <__malloc_lock+0x8>)
 8012d52:	f7ff b8b4 	b.w	8011ebe <__retarget_lock_acquire_recursive>
 8012d56:	bf00      	nop
 8012d58:	20001d70 	.word	0x20001d70

08012d5c <__malloc_unlock>:
 8012d5c:	4801      	ldr	r0, [pc, #4]	@ (8012d64 <__malloc_unlock+0x8>)
 8012d5e:	f7ff b8af 	b.w	8011ec0 <__retarget_lock_release_recursive>
 8012d62:	bf00      	nop
 8012d64:	20001d70 	.word	0x20001d70

08012d68 <_Balloc>:
 8012d68:	b570      	push	{r4, r5, r6, lr}
 8012d6a:	69c6      	ldr	r6, [r0, #28]
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	460d      	mov	r5, r1
 8012d70:	b976      	cbnz	r6, 8012d90 <_Balloc+0x28>
 8012d72:	2010      	movs	r0, #16
 8012d74:	f7ff ff42 	bl	8012bfc <malloc>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	61e0      	str	r0, [r4, #28]
 8012d7c:	b920      	cbnz	r0, 8012d88 <_Balloc+0x20>
 8012d7e:	4b18      	ldr	r3, [pc, #96]	@ (8012de0 <_Balloc+0x78>)
 8012d80:	4818      	ldr	r0, [pc, #96]	@ (8012de4 <_Balloc+0x7c>)
 8012d82:	216b      	movs	r1, #107	@ 0x6b
 8012d84:	f000 fc36 	bl	80135f4 <__assert_func>
 8012d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d8c:	6006      	str	r6, [r0, #0]
 8012d8e:	60c6      	str	r6, [r0, #12]
 8012d90:	69e6      	ldr	r6, [r4, #28]
 8012d92:	68f3      	ldr	r3, [r6, #12]
 8012d94:	b183      	cbz	r3, 8012db8 <_Balloc+0x50>
 8012d96:	69e3      	ldr	r3, [r4, #28]
 8012d98:	68db      	ldr	r3, [r3, #12]
 8012d9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d9e:	b9b8      	cbnz	r0, 8012dd0 <_Balloc+0x68>
 8012da0:	2101      	movs	r1, #1
 8012da2:	fa01 f605 	lsl.w	r6, r1, r5
 8012da6:	1d72      	adds	r2, r6, #5
 8012da8:	0092      	lsls	r2, r2, #2
 8012daa:	4620      	mov	r0, r4
 8012dac:	f000 fc40 	bl	8013630 <_calloc_r>
 8012db0:	b160      	cbz	r0, 8012dcc <_Balloc+0x64>
 8012db2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012db6:	e00e      	b.n	8012dd6 <_Balloc+0x6e>
 8012db8:	2221      	movs	r2, #33	@ 0x21
 8012dba:	2104      	movs	r1, #4
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f000 fc37 	bl	8013630 <_calloc_r>
 8012dc2:	69e3      	ldr	r3, [r4, #28]
 8012dc4:	60f0      	str	r0, [r6, #12]
 8012dc6:	68db      	ldr	r3, [r3, #12]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d1e4      	bne.n	8012d96 <_Balloc+0x2e>
 8012dcc:	2000      	movs	r0, #0
 8012dce:	bd70      	pop	{r4, r5, r6, pc}
 8012dd0:	6802      	ldr	r2, [r0, #0]
 8012dd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012ddc:	e7f7      	b.n	8012dce <_Balloc+0x66>
 8012dde:	bf00      	nop
 8012de0:	08014af4 	.word	0x08014af4
 8012de4:	08014b74 	.word	0x08014b74

08012de8 <_Bfree>:
 8012de8:	b570      	push	{r4, r5, r6, lr}
 8012dea:	69c6      	ldr	r6, [r0, #28]
 8012dec:	4605      	mov	r5, r0
 8012dee:	460c      	mov	r4, r1
 8012df0:	b976      	cbnz	r6, 8012e10 <_Bfree+0x28>
 8012df2:	2010      	movs	r0, #16
 8012df4:	f7ff ff02 	bl	8012bfc <malloc>
 8012df8:	4602      	mov	r2, r0
 8012dfa:	61e8      	str	r0, [r5, #28]
 8012dfc:	b920      	cbnz	r0, 8012e08 <_Bfree+0x20>
 8012dfe:	4b09      	ldr	r3, [pc, #36]	@ (8012e24 <_Bfree+0x3c>)
 8012e00:	4809      	ldr	r0, [pc, #36]	@ (8012e28 <_Bfree+0x40>)
 8012e02:	218f      	movs	r1, #143	@ 0x8f
 8012e04:	f000 fbf6 	bl	80135f4 <__assert_func>
 8012e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e0c:	6006      	str	r6, [r0, #0]
 8012e0e:	60c6      	str	r6, [r0, #12]
 8012e10:	b13c      	cbz	r4, 8012e22 <_Bfree+0x3a>
 8012e12:	69eb      	ldr	r3, [r5, #28]
 8012e14:	6862      	ldr	r2, [r4, #4]
 8012e16:	68db      	ldr	r3, [r3, #12]
 8012e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e1c:	6021      	str	r1, [r4, #0]
 8012e1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e22:	bd70      	pop	{r4, r5, r6, pc}
 8012e24:	08014af4 	.word	0x08014af4
 8012e28:	08014b74 	.word	0x08014b74

08012e2c <__multadd>:
 8012e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e30:	690d      	ldr	r5, [r1, #16]
 8012e32:	4607      	mov	r7, r0
 8012e34:	460c      	mov	r4, r1
 8012e36:	461e      	mov	r6, r3
 8012e38:	f101 0c14 	add.w	ip, r1, #20
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	f8dc 3000 	ldr.w	r3, [ip]
 8012e42:	b299      	uxth	r1, r3
 8012e44:	fb02 6101 	mla	r1, r2, r1, r6
 8012e48:	0c1e      	lsrs	r6, r3, #16
 8012e4a:	0c0b      	lsrs	r3, r1, #16
 8012e4c:	fb02 3306 	mla	r3, r2, r6, r3
 8012e50:	b289      	uxth	r1, r1
 8012e52:	3001      	adds	r0, #1
 8012e54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e58:	4285      	cmp	r5, r0
 8012e5a:	f84c 1b04 	str.w	r1, [ip], #4
 8012e5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e62:	dcec      	bgt.n	8012e3e <__multadd+0x12>
 8012e64:	b30e      	cbz	r6, 8012eaa <__multadd+0x7e>
 8012e66:	68a3      	ldr	r3, [r4, #8]
 8012e68:	42ab      	cmp	r3, r5
 8012e6a:	dc19      	bgt.n	8012ea0 <__multadd+0x74>
 8012e6c:	6861      	ldr	r1, [r4, #4]
 8012e6e:	4638      	mov	r0, r7
 8012e70:	3101      	adds	r1, #1
 8012e72:	f7ff ff79 	bl	8012d68 <_Balloc>
 8012e76:	4680      	mov	r8, r0
 8012e78:	b928      	cbnz	r0, 8012e86 <__multadd+0x5a>
 8012e7a:	4602      	mov	r2, r0
 8012e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8012eb0 <__multadd+0x84>)
 8012e7e:	480d      	ldr	r0, [pc, #52]	@ (8012eb4 <__multadd+0x88>)
 8012e80:	21ba      	movs	r1, #186	@ 0xba
 8012e82:	f000 fbb7 	bl	80135f4 <__assert_func>
 8012e86:	6922      	ldr	r2, [r4, #16]
 8012e88:	3202      	adds	r2, #2
 8012e8a:	f104 010c 	add.w	r1, r4, #12
 8012e8e:	0092      	lsls	r2, r2, #2
 8012e90:	300c      	adds	r0, #12
 8012e92:	f000 fba1 	bl	80135d8 <memcpy>
 8012e96:	4621      	mov	r1, r4
 8012e98:	4638      	mov	r0, r7
 8012e9a:	f7ff ffa5 	bl	8012de8 <_Bfree>
 8012e9e:	4644      	mov	r4, r8
 8012ea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012ea4:	3501      	adds	r5, #1
 8012ea6:	615e      	str	r6, [r3, #20]
 8012ea8:	6125      	str	r5, [r4, #16]
 8012eaa:	4620      	mov	r0, r4
 8012eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eb0:	08014b63 	.word	0x08014b63
 8012eb4:	08014b74 	.word	0x08014b74

08012eb8 <__hi0bits>:
 8012eb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	bf36      	itet	cc
 8012ec0:	0403      	lslcc	r3, r0, #16
 8012ec2:	2000      	movcs	r0, #0
 8012ec4:	2010      	movcc	r0, #16
 8012ec6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012eca:	bf3c      	itt	cc
 8012ecc:	021b      	lslcc	r3, r3, #8
 8012ece:	3008      	addcc	r0, #8
 8012ed0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012ed4:	bf3c      	itt	cc
 8012ed6:	011b      	lslcc	r3, r3, #4
 8012ed8:	3004      	addcc	r0, #4
 8012eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ede:	bf3c      	itt	cc
 8012ee0:	009b      	lslcc	r3, r3, #2
 8012ee2:	3002      	addcc	r0, #2
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	db05      	blt.n	8012ef4 <__hi0bits+0x3c>
 8012ee8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012eec:	f100 0001 	add.w	r0, r0, #1
 8012ef0:	bf08      	it	eq
 8012ef2:	2020      	moveq	r0, #32
 8012ef4:	4770      	bx	lr

08012ef6 <__lo0bits>:
 8012ef6:	6803      	ldr	r3, [r0, #0]
 8012ef8:	4602      	mov	r2, r0
 8012efa:	f013 0007 	ands.w	r0, r3, #7
 8012efe:	d00b      	beq.n	8012f18 <__lo0bits+0x22>
 8012f00:	07d9      	lsls	r1, r3, #31
 8012f02:	d421      	bmi.n	8012f48 <__lo0bits+0x52>
 8012f04:	0798      	lsls	r0, r3, #30
 8012f06:	bf49      	itett	mi
 8012f08:	085b      	lsrmi	r3, r3, #1
 8012f0a:	089b      	lsrpl	r3, r3, #2
 8012f0c:	2001      	movmi	r0, #1
 8012f0e:	6013      	strmi	r3, [r2, #0]
 8012f10:	bf5c      	itt	pl
 8012f12:	6013      	strpl	r3, [r2, #0]
 8012f14:	2002      	movpl	r0, #2
 8012f16:	4770      	bx	lr
 8012f18:	b299      	uxth	r1, r3
 8012f1a:	b909      	cbnz	r1, 8012f20 <__lo0bits+0x2a>
 8012f1c:	0c1b      	lsrs	r3, r3, #16
 8012f1e:	2010      	movs	r0, #16
 8012f20:	b2d9      	uxtb	r1, r3
 8012f22:	b909      	cbnz	r1, 8012f28 <__lo0bits+0x32>
 8012f24:	3008      	adds	r0, #8
 8012f26:	0a1b      	lsrs	r3, r3, #8
 8012f28:	0719      	lsls	r1, r3, #28
 8012f2a:	bf04      	itt	eq
 8012f2c:	091b      	lsreq	r3, r3, #4
 8012f2e:	3004      	addeq	r0, #4
 8012f30:	0799      	lsls	r1, r3, #30
 8012f32:	bf04      	itt	eq
 8012f34:	089b      	lsreq	r3, r3, #2
 8012f36:	3002      	addeq	r0, #2
 8012f38:	07d9      	lsls	r1, r3, #31
 8012f3a:	d403      	bmi.n	8012f44 <__lo0bits+0x4e>
 8012f3c:	085b      	lsrs	r3, r3, #1
 8012f3e:	f100 0001 	add.w	r0, r0, #1
 8012f42:	d003      	beq.n	8012f4c <__lo0bits+0x56>
 8012f44:	6013      	str	r3, [r2, #0]
 8012f46:	4770      	bx	lr
 8012f48:	2000      	movs	r0, #0
 8012f4a:	4770      	bx	lr
 8012f4c:	2020      	movs	r0, #32
 8012f4e:	4770      	bx	lr

08012f50 <__i2b>:
 8012f50:	b510      	push	{r4, lr}
 8012f52:	460c      	mov	r4, r1
 8012f54:	2101      	movs	r1, #1
 8012f56:	f7ff ff07 	bl	8012d68 <_Balloc>
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	b928      	cbnz	r0, 8012f6a <__i2b+0x1a>
 8012f5e:	4b05      	ldr	r3, [pc, #20]	@ (8012f74 <__i2b+0x24>)
 8012f60:	4805      	ldr	r0, [pc, #20]	@ (8012f78 <__i2b+0x28>)
 8012f62:	f240 1145 	movw	r1, #325	@ 0x145
 8012f66:	f000 fb45 	bl	80135f4 <__assert_func>
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	6144      	str	r4, [r0, #20]
 8012f6e:	6103      	str	r3, [r0, #16]
 8012f70:	bd10      	pop	{r4, pc}
 8012f72:	bf00      	nop
 8012f74:	08014b63 	.word	0x08014b63
 8012f78:	08014b74 	.word	0x08014b74

08012f7c <__multiply>:
 8012f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f80:	4614      	mov	r4, r2
 8012f82:	690a      	ldr	r2, [r1, #16]
 8012f84:	6923      	ldr	r3, [r4, #16]
 8012f86:	429a      	cmp	r2, r3
 8012f88:	bfa8      	it	ge
 8012f8a:	4623      	movge	r3, r4
 8012f8c:	460f      	mov	r7, r1
 8012f8e:	bfa4      	itt	ge
 8012f90:	460c      	movge	r4, r1
 8012f92:	461f      	movge	r7, r3
 8012f94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012f98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012f9c:	68a3      	ldr	r3, [r4, #8]
 8012f9e:	6861      	ldr	r1, [r4, #4]
 8012fa0:	eb0a 0609 	add.w	r6, sl, r9
 8012fa4:	42b3      	cmp	r3, r6
 8012fa6:	b085      	sub	sp, #20
 8012fa8:	bfb8      	it	lt
 8012faa:	3101      	addlt	r1, #1
 8012fac:	f7ff fedc 	bl	8012d68 <_Balloc>
 8012fb0:	b930      	cbnz	r0, 8012fc0 <__multiply+0x44>
 8012fb2:	4602      	mov	r2, r0
 8012fb4:	4b44      	ldr	r3, [pc, #272]	@ (80130c8 <__multiply+0x14c>)
 8012fb6:	4845      	ldr	r0, [pc, #276]	@ (80130cc <__multiply+0x150>)
 8012fb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012fbc:	f000 fb1a 	bl	80135f4 <__assert_func>
 8012fc0:	f100 0514 	add.w	r5, r0, #20
 8012fc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012fc8:	462b      	mov	r3, r5
 8012fca:	2200      	movs	r2, #0
 8012fcc:	4543      	cmp	r3, r8
 8012fce:	d321      	bcc.n	8013014 <__multiply+0x98>
 8012fd0:	f107 0114 	add.w	r1, r7, #20
 8012fd4:	f104 0214 	add.w	r2, r4, #20
 8012fd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012fdc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012fe0:	9302      	str	r3, [sp, #8]
 8012fe2:	1b13      	subs	r3, r2, r4
 8012fe4:	3b15      	subs	r3, #21
 8012fe6:	f023 0303 	bic.w	r3, r3, #3
 8012fea:	3304      	adds	r3, #4
 8012fec:	f104 0715 	add.w	r7, r4, #21
 8012ff0:	42ba      	cmp	r2, r7
 8012ff2:	bf38      	it	cc
 8012ff4:	2304      	movcc	r3, #4
 8012ff6:	9301      	str	r3, [sp, #4]
 8012ff8:	9b02      	ldr	r3, [sp, #8]
 8012ffa:	9103      	str	r1, [sp, #12]
 8012ffc:	428b      	cmp	r3, r1
 8012ffe:	d80c      	bhi.n	801301a <__multiply+0x9e>
 8013000:	2e00      	cmp	r6, #0
 8013002:	dd03      	ble.n	801300c <__multiply+0x90>
 8013004:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013008:	2b00      	cmp	r3, #0
 801300a:	d05a      	beq.n	80130c2 <__multiply+0x146>
 801300c:	6106      	str	r6, [r0, #16]
 801300e:	b005      	add	sp, #20
 8013010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013014:	f843 2b04 	str.w	r2, [r3], #4
 8013018:	e7d8      	b.n	8012fcc <__multiply+0x50>
 801301a:	f8b1 a000 	ldrh.w	sl, [r1]
 801301e:	f1ba 0f00 	cmp.w	sl, #0
 8013022:	d023      	beq.n	801306c <__multiply+0xf0>
 8013024:	f104 0e14 	add.w	lr, r4, #20
 8013028:	46a9      	mov	r9, r5
 801302a:	f04f 0c00 	mov.w	ip, #0
 801302e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013032:	f8d9 3000 	ldr.w	r3, [r9]
 8013036:	fa1f fb87 	uxth.w	fp, r7
 801303a:	b29b      	uxth	r3, r3
 801303c:	fb0a 330b 	mla	r3, sl, fp, r3
 8013040:	4463      	add	r3, ip
 8013042:	f8d9 c000 	ldr.w	ip, [r9]
 8013046:	0c3f      	lsrs	r7, r7, #16
 8013048:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801304c:	fb0a c707 	mla	r7, sl, r7, ip
 8013050:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013054:	b29b      	uxth	r3, r3
 8013056:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801305a:	4572      	cmp	r2, lr
 801305c:	f849 3b04 	str.w	r3, [r9], #4
 8013060:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013064:	d8e3      	bhi.n	801302e <__multiply+0xb2>
 8013066:	9b01      	ldr	r3, [sp, #4]
 8013068:	f845 c003 	str.w	ip, [r5, r3]
 801306c:	9b03      	ldr	r3, [sp, #12]
 801306e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013072:	3104      	adds	r1, #4
 8013074:	f1b9 0f00 	cmp.w	r9, #0
 8013078:	d021      	beq.n	80130be <__multiply+0x142>
 801307a:	682b      	ldr	r3, [r5, #0]
 801307c:	f104 0c14 	add.w	ip, r4, #20
 8013080:	46ae      	mov	lr, r5
 8013082:	f04f 0a00 	mov.w	sl, #0
 8013086:	f8bc b000 	ldrh.w	fp, [ip]
 801308a:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801308e:	fb09 770b 	mla	r7, r9, fp, r7
 8013092:	4457      	add	r7, sl
 8013094:	b29b      	uxth	r3, r3
 8013096:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801309a:	f84e 3b04 	str.w	r3, [lr], #4
 801309e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80130a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80130a6:	f8be 3000 	ldrh.w	r3, [lr]
 80130aa:	fb09 330a 	mla	r3, r9, sl, r3
 80130ae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80130b2:	4562      	cmp	r2, ip
 80130b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80130b8:	d8e5      	bhi.n	8013086 <__multiply+0x10a>
 80130ba:	9f01      	ldr	r7, [sp, #4]
 80130bc:	51eb      	str	r3, [r5, r7]
 80130be:	3504      	adds	r5, #4
 80130c0:	e79a      	b.n	8012ff8 <__multiply+0x7c>
 80130c2:	3e01      	subs	r6, #1
 80130c4:	e79c      	b.n	8013000 <__multiply+0x84>
 80130c6:	bf00      	nop
 80130c8:	08014b63 	.word	0x08014b63
 80130cc:	08014b74 	.word	0x08014b74

080130d0 <__pow5mult>:
 80130d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130d4:	4615      	mov	r5, r2
 80130d6:	f012 0203 	ands.w	r2, r2, #3
 80130da:	4607      	mov	r7, r0
 80130dc:	460e      	mov	r6, r1
 80130de:	d007      	beq.n	80130f0 <__pow5mult+0x20>
 80130e0:	4c25      	ldr	r4, [pc, #148]	@ (8013178 <__pow5mult+0xa8>)
 80130e2:	3a01      	subs	r2, #1
 80130e4:	2300      	movs	r3, #0
 80130e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130ea:	f7ff fe9f 	bl	8012e2c <__multadd>
 80130ee:	4606      	mov	r6, r0
 80130f0:	10ad      	asrs	r5, r5, #2
 80130f2:	d03d      	beq.n	8013170 <__pow5mult+0xa0>
 80130f4:	69fc      	ldr	r4, [r7, #28]
 80130f6:	b97c      	cbnz	r4, 8013118 <__pow5mult+0x48>
 80130f8:	2010      	movs	r0, #16
 80130fa:	f7ff fd7f 	bl	8012bfc <malloc>
 80130fe:	4602      	mov	r2, r0
 8013100:	61f8      	str	r0, [r7, #28]
 8013102:	b928      	cbnz	r0, 8013110 <__pow5mult+0x40>
 8013104:	4b1d      	ldr	r3, [pc, #116]	@ (801317c <__pow5mult+0xac>)
 8013106:	481e      	ldr	r0, [pc, #120]	@ (8013180 <__pow5mult+0xb0>)
 8013108:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801310c:	f000 fa72 	bl	80135f4 <__assert_func>
 8013110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013114:	6004      	str	r4, [r0, #0]
 8013116:	60c4      	str	r4, [r0, #12]
 8013118:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801311c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013120:	b94c      	cbnz	r4, 8013136 <__pow5mult+0x66>
 8013122:	f240 2171 	movw	r1, #625	@ 0x271
 8013126:	4638      	mov	r0, r7
 8013128:	f7ff ff12 	bl	8012f50 <__i2b>
 801312c:	2300      	movs	r3, #0
 801312e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013132:	4604      	mov	r4, r0
 8013134:	6003      	str	r3, [r0, #0]
 8013136:	f04f 0900 	mov.w	r9, #0
 801313a:	07eb      	lsls	r3, r5, #31
 801313c:	d50a      	bpl.n	8013154 <__pow5mult+0x84>
 801313e:	4631      	mov	r1, r6
 8013140:	4622      	mov	r2, r4
 8013142:	4638      	mov	r0, r7
 8013144:	f7ff ff1a 	bl	8012f7c <__multiply>
 8013148:	4631      	mov	r1, r6
 801314a:	4680      	mov	r8, r0
 801314c:	4638      	mov	r0, r7
 801314e:	f7ff fe4b 	bl	8012de8 <_Bfree>
 8013152:	4646      	mov	r6, r8
 8013154:	106d      	asrs	r5, r5, #1
 8013156:	d00b      	beq.n	8013170 <__pow5mult+0xa0>
 8013158:	6820      	ldr	r0, [r4, #0]
 801315a:	b938      	cbnz	r0, 801316c <__pow5mult+0x9c>
 801315c:	4622      	mov	r2, r4
 801315e:	4621      	mov	r1, r4
 8013160:	4638      	mov	r0, r7
 8013162:	f7ff ff0b 	bl	8012f7c <__multiply>
 8013166:	6020      	str	r0, [r4, #0]
 8013168:	f8c0 9000 	str.w	r9, [r0]
 801316c:	4604      	mov	r4, r0
 801316e:	e7e4      	b.n	801313a <__pow5mult+0x6a>
 8013170:	4630      	mov	r0, r6
 8013172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013176:	bf00      	nop
 8013178:	08014bd0 	.word	0x08014bd0
 801317c:	08014af4 	.word	0x08014af4
 8013180:	08014b74 	.word	0x08014b74

08013184 <__lshift>:
 8013184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013188:	460c      	mov	r4, r1
 801318a:	6849      	ldr	r1, [r1, #4]
 801318c:	6923      	ldr	r3, [r4, #16]
 801318e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013192:	68a3      	ldr	r3, [r4, #8]
 8013194:	4607      	mov	r7, r0
 8013196:	4691      	mov	r9, r2
 8013198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801319c:	f108 0601 	add.w	r6, r8, #1
 80131a0:	42b3      	cmp	r3, r6
 80131a2:	db0b      	blt.n	80131bc <__lshift+0x38>
 80131a4:	4638      	mov	r0, r7
 80131a6:	f7ff fddf 	bl	8012d68 <_Balloc>
 80131aa:	4605      	mov	r5, r0
 80131ac:	b948      	cbnz	r0, 80131c2 <__lshift+0x3e>
 80131ae:	4602      	mov	r2, r0
 80131b0:	4b28      	ldr	r3, [pc, #160]	@ (8013254 <__lshift+0xd0>)
 80131b2:	4829      	ldr	r0, [pc, #164]	@ (8013258 <__lshift+0xd4>)
 80131b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80131b8:	f000 fa1c 	bl	80135f4 <__assert_func>
 80131bc:	3101      	adds	r1, #1
 80131be:	005b      	lsls	r3, r3, #1
 80131c0:	e7ee      	b.n	80131a0 <__lshift+0x1c>
 80131c2:	2300      	movs	r3, #0
 80131c4:	f100 0114 	add.w	r1, r0, #20
 80131c8:	f100 0210 	add.w	r2, r0, #16
 80131cc:	4618      	mov	r0, r3
 80131ce:	4553      	cmp	r3, sl
 80131d0:	db33      	blt.n	801323a <__lshift+0xb6>
 80131d2:	6920      	ldr	r0, [r4, #16]
 80131d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131d8:	f104 0314 	add.w	r3, r4, #20
 80131dc:	f019 091f 	ands.w	r9, r9, #31
 80131e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80131e8:	d02b      	beq.n	8013242 <__lshift+0xbe>
 80131ea:	f1c9 0e20 	rsb	lr, r9, #32
 80131ee:	468a      	mov	sl, r1
 80131f0:	2200      	movs	r2, #0
 80131f2:	6818      	ldr	r0, [r3, #0]
 80131f4:	fa00 f009 	lsl.w	r0, r0, r9
 80131f8:	4310      	orrs	r0, r2
 80131fa:	f84a 0b04 	str.w	r0, [sl], #4
 80131fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013202:	459c      	cmp	ip, r3
 8013204:	fa22 f20e 	lsr.w	r2, r2, lr
 8013208:	d8f3      	bhi.n	80131f2 <__lshift+0x6e>
 801320a:	ebac 0304 	sub.w	r3, ip, r4
 801320e:	3b15      	subs	r3, #21
 8013210:	f023 0303 	bic.w	r3, r3, #3
 8013214:	3304      	adds	r3, #4
 8013216:	f104 0015 	add.w	r0, r4, #21
 801321a:	4584      	cmp	ip, r0
 801321c:	bf38      	it	cc
 801321e:	2304      	movcc	r3, #4
 8013220:	50ca      	str	r2, [r1, r3]
 8013222:	b10a      	cbz	r2, 8013228 <__lshift+0xa4>
 8013224:	f108 0602 	add.w	r6, r8, #2
 8013228:	3e01      	subs	r6, #1
 801322a:	4638      	mov	r0, r7
 801322c:	612e      	str	r6, [r5, #16]
 801322e:	4621      	mov	r1, r4
 8013230:	f7ff fdda 	bl	8012de8 <_Bfree>
 8013234:	4628      	mov	r0, r5
 8013236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801323a:	f842 0f04 	str.w	r0, [r2, #4]!
 801323e:	3301      	adds	r3, #1
 8013240:	e7c5      	b.n	80131ce <__lshift+0x4a>
 8013242:	3904      	subs	r1, #4
 8013244:	f853 2b04 	ldr.w	r2, [r3], #4
 8013248:	f841 2f04 	str.w	r2, [r1, #4]!
 801324c:	459c      	cmp	ip, r3
 801324e:	d8f9      	bhi.n	8013244 <__lshift+0xc0>
 8013250:	e7ea      	b.n	8013228 <__lshift+0xa4>
 8013252:	bf00      	nop
 8013254:	08014b63 	.word	0x08014b63
 8013258:	08014b74 	.word	0x08014b74

0801325c <__mcmp>:
 801325c:	690a      	ldr	r2, [r1, #16]
 801325e:	4603      	mov	r3, r0
 8013260:	6900      	ldr	r0, [r0, #16]
 8013262:	1a80      	subs	r0, r0, r2
 8013264:	b530      	push	{r4, r5, lr}
 8013266:	d10e      	bne.n	8013286 <__mcmp+0x2a>
 8013268:	3314      	adds	r3, #20
 801326a:	3114      	adds	r1, #20
 801326c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013270:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013274:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013278:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801327c:	4295      	cmp	r5, r2
 801327e:	d003      	beq.n	8013288 <__mcmp+0x2c>
 8013280:	d205      	bcs.n	801328e <__mcmp+0x32>
 8013282:	f04f 30ff 	mov.w	r0, #4294967295
 8013286:	bd30      	pop	{r4, r5, pc}
 8013288:	42a3      	cmp	r3, r4
 801328a:	d3f3      	bcc.n	8013274 <__mcmp+0x18>
 801328c:	e7fb      	b.n	8013286 <__mcmp+0x2a>
 801328e:	2001      	movs	r0, #1
 8013290:	e7f9      	b.n	8013286 <__mcmp+0x2a>
	...

08013294 <__mdiff>:
 8013294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013298:	4689      	mov	r9, r1
 801329a:	4606      	mov	r6, r0
 801329c:	4611      	mov	r1, r2
 801329e:	4648      	mov	r0, r9
 80132a0:	4614      	mov	r4, r2
 80132a2:	f7ff ffdb 	bl	801325c <__mcmp>
 80132a6:	1e05      	subs	r5, r0, #0
 80132a8:	d112      	bne.n	80132d0 <__mdiff+0x3c>
 80132aa:	4629      	mov	r1, r5
 80132ac:	4630      	mov	r0, r6
 80132ae:	f7ff fd5b 	bl	8012d68 <_Balloc>
 80132b2:	4602      	mov	r2, r0
 80132b4:	b928      	cbnz	r0, 80132c2 <__mdiff+0x2e>
 80132b6:	4b3e      	ldr	r3, [pc, #248]	@ (80133b0 <__mdiff+0x11c>)
 80132b8:	f240 2137 	movw	r1, #567	@ 0x237
 80132bc:	483d      	ldr	r0, [pc, #244]	@ (80133b4 <__mdiff+0x120>)
 80132be:	f000 f999 	bl	80135f4 <__assert_func>
 80132c2:	2301      	movs	r3, #1
 80132c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132c8:	4610      	mov	r0, r2
 80132ca:	b003      	add	sp, #12
 80132cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132d0:	bfbc      	itt	lt
 80132d2:	464b      	movlt	r3, r9
 80132d4:	46a1      	movlt	r9, r4
 80132d6:	4630      	mov	r0, r6
 80132d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80132dc:	bfba      	itte	lt
 80132de:	461c      	movlt	r4, r3
 80132e0:	2501      	movlt	r5, #1
 80132e2:	2500      	movge	r5, #0
 80132e4:	f7ff fd40 	bl	8012d68 <_Balloc>
 80132e8:	4602      	mov	r2, r0
 80132ea:	b918      	cbnz	r0, 80132f4 <__mdiff+0x60>
 80132ec:	4b30      	ldr	r3, [pc, #192]	@ (80133b0 <__mdiff+0x11c>)
 80132ee:	f240 2145 	movw	r1, #581	@ 0x245
 80132f2:	e7e3      	b.n	80132bc <__mdiff+0x28>
 80132f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80132f8:	6926      	ldr	r6, [r4, #16]
 80132fa:	60c5      	str	r5, [r0, #12]
 80132fc:	f109 0310 	add.w	r3, r9, #16
 8013300:	f109 0514 	add.w	r5, r9, #20
 8013304:	f104 0e14 	add.w	lr, r4, #20
 8013308:	f100 0b14 	add.w	fp, r0, #20
 801330c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013310:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013314:	9301      	str	r3, [sp, #4]
 8013316:	46d9      	mov	r9, fp
 8013318:	f04f 0c00 	mov.w	ip, #0
 801331c:	9b01      	ldr	r3, [sp, #4]
 801331e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013322:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013326:	9301      	str	r3, [sp, #4]
 8013328:	b281      	uxth	r1, r0
 801332a:	fa1f f38a 	uxth.w	r3, sl
 801332e:	1a5b      	subs	r3, r3, r1
 8013330:	0c00      	lsrs	r0, r0, #16
 8013332:	4463      	add	r3, ip
 8013334:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013338:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801333c:	b29b      	uxth	r3, r3
 801333e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013342:	4576      	cmp	r6, lr
 8013344:	f849 3b04 	str.w	r3, [r9], #4
 8013348:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801334c:	d8e6      	bhi.n	801331c <__mdiff+0x88>
 801334e:	1b33      	subs	r3, r6, r4
 8013350:	3b15      	subs	r3, #21
 8013352:	f023 0303 	bic.w	r3, r3, #3
 8013356:	3415      	adds	r4, #21
 8013358:	3304      	adds	r3, #4
 801335a:	42a6      	cmp	r6, r4
 801335c:	bf38      	it	cc
 801335e:	2304      	movcc	r3, #4
 8013360:	441d      	add	r5, r3
 8013362:	445b      	add	r3, fp
 8013364:	461e      	mov	r6, r3
 8013366:	462c      	mov	r4, r5
 8013368:	4544      	cmp	r4, r8
 801336a:	d30e      	bcc.n	801338a <__mdiff+0xf6>
 801336c:	f108 0103 	add.w	r1, r8, #3
 8013370:	1b49      	subs	r1, r1, r5
 8013372:	f021 0103 	bic.w	r1, r1, #3
 8013376:	3d03      	subs	r5, #3
 8013378:	45a8      	cmp	r8, r5
 801337a:	bf38      	it	cc
 801337c:	2100      	movcc	r1, #0
 801337e:	440b      	add	r3, r1
 8013380:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013384:	b191      	cbz	r1, 80133ac <__mdiff+0x118>
 8013386:	6117      	str	r7, [r2, #16]
 8013388:	e79e      	b.n	80132c8 <__mdiff+0x34>
 801338a:	f854 1b04 	ldr.w	r1, [r4], #4
 801338e:	46e6      	mov	lr, ip
 8013390:	0c08      	lsrs	r0, r1, #16
 8013392:	fa1c fc81 	uxtah	ip, ip, r1
 8013396:	4471      	add	r1, lr
 8013398:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801339c:	b289      	uxth	r1, r1
 801339e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80133a2:	f846 1b04 	str.w	r1, [r6], #4
 80133a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80133aa:	e7dd      	b.n	8013368 <__mdiff+0xd4>
 80133ac:	3f01      	subs	r7, #1
 80133ae:	e7e7      	b.n	8013380 <__mdiff+0xec>
 80133b0:	08014b63 	.word	0x08014b63
 80133b4:	08014b74 	.word	0x08014b74

080133b8 <__d2b>:
 80133b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80133bc:	2101      	movs	r1, #1
 80133be:	9e08      	ldr	r6, [sp, #32]
 80133c0:	4690      	mov	r8, r2
 80133c2:	4699      	mov	r9, r3
 80133c4:	f7ff fcd0 	bl	8012d68 <_Balloc>
 80133c8:	4604      	mov	r4, r0
 80133ca:	b930      	cbnz	r0, 80133da <__d2b+0x22>
 80133cc:	4602      	mov	r2, r0
 80133ce:	4b24      	ldr	r3, [pc, #144]	@ (8013460 <__d2b+0xa8>)
 80133d0:	4824      	ldr	r0, [pc, #144]	@ (8013464 <__d2b+0xac>)
 80133d2:	f240 310f 	movw	r1, #783	@ 0x30f
 80133d6:	f000 f90d 	bl	80135f4 <__assert_func>
 80133da:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80133de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80133e2:	b10d      	cbz	r5, 80133e8 <__d2b+0x30>
 80133e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80133e8:	9301      	str	r3, [sp, #4]
 80133ea:	f1b8 0300 	subs.w	r3, r8, #0
 80133ee:	d024      	beq.n	801343a <__d2b+0x82>
 80133f0:	4668      	mov	r0, sp
 80133f2:	9300      	str	r3, [sp, #0]
 80133f4:	f7ff fd7f 	bl	8012ef6 <__lo0bits>
 80133f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80133fc:	b1d8      	cbz	r0, 8013436 <__d2b+0x7e>
 80133fe:	f1c0 0320 	rsb	r3, r0, #32
 8013402:	fa02 f303 	lsl.w	r3, r2, r3
 8013406:	430b      	orrs	r3, r1
 8013408:	40c2      	lsrs	r2, r0
 801340a:	6163      	str	r3, [r4, #20]
 801340c:	9201      	str	r2, [sp, #4]
 801340e:	9b01      	ldr	r3, [sp, #4]
 8013410:	61a3      	str	r3, [r4, #24]
 8013412:	2b00      	cmp	r3, #0
 8013414:	bf0c      	ite	eq
 8013416:	2201      	moveq	r2, #1
 8013418:	2202      	movne	r2, #2
 801341a:	6122      	str	r2, [r4, #16]
 801341c:	b1ad      	cbz	r5, 801344a <__d2b+0x92>
 801341e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013422:	4405      	add	r5, r0
 8013424:	6035      	str	r5, [r6, #0]
 8013426:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801342a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801342c:	6018      	str	r0, [r3, #0]
 801342e:	4620      	mov	r0, r4
 8013430:	b002      	add	sp, #8
 8013432:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8013436:	6161      	str	r1, [r4, #20]
 8013438:	e7e9      	b.n	801340e <__d2b+0x56>
 801343a:	a801      	add	r0, sp, #4
 801343c:	f7ff fd5b 	bl	8012ef6 <__lo0bits>
 8013440:	9b01      	ldr	r3, [sp, #4]
 8013442:	6163      	str	r3, [r4, #20]
 8013444:	3020      	adds	r0, #32
 8013446:	2201      	movs	r2, #1
 8013448:	e7e7      	b.n	801341a <__d2b+0x62>
 801344a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801344e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013452:	6030      	str	r0, [r6, #0]
 8013454:	6918      	ldr	r0, [r3, #16]
 8013456:	f7ff fd2f 	bl	8012eb8 <__hi0bits>
 801345a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801345e:	e7e4      	b.n	801342a <__d2b+0x72>
 8013460:	08014b63 	.word	0x08014b63
 8013464:	08014b74 	.word	0x08014b74

08013468 <__sflush_r>:
 8013468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801346e:	0716      	lsls	r6, r2, #28
 8013470:	4605      	mov	r5, r0
 8013472:	460c      	mov	r4, r1
 8013474:	d454      	bmi.n	8013520 <__sflush_r+0xb8>
 8013476:	684b      	ldr	r3, [r1, #4]
 8013478:	2b00      	cmp	r3, #0
 801347a:	dc02      	bgt.n	8013482 <__sflush_r+0x1a>
 801347c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801347e:	2b00      	cmp	r3, #0
 8013480:	dd48      	ble.n	8013514 <__sflush_r+0xac>
 8013482:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013484:	2e00      	cmp	r6, #0
 8013486:	d045      	beq.n	8013514 <__sflush_r+0xac>
 8013488:	2300      	movs	r3, #0
 801348a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801348e:	682f      	ldr	r7, [r5, #0]
 8013490:	6a21      	ldr	r1, [r4, #32]
 8013492:	602b      	str	r3, [r5, #0]
 8013494:	d030      	beq.n	80134f8 <__sflush_r+0x90>
 8013496:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013498:	89a3      	ldrh	r3, [r4, #12]
 801349a:	0759      	lsls	r1, r3, #29
 801349c:	d505      	bpl.n	80134aa <__sflush_r+0x42>
 801349e:	6863      	ldr	r3, [r4, #4]
 80134a0:	1ad2      	subs	r2, r2, r3
 80134a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80134a4:	b10b      	cbz	r3, 80134aa <__sflush_r+0x42>
 80134a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80134a8:	1ad2      	subs	r2, r2, r3
 80134aa:	2300      	movs	r3, #0
 80134ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80134ae:	6a21      	ldr	r1, [r4, #32]
 80134b0:	4628      	mov	r0, r5
 80134b2:	47b0      	blx	r6
 80134b4:	1c43      	adds	r3, r0, #1
 80134b6:	89a3      	ldrh	r3, [r4, #12]
 80134b8:	d106      	bne.n	80134c8 <__sflush_r+0x60>
 80134ba:	6829      	ldr	r1, [r5, #0]
 80134bc:	291d      	cmp	r1, #29
 80134be:	d82b      	bhi.n	8013518 <__sflush_r+0xb0>
 80134c0:	4a28      	ldr	r2, [pc, #160]	@ (8013564 <__sflush_r+0xfc>)
 80134c2:	410a      	asrs	r2, r1
 80134c4:	07d6      	lsls	r6, r2, #31
 80134c6:	d427      	bmi.n	8013518 <__sflush_r+0xb0>
 80134c8:	2200      	movs	r2, #0
 80134ca:	6062      	str	r2, [r4, #4]
 80134cc:	04d9      	lsls	r1, r3, #19
 80134ce:	6922      	ldr	r2, [r4, #16]
 80134d0:	6022      	str	r2, [r4, #0]
 80134d2:	d504      	bpl.n	80134de <__sflush_r+0x76>
 80134d4:	1c42      	adds	r2, r0, #1
 80134d6:	d101      	bne.n	80134dc <__sflush_r+0x74>
 80134d8:	682b      	ldr	r3, [r5, #0]
 80134da:	b903      	cbnz	r3, 80134de <__sflush_r+0x76>
 80134dc:	6560      	str	r0, [r4, #84]	@ 0x54
 80134de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80134e0:	602f      	str	r7, [r5, #0]
 80134e2:	b1b9      	cbz	r1, 8013514 <__sflush_r+0xac>
 80134e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80134e8:	4299      	cmp	r1, r3
 80134ea:	d002      	beq.n	80134f2 <__sflush_r+0x8a>
 80134ec:	4628      	mov	r0, r5
 80134ee:	f7ff fb3b 	bl	8012b68 <_free_r>
 80134f2:	2300      	movs	r3, #0
 80134f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80134f6:	e00d      	b.n	8013514 <__sflush_r+0xac>
 80134f8:	2301      	movs	r3, #1
 80134fa:	4628      	mov	r0, r5
 80134fc:	47b0      	blx	r6
 80134fe:	4602      	mov	r2, r0
 8013500:	1c50      	adds	r0, r2, #1
 8013502:	d1c9      	bne.n	8013498 <__sflush_r+0x30>
 8013504:	682b      	ldr	r3, [r5, #0]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d0c6      	beq.n	8013498 <__sflush_r+0x30>
 801350a:	2b1d      	cmp	r3, #29
 801350c:	d001      	beq.n	8013512 <__sflush_r+0xaa>
 801350e:	2b16      	cmp	r3, #22
 8013510:	d11d      	bne.n	801354e <__sflush_r+0xe6>
 8013512:	602f      	str	r7, [r5, #0]
 8013514:	2000      	movs	r0, #0
 8013516:	e021      	b.n	801355c <__sflush_r+0xf4>
 8013518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801351c:	b21b      	sxth	r3, r3
 801351e:	e01a      	b.n	8013556 <__sflush_r+0xee>
 8013520:	690f      	ldr	r7, [r1, #16]
 8013522:	2f00      	cmp	r7, #0
 8013524:	d0f6      	beq.n	8013514 <__sflush_r+0xac>
 8013526:	0793      	lsls	r3, r2, #30
 8013528:	680e      	ldr	r6, [r1, #0]
 801352a:	bf08      	it	eq
 801352c:	694b      	ldreq	r3, [r1, #20]
 801352e:	600f      	str	r7, [r1, #0]
 8013530:	bf18      	it	ne
 8013532:	2300      	movne	r3, #0
 8013534:	1bf6      	subs	r6, r6, r7
 8013536:	608b      	str	r3, [r1, #8]
 8013538:	2e00      	cmp	r6, #0
 801353a:	ddeb      	ble.n	8013514 <__sflush_r+0xac>
 801353c:	6a21      	ldr	r1, [r4, #32]
 801353e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8013542:	4633      	mov	r3, r6
 8013544:	463a      	mov	r2, r7
 8013546:	4628      	mov	r0, r5
 8013548:	47e0      	blx	ip
 801354a:	2800      	cmp	r0, #0
 801354c:	dc07      	bgt.n	801355e <__sflush_r+0xf6>
 801354e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013556:	81a3      	strh	r3, [r4, #12]
 8013558:	f04f 30ff 	mov.w	r0, #4294967295
 801355c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801355e:	4407      	add	r7, r0
 8013560:	1a36      	subs	r6, r6, r0
 8013562:	e7e9      	b.n	8013538 <__sflush_r+0xd0>
 8013564:	dfbffffe 	.word	0xdfbffffe

08013568 <_fflush_r>:
 8013568:	b538      	push	{r3, r4, r5, lr}
 801356a:	690b      	ldr	r3, [r1, #16]
 801356c:	4605      	mov	r5, r0
 801356e:	460c      	mov	r4, r1
 8013570:	b913      	cbnz	r3, 8013578 <_fflush_r+0x10>
 8013572:	2500      	movs	r5, #0
 8013574:	4628      	mov	r0, r5
 8013576:	bd38      	pop	{r3, r4, r5, pc}
 8013578:	b118      	cbz	r0, 8013582 <_fflush_r+0x1a>
 801357a:	6a03      	ldr	r3, [r0, #32]
 801357c:	b90b      	cbnz	r3, 8013582 <_fflush_r+0x1a>
 801357e:	f7fe fba7 	bl	8011cd0 <__sinit>
 8013582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d0f3      	beq.n	8013572 <_fflush_r+0xa>
 801358a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801358c:	07d0      	lsls	r0, r2, #31
 801358e:	d404      	bmi.n	801359a <_fflush_r+0x32>
 8013590:	0599      	lsls	r1, r3, #22
 8013592:	d402      	bmi.n	801359a <_fflush_r+0x32>
 8013594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013596:	f7fe fc92 	bl	8011ebe <__retarget_lock_acquire_recursive>
 801359a:	4628      	mov	r0, r5
 801359c:	4621      	mov	r1, r4
 801359e:	f7ff ff63 	bl	8013468 <__sflush_r>
 80135a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80135a4:	07da      	lsls	r2, r3, #31
 80135a6:	4605      	mov	r5, r0
 80135a8:	d4e4      	bmi.n	8013574 <_fflush_r+0xc>
 80135aa:	89a3      	ldrh	r3, [r4, #12]
 80135ac:	059b      	lsls	r3, r3, #22
 80135ae:	d4e1      	bmi.n	8013574 <_fflush_r+0xc>
 80135b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80135b2:	f7fe fc85 	bl	8011ec0 <__retarget_lock_release_recursive>
 80135b6:	e7dd      	b.n	8013574 <_fflush_r+0xc>

080135b8 <_sbrk_r>:
 80135b8:	b538      	push	{r3, r4, r5, lr}
 80135ba:	4d06      	ldr	r5, [pc, #24]	@ (80135d4 <_sbrk_r+0x1c>)
 80135bc:	2300      	movs	r3, #0
 80135be:	4604      	mov	r4, r0
 80135c0:	4608      	mov	r0, r1
 80135c2:	602b      	str	r3, [r5, #0]
 80135c4:	f7ee f928 	bl	8001818 <_sbrk>
 80135c8:	1c43      	adds	r3, r0, #1
 80135ca:	d102      	bne.n	80135d2 <_sbrk_r+0x1a>
 80135cc:	682b      	ldr	r3, [r5, #0]
 80135ce:	b103      	cbz	r3, 80135d2 <_sbrk_r+0x1a>
 80135d0:	6023      	str	r3, [r4, #0]
 80135d2:	bd38      	pop	{r3, r4, r5, pc}
 80135d4:	20001d6c 	.word	0x20001d6c

080135d8 <memcpy>:
 80135d8:	440a      	add	r2, r1
 80135da:	4291      	cmp	r1, r2
 80135dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80135e0:	d100      	bne.n	80135e4 <memcpy+0xc>
 80135e2:	4770      	bx	lr
 80135e4:	b510      	push	{r4, lr}
 80135e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80135ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80135ee:	4291      	cmp	r1, r2
 80135f0:	d1f9      	bne.n	80135e6 <memcpy+0xe>
 80135f2:	bd10      	pop	{r4, pc}

080135f4 <__assert_func>:
 80135f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80135f6:	4614      	mov	r4, r2
 80135f8:	461a      	mov	r2, r3
 80135fa:	4b09      	ldr	r3, [pc, #36]	@ (8013620 <__assert_func+0x2c>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	4605      	mov	r5, r0
 8013600:	68d8      	ldr	r0, [r3, #12]
 8013602:	b954      	cbnz	r4, 801361a <__assert_func+0x26>
 8013604:	4b07      	ldr	r3, [pc, #28]	@ (8013624 <__assert_func+0x30>)
 8013606:	461c      	mov	r4, r3
 8013608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801360c:	9100      	str	r1, [sp, #0]
 801360e:	462b      	mov	r3, r5
 8013610:	4905      	ldr	r1, [pc, #20]	@ (8013628 <__assert_func+0x34>)
 8013612:	f000 f841 	bl	8013698 <fiprintf>
 8013616:	f000 f851 	bl	80136bc <abort>
 801361a:	4b04      	ldr	r3, [pc, #16]	@ (801362c <__assert_func+0x38>)
 801361c:	e7f4      	b.n	8013608 <__assert_func+0x14>
 801361e:	bf00      	nop
 8013620:	200000e8 	.word	0x200000e8
 8013624:	08014d15 	.word	0x08014d15
 8013628:	08014ce7 	.word	0x08014ce7
 801362c:	08014cda 	.word	0x08014cda

08013630 <_calloc_r>:
 8013630:	b570      	push	{r4, r5, r6, lr}
 8013632:	fba1 5402 	umull	r5, r4, r1, r2
 8013636:	b93c      	cbnz	r4, 8013648 <_calloc_r+0x18>
 8013638:	4629      	mov	r1, r5
 801363a:	f7ff fb09 	bl	8012c50 <_malloc_r>
 801363e:	4606      	mov	r6, r0
 8013640:	b928      	cbnz	r0, 801364e <_calloc_r+0x1e>
 8013642:	2600      	movs	r6, #0
 8013644:	4630      	mov	r0, r6
 8013646:	bd70      	pop	{r4, r5, r6, pc}
 8013648:	220c      	movs	r2, #12
 801364a:	6002      	str	r2, [r0, #0]
 801364c:	e7f9      	b.n	8013642 <_calloc_r+0x12>
 801364e:	462a      	mov	r2, r5
 8013650:	4621      	mov	r1, r4
 8013652:	f7fe fbb6 	bl	8011dc2 <memset>
 8013656:	e7f5      	b.n	8013644 <_calloc_r+0x14>

08013658 <__ascii_mbtowc>:
 8013658:	b082      	sub	sp, #8
 801365a:	b901      	cbnz	r1, 801365e <__ascii_mbtowc+0x6>
 801365c:	a901      	add	r1, sp, #4
 801365e:	b142      	cbz	r2, 8013672 <__ascii_mbtowc+0x1a>
 8013660:	b14b      	cbz	r3, 8013676 <__ascii_mbtowc+0x1e>
 8013662:	7813      	ldrb	r3, [r2, #0]
 8013664:	600b      	str	r3, [r1, #0]
 8013666:	7812      	ldrb	r2, [r2, #0]
 8013668:	1e10      	subs	r0, r2, #0
 801366a:	bf18      	it	ne
 801366c:	2001      	movne	r0, #1
 801366e:	b002      	add	sp, #8
 8013670:	4770      	bx	lr
 8013672:	4610      	mov	r0, r2
 8013674:	e7fb      	b.n	801366e <__ascii_mbtowc+0x16>
 8013676:	f06f 0001 	mvn.w	r0, #1
 801367a:	e7f8      	b.n	801366e <__ascii_mbtowc+0x16>

0801367c <__ascii_wctomb>:
 801367c:	4603      	mov	r3, r0
 801367e:	4608      	mov	r0, r1
 8013680:	b141      	cbz	r1, 8013694 <__ascii_wctomb+0x18>
 8013682:	2aff      	cmp	r2, #255	@ 0xff
 8013684:	d904      	bls.n	8013690 <__ascii_wctomb+0x14>
 8013686:	228a      	movs	r2, #138	@ 0x8a
 8013688:	601a      	str	r2, [r3, #0]
 801368a:	f04f 30ff 	mov.w	r0, #4294967295
 801368e:	4770      	bx	lr
 8013690:	700a      	strb	r2, [r1, #0]
 8013692:	2001      	movs	r0, #1
 8013694:	4770      	bx	lr
	...

08013698 <fiprintf>:
 8013698:	b40e      	push	{r1, r2, r3}
 801369a:	b503      	push	{r0, r1, lr}
 801369c:	4601      	mov	r1, r0
 801369e:	ab03      	add	r3, sp, #12
 80136a0:	4805      	ldr	r0, [pc, #20]	@ (80136b8 <fiprintf+0x20>)
 80136a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80136a6:	6800      	ldr	r0, [r0, #0]
 80136a8:	9301      	str	r3, [sp, #4]
 80136aa:	f000 f835 	bl	8013718 <_vfiprintf_r>
 80136ae:	b002      	add	sp, #8
 80136b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80136b4:	b003      	add	sp, #12
 80136b6:	4770      	bx	lr
 80136b8:	200000e8 	.word	0x200000e8

080136bc <abort>:
 80136bc:	b508      	push	{r3, lr}
 80136be:	2006      	movs	r0, #6
 80136c0:	f000 f9fe 	bl	8013ac0 <raise>
 80136c4:	2001      	movs	r0, #1
 80136c6:	f7ee f877 	bl	80017b8 <_exit>

080136ca <__sfputc_r>:
 80136ca:	6893      	ldr	r3, [r2, #8]
 80136cc:	3b01      	subs	r3, #1
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	b410      	push	{r4}
 80136d2:	6093      	str	r3, [r2, #8]
 80136d4:	da07      	bge.n	80136e6 <__sfputc_r+0x1c>
 80136d6:	6994      	ldr	r4, [r2, #24]
 80136d8:	42a3      	cmp	r3, r4
 80136da:	db01      	blt.n	80136e0 <__sfputc_r+0x16>
 80136dc:	290a      	cmp	r1, #10
 80136de:	d102      	bne.n	80136e6 <__sfputc_r+0x1c>
 80136e0:	bc10      	pop	{r4}
 80136e2:	f000 b931 	b.w	8013948 <__swbuf_r>
 80136e6:	6813      	ldr	r3, [r2, #0]
 80136e8:	1c58      	adds	r0, r3, #1
 80136ea:	6010      	str	r0, [r2, #0]
 80136ec:	7019      	strb	r1, [r3, #0]
 80136ee:	4608      	mov	r0, r1
 80136f0:	bc10      	pop	{r4}
 80136f2:	4770      	bx	lr

080136f4 <__sfputs_r>:
 80136f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136f6:	4606      	mov	r6, r0
 80136f8:	460f      	mov	r7, r1
 80136fa:	4614      	mov	r4, r2
 80136fc:	18d5      	adds	r5, r2, r3
 80136fe:	42ac      	cmp	r4, r5
 8013700:	d101      	bne.n	8013706 <__sfputs_r+0x12>
 8013702:	2000      	movs	r0, #0
 8013704:	e007      	b.n	8013716 <__sfputs_r+0x22>
 8013706:	f814 1b01 	ldrb.w	r1, [r4], #1
 801370a:	463a      	mov	r2, r7
 801370c:	4630      	mov	r0, r6
 801370e:	f7ff ffdc 	bl	80136ca <__sfputc_r>
 8013712:	1c43      	adds	r3, r0, #1
 8013714:	d1f3      	bne.n	80136fe <__sfputs_r+0xa>
 8013716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013718 <_vfiprintf_r>:
 8013718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801371c:	460d      	mov	r5, r1
 801371e:	b09d      	sub	sp, #116	@ 0x74
 8013720:	4614      	mov	r4, r2
 8013722:	4698      	mov	r8, r3
 8013724:	4606      	mov	r6, r0
 8013726:	b118      	cbz	r0, 8013730 <_vfiprintf_r+0x18>
 8013728:	6a03      	ldr	r3, [r0, #32]
 801372a:	b90b      	cbnz	r3, 8013730 <_vfiprintf_r+0x18>
 801372c:	f7fe fad0 	bl	8011cd0 <__sinit>
 8013730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013732:	07d9      	lsls	r1, r3, #31
 8013734:	d405      	bmi.n	8013742 <_vfiprintf_r+0x2a>
 8013736:	89ab      	ldrh	r3, [r5, #12]
 8013738:	059a      	lsls	r2, r3, #22
 801373a:	d402      	bmi.n	8013742 <_vfiprintf_r+0x2a>
 801373c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801373e:	f7fe fbbe 	bl	8011ebe <__retarget_lock_acquire_recursive>
 8013742:	89ab      	ldrh	r3, [r5, #12]
 8013744:	071b      	lsls	r3, r3, #28
 8013746:	d501      	bpl.n	801374c <_vfiprintf_r+0x34>
 8013748:	692b      	ldr	r3, [r5, #16]
 801374a:	b99b      	cbnz	r3, 8013774 <_vfiprintf_r+0x5c>
 801374c:	4629      	mov	r1, r5
 801374e:	4630      	mov	r0, r6
 8013750:	f000 f938 	bl	80139c4 <__swsetup_r>
 8013754:	b170      	cbz	r0, 8013774 <_vfiprintf_r+0x5c>
 8013756:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013758:	07dc      	lsls	r4, r3, #31
 801375a:	d504      	bpl.n	8013766 <_vfiprintf_r+0x4e>
 801375c:	f04f 30ff 	mov.w	r0, #4294967295
 8013760:	b01d      	add	sp, #116	@ 0x74
 8013762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013766:	89ab      	ldrh	r3, [r5, #12]
 8013768:	0598      	lsls	r0, r3, #22
 801376a:	d4f7      	bmi.n	801375c <_vfiprintf_r+0x44>
 801376c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801376e:	f7fe fba7 	bl	8011ec0 <__retarget_lock_release_recursive>
 8013772:	e7f3      	b.n	801375c <_vfiprintf_r+0x44>
 8013774:	2300      	movs	r3, #0
 8013776:	9309      	str	r3, [sp, #36]	@ 0x24
 8013778:	2320      	movs	r3, #32
 801377a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801377e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013782:	2330      	movs	r3, #48	@ 0x30
 8013784:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013934 <_vfiprintf_r+0x21c>
 8013788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801378c:	f04f 0901 	mov.w	r9, #1
 8013790:	4623      	mov	r3, r4
 8013792:	469a      	mov	sl, r3
 8013794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013798:	b10a      	cbz	r2, 801379e <_vfiprintf_r+0x86>
 801379a:	2a25      	cmp	r2, #37	@ 0x25
 801379c:	d1f9      	bne.n	8013792 <_vfiprintf_r+0x7a>
 801379e:	ebba 0b04 	subs.w	fp, sl, r4
 80137a2:	d00b      	beq.n	80137bc <_vfiprintf_r+0xa4>
 80137a4:	465b      	mov	r3, fp
 80137a6:	4622      	mov	r2, r4
 80137a8:	4629      	mov	r1, r5
 80137aa:	4630      	mov	r0, r6
 80137ac:	f7ff ffa2 	bl	80136f4 <__sfputs_r>
 80137b0:	3001      	adds	r0, #1
 80137b2:	f000 80a7 	beq.w	8013904 <_vfiprintf_r+0x1ec>
 80137b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80137b8:	445a      	add	r2, fp
 80137ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80137bc:	f89a 3000 	ldrb.w	r3, [sl]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	f000 809f 	beq.w	8013904 <_vfiprintf_r+0x1ec>
 80137c6:	2300      	movs	r3, #0
 80137c8:	f04f 32ff 	mov.w	r2, #4294967295
 80137cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137d0:	f10a 0a01 	add.w	sl, sl, #1
 80137d4:	9304      	str	r3, [sp, #16]
 80137d6:	9307      	str	r3, [sp, #28]
 80137d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80137dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80137de:	4654      	mov	r4, sl
 80137e0:	2205      	movs	r2, #5
 80137e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137e6:	4853      	ldr	r0, [pc, #332]	@ (8013934 <_vfiprintf_r+0x21c>)
 80137e8:	f7ec fcca 	bl	8000180 <memchr>
 80137ec:	9a04      	ldr	r2, [sp, #16]
 80137ee:	b9d8      	cbnz	r0, 8013828 <_vfiprintf_r+0x110>
 80137f0:	06d1      	lsls	r1, r2, #27
 80137f2:	bf44      	itt	mi
 80137f4:	2320      	movmi	r3, #32
 80137f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80137fa:	0713      	lsls	r3, r2, #28
 80137fc:	bf44      	itt	mi
 80137fe:	232b      	movmi	r3, #43	@ 0x2b
 8013800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013804:	f89a 3000 	ldrb.w	r3, [sl]
 8013808:	2b2a      	cmp	r3, #42	@ 0x2a
 801380a:	d015      	beq.n	8013838 <_vfiprintf_r+0x120>
 801380c:	9a07      	ldr	r2, [sp, #28]
 801380e:	4654      	mov	r4, sl
 8013810:	2000      	movs	r0, #0
 8013812:	f04f 0c0a 	mov.w	ip, #10
 8013816:	4621      	mov	r1, r4
 8013818:	f811 3b01 	ldrb.w	r3, [r1], #1
 801381c:	3b30      	subs	r3, #48	@ 0x30
 801381e:	2b09      	cmp	r3, #9
 8013820:	d94b      	bls.n	80138ba <_vfiprintf_r+0x1a2>
 8013822:	b1b0      	cbz	r0, 8013852 <_vfiprintf_r+0x13a>
 8013824:	9207      	str	r2, [sp, #28]
 8013826:	e014      	b.n	8013852 <_vfiprintf_r+0x13a>
 8013828:	eba0 0308 	sub.w	r3, r0, r8
 801382c:	fa09 f303 	lsl.w	r3, r9, r3
 8013830:	4313      	orrs	r3, r2
 8013832:	9304      	str	r3, [sp, #16]
 8013834:	46a2      	mov	sl, r4
 8013836:	e7d2      	b.n	80137de <_vfiprintf_r+0xc6>
 8013838:	9b03      	ldr	r3, [sp, #12]
 801383a:	1d19      	adds	r1, r3, #4
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	9103      	str	r1, [sp, #12]
 8013840:	2b00      	cmp	r3, #0
 8013842:	bfbb      	ittet	lt
 8013844:	425b      	neglt	r3, r3
 8013846:	f042 0202 	orrlt.w	r2, r2, #2
 801384a:	9307      	strge	r3, [sp, #28]
 801384c:	9307      	strlt	r3, [sp, #28]
 801384e:	bfb8      	it	lt
 8013850:	9204      	strlt	r2, [sp, #16]
 8013852:	7823      	ldrb	r3, [r4, #0]
 8013854:	2b2e      	cmp	r3, #46	@ 0x2e
 8013856:	d10a      	bne.n	801386e <_vfiprintf_r+0x156>
 8013858:	7863      	ldrb	r3, [r4, #1]
 801385a:	2b2a      	cmp	r3, #42	@ 0x2a
 801385c:	d132      	bne.n	80138c4 <_vfiprintf_r+0x1ac>
 801385e:	9b03      	ldr	r3, [sp, #12]
 8013860:	1d1a      	adds	r2, r3, #4
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	9203      	str	r2, [sp, #12]
 8013866:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801386a:	3402      	adds	r4, #2
 801386c:	9305      	str	r3, [sp, #20]
 801386e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8013938 <_vfiprintf_r+0x220>
 8013872:	7821      	ldrb	r1, [r4, #0]
 8013874:	2203      	movs	r2, #3
 8013876:	4650      	mov	r0, sl
 8013878:	f7ec fc82 	bl	8000180 <memchr>
 801387c:	b138      	cbz	r0, 801388e <_vfiprintf_r+0x176>
 801387e:	9b04      	ldr	r3, [sp, #16]
 8013880:	eba0 000a 	sub.w	r0, r0, sl
 8013884:	2240      	movs	r2, #64	@ 0x40
 8013886:	4082      	lsls	r2, r0
 8013888:	4313      	orrs	r3, r2
 801388a:	3401      	adds	r4, #1
 801388c:	9304      	str	r3, [sp, #16]
 801388e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013892:	482a      	ldr	r0, [pc, #168]	@ (801393c <_vfiprintf_r+0x224>)
 8013894:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013898:	2206      	movs	r2, #6
 801389a:	f7ec fc71 	bl	8000180 <memchr>
 801389e:	2800      	cmp	r0, #0
 80138a0:	d03f      	beq.n	8013922 <_vfiprintf_r+0x20a>
 80138a2:	4b27      	ldr	r3, [pc, #156]	@ (8013940 <_vfiprintf_r+0x228>)
 80138a4:	bb1b      	cbnz	r3, 80138ee <_vfiprintf_r+0x1d6>
 80138a6:	9b03      	ldr	r3, [sp, #12]
 80138a8:	3307      	adds	r3, #7
 80138aa:	f023 0307 	bic.w	r3, r3, #7
 80138ae:	3308      	adds	r3, #8
 80138b0:	9303      	str	r3, [sp, #12]
 80138b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138b4:	443b      	add	r3, r7
 80138b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80138b8:	e76a      	b.n	8013790 <_vfiprintf_r+0x78>
 80138ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80138be:	460c      	mov	r4, r1
 80138c0:	2001      	movs	r0, #1
 80138c2:	e7a8      	b.n	8013816 <_vfiprintf_r+0xfe>
 80138c4:	2300      	movs	r3, #0
 80138c6:	3401      	adds	r4, #1
 80138c8:	9305      	str	r3, [sp, #20]
 80138ca:	4619      	mov	r1, r3
 80138cc:	f04f 0c0a 	mov.w	ip, #10
 80138d0:	4620      	mov	r0, r4
 80138d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138d6:	3a30      	subs	r2, #48	@ 0x30
 80138d8:	2a09      	cmp	r2, #9
 80138da:	d903      	bls.n	80138e4 <_vfiprintf_r+0x1cc>
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d0c6      	beq.n	801386e <_vfiprintf_r+0x156>
 80138e0:	9105      	str	r1, [sp, #20]
 80138e2:	e7c4      	b.n	801386e <_vfiprintf_r+0x156>
 80138e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80138e8:	4604      	mov	r4, r0
 80138ea:	2301      	movs	r3, #1
 80138ec:	e7f0      	b.n	80138d0 <_vfiprintf_r+0x1b8>
 80138ee:	ab03      	add	r3, sp, #12
 80138f0:	9300      	str	r3, [sp, #0]
 80138f2:	462a      	mov	r2, r5
 80138f4:	4b13      	ldr	r3, [pc, #76]	@ (8013944 <_vfiprintf_r+0x22c>)
 80138f6:	a904      	add	r1, sp, #16
 80138f8:	4630      	mov	r0, r6
 80138fa:	f7fd fda3 	bl	8011444 <_printf_float>
 80138fe:	4607      	mov	r7, r0
 8013900:	1c78      	adds	r0, r7, #1
 8013902:	d1d6      	bne.n	80138b2 <_vfiprintf_r+0x19a>
 8013904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013906:	07d9      	lsls	r1, r3, #31
 8013908:	d405      	bmi.n	8013916 <_vfiprintf_r+0x1fe>
 801390a:	89ab      	ldrh	r3, [r5, #12]
 801390c:	059a      	lsls	r2, r3, #22
 801390e:	d402      	bmi.n	8013916 <_vfiprintf_r+0x1fe>
 8013910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013912:	f7fe fad5 	bl	8011ec0 <__retarget_lock_release_recursive>
 8013916:	89ab      	ldrh	r3, [r5, #12]
 8013918:	065b      	lsls	r3, r3, #25
 801391a:	f53f af1f 	bmi.w	801375c <_vfiprintf_r+0x44>
 801391e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013920:	e71e      	b.n	8013760 <_vfiprintf_r+0x48>
 8013922:	ab03      	add	r3, sp, #12
 8013924:	9300      	str	r3, [sp, #0]
 8013926:	462a      	mov	r2, r5
 8013928:	4b06      	ldr	r3, [pc, #24]	@ (8013944 <_vfiprintf_r+0x22c>)
 801392a:	a904      	add	r1, sp, #16
 801392c:	4630      	mov	r0, r6
 801392e:	f7fe f823 	bl	8011978 <_printf_i>
 8013932:	e7e4      	b.n	80138fe <_vfiprintf_r+0x1e6>
 8013934:	08014e17 	.word	0x08014e17
 8013938:	08014e1d 	.word	0x08014e1d
 801393c:	08014e21 	.word	0x08014e21
 8013940:	08011445 	.word	0x08011445
 8013944:	080136f5 	.word	0x080136f5

08013948 <__swbuf_r>:
 8013948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801394a:	460e      	mov	r6, r1
 801394c:	4614      	mov	r4, r2
 801394e:	4605      	mov	r5, r0
 8013950:	b118      	cbz	r0, 801395a <__swbuf_r+0x12>
 8013952:	6a03      	ldr	r3, [r0, #32]
 8013954:	b90b      	cbnz	r3, 801395a <__swbuf_r+0x12>
 8013956:	f7fe f9bb 	bl	8011cd0 <__sinit>
 801395a:	69a3      	ldr	r3, [r4, #24]
 801395c:	60a3      	str	r3, [r4, #8]
 801395e:	89a3      	ldrh	r3, [r4, #12]
 8013960:	071a      	lsls	r2, r3, #28
 8013962:	d501      	bpl.n	8013968 <__swbuf_r+0x20>
 8013964:	6923      	ldr	r3, [r4, #16]
 8013966:	b943      	cbnz	r3, 801397a <__swbuf_r+0x32>
 8013968:	4621      	mov	r1, r4
 801396a:	4628      	mov	r0, r5
 801396c:	f000 f82a 	bl	80139c4 <__swsetup_r>
 8013970:	b118      	cbz	r0, 801397a <__swbuf_r+0x32>
 8013972:	f04f 37ff 	mov.w	r7, #4294967295
 8013976:	4638      	mov	r0, r7
 8013978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801397a:	6823      	ldr	r3, [r4, #0]
 801397c:	6922      	ldr	r2, [r4, #16]
 801397e:	1a98      	subs	r0, r3, r2
 8013980:	6963      	ldr	r3, [r4, #20]
 8013982:	b2f6      	uxtb	r6, r6
 8013984:	4283      	cmp	r3, r0
 8013986:	4637      	mov	r7, r6
 8013988:	dc05      	bgt.n	8013996 <__swbuf_r+0x4e>
 801398a:	4621      	mov	r1, r4
 801398c:	4628      	mov	r0, r5
 801398e:	f7ff fdeb 	bl	8013568 <_fflush_r>
 8013992:	2800      	cmp	r0, #0
 8013994:	d1ed      	bne.n	8013972 <__swbuf_r+0x2a>
 8013996:	68a3      	ldr	r3, [r4, #8]
 8013998:	3b01      	subs	r3, #1
 801399a:	60a3      	str	r3, [r4, #8]
 801399c:	6823      	ldr	r3, [r4, #0]
 801399e:	1c5a      	adds	r2, r3, #1
 80139a0:	6022      	str	r2, [r4, #0]
 80139a2:	701e      	strb	r6, [r3, #0]
 80139a4:	6962      	ldr	r2, [r4, #20]
 80139a6:	1c43      	adds	r3, r0, #1
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d004      	beq.n	80139b6 <__swbuf_r+0x6e>
 80139ac:	89a3      	ldrh	r3, [r4, #12]
 80139ae:	07db      	lsls	r3, r3, #31
 80139b0:	d5e1      	bpl.n	8013976 <__swbuf_r+0x2e>
 80139b2:	2e0a      	cmp	r6, #10
 80139b4:	d1df      	bne.n	8013976 <__swbuf_r+0x2e>
 80139b6:	4621      	mov	r1, r4
 80139b8:	4628      	mov	r0, r5
 80139ba:	f7ff fdd5 	bl	8013568 <_fflush_r>
 80139be:	2800      	cmp	r0, #0
 80139c0:	d0d9      	beq.n	8013976 <__swbuf_r+0x2e>
 80139c2:	e7d6      	b.n	8013972 <__swbuf_r+0x2a>

080139c4 <__swsetup_r>:
 80139c4:	b538      	push	{r3, r4, r5, lr}
 80139c6:	4b29      	ldr	r3, [pc, #164]	@ (8013a6c <__swsetup_r+0xa8>)
 80139c8:	4605      	mov	r5, r0
 80139ca:	6818      	ldr	r0, [r3, #0]
 80139cc:	460c      	mov	r4, r1
 80139ce:	b118      	cbz	r0, 80139d8 <__swsetup_r+0x14>
 80139d0:	6a03      	ldr	r3, [r0, #32]
 80139d2:	b90b      	cbnz	r3, 80139d8 <__swsetup_r+0x14>
 80139d4:	f7fe f97c 	bl	8011cd0 <__sinit>
 80139d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139dc:	0719      	lsls	r1, r3, #28
 80139de:	d422      	bmi.n	8013a26 <__swsetup_r+0x62>
 80139e0:	06da      	lsls	r2, r3, #27
 80139e2:	d407      	bmi.n	80139f4 <__swsetup_r+0x30>
 80139e4:	2209      	movs	r2, #9
 80139e6:	602a      	str	r2, [r5, #0]
 80139e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139ec:	81a3      	strh	r3, [r4, #12]
 80139ee:	f04f 30ff 	mov.w	r0, #4294967295
 80139f2:	e033      	b.n	8013a5c <__swsetup_r+0x98>
 80139f4:	0758      	lsls	r0, r3, #29
 80139f6:	d512      	bpl.n	8013a1e <__swsetup_r+0x5a>
 80139f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80139fa:	b141      	cbz	r1, 8013a0e <__swsetup_r+0x4a>
 80139fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013a00:	4299      	cmp	r1, r3
 8013a02:	d002      	beq.n	8013a0a <__swsetup_r+0x46>
 8013a04:	4628      	mov	r0, r5
 8013a06:	f7ff f8af 	bl	8012b68 <_free_r>
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8013a0e:	89a3      	ldrh	r3, [r4, #12]
 8013a10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013a14:	81a3      	strh	r3, [r4, #12]
 8013a16:	2300      	movs	r3, #0
 8013a18:	6063      	str	r3, [r4, #4]
 8013a1a:	6923      	ldr	r3, [r4, #16]
 8013a1c:	6023      	str	r3, [r4, #0]
 8013a1e:	89a3      	ldrh	r3, [r4, #12]
 8013a20:	f043 0308 	orr.w	r3, r3, #8
 8013a24:	81a3      	strh	r3, [r4, #12]
 8013a26:	6923      	ldr	r3, [r4, #16]
 8013a28:	b94b      	cbnz	r3, 8013a3e <__swsetup_r+0x7a>
 8013a2a:	89a3      	ldrh	r3, [r4, #12]
 8013a2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013a34:	d003      	beq.n	8013a3e <__swsetup_r+0x7a>
 8013a36:	4621      	mov	r1, r4
 8013a38:	4628      	mov	r0, r5
 8013a3a:	f000 f883 	bl	8013b44 <__smakebuf_r>
 8013a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a42:	f013 0201 	ands.w	r2, r3, #1
 8013a46:	d00a      	beq.n	8013a5e <__swsetup_r+0x9a>
 8013a48:	2200      	movs	r2, #0
 8013a4a:	60a2      	str	r2, [r4, #8]
 8013a4c:	6962      	ldr	r2, [r4, #20]
 8013a4e:	4252      	negs	r2, r2
 8013a50:	61a2      	str	r2, [r4, #24]
 8013a52:	6922      	ldr	r2, [r4, #16]
 8013a54:	b942      	cbnz	r2, 8013a68 <__swsetup_r+0xa4>
 8013a56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013a5a:	d1c5      	bne.n	80139e8 <__swsetup_r+0x24>
 8013a5c:	bd38      	pop	{r3, r4, r5, pc}
 8013a5e:	0799      	lsls	r1, r3, #30
 8013a60:	bf58      	it	pl
 8013a62:	6962      	ldrpl	r2, [r4, #20]
 8013a64:	60a2      	str	r2, [r4, #8]
 8013a66:	e7f4      	b.n	8013a52 <__swsetup_r+0x8e>
 8013a68:	2000      	movs	r0, #0
 8013a6a:	e7f7      	b.n	8013a5c <__swsetup_r+0x98>
 8013a6c:	200000e8 	.word	0x200000e8

08013a70 <_raise_r>:
 8013a70:	291f      	cmp	r1, #31
 8013a72:	b538      	push	{r3, r4, r5, lr}
 8013a74:	4605      	mov	r5, r0
 8013a76:	460c      	mov	r4, r1
 8013a78:	d904      	bls.n	8013a84 <_raise_r+0x14>
 8013a7a:	2316      	movs	r3, #22
 8013a7c:	6003      	str	r3, [r0, #0]
 8013a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8013a82:	bd38      	pop	{r3, r4, r5, pc}
 8013a84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013a86:	b112      	cbz	r2, 8013a8e <_raise_r+0x1e>
 8013a88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013a8c:	b94b      	cbnz	r3, 8013aa2 <_raise_r+0x32>
 8013a8e:	4628      	mov	r0, r5
 8013a90:	f000 f830 	bl	8013af4 <_getpid_r>
 8013a94:	4622      	mov	r2, r4
 8013a96:	4601      	mov	r1, r0
 8013a98:	4628      	mov	r0, r5
 8013a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a9e:	f000 b817 	b.w	8013ad0 <_kill_r>
 8013aa2:	2b01      	cmp	r3, #1
 8013aa4:	d00a      	beq.n	8013abc <_raise_r+0x4c>
 8013aa6:	1c59      	adds	r1, r3, #1
 8013aa8:	d103      	bne.n	8013ab2 <_raise_r+0x42>
 8013aaa:	2316      	movs	r3, #22
 8013aac:	6003      	str	r3, [r0, #0]
 8013aae:	2001      	movs	r0, #1
 8013ab0:	e7e7      	b.n	8013a82 <_raise_r+0x12>
 8013ab2:	2100      	movs	r1, #0
 8013ab4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013ab8:	4620      	mov	r0, r4
 8013aba:	4798      	blx	r3
 8013abc:	2000      	movs	r0, #0
 8013abe:	e7e0      	b.n	8013a82 <_raise_r+0x12>

08013ac0 <raise>:
 8013ac0:	4b02      	ldr	r3, [pc, #8]	@ (8013acc <raise+0xc>)
 8013ac2:	4601      	mov	r1, r0
 8013ac4:	6818      	ldr	r0, [r3, #0]
 8013ac6:	f7ff bfd3 	b.w	8013a70 <_raise_r>
 8013aca:	bf00      	nop
 8013acc:	200000e8 	.word	0x200000e8

08013ad0 <_kill_r>:
 8013ad0:	b538      	push	{r3, r4, r5, lr}
 8013ad2:	4d07      	ldr	r5, [pc, #28]	@ (8013af0 <_kill_r+0x20>)
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	4604      	mov	r4, r0
 8013ad8:	4608      	mov	r0, r1
 8013ada:	4611      	mov	r1, r2
 8013adc:	602b      	str	r3, [r5, #0]
 8013ade:	f7ed fe63 	bl	80017a8 <_kill>
 8013ae2:	1c43      	adds	r3, r0, #1
 8013ae4:	d102      	bne.n	8013aec <_kill_r+0x1c>
 8013ae6:	682b      	ldr	r3, [r5, #0]
 8013ae8:	b103      	cbz	r3, 8013aec <_kill_r+0x1c>
 8013aea:	6023      	str	r3, [r4, #0]
 8013aec:	bd38      	pop	{r3, r4, r5, pc}
 8013aee:	bf00      	nop
 8013af0:	20001d6c 	.word	0x20001d6c

08013af4 <_getpid_r>:
 8013af4:	f7ed be56 	b.w	80017a4 <_getpid>

08013af8 <__swhatbuf_r>:
 8013af8:	b570      	push	{r4, r5, r6, lr}
 8013afa:	460c      	mov	r4, r1
 8013afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b00:	2900      	cmp	r1, #0
 8013b02:	b096      	sub	sp, #88	@ 0x58
 8013b04:	4615      	mov	r5, r2
 8013b06:	461e      	mov	r6, r3
 8013b08:	da0d      	bge.n	8013b26 <__swhatbuf_r+0x2e>
 8013b0a:	89a3      	ldrh	r3, [r4, #12]
 8013b0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013b10:	f04f 0100 	mov.w	r1, #0
 8013b14:	bf14      	ite	ne
 8013b16:	2340      	movne	r3, #64	@ 0x40
 8013b18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013b1c:	2000      	movs	r0, #0
 8013b1e:	6031      	str	r1, [r6, #0]
 8013b20:	602b      	str	r3, [r5, #0]
 8013b22:	b016      	add	sp, #88	@ 0x58
 8013b24:	bd70      	pop	{r4, r5, r6, pc}
 8013b26:	466a      	mov	r2, sp
 8013b28:	f000 f848 	bl	8013bbc <_fstat_r>
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	dbec      	blt.n	8013b0a <__swhatbuf_r+0x12>
 8013b30:	9901      	ldr	r1, [sp, #4]
 8013b32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013b36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013b3a:	4259      	negs	r1, r3
 8013b3c:	4159      	adcs	r1, r3
 8013b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013b42:	e7eb      	b.n	8013b1c <__swhatbuf_r+0x24>

08013b44 <__smakebuf_r>:
 8013b44:	898b      	ldrh	r3, [r1, #12]
 8013b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b48:	079d      	lsls	r5, r3, #30
 8013b4a:	4606      	mov	r6, r0
 8013b4c:	460c      	mov	r4, r1
 8013b4e:	d507      	bpl.n	8013b60 <__smakebuf_r+0x1c>
 8013b50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013b54:	6023      	str	r3, [r4, #0]
 8013b56:	6123      	str	r3, [r4, #16]
 8013b58:	2301      	movs	r3, #1
 8013b5a:	6163      	str	r3, [r4, #20]
 8013b5c:	b003      	add	sp, #12
 8013b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b60:	ab01      	add	r3, sp, #4
 8013b62:	466a      	mov	r2, sp
 8013b64:	f7ff ffc8 	bl	8013af8 <__swhatbuf_r>
 8013b68:	9f00      	ldr	r7, [sp, #0]
 8013b6a:	4605      	mov	r5, r0
 8013b6c:	4639      	mov	r1, r7
 8013b6e:	4630      	mov	r0, r6
 8013b70:	f7ff f86e 	bl	8012c50 <_malloc_r>
 8013b74:	b948      	cbnz	r0, 8013b8a <__smakebuf_r+0x46>
 8013b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b7a:	059a      	lsls	r2, r3, #22
 8013b7c:	d4ee      	bmi.n	8013b5c <__smakebuf_r+0x18>
 8013b7e:	f023 0303 	bic.w	r3, r3, #3
 8013b82:	f043 0302 	orr.w	r3, r3, #2
 8013b86:	81a3      	strh	r3, [r4, #12]
 8013b88:	e7e2      	b.n	8013b50 <__smakebuf_r+0xc>
 8013b8a:	89a3      	ldrh	r3, [r4, #12]
 8013b8c:	6020      	str	r0, [r4, #0]
 8013b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013b92:	81a3      	strh	r3, [r4, #12]
 8013b94:	9b01      	ldr	r3, [sp, #4]
 8013b96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013b9a:	b15b      	cbz	r3, 8013bb4 <__smakebuf_r+0x70>
 8013b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ba0:	4630      	mov	r0, r6
 8013ba2:	f000 f81d 	bl	8013be0 <_isatty_r>
 8013ba6:	b128      	cbz	r0, 8013bb4 <__smakebuf_r+0x70>
 8013ba8:	89a3      	ldrh	r3, [r4, #12]
 8013baa:	f023 0303 	bic.w	r3, r3, #3
 8013bae:	f043 0301 	orr.w	r3, r3, #1
 8013bb2:	81a3      	strh	r3, [r4, #12]
 8013bb4:	89a3      	ldrh	r3, [r4, #12]
 8013bb6:	431d      	orrs	r5, r3
 8013bb8:	81a5      	strh	r5, [r4, #12]
 8013bba:	e7cf      	b.n	8013b5c <__smakebuf_r+0x18>

08013bbc <_fstat_r>:
 8013bbc:	b538      	push	{r3, r4, r5, lr}
 8013bbe:	4d07      	ldr	r5, [pc, #28]	@ (8013bdc <_fstat_r+0x20>)
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	4608      	mov	r0, r1
 8013bc6:	4611      	mov	r1, r2
 8013bc8:	602b      	str	r3, [r5, #0]
 8013bca:	f7ed fe1c 	bl	8001806 <_fstat>
 8013bce:	1c43      	adds	r3, r0, #1
 8013bd0:	d102      	bne.n	8013bd8 <_fstat_r+0x1c>
 8013bd2:	682b      	ldr	r3, [r5, #0]
 8013bd4:	b103      	cbz	r3, 8013bd8 <_fstat_r+0x1c>
 8013bd6:	6023      	str	r3, [r4, #0]
 8013bd8:	bd38      	pop	{r3, r4, r5, pc}
 8013bda:	bf00      	nop
 8013bdc:	20001d6c 	.word	0x20001d6c

08013be0 <_isatty_r>:
 8013be0:	b538      	push	{r3, r4, r5, lr}
 8013be2:	4d06      	ldr	r5, [pc, #24]	@ (8013bfc <_isatty_r+0x1c>)
 8013be4:	2300      	movs	r3, #0
 8013be6:	4604      	mov	r4, r0
 8013be8:	4608      	mov	r0, r1
 8013bea:	602b      	str	r3, [r5, #0]
 8013bec:	f7ed fe10 	bl	8001810 <_isatty>
 8013bf0:	1c43      	adds	r3, r0, #1
 8013bf2:	d102      	bne.n	8013bfa <_isatty_r+0x1a>
 8013bf4:	682b      	ldr	r3, [r5, #0]
 8013bf6:	b103      	cbz	r3, 8013bfa <_isatty_r+0x1a>
 8013bf8:	6023      	str	r3, [r4, #0]
 8013bfa:	bd38      	pop	{r3, r4, r5, pc}
 8013bfc:	20001d6c 	.word	0x20001d6c

08013c00 <floor>:
 8013c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c04:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013c08:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8013c0c:	2e13      	cmp	r6, #19
 8013c0e:	4602      	mov	r2, r0
 8013c10:	460b      	mov	r3, r1
 8013c12:	460c      	mov	r4, r1
 8013c14:	4605      	mov	r5, r0
 8013c16:	4680      	mov	r8, r0
 8013c18:	dc35      	bgt.n	8013c86 <floor+0x86>
 8013c1a:	2e00      	cmp	r6, #0
 8013c1c:	da17      	bge.n	8013c4e <floor+0x4e>
 8013c1e:	a334      	add	r3, pc, #208	@ (adr r3, 8013cf0 <floor+0xf0>)
 8013c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c24:	f7ec fb0a 	bl	800023c <__adddf3>
 8013c28:	2200      	movs	r2, #0
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	f7ec ff4c 	bl	8000ac8 <__aeabi_dcmpgt>
 8013c30:	b150      	cbz	r0, 8013c48 <floor+0x48>
 8013c32:	2c00      	cmp	r4, #0
 8013c34:	da57      	bge.n	8013ce6 <floor+0xe6>
 8013c36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013c3a:	432c      	orrs	r4, r5
 8013c3c:	2500      	movs	r5, #0
 8013c3e:	42ac      	cmp	r4, r5
 8013c40:	4c2d      	ldr	r4, [pc, #180]	@ (8013cf8 <floor+0xf8>)
 8013c42:	bf08      	it	eq
 8013c44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013c48:	4623      	mov	r3, r4
 8013c4a:	462a      	mov	r2, r5
 8013c4c:	e024      	b.n	8013c98 <floor+0x98>
 8013c4e:	4f2b      	ldr	r7, [pc, #172]	@ (8013cfc <floor+0xfc>)
 8013c50:	4137      	asrs	r7, r6
 8013c52:	ea01 0c07 	and.w	ip, r1, r7
 8013c56:	ea5c 0c00 	orrs.w	ip, ip, r0
 8013c5a:	d01d      	beq.n	8013c98 <floor+0x98>
 8013c5c:	a324      	add	r3, pc, #144	@ (adr r3, 8013cf0 <floor+0xf0>)
 8013c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c62:	f7ec faeb 	bl	800023c <__adddf3>
 8013c66:	2200      	movs	r2, #0
 8013c68:	2300      	movs	r3, #0
 8013c6a:	f7ec ff2d 	bl	8000ac8 <__aeabi_dcmpgt>
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	d0ea      	beq.n	8013c48 <floor+0x48>
 8013c72:	2c00      	cmp	r4, #0
 8013c74:	bfbe      	ittt	lt
 8013c76:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013c7a:	4133      	asrlt	r3, r6
 8013c7c:	18e4      	addlt	r4, r4, r3
 8013c7e:	ea24 0407 	bic.w	r4, r4, r7
 8013c82:	2500      	movs	r5, #0
 8013c84:	e7e0      	b.n	8013c48 <floor+0x48>
 8013c86:	2e33      	cmp	r6, #51	@ 0x33
 8013c88:	dd0a      	ble.n	8013ca0 <floor+0xa0>
 8013c8a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013c8e:	d103      	bne.n	8013c98 <floor+0x98>
 8013c90:	f7ec fad4 	bl	800023c <__adddf3>
 8013c94:	4602      	mov	r2, r0
 8013c96:	460b      	mov	r3, r1
 8013c98:	4610      	mov	r0, r2
 8013c9a:	4619      	mov	r1, r3
 8013c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ca0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8013ca4:	f04f 3cff 	mov.w	ip, #4294967295
 8013ca8:	fa2c f707 	lsr.w	r7, ip, r7
 8013cac:	4207      	tst	r7, r0
 8013cae:	d0f3      	beq.n	8013c98 <floor+0x98>
 8013cb0:	a30f      	add	r3, pc, #60	@ (adr r3, 8013cf0 <floor+0xf0>)
 8013cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cb6:	f7ec fac1 	bl	800023c <__adddf3>
 8013cba:	2200      	movs	r2, #0
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	f7ec ff03 	bl	8000ac8 <__aeabi_dcmpgt>
 8013cc2:	2800      	cmp	r0, #0
 8013cc4:	d0c0      	beq.n	8013c48 <floor+0x48>
 8013cc6:	2c00      	cmp	r4, #0
 8013cc8:	da0a      	bge.n	8013ce0 <floor+0xe0>
 8013cca:	2e14      	cmp	r6, #20
 8013ccc:	d101      	bne.n	8013cd2 <floor+0xd2>
 8013cce:	3401      	adds	r4, #1
 8013cd0:	e006      	b.n	8013ce0 <floor+0xe0>
 8013cd2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	40b3      	lsls	r3, r6
 8013cda:	441d      	add	r5, r3
 8013cdc:	4545      	cmp	r5, r8
 8013cde:	d3f6      	bcc.n	8013cce <floor+0xce>
 8013ce0:	ea25 0507 	bic.w	r5, r5, r7
 8013ce4:	e7b0      	b.n	8013c48 <floor+0x48>
 8013ce6:	2500      	movs	r5, #0
 8013ce8:	462c      	mov	r4, r5
 8013cea:	e7ad      	b.n	8013c48 <floor+0x48>
 8013cec:	f3af 8000 	nop.w
 8013cf0:	8800759c 	.word	0x8800759c
 8013cf4:	7e37e43c 	.word	0x7e37e43c
 8013cf8:	bff00000 	.word	0xbff00000
 8013cfc:	000fffff 	.word	0x000fffff

08013d00 <_init>:
 8013d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d02:	bf00      	nop
 8013d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d06:	bc08      	pop	{r3}
 8013d08:	469e      	mov	lr, r3
 8013d0a:	4770      	bx	lr

08013d0c <_fini>:
 8013d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d0e:	bf00      	nop
 8013d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d12:	bc08      	pop	{r3}
 8013d14:	469e      	mov	lr, r3
 8013d16:	4770      	bx	lr
